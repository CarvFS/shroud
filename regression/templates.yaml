
#
#  Test templates
#

library: templates

declarations:
- decl: namespace std
  declarations:
  - decl: template<typename T> class vector
    # std::vector class
    cxx_header: <vector>
    cxx_template2:
    - instantiation: <int>
      format:
        fmtblah: one
        C_impl_filename: wrapvectorforint.cpp
      options:
        optblah: two
#    - instantiation: <double>

    declarations:
#    - decl: vector<T>()
#    - decl: ~vector<T>()
    - decl: void push_back( const T& value+intent(in) );
    # XXX - reference is getting lost


- decl: template<typename T> class user
  # XXX - error if cxx_template2 is missing
  cxx_template2:
  - instantiation: <int>
  declarations:
  - decl: template<U> void nested( T arg1, U arg2 );
    # XXX - error of cxx_template2 is missing
    cxx_template2:
    - instantiation: <double>



#- decl: template<ArgType> void Function7(ArgType arg)
#  cxx_template:
#    ArgType:
#    - int
#    - double
#  cxx_template2:
#    - instantiation: <int>
#    - instantiation: <double>


# template structs
# template class variables

- decl: template<T,U> void FunctionTU(T arg1, U arg2)
  cxx_template2:
  - instantiation: <int, long>
  - instantiation: <float, double>
