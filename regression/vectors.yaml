copyright:
- '#######################################################################'
- 'Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC.'
-
- 'Produced at the Lawrence Livermore National Laboratory'
-
- 'LLNL-CODE-738041.'
-
- 'All rights reserved.'
-
- 'This file is part of Shroud.'
-
- 'For details about use and distribution, please read LICENSE.'
-
- '#######################################################################'

# test std::vector

library: vectors
cxx_header: vectors.hpp

options:
  debug: True
  literalinclude2: True
  wrap_python: True

declarations:

# const implies intent(in)
- decl: int vector_sum(const std::vector<int> &arg)
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True

- decl: void vector_iota_out(std::vector<int> &arg+intent(out))
  doxygen:
    brief: Copy vector into Fortran input array
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True

- decl: void vector_iota_out_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))
  doxygen:
    brief: Copy vector into Fortran allocatable array
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True

- decl: void vector_iota_inout_alloc(std::vector<int> &arg+intent(inout)+deref(allocatable))
  doxygen:
    brief: Copy vector into Fortran allocatable array
  options:
    wrap_python: False
    wrap_lua: False
    literalinclude: True

# defaults to intent(inout)
- decl: void vector_increment(std::vector<int> &arg)
  options:
    wrap_python: False
    wrap_lua: False
  
# does multidimensional make sense?  Need to call shape
#- decl: void vector1XXX(std::vector<int> &arg+dimension(:,:))
  
- decl: int vector_string_count(const std::vector< std::string > &arg)
  doxygen:
    brief: count number of underscore in vector of strings
    decription: |
      The input will be copied in order to create the C++ argument
 
- decl: void vector_string_fill(std::vector< std::string > &arg+intent(out))
  options:
    wrap_c: False
    wrap_fortran: False
    wrap_python: False
    wrap_lua: False
  format:
    C_return_type: int
    C_return_code: return SH_arg.size();
  doxygen:
    brief: Fill in arg with some animal names
    description: |
      The C++ function returns void. But the C and Fortran wrappers return
      an int with the number of items added to arg.

- decl: void vector_string_append(std::vector< std::string > &arg+intent(inout))
  options:
    wrap_c: False
    wrap_fortran: False
    wrap_python: False
    wrap_lua: False
  doxygen:
    brief: append '-like' to names.


########################################
# return vectors

- decl: std::vector<int> ReturnVectorAlloc(int n)
  doxygen:
    description: |
      Implement iota function.
      Return a vector as an ALLOCATABLE array.
      Copy results into the new array.
