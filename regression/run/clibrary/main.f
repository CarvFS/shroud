! Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC. 
!
! Produced at the Lawrence Livermore National Laboratory 
!
! LLNL-CODE-738041.
!
! All rights reserved. 
!
! This file is part of Shroud.
!
! For details about use and distribution, please read LICENSE.
!
! #######################################################################
!
! Test code generated by the tutorial test
!
program tester
  use fruit
  use iso_c_binding
  use clibrary_mod
  implicit none
  real(C_DOUBLE), parameter :: pi = 3.1415926_C_DOUBLE
  logical ok

  logical rv_logical, wrk_logical
!  integer rv_integer
  integer(C_INT) rv_int
  real(C_DOUBLE) rv_double
  character(30) rv_char

  call init_fruit

  call test_functions
  call test_structs

!  call test_vector

!  call test_class1

  call fruit_summary
  call fruit_finalize

  call is_all_successful(ok)
  if (.not. ok) then
     call exit(1)
  endif

contains

  subroutine test_functions

    call set_case_name("test_functions")

    call function1
    call assert_true(.true.)

    rv_double = function2(1.d0, 4)
    call assert_true(rv_double == 5.d0)

    rv_logical = function3(.false.)
    call assert_true(rv_logical)

    rv_logical = .true.
    wrk_logical = .true.
    call function3b(.true., rv_logical, wrk_logical)
    call assert_false(rv_logical)
    call assert_false(wrk_logical)

    rv_logical = .false.
    wrk_logical = .false.
    call function3b(.false., rv_logical, wrk_logical)
    call assert_true(rv_logical)
    call assert_true(wrk_logical)

    call assert_true(function4a("dog", "cat") == "dogcat")

    rv_int = implied_len("bird")
    call assert_true(rv_int == 4)
    rv_int = implied_len_trim("bird")
    call assert_true(rv_int == 4)

    rv_char = "bird"
    rv_int = implied_len(rv_char)
    call assert_true(rv_int == len(rv_char))
    rv_int = implied_len_trim(rv_char)
    call assert_true(rv_int == len_trim(rv_char))


!    call function4b("dog", "cat", rv_char)
!    call assert_true( rv_char == "dogcat")
!
!    call assert_equals(function5(), 13.1415d0)
!    call assert_equals(function5(1.d0), 11.d0)
!    call assert_equals(function5(1.d0, .false.), 1.d0)
!
!    call function6("name")
!    call assert_true(last_function_called() == "Function6(string)")
!    call function6(1)
!    call assert_true(last_function_called() == "Function6(int)")
!
!    call function9(1.0)
!    call assert_true(.true.)
!    call function9(1.d0)
!    call assert_true(.true.)
!
!    call function10()
!    call assert_true(.true.)
!    call function10("foo", 1.0e0)
!    call assert_true(.true.)
!    call function10("bar", 2.0d0)
!    call assert_true(.true.)

    call sum([1,2,3,4,5], rv_int)
    call assert_true(rv_int .eq. 15)

!    rv_int = typefunc(2)
!    call assert_true(rv_int .eq. 2)
!
!    rv_int = enumfunc(1)
!    call assert_true(rv_int .eq. 2)

  end subroutine test_functions

  subroutine test_structs

    type(cstruct1) :: s1

    call set_case_name("test_structs")

    s1%ifield = 12
    call assert_equals(12, pass_struct1(s1))

    s1%ifield = 22
    call assert_equals(22, pass_struct2(s1, "monkey"))

  end subroutine test_structs

!  subroutine test_vector
!    integer(C_INT) intv(5)
!    character(10) :: names(3)
!    integer irv
!
!    call set_case_name("test_vector")
!
!    intv = [1,2,3,4,5]
!    irv = vector_sum(intv)
!    call assert_true(irv .eq. 15)
!
!    intv(:) = 0
!    call vector_iota(intv)
!    call assert_true(all(intv(:) .eq. [1,2,3,4,5]))
!
!    intv = [1,2,3,4,5]
!    call vector_increment(intv)
!    call assert_true(all(intv(:) .eq. [2,3,4,5,6]))
!
!    ! count number of underscores
!    names = [ "dog_cat   ", "bird_mouse", "__        " ]
!    irv = vector_string_count(names)
!    call assert_true(irv == 4)
!
!    ! Fill strings into names
!    names = " "
!    irv = vector_string_fill(names)
!    call assert_true(irv == 2)
!    call assert_true( names(1) == "dog")
!    call assert_true( names(2) == "bird")
!    call assert_true( names(3) == " ")
!
!    ! Append -like to names.
!    ! Note that strings will be truncated to len(names)
!    names = [ "fish      ", "toolong   ", "          " ]
!    call vector_string_append(names)
!    call assert_true( names(1) == "fish-like")
!    call assert_true( names(2) == "toolong-li")
!    call assert_true( names(3) == "-like")
! 
!  end subroutine test_vector

!  subroutine test_class1
!    type(class1) obj
!
!    call set_case_name("test_class1")
!
!    obj = class1_new()
!    call assert_true(c_associated(obj%get_instance()), "class1_new")
!
!    call obj%method1
!    call assert_true(.true.)
!
!    call useclass(obj)
!
!    call obj%delete
!    call assert_true(.not. c_associated(obj%get_instance()), "class1_delete")
!  end subroutine test_class1

end program tester
