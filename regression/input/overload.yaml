copyright:
- Copyright (c) 2017-2022, Lawrence Livermore National Security, LLC and
- other Shroud Project Developers.
- See the top-level COPYRIGHT file for details.
-
- "SPDX-License-Identifier: (BSD-3-Clause)"
-

# Test overloading functions

library: overload
cxx_header: overload.hpp
#namespace: tutorial

options:
  debug: True
#  wrap_python: True
  literalinclude2: True

typemap:
# IndexType may be 32 or 64 bits depending on USE_64BIT_INDEXTYPE
- type: IndexType
  fields:
    base: integer
    f_kind: INDEXTYPE
    f_module_name: overload_mod

declarations:

- decl: typedef int TypeID
  fields:
    # enum for types
    c_to_cxx : static_cast<TypeID>({c_var})
    cxx_to_c : static_cast<int>({cxx_var})


# When F_default_args="generic" and USE_64BIT_INDEXTYPE is not defined, this reports:
# Ambiguous interfaces 'apply_type_nelems_offset' and
#                      'apply_nelems_offset_stride' in generic interface 'apply' 

- decl: void apply(IndexType num_elems, IndexType offset = 0, IndexType stride = 1);
  default_arg_suffix:
  -  _nelems
  -  _nelems_offset
  -  _nelems_offset_stride
- decl: void apply(TypeID type, IndexType num_elems, IndexType offset = 0, IndexType stride = 1);
  default_arg_suffix:
  -  _type_nelems
  -  _type_nelems_offset
  -  _type_nelems_offset_stride


######################################################################
splicer_code:
  f:
    module_top: |
      #if defined(USE_64BIT_INDEXTYPE)
      integer, parameter :: INDEXTYPE = C_INT64_T
      #else
      integer, parameter :: INDEXTYPE = C_INT32_T
      #endif
  c:
    types:
      C_declarations: |
        #ifndef __cplusplus
        #if defined(USE_64BIT_INDEXTYPE)
        typedef int64_t IndexType;
        #else
        typedef int32_t IndexType;
        #endif
        #endif

# Add code which will be integrated with other include and use statements
# added by typemaps and statements.
file_code:
#  wrapoverload.h:
  typesoverload.h:
    c_header: <stdint.h>
    cxx_header: <cstdint>
  wrapfoverload.f:
    f_module:
      iso_c_binding:
      - C_INT32_T
      - C_INT64_T
