{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "pointers.hpp"
        ],
        "functions": [
            {
                "_fmtargs": {
                    "argin": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "argin",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<int *>\t(&argin))",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "argin",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_argin",
                            "c_var": "argin",
                            "f_type": "integer(C_INT)",
                            "f_var": "argin",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "arginout": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arginout",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(arginout)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arginout",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_inout",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arginout",
                            "c_var": "arginout",
                            "f_type": "integer(C_INT)",
                            "f_var": "arginout",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_inout",
                            "stmtc1": "c_default"
                        }
                    },
                    "argout": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "argout",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(argout)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "argout",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_argout",
                            "c_var": "argout",
                            "f_type": "integer(C_INT)",
                            "f_var": "argout",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "intargs",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "const": true,
                            "declarator": {
                                "name": "argin",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arginout",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "argout",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs(const int argin      +intent(in), int * arginout +intent(inout), int * argout   +intent(out))",
                "declgen": "void intargs(const int argin +intent(in)+value, int * arginout +intent(inout), int * argout +intent(out))",
                "fmtdict": {
                    "C_call_list": "argin,\t arginout,\t argout",
                    "C_name": "POI_intargs",
                    "C_prototype": "const int argin,\t int * arginout,\t int * argout",
                    "C_return_type": "void",
                    "F_C_call": "c_intargs",
                    "F_C_name": "intargs",
                    "F_arg_c_call": "argin,\t arginout,\t argout",
                    "F_arguments": "argin,\t arginout,\t argout",
                    "F_name_function": "intargs",
                    "F_name_generic": "intargs",
                    "F_name_impl": "intargs",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "intargs",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "intargs"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(in)",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_in",
                            "c_var": "in",
                            "f_pointer_shape": ", [:]",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "in",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "out": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(out)",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "out",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_out",
                            "c_var": "out",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "out",
                            "mold": "lbound(in,1):ubound(in,1)",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "sizein": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&sizein)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_sizein",
                            "c_var": "SH_sizein",
                            "f_type": "integer(C_INT)",
                            "f_var": "sizein",
                            "pre_call_intent": "size(in,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "cos_doubles",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "allocatable": "mold=in",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "implied": "size(in)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void cos_doubles(double * in     +intent(in)  +dimension(:), double * out    +intent(out) +allocatable(mold=in), int      sizein +implied(size(in)))",
                "declgen": "void cos_doubles(double * in +dimension(:)+intent(in), double * out +allocatable(mold=in)+intent(out), int sizein +implied(size(in))+intent(in)+value)",
                "doxygen": {
                    "brief": "compute cos of IN and save in OUT",
                    "description": "allocate OUT same type as IN implied size of array"
                },
                "fmtdict": {
                    "C_call_list": "in,\t out,\t sizein",
                    "C_name": "POI_cos_doubles",
                    "C_prototype": "double * in,\t double * out,\t int sizein",
                    "C_return_type": "void",
                    "F_C_call": "c_cos_doubles",
                    "F_C_name": "c_cos_doubles",
                    "F_arg_c_call": "in,\t out,\t SH_sizein",
                    "F_arguments": "in,\t out",
                    "F_name_function": "cos_doubles",
                    "F_name_generic": "cos_doubles",
                    "F_name_impl": "cos_doubles",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "cos_doubles",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "cos_doubles"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(in)",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_in",
                            "c_var": "in",
                            "f_pointer_shape": ", [:]",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "in",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "out": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(out)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_out",
                            "c_var": "out",
                            "f_type": "integer(C_INT)",
                            "f_var": "out",
                            "mold": "lbound(in,1):ubound(in,1)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "sizein": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&sizein)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_sizein",
                            "c_var": "SH_sizein",
                            "f_type": "integer(C_INT)",
                            "f_var": "sizein",
                            "pre_call_intent": "size(in,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "truncate_to_int",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "allocatable": "mold=in",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(in)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void truncate_to_int(double * in     +intent(in)  +dimension(:), int *    out    +intent(out) +allocatable(mold=in), int      sizein +implied(size(in)))",
                "declgen": "void truncate_to_int(double * in +dimension(:)+intent(in), int * out +allocatable(mold=in)+intent(out), int sizein +implied(size(in))+intent(in)+value)",
                "doxygen": {
                    "brief": "truncate IN argument and save in OUT",
                    "description": "allocate OUT different type as IN\nimplied size of array\n"
                },
                "fmtdict": {
                    "C_call_list": "in,\t out,\t sizein",
                    "C_name": "POI_truncate_to_int",
                    "C_prototype": "double * in,\t int * out,\t int sizein",
                    "C_return_type": "void",
                    "F_C_call": "c_truncate_to_int",
                    "F_C_name": "c_truncate_to_int",
                    "F_arg_c_call": "in,\t out,\t SH_sizein",
                    "F_arguments": "in,\t out",
                    "F_name_function": "truncate_to_int",
                    "F_name_generic": "truncate_to_int",
                    "F_name_impl": "truncate_to_int",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "truncate_to_int",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "truncate_to_int"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "nvalues": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "nvalues",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(nvalues)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_nvalues",
                            "c_var": "nvalues",
                            "f_type": "integer(C_INT)",
                            "f_var": "nvalues",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(values)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_values",
                            "c_var": "values",
                            "f_pointer_shape": ", [3]",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "get_values",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values(int *nvalues+intent(OUT), int *values +intent(out)+dimension(3))",
                "declgen": "void get_values(int * nvalues +intent(out), int * values +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into array",
                    "description": "The function knows how long the array must be.\nFortran will treat the dimension as assumed-length.\nThe Python wrapper will create a NumPy array or list so it must\nhave an explicit dimension (not assumed-length).\n"
                },
                "fmtdict": {
                    "C_call_list": "nvalues,\t values",
                    "C_name": "POI_get_values",
                    "C_prototype": "int * nvalues,\t int * values",
                    "C_return_type": "void",
                    "F_C_call": "c_get_values",
                    "F_C_name": "get_values",
                    "F_arg_c_call": "nvalues,\t values",
                    "F_arguments": "nvalues,\t values",
                    "F_name_function": "get_values",
                    "F_name_generic": "get_values",
                    "F_name_impl": "get_values",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "get_values",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_values"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(arg1)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_pointer_shape": ", [3]",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg1",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(arg2)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_pointer_shape": ", [3]",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg2",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "get_values2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values2(int *arg1 +intent(out)+dimension(3), int *arg2 +intent(out)+dimension(3))",
                "declgen": "void get_values2(int * arg1 +dimension(3)+intent(out), int * arg2 +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into two arrays",
                    "description": "Test two intent(out) arguments.\nMake sure error handling works with C++.\n"
                },
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "POI_get_values2",
                    "C_prototype": "int * arg1,\t int * arg2",
                    "C_return_type": "void",
                    "F_C_call": "c_get_values2",
                    "F_C_name": "get_values2",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "get_values2",
                    "F_name_generic": "get_values2",
                    "F_name_impl": "get_values2",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "get_values2",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_values2"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "nvar": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nvar",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&nvar)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "nvar",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_nvar",
                            "c_var": "nvar",
                            "f_type": "integer(C_INT)",
                            "f_var": "nvar",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(values)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_values",
                            "c_var": "values",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "iota_allocatable",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvar",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "allocatable": "nvar",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void iota_allocatable (int nvar, int *values+intent(out)+allocatable(nvar))",
                "declgen": "void iota_allocatable(int nvar +intent(in)+value, int * values +allocatable(nvar)+intent(out))",
                "fmtdict": {
                    "C_call_list": "nvar,\t values",
                    "C_name": "POI_iota_allocatable",
                    "C_prototype": "int nvar,\t int * values",
                    "C_return_type": "void",
                    "F_C_call": "c_iota_allocatable",
                    "F_C_name": "iota_allocatable",
                    "F_arg_c_call": "nvar,\t values",
                    "F_arguments": "nvar,\t values",
                    "F_name_function": "iota_allocatable",
                    "F_name_generic": "iota_allocatable",
                    "F_name_impl": "iota_allocatable",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "iota_allocatable",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "iota_allocatable"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "nvar": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nvar",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&nvar)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "nvar",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_nvar",
                            "c_var": "nvar",
                            "f_type": "integer(C_INT)",
                            "f_var": "nvar",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(values)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_values",
                            "c_var": "values",
                            "f_pointer_shape": ", [nvar]",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "iota_dimension",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvar",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "nvar",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void iota_dimension (int nvar, int *values+intent(out)+dimension(nvar))",
                "declgen": "void iota_dimension(int nvar +intent(in)+value, int * values +dimension(nvar)+intent(out))",
                "fmtdict": {
                    "C_call_list": "nvar,\t values",
                    "C_name": "POI_iota_dimension",
                    "C_prototype": "int nvar,\t int * values",
                    "C_return_type": "void",
                    "F_C_call": "c_iota_dimension",
                    "F_C_name": "iota_dimension",
                    "F_arg_c_call": "nvar,\t values",
                    "F_arguments": "nvar,\t values",
                    "F_name_function": "iota_dimension",
                    "F_name_generic": "iota_dimension",
                    "F_name_impl": "iota_dimension",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "iota_dimension",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "iota_dimension"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "len",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&len)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_len",
                            "c_var": "SH_len",
                            "f_type": "integer(C_INT)",
                            "f_var": "len",
                            "pre_call_intent": "size(values,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT"
                        }
                    },
                    "result": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "result",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(result)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_result",
                            "c_var": "result",
                            "f_type": "integer(C_INT)",
                            "f_var": "result",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(values)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_values",
                            "c_var": "values",
                            "f_pointer_shape": ", [:]",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Sum",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "size(values)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "len",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "result",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Sum(int len +implied(size(values)), int *values +dimension(:)+intent(in), int *result +intent(out))",
                "declgen": "void Sum(int len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))",
                "fmtdict": {
                    "C_call_list": "len,\t values,\t result",
                    "C_name": "POI_sum",
                    "C_prototype": "int len,\t int * values,\t int * result",
                    "C_return_type": "void",
                    "F_C_call": "c_sum",
                    "F_C_name": "c_sum",
                    "F_arg_c_call": "SH_len,\t values,\t result",
                    "F_arguments": "values,\t result",
                    "F_name_function": "sum",
                    "F_name_generic": "sum",
                    "F_name_impl": "sum",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "Sum",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "sum"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "out": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(out)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_out",
                            "c_var": "out",
                            "f_pointer_shape": ", [3]",
                            "f_type": "integer(C_INT)",
                            "f_var": "out",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "fillIntArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fillIntArray(int *out +intent(out)+dimension(3))",
                "declgen": "void fillIntArray(int * out +dimension(3)+intent(out))",
                "doxygen": {
                    "description": "Return three values into memory the user provides.\n"
                },
                "fmtdict": {
                    "C_call_list": "out",
                    "C_name": "POI_fill_int_array",
                    "C_prototype": "int * out",
                    "C_return_type": "void",
                    "F_C_call": "c_fill_int_array",
                    "F_C_name": "fill_int_array",
                    "F_arg_c_call": "out",
                    "F_arguments": "out",
                    "F_name_function": "fill_int_array",
                    "F_name_generic": "fill_int_array",
                    "F_name_impl": "fill_int_array",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "fillIntArray",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fill_int_array"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "array": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "array",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(array)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "array",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_*_inout",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_array",
                            "c_var": "array",
                            "f_pointer_shape": ", [:]",
                            "f_type": "integer(C_INT)",
                            "f_var": "array",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_inout",
                            "stmtc1": "c_default"
                        }
                    },
                    "sizein": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&sizein)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_sizein",
                            "c_var": "SH_sizein",
                            "f_type": "integer(C_INT)",
                            "f_var": "sizein",
                            "pre_call_intent": "size(array,kind=C_INT)",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "incrementIntArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "array",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(array)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void incrementIntArray(int * array  +dimension(:)+intent(inout), int   sizein +implied(size(array)))",
                "declgen": "void incrementIntArray(int * array +dimension(:)+intent(inout), int sizein +implied(size(array))+intent(in)+value)",
                "doxygen": {
                    "description": "Increment array in place using intent(INOUT).\n"
                },
                "fmtdict": {
                    "C_call_list": "array,\t sizein",
                    "C_name": "POI_increment_int_array",
                    "C_prototype": "int * array,\t int sizein",
                    "C_return_type": "void",
                    "F_C_call": "c_increment_int_array",
                    "F_C_name": "c_increment_int_array",
                    "F_arg_c_call": "array,\t SH_sizein",
                    "F_arguments": "array",
                    "F_name_function": "increment_int_array",
                    "F_name_generic": "increment_int_array",
                    "F_name_impl": "increment_int_array",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "incrementIntArray",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "increment_int_array"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "names": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "names",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(names)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "names",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_**_in",
                            "stmt1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptCharArrayIn",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "names",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptCharArrayIn(char **names +intent(in))",
                "declgen": "void acceptCharArrayIn(char * * names +dimension(:)+intent(in))",
                "fmtdict": {
                    "C_call_list": "names",
                    "C_name": "POI_accept_char_array_in",
                    "C_prototype": "char * * names",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_char_array_in_bufferify",
                    "F_C_name": "c_accept_char_array_in",
                    "F_arg_c_call": "names,\t size(names, kind=C_LONG),\t len(names, kind=C_INT)",
                    "F_arguments": "names",
                    "F_name_function": "accept_char_array_in",
                    "F_name_generic": "accept_char_array_in",
                    "F_name_impl": "accept_char_array_in",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "acceptCharArrayIn",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "accept_char_array_in"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "names": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "names",
                            "c_var_len": "Nnames",
                            "c_var_size": "Snames",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_names)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_names",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_char_**_in_buf",
                            "stmt1": "c_char_**_in_buf"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_names",
                            "c_var": "names",
                            "f_pointer_shape": ", [:]",
                            "f_type": "character(*)",
                            "f_var": "names",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_char_**_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_char_**_in_buf",
                            "stmtc1": "c_char_**_in_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptCharArrayIn",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "len": "Nnames",
                                "size": "Snames"
                            },
                            "declarator": {
                                "name": "names",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptCharArrayIn(char **names +intent(in))",
                "declgen": "void acceptCharArrayIn(char * * names +dimension(:)+intent(in)+len(Nnames)+size(Snames))",
                "fmtdict": {
                    "C_call_list": "SHCXX_names",
                    "C_name": "POI_accept_char_array_in_bufferify",
                    "C_prototype": "char *names,\t long Snames,\t int Nnames",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_char_array_in_bufferify",
                    "c_const": "",
                    "function_name": "acceptCharArrayIn",
                    "function_suffix": "_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "accept_char_array_in"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "value": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "value",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&value)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_value",
                            "c_var": "value",
                            "f_type": "integer(C_INT)",
                            "f_var": "value",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "setGlobalInt",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void setGlobalInt(int value)",
                "declgen": "void setGlobalInt(int value +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "value",
                    "C_name": "POI_set_global_int",
                    "C_prototype": "int value",
                    "C_return_type": "void",
                    "F_C_call": "c_set_global_int",
                    "F_C_name": "set_global_int",
                    "F_arg_c_call": "value",
                    "F_arguments": "value",
                    "F_name_function": "set_global_int",
                    "F_name_generic": "set_global_int",
                    "F_name_impl": "set_global_int",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "setGlobalInt",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "set_global_int"
                },
                "options": {}
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "sumFixedArray",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int sumFixedArray()",
                "declgen": "int sumFixedArray()",
                "doxygen": {
                    "description": "Used to test values global_array.\n"
                },
                "fmtdict": {
                    "C_name": "POI_sum_fixed_array",
                    "C_prototype": "",
                    "C_return_type": "int",
                    "F_C_call": "c_sum_fixed_array",
                    "F_C_name": "sum_fixed_array",
                    "F_arguments": "",
                    "F_name_function": "sum_fixed_array",
                    "F_name_generic": "sum_fixed_array",
                    "F_name_impl": "sum_fixed_array",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "sumFixedArray",
                    "underscore_name": "sum_fixed_array"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "nitems": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "nitems",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(nitems)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "nitems",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_**_out",
                            "stmt1": "c_native_**_out"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_nitems",
                            "c_var": "nitems",
                            "f_type": "integer(C_INT)",
                            "f_var": "nitems",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_**_out",
                            "stmt1": "f_native_**_out",
                            "stmtc0": "c_native_**_out",
                            "stmtc1": "c_native_**_out"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "getPtrToScalar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nitems",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToScalar(int **nitems+intent(out))",
                "declgen": "void getPtrToScalar(int * * nitems +intent(out))",
                "fmtdict": {
                    "C_call_list": "nitems",
                    "C_name": "POI_get_ptr_to_scalar",
                    "C_prototype": "int * * nitems",
                    "C_return_type": "void",
                    "F_C_call": "c_get_ptr_to_scalar",
                    "F_C_name": "c_get_ptr_to_scalar",
                    "F_arg_c_call": "SHPTR_nitems",
                    "F_arguments": "nitems",
                    "F_name_function": "get_ptr_to_scalar",
                    "F_name_generic": "get_ptr_to_scalar",
                    "F_name_impl": "get_ptr_to_scalar",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "getPtrToScalar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_ptr_to_scalar"
                },
                "options": {
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "count": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "count",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(count)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_native_**_out",
                            "stmt1": "c_native_**_out"
                        },
                        "fmtf": {
                            "F_pointer": "SHPTR_count",
                            "c_var": "count",
                            "f_pointer_shape": ", [10]",
                            "f_type": "integer(C_INT)",
                            "f_var": "count",
                            "f_var_shape": "(:)",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_**_out",
                            "stmt1": "f_native_**_out",
                            "stmtc0": "c_native_**_out",
                            "stmtc1": "c_native_**_out"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "getPtrToFixedArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "10",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "count",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedArray(int **count+intent(out)+dimension(10))",
                "declgen": "void getPtrToFixedArray(int * * count +dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a pointer to an array which is always the same length.\n"
                },
                "fmtdict": {
                    "C_call_list": "count",
                    "C_name": "POI_get_ptr_to_fixed_array",
                    "C_prototype": "int * * count",
                    "C_return_type": "void",
                    "F_C_call": "c_get_ptr_to_fixed_array",
                    "F_C_name": "c_get_ptr_to_fixed_array",
                    "F_arg_c_call": "SHPTR_count",
                    "F_arguments": "count",
                    "F_name_function": "get_ptr_to_fixed_array",
                    "F_name_generic": "get_ptr_to_fixed_array",
                    "F_name_impl": "get_ptr_to_fixed_array",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "getPtrToFixedArray",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_ptr_to_fixed_array"
                },
                "options": {
                    "wrap_python": false
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "pointers"
        ]
    }
}