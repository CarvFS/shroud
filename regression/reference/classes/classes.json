{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "classes": [
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "enums": [
                    {
                        "<ENUM>": "****************************************",
                        "_fmtmembers": {
                            "DOWN": {
                                "C_enum_member": "CLA_Class1_DOWN",
                                "F_enum_member": "class1_down",
                                "F_value": 3,
                                "enum_member_lower": "down",
                                "enum_member_name": "DOWN",
                                "enum_member_upper": "DOWN"
                            },
                            "LEFT": {
                                "C_enum_member": "CLA_Class1_LEFT",
                                "C_value": 100,
                                "F_enum_member": "class1_left",
                                "F_value": 100,
                                "enum_member_lower": "left",
                                "enum_member_name": "LEFT",
                                "enum_member_upper": "LEFT"
                            },
                            "RIGHT": {
                                "C_enum_member": "CLA_Class1_RIGHT",
                                "F_enum_member": "class1_right",
                                "F_value": 101,
                                "enum_member_lower": "right",
                                "enum_member_name": "RIGHT",
                                "enum_member_upper": "RIGHT"
                            },
                            "UP": {
                                "C_enum_member": "CLA_Class1_UP",
                                "C_value": 2,
                                "F_enum_member": "class1_up",
                                "F_value": 2,
                                "enum_member_lower": "up",
                                "enum_member_name": "UP",
                                "enum_member_upper": "UP"
                            }
                        },
                        "ast": {
                            "members": [
                                {
                                    "name": "UP",
                                    "value": {
                                        "constant": "2"
                                    }
                                },
                                {
                                    "name": "DOWN"
                                },
                                {
                                    "name": "LEFT",
                                    "value": {
                                        "constant": "100"
                                    }
                                },
                                {
                                    "name": "RIGHT"
                                }
                            ],
                            "name": "DIRECTION"
                        },
                        "decl": "enum DIRECTION { UP = 2, DOWN, LEFT= 100, RIGHT };",
                        "name": "DIRECTION",
                        "options": {},
                        "typemap_name": "classes::Class1::DIRECTION",
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_enum": "CLA_Class1_DIRECTION",
                            "enum_lower": "direction",
                            "enum_name": "DIRECTION",
                            "enum_upper": "DIRECTION",
                            "namespace_scope": "classes::Class1::"
                        }
                    }
                ],
                "functions": [
                    {
                        "<FUNCTION>": "0 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor"
                            },
                            "metaattrs": {
                                "intent": "ctor"
                            },
                            "params": [],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1()",
                        "declgen": "Class1(void)",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_ctor_default",
                            "C_prototype": "CLA_Class1 * SHadow_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "SHT_crv",
                            "F_C_call": "c_class1_ctor_default",
                            "F_C_name": "c_class1_ctor_default",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_name_function": "ctor_default",
                            "F_name_generic": "class1",
                            "F_name_impl": "class1_ctor_default",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "ctor",
                            "LUA_name_impl": "l_Class1_ctor",
                            "PY_name_impl": "PY_Class1_tp_init_default",
                            "PY_type_impl": "PY_Class1_tp_init_default",
                            "PY_type_method": "tp_init",
                            "cxx_rv_decl": "classes::Class1 SHCXX_rv",
                            "function_name": "ctor",
                            "function_suffix": "_default",
                            "underscore_name": "ctor"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "1",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_ctor_shadow_scalar",
                                "stmt1": "c_ctor"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Class1",
                                "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(class1)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_ctor",
                                "stmt1": "f_ctor",
                                "stmtc0": "c_ctor",
                                "stmtc1": "c_ctor"
                            },
                            "fmtl": {
                                "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_var": "SHCXX_rv",
                                "stmt0": "lua_ctor_scalar",
                                "stmt1": "lua_ctor"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                "PyObject": "PY_Class1",
                                "PyTypeObject": "PY_Class1_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_default",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv",
                                "vargs": "SHCXX_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "1 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor"
                            },
                            "metaattrs": {
                                "intent": "ctor"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "flag",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1(int flag)",
                        "declgen": "Class1(int flag +value)",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "flag",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "shadow_var": "SHadow_flag",
                                    "stmt0": "c_in_native_scalar",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "flag",
                                    "F_pointer": "SHPTR_flag",
                                    "c_var": "flag",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "flag",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_in_native_scalar",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_in_native_scalar",
                                    "stmtc1": "c_default"
                                },
                                "fmtl": {
                                    "LUA_index": 1,
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "flag",
                                    "c_var_len": "Lflag",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "lua_var": "SH_Lua_flag",
                                    "pop_expr": "lua_tointeger(L, 1)",
                                    "stmt0": "lua_in_native_scalar",
                                    "stmt1": "lua_in_native_scalar"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "flag",
                                    "ctor_expr": "flag",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "data_var": "SHData_flag",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_flag",
                                    "size_var": "SHSize_flag",
                                    "stmt0": "py_in_native_scalar",
                                    "stmt1": "py_default",
                                    "value_var": "SHValue_flag"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "flag",
                            "C_name": "CLA_Class1_ctor_flag",
                            "C_prototype": "int flag,\t CLA_Class1 * SHadow_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "flag,\t SHT_crv",
                            "F_C_call": "c_class1_ctor_flag",
                            "F_C_name": "c_class1_ctor_flag",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "F_arg_c_call": "flag,\t SHT_rv%cxxmem",
                            "F_arguments": "flag",
                            "F_name_function": "ctor_flag",
                            "F_name_generic": "class1",
                            "F_name_impl": "class1_ctor_flag",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_Class1_tp_init_flag",
                            "PY_type_impl": "PY_Class1_tp_init_flag",
                            "PY_type_method": "tp_init",
                            "cxx_rv_decl": "classes::Class1 SHCXX_rv",
                            "function_name": "ctor",
                            "function_suffix": "_flag",
                            "underscore_name": "ctor"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "1",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_ctor_shadow_scalar",
                                "stmt1": "c_ctor"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Class1",
                                "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(class1)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_ctor",
                                "stmt1": "f_ctor",
                                "stmtc0": "c_ctor",
                                "stmtc1": "c_ctor"
                            },
                            "fmtl": {
                                "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_var": "SHCXX_rv",
                                "stmt0": "lua_ctor_scalar",
                                "stmt1": "lua_ctor"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                "PyObject": "PY_Class1",
                                "PyTypeObject": "PY_Class1_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_default",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv",
                                "vargs": "SHCXX_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "2 ****************************************",
                        "ast": {
                            "attrs": {
                                "_destructor": "Class1",
                                "_name": "dtor",
                                "name": "delete"
                            },
                            "metaattrs": {
                                "intent": "dtor"
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "~Class1()        +name(delete)",
                        "declgen": "~Class1(void) +name(delete)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_delete",
                            "C_prototype": "CLA_Class1 * self",
                            "C_return_type": "void",
                            "F_C_arguments": "self",
                            "F_C_call": "c_class1_delete",
                            "F_C_name": "c_class1_delete",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "delete",
                            "F_name_generic": "delete",
                            "F_name_impl": "class1_delete",
                            "F_subprogram": "subroutine",
                            "LUA_name": "delete",
                            "LUA_name_impl": "l_Class1_delete",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "delete",
                            "shadow_var": "SHadow_self",
                            "stmt0": "f_dtor",
                            "stmt1": "f_default",
                            "stmtc0": "c_dtor",
                            "stmtc1": "c_dtor",
                            "underscore_name": "delete"
                        },
                        "zz_fmtresult": {
                            "fmtl": {
                                "stmt0": "lua_dtor_scalar",
                                "stmt1": "lua_dtor"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "3 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "Method1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int Method1()",
                        "declgen": "int Method1(void)",
                        "doxygen": {
                            "brief": "returns the value of flag member"
                        },
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_method1",
                            "C_prototype": "CLA_Class1 * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_class1_method1",
                            "F_C_name": "c_class1_method1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "method1",
                            "F_name_generic": "method1",
                            "F_name_impl": "class1_method1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "Method1",
                            "LUA_name_impl": "l_Class1_method1",
                            "PY_name_impl": "PY_Method1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "Method1",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "method1"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_native_scalar",
                                "stmt1": "c_default"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_function_native_scalar",
                                "stmt1": "f_default",
                                "stmtc0": "c_function_native_scalar",
                                "stmtc1": "c_default"
                            },
                            "fmtl": {
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv",
                                "push_arg": "SHCXX_rv",
                                "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                "stmt0": "lua_function_native_scalar",
                                "stmt1": "lua_function_native_scalar"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_scalar",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "4 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "equivalent",
                                "pointer": []
                            },
                            "func_const": true,
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [
                                {
                                    "const": true,
                                    "declarator": {
                                        "name": "obj2",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "specifier": [
                                        "Class1"
                                    ],
                                    "typemap_name": "classes::Class1"
                                }
                            ],
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        "decl": "bool equivalent(Class1 const &obj2) const;",
                        "declgen": "bool equivalent(const Class1 & obj2) const",
                        "doxygen": {
                            "brief": "Pass in reference to instance"
                        },
                        "options": {
                            "wrap_lua": false
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "obj2": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "CLA_Class1",
                                    "c_var": "obj2",
                                    "cxx_addr": "",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_obj2)",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "SHCXX_obj2",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "shadow_var": "SHadow_obj2",
                                    "stmt0": "c_in_shadow_&",
                                    "stmt1": "c_in_shadow"
                                },
                                "fmtf": {
                                    "F_C_var": "obj2",
                                    "F_pointer": "SHPTR_obj2",
                                    "c_var": "obj2",
                                    "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                    "f_intent": "IN",
                                    "f_type": "type(class1)",
                                    "f_var": "obj2",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt0": "f_in_shadow_&",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_in_shadow_&",
                                    "stmtc1": "c_in_shadow"
                                },
                                "fmtpy": {
                                    "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                    "PyObject": "PY_Class1",
                                    "PyTypeObject": "PY_Class1_Type",
                                    "array_size": "1",
                                    "c_const": "const ",
                                    "c_deref": "",
                                    "c_type": "CLA_Class1",
                                    "c_var": "obj2",
                                    "ctor_expr": "obj2",
                                    "cxx_addr": "&",
                                    "cxx_member": "->",
                                    "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(&obj2)",
                                    "cxx_type": "classes::Class1",
                                    "cxx_var": "obj2",
                                    "data_var": "SHData_obj2",
                                    "numpy_type": null,
                                    "py_object": "PY_Class1",
                                    "py_var": "SHPy_obj2",
                                    "size_var": "SHSize_obj2",
                                    "stmt0": "py_in_shadow_&",
                                    "stmt1": "py_in_shadow_&",
                                    "value_var": "SHValue_obj2"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "*SHCXX_obj2",
                            "C_name": "CLA_Class1_equivalent",
                            "C_prototype": "const CLA_Class1 * self,\t CLA_Class1 * obj2",
                            "C_return_type": "bool",
                            "F_C_arguments": "self,\t obj2",
                            "F_C_call": "c_class1_equivalent",
                            "F_C_name": "c_class1_equivalent",
                            "F_C_pure_clause": "pure ",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t obj2%cxxmem",
                            "F_arguments": "obj,\t obj2",
                            "F_name_function": "equivalent",
                            "F_name_generic": "equivalent",
                            "F_name_impl": "class1_equivalent",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_equivalent",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "bool SHC_rv",
                            "function_name": "equivalent",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "equivalent"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "bool",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "bool",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_BOOL",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_bool_scalar",
                                "stmt1": "c_default"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "bool",
                                "f_intent": "OUT",
                                "f_kind": "C_BOOL",
                                "f_type": "logical",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_BOOL",
                                "stmt0": "f_function_bool_scalar",
                                "stmt1": "f_function_bool",
                                "stmtc0": "c_function_bool_scalar",
                                "stmtc1": "c_default"
                            },
                            "fmtpy": {
                                "PyTypeObject": "PyBool_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "bool",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_BOOL",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_bool_scalar",
                                "stmt1": "py_function_bool",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "5 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "returnThis",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1 * returnThis();",
                        "declgen": "Class1 * returnThis(void)",
                        "doxygen": {
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "return_this": true,
                        "wrap": {},
                        "zz_fmtdict": {
                            "function_name": "returnThis",
                            "underscore_name": "return_this"
                        }
                    },
                    {
                        "<FUNCTION>": "15 ****************************************",
                        "C_generated_path": [
                            "return_this"
                        ],
                        "_generated": "return_this",
                        "ast": {
                            "declarator": {
                                "name": "returnThis",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "subroutine"
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "Class1 * returnThis();",
                        "declgen": "void returnThis(void)",
                        "doxygen": {
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "return_this": true,
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_return_this",
                            "C_prototype": "CLA_Class1 * self",
                            "C_return_type": "void",
                            "F_C_arguments": "self",
                            "F_C_call": "c_class1_return_this",
                            "F_C_name": "c_class1_return_this",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "return_this",
                            "F_name_generic": "return_this",
                            "F_name_impl": "class1_return_this",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "returnThis",
                            "shadow_var": "SHadow_self",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_subroutine",
                            "stmtc0": "c_subroutine",
                            "stmtc1": "c_subroutine",
                            "underscore_name": "return_this"
                        }
                    },
                    {
                        "<FUNCTION>": "6 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "16",
                        "ast": {
                            "declarator": {
                                "name": "returnThisBuffer",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "declarator": {
                                        "name": "name",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                },
                                {
                                    "attrs": {
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "flag",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                }
                            ],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag);",
                        "declgen": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +value)",
                        "doxygen": {
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "bool",
                                    "c_var": "flag",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "bool",
                                    "cxx_var": "flag",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_BOOL",
                                    "shadow_var": "SHadow_flag",
                                    "stmt0": "c_in_bool_scalar",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "flag",
                                    "c_var": "flag"
                                }
                            },
                            "name": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "char",
                                    "c_var": "name",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_name",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_name",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "shadow_var": "SHadow_name",
                                    "stmt0": "c_in_string_&",
                                    "stmt1": "c_in_string_&"
                                },
                                "fmtf": {
                                    "F_C_var": "name",
                                    "c_var": "name"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "SHCXX_name,\t flag",
                            "C_name": "CLA_Class1_return_this_buffer",
                            "C_prototype": "CLA_Class1 * self,\t char * name,\t bool flag,\t CLA_Class1 * SHadow_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "self,\t name,\t flag,\t SHT_crv",
                            "F_C_call": "c_class1_return_this_buffer_bufferify",
                            "F_C_name": "c_class1_return_this_buffer",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "F_arg_c_call": "obj%cxxmem,\t name,\t len(name, kind=C_INT),\t SH_flag,\t SHT_rv%cxxmem",
                            "F_arguments": "obj,\t name,\t flag",
                            "F_name_function": "return_this_buffer",
                            "F_name_generic": "return_this_buffer",
                            "F_name_impl": "class1_return_this_buffer",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                            "function_name": "returnThisBuffer",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "return_this_buffer"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHCXX_rv",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_shadow_*",
                                "stmt1": "c_function_shadow"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Class1",
                                "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(class1)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_function_shadow_*",
                                "stmt1": "f_function_shadow",
                                "stmtc0": "c_function_shadow_*",
                                "stmtc1": "c_function_shadow"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "16 ****************************************",
                        "_PTR_C_CXX_index": "6",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "name": "returnThisBuffer",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "declarator": {
                                        "name": "name",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "metaattrs": {
                                        "api": "buf",
                                        "intent": "in"
                                    },
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                },
                                {
                                    "attrs": {
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "flag",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                }
                            ],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag);",
                        "declgen": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +value)",
                        "doxygen": {
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "bool",
                                    "c_var": "flag",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&flag",
                                    "cxx_type": "bool",
                                    "cxx_var": "flag",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_BOOL",
                                    "shadow_var": "SHadow_flag",
                                    "stmt0": "c_in_bool_scalar",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "flag",
                                    "F_pointer": "SHPTR_flag",
                                    "c_var": "flag",
                                    "f_intent": "IN",
                                    "f_kind": "C_BOOL",
                                    "f_type": "logical",
                                    "f_var": "flag",
                                    "sh_type": "SH_TYPE_BOOL",
                                    "stmt0": "f_in_bool_scalar",
                                    "stmt1": "f_in_bool",
                                    "stmtc0": "c_in_bool_scalar",
                                    "stmtc1": "c_default"
                                }
                            },
                            "name": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_type": "char",
                                    "c_var": "name",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_name",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_name",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "shadow_var": "SHadow_name",
                                    "stmt0": "c_in_string_&_buf",
                                    "stmt1": "c_in_string_&_buf",
                                    "temp0": "name_temp0"
                                },
                                "fmtf": {
                                    "F_C_var": "name",
                                    "F_pointer": "SHPTR_name",
                                    "c_var": "name",
                                    "f_intent": "IN",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_var": "name",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt0": "f_in_string_&_buf",
                                    "stmt1": "f_in_string_&_buf",
                                    "stmtc0": "c_in_string_&_buf",
                                    "stmtc1": "c_in_string_&_buf",
                                    "temp0": "name_temp0"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "SHCXX_name,\t flag",
                            "C_name": "CLA_Class1_return_this_buffer_bufferify",
                            "C_prototype": "CLA_Class1 * self,\t char *name,\t int name_temp0,\t bool flag,\t CLA_Class1 * SHadow_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "self,\t name,\t name_temp0,\t flag,\t SHT_crv",
                            "F_C_name": "c_class1_return_this_buffer_bufferify",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                            "function_name": "returnThisBuffer",
                            "function_suffix": "_bufferify",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "return_this_buffer"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHCXX_rv",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_shadow_*",
                                "stmt1": "c_function_shadow"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "f_intent": "OUT",
                                "f_type": "type(class1)"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "7 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "getclass3",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "func_const": true,
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        },
                        "decl": "Class1 *getclass3() const",
                        "declgen": "Class1 * getclass3(void) const",
                        "doxygen": {
                            "brief": "Test const method"
                        },
                        "options": {
                            "wrap_lua": false
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_getclass3",
                            "C_prototype": "const CLA_Class1 * self,\t CLA_Class1 * SHadow_rv",
                            "C_return_type": "CLA_Class1 *",
                            "F_C_arguments": "self,\t SHT_crv",
                            "F_C_call": "c_class1_getclass3",
                            "F_C_name": "c_class1_getclass3",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "getclass3",
                            "F_name_generic": "getclass3",
                            "F_name_impl": "class1_getclass3",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getclass3",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                            "function_name": "getclass3",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "getclass3"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHCXX_rv",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_shadow_*",
                                "stmt1": "c_function_shadow"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Class1",
                                "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(class1)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_function_shadow_*",
                                "stmt1": "f_function_shadow",
                                "stmtc0": "c_function_shadow_*",
                                "stmtc1": "c_function_shadow"
                            },
                            "fmtpy": {
                                "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                                "PyObject": "PY_Class1",
                                "PyTypeObject": "PY_Class1_Type",
                                "array_size": "1",
                                "c_deref": "*",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "*SHCXX_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_nonconst_ptr": "SHCXX_rv",
                                "cxx_type": "classes::Class1",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_shadow_*",
                                "stmt1": "py_function_shadow_*",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "8 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "17",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "name": "getName",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "const std::string& getName();",
                        "declgen": "const std::string & getName(void)",
                        "doxygen": {
                            "brief": "test helper"
                        },
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_get_name",
                            "C_prototype": "CLA_Class1 * self",
                            "C_return_type": "const char *",
                            "F_C_arguments": "self",
                            "F_C_call": "c_class1_get_name_bufferify",
                            "F_C_name": "c_class1_get_name",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv_temp0",
                            "F_arguments": "obj",
                            "F_name_function": "get_name",
                            "F_name_generic": "get_name",
                            "F_name_impl": "class1_get_name",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "getName",
                            "LUA_name_impl": "l_Class1_get_name",
                            "PY_name_impl": "PY_getName",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "function_name": "getName",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_name"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "const ",
                                "c_rv_decl": "const char * SHC_rv",
                                "c_type": "char",
                                "c_val": "SHCXX_rv.c_str()",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                "cxx_type": "std::string",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_string_&_allocatable",
                                "stmt1": "c_function_string_&"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "std::string",
                                "f_intent": "OUT",
                                "f_kind": "C_CHAR",
                                "f_type": "character(*)",
                                "f_var": "SHT_rv",
                                "hnamefunc0": "CLA_SHROUD_copy_string_and_free",
                                "hnamefunc1": "array_context",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_function_string_&_buf_allocatable",
                                "stmt1": "f_function_string_&_buf_allocatable",
                                "stmtc0": "c_function_string_&_buf_allocatable",
                                "stmtc1": "c_function_string_&_buf_allocatable",
                                "temp0": "SHT_rv_temp0"
                            },
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv",
                                "push_arg": "SHCXX_rv.c_str()",
                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                "stmt0": "lua_function_string_&",
                                "stmt1": "lua_function_string_&"
                            },
                            "fmtpy": {
                                "array_size": "1",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                "cxx_type": "std::string",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_string_&",
                                "stmt1": "py_function_string_&",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "17 ****************************************",
                        "_PTR_C_CXX_index": "8",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "name": "getName",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "const std::string& getName();",
                        "declgen": "const std::string & getName(void)",
                        "doxygen": {
                            "brief": "test helper"
                        },
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_get_name_bufferify",
                            "C_prototype": "CLA_Class1 * self,\t CLA_SHROUD_array *SHC_rv_temp0",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_rv",
                            "F_C_name": "c_class1_get_name_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "function_name": "getName",
                            "function_suffix": "_bufferify",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_name"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "const ",
                                "c_type": "char",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                "cxx_type": "std::string",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_string_&_buf_allocatable",
                                "stmt1": "c_function_string_&_buf_allocatable",
                                "temp0": "SHC_rv_temp0"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "f_intent": "OUT",
                                "f_type": "character(*)",
                                "temp0": "SHT_rv_temp0"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "9 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "directionFunc",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "in"
                                    },
                                    "specifier": [
                                        "DIRECTION"
                                    ],
                                    "typemap_name": "classes::Class1::DIRECTION"
                                }
                            ],
                            "specifier": [
                                "DIRECTION"
                            ],
                            "typemap_name": "classes::Class1::DIRECTION"
                        },
                        "decl": "DIRECTION directionFunc(DIRECTION arg);",
                        "declgen": "DIRECTION directionFunc(DIRECTION arg +value)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtargs": {
                            "arg": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "arg",
                                    "cxx_addr": "&",
                                    "cxx_decl": "classes::Class1::DIRECTION SHCXX_arg",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&SHCXX_arg",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                                    "cxx_var": "SHCXX_arg",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "shadow_var": "SHadow_arg",
                                    "stmt0": "c_in_native_scalar",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_C_var": "arg",
                                    "F_pointer": "SHPTR_arg",
                                    "c_var": "arg",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "arg",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_in_native_scalar",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_in_native_scalar",
                                    "stmtc1": "c_default"
                                },
                                "fmtl": {
                                    "LUA_index": 1,
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "lua_tointeger(L, 1)",
                                    "c_var_len": "Larg",
                                    "cxx_member": ".",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_var": "arg",
                                    "lua_var": "SH_Lua_arg",
                                    "pop_expr": "static_cast<classes::Class1::DIRECTION>(lua_tointeger(L, 1))",
                                    "stmt0": "lua_in_native_scalar",
                                    "stmt1": "lua_in_native_scalar"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "arg",
                                    "ctor_expr": "arg",
                                    "cxx_addr": "&",
                                    "cxx_decl": "classes::Class1::DIRECTION SH_arg",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&arg",
                                    "cxx_type": "classes::Class1::DIRECTION",
                                    "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                                    "cxx_var": "SH_arg",
                                    "data_var": "SHData_arg",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_arg",
                                    "size_var": "SHSize_arg",
                                    "stmt0": "py_in_native_scalar",
                                    "stmt1": "py_default",
                                    "value_var": "SHValue_arg"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "SHCXX_arg",
                            "C_name": "CLA_Class1_direction_func",
                            "C_prototype": "CLA_Class1 * self,\t int arg",
                            "C_return_type": "int",
                            "F_C_arguments": "self,\t arg",
                            "F_C_call": "c_class1_direction_func",
                            "F_C_name": "c_class1_direction_func",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t arg",
                            "F_arguments": "obj,\t arg",
                            "F_name_function": "direction_func",
                            "F_name_generic": "direction_func",
                            "F_name_impl": "class1_direction_func",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "directionFunc",
                            "LUA_name_impl": "l_Class1_direction_func",
                            "PY_name_impl": "PY_directionFunc",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "classes::Class1::DIRECTION SHCXX_rv",
                            "function_name": "directionFunc",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "direction_func"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_rv_decl": "int SHC_rv",
                                "c_type": "int",
                                "c_val": "static_cast<int>(SHCXX_rv)",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Class1::DIRECTION",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_native_scalar",
                                "stmt1": "c_default"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Class1::DIRECTION",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_function_native_scalar",
                                "stmt1": "f_default",
                                "stmtc0": "c_function_native_scalar",
                                "stmtc1": "c_default"
                            },
                            "fmtl": {
                                "c_var": "static_cast<int>(SHCXX_rv)",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv",
                                "push_arg": "static_cast<int>(SHCXX_rv)",
                                "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                                "stmt0": "lua_function_native_scalar",
                                "stmt1": "lua_function_native_scalar"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Class1::DIRECTION",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_scalar",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "10 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getM_flag",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getM_flag()",
                        "declgen": "int getM_flag(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_get_m_flag",
                            "C_prototype": "CLA_Class1 * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_class1_get_m_flag",
                            "F_C_name": "c_class1_get_m_flag",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_m_flag",
                            "F_name_generic": "get_m_flag",
                            "F_name_impl": "class1_get_m_flag",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "m_flag",
                            "function_name": "getM_flag",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_m_flag"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_getter_native_scalar",
                                "stmt1": "c_getter_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_function_native_scalar",
                                "stmt1": "f_default",
                                "stmtc0": "c_function_native_scalar",
                                "stmtc1": "c_default"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "11 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getTest",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getTest()",
                        "declgen": "int getTest(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_get_test",
                            "C_prototype": "CLA_Class1 * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_class1_get_test",
                            "F_C_name": "c_class1_get_test",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_test",
                            "F_name_generic": "get_test",
                            "F_name_impl": "class1_get_test",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "m_test",
                            "function_name": "getTest",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_test"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_getter_native_scalar",
                                "stmt1": "c_getter_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_function_native_scalar",
                                "stmt1": "f_default",
                                "stmtc0": "c_function_native_scalar",
                                "stmtc1": "c_default"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "12 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "setTest",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setTest(int val)",
                        "declgen": "void setTest(int val +intent(in)+value)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "shadow_var": "SHadow_val",
                                    "stmt0": "c_setter_native_scalar",
                                    "stmt1": "c_setter_native_scalar"
                                },
                                "fmtf": {
                                    "F_C_var": "val",
                                    "F_pointer": "SHPTR_val",
                                    "c_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "val",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_setter_native_scalar",
                                    "stmt1": "f_setter",
                                    "stmtc0": "c_setter_native_scalar",
                                    "stmtc1": "c_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "CLA_Class1_set_test",
                            "C_prototype": "CLA_Class1 * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_class1_set_test",
                            "F_C_name": "c_class1_set_test",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_function": "set_test",
                            "F_name_generic": "set_test",
                            "F_name_impl": "class1_set_test",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "m_test",
                            "function_name": "setTest",
                            "shadow_var": "SHadow_self",
                            "stmt0": "f_setter",
                            "stmt1": "f_setter",
                            "stmtc0": "c_setter",
                            "stmtc1": "c_setter",
                            "underscore_name": "set_test"
                        }
                    },
                    {
                        "<FUNCTION>": "13 ****************************************",
                        "C_generated_path": [
                            "getter/setter",
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "18",
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getM_name",
                                "pointer": []
                            },
                            "metaattrs": {
                                "deref": "allocatable",
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "std::string getM_name()",
                        "declgen": "std::string getM_name(void)",
                        "options": {},
                        "wrap": {
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "F_C_call": "c_class1_get_m_name_bufferify",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv_temp0",
                            "F_arguments": "obj",
                            "F_name_function": "get_m_name",
                            "F_name_generic": "get_m_name",
                            "F_name_impl": "class1_get_m_name",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "field_name": "m_name",
                            "function_name": "getM_name",
                            "underscore_name": "get_m_name"
                        },
                        "zz_fmtresult": {
                            "fmtf": {
                                "c_var": "SHT_rv",
                                "cxx_type": "std::string",
                                "f_intent": "OUT",
                                "f_kind": "C_CHAR",
                                "f_type": "character(*)",
                                "f_var": "SHT_rv",
                                "hnamefunc0": "CLA_SHROUD_copy_string_and_free",
                                "hnamefunc1": "array_context",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_function_string_scalar_buf_allocatable",
                                "stmt1": "f_function_string_scalar_buf_allocatable",
                                "stmtc0": "c_function_string_scalar_buf_allocatable",
                                "stmtc1": "c_function_string_scalar_buf_allocatable",
                                "temp0": "SHT_rv_temp0"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "18 ****************************************",
                        "_PTR_C_CXX_index": "13",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "name": "getM_name",
                                "pointer": []
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "allocatable",
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "std::string getM_name()",
                        "declgen": "std::string getM_name(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class1_get_m_name_bufferify",
                            "C_prototype": "CLA_Class1 * self,\t CLA_SHROUD_array *SHC_rv_temp0",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_rv",
                            "F_C_name": "c_class1_get_m_name_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "std::string SHCXX_rv",
                            "field_name": "m_name",
                            "function_name": "getM_name",
                            "function_suffix": "_bufferify",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_m_name"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "char",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "std::string",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_getter_string_scalar_buf_allocatable",
                                "stmt1": "c_getter_string_scalar_buf",
                                "temp0": "SHC_rv_temp0"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "f_intent": "OUT",
                                "f_type": "character(*)",
                                "temp0": "SHT_rv_temp0"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "14 ****************************************",
                        "C_generated_path": [
                            "getter/setter",
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "19",
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "setM_name",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setM_name(std::string val)",
                        "declgen": "void setM_name(std::string val +intent(in))",
                        "options": {},
                        "wrap": {
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "F_C_call": "c_class1_set_m_name_bufferify",
                            "F_arg_c_call": "obj%cxxmem,\t val,\t len(val, kind=C_INT)",
                            "F_arguments": "obj,\t val",
                            "F_name_function": "set_m_name",
                            "F_name_generic": "set_m_name",
                            "F_name_impl": "class1_set_m_name",
                            "F_subprogram": "subroutine",
                            "field_name": "m_name",
                            "function_name": "setM_name",
                            "stmt0": "f_setter",
                            "stmt1": "f_setter",
                            "stmtc0": "c_setter",
                            "stmtc1": "c_setter",
                            "underscore_name": "set_m_name"
                        }
                    },
                    {
                        "<FUNCTION>": "19 ****************************************",
                        "_PTR_C_CXX_index": "14",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "name": "setM_name",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in"
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "api": "buf",
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setM_name(std::string val)",
                        "declgen": "void setM_name(std::string val +intent(in))",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "char",
                                    "c_var": "val",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "std::string",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "shadow_var": "SHadow_val",
                                    "stmt0": "c_setter_string_scalar_buf",
                                    "stmt1": "c_setter_string_scalar_buf",
                                    "temp0": "val_temp0"
                                },
                                "fmtf": {
                                    "F_C_var": "val",
                                    "F_pointer": "SHPTR_val",
                                    "c_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_CHAR",
                                    "f_type": "character(*)",
                                    "f_var": "val",
                                    "sh_type": "SH_TYPE_OTHER",
                                    "stmt0": "f_setter_string_scalar_buf",
                                    "stmt1": "f_setter_string_scalar_buf",
                                    "stmtc0": "c_setter_string_scalar_buf",
                                    "stmtc1": "c_setter_string_scalar_buf",
                                    "temp0": "val_temp0"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "CLA_Class1_set_m_name_bufferify",
                            "C_prototype": "CLA_Class1 * self,\t char *val,\t int val_temp0",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val,\t val_temp0",
                            "F_C_name": "c_class1_set_m_name_bufferify",
                            "F_C_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "m_name",
                            "function_name": "setM_name",
                            "function_suffix": "_bufferify",
                            "shadow_var": "SHadow_self",
                            "stmt0": "c_setter",
                            "stmt1": "c_setter",
                            "underscore_name": "set_m_name"
                        }
                    }
                ],
                "name": "Class1",
                "options": {
                    "literalinclude": true
                },
                "parse_keyword": "class",
                "scope": "classes::Class1::",
                "typemap_name": "classes::Class1",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "attrs": {
                                "readonly": true
                            },
                            "declarator": {
                                "name": "m_flag",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "m_flag",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "PY_getter": "PY_Class1_m_flag_getter",
                            "PY_setter": "nullptr",
                            "PY_struct_context": "self->obj->",
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "m_flag",
                            "variable_lower": "m_flag",
                            "variable_name": "m_flag",
                            "variable_upper": "M_FLAG"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "attrs": {
                                "name": "test"
                            },
                            "declarator": {
                                "name": "m_test",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "test",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "PY_getter": "PY_Class1_test_getter",
                            "PY_setter": "PY_Class1_test_setter",
                            "PY_struct_context": "self->obj->",
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "m_test",
                            "variable_lower": "test",
                            "variable_name": "test",
                            "variable_upper": "TEST"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "m_name",
                                "pointer": []
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "name": "m_name",
                        "options": {
                            "wrap_python": false
                        },
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "std::string",
                            "field_name": "m_name",
                            "variable_lower": "m_name",
                            "variable_name": "m_name",
                            "variable_upper": "M_NAME"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapClass1.h",
                    "C_impl_filename": "wrapClass1.cpp",
                    "C_name_scope": "Class1_",
                    "C_type_name": "CLA_Class1",
                    "F_derived_name": "class1",
                    "F_name_scope": "class1_",
                    "LUA_class_reg": "l_Class1_Reg",
                    "LUA_ctor_name": "Class1",
                    "LUA_metadata": "Class1.metatable",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Class1_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Class1",
                    "PY_PyTypeObject": "PY_Class1_Type",
                    "PY_capsule_name": "PY_Class1_capsule_name",
                    "PY_from_object_func": "PP_Class1_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Class1_to_Object",
                    "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                    "PY_type_filename": "pyClass1type.cpp",
                    "class_scope": "Class1::",
                    "cxx_class": "Class1",
                    "cxx_type": "Class1",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "file_scope": "Class1",
                    "hnamefunc0": "capsule_data_helper"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "20 ****************************************",
                        "C_generated_path": [
                            "arg_to_buffer"
                        ],
                        "_PTR_F_C_index": "21",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "name": "getName",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "const std::string& getName();",
                        "declgen": "const std::string & getName(void)",
                        "doxygen": {
                            "brief": "test helper"
                        },
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class2_get_name",
                            "C_prototype": "CLA_Class2 * self",
                            "C_return_type": "const char *",
                            "F_C_arguments": "self",
                            "F_C_call": "c_class2_get_name_bufferify",
                            "F_C_name": "c_class2_get_name",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv_temp0",
                            "F_arguments": "obj",
                            "F_name_function": "get_name",
                            "F_name_generic": "get_name",
                            "F_name_impl": "class2_get_name",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "getName",
                            "LUA_name_impl": "l_Class2_get_name",
                            "PY_name_impl": "PY_getName",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "function_name": "getName",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_name"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "const ",
                                "c_rv_decl": "const char * SHC_rv",
                                "c_type": "char",
                                "c_val": "SHCXX_rv.c_str()",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                "cxx_type": "std::string",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_string_&_allocatable",
                                "stmt1": "c_function_string_&"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "std::string",
                                "f_intent": "OUT",
                                "f_kind": "C_CHAR",
                                "f_type": "character(*)",
                                "f_var": "SHT_rv",
                                "hnamefunc0": "CLA_SHROUD_copy_string_and_free",
                                "hnamefunc1": "array_context",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_function_string_&_buf_allocatable",
                                "stmt1": "f_function_string_&_buf_allocatable",
                                "stmtc0": "c_function_string_&_buf_allocatable",
                                "stmtc1": "c_function_string_&_buf_allocatable",
                                "temp0": "SHT_rv_temp0"
                            },
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv",
                                "push_arg": "SHCXX_rv.c_str()",
                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                "stmt0": "lua_function_string_&",
                                "stmt1": "lua_function_string_&"
                            },
                            "fmtpy": {
                                "array_size": "1",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                "cxx_type": "std::string",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_string_&",
                                "stmt1": "py_function_string_&",
                                "value_var": "SHValue_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "21 ****************************************",
                        "_PTR_C_CXX_index": "20",
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "name": "getName",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "allocatable",
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        "decl": "const std::string& getName();",
                        "declgen": "const std::string & getName(void)",
                        "doxygen": {
                            "brief": "test helper"
                        },
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Class2_get_name_bufferify",
                            "C_prototype": "CLA_Class2 * self,\t CLA_SHROUD_array *SHC_rv_temp0",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t SHT_rv",
                            "F_C_name": "c_class2_get_name_bufferify",
                            "F_C_result_clause": "",
                            "F_C_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                            "function_name": "getName",
                            "function_suffix": "_bufferify",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_name"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "const ",
                                "c_type": "char",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                "cxx_type": "std::string",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_string_&_buf_allocatable",
                                "stmt1": "c_function_string_&_buf_allocatable",
                                "temp0": "SHC_rv_temp0"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "f_intent": "OUT",
                                "f_type": "character(*)",
                                "temp0": "SHT_rv_temp0"
                            }
                        }
                    }
                ],
                "name": "Class2",
                "options": {},
                "parse_keyword": "class",
                "scope": "classes::Class2::",
                "typemap_name": "classes::Class2",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapClass2.h",
                    "C_impl_filename": "wrapClass2.cpp",
                    "C_name_scope": "Class2_",
                    "C_type_name": "CLA_Class2",
                    "F_derived_name": "class2",
                    "F_name_scope": "class2_",
                    "LUA_class_reg": "l_Class2_Reg",
                    "LUA_ctor_name": "Class2",
                    "LUA_metadata": "Class2.metatable",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Class2_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Class2",
                    "PY_PyTypeObject": "PY_Class2_Type",
                    "PY_capsule_name": "PY_Class2_capsule_name",
                    "PY_from_object_func": "PP_Class2_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Class2_to_Object",
                    "PY_to_object_idtor_func": "PP_Class2_to_Object_idtor",
                    "PY_type_filename": "pyClass2type.cpp",
                    "class_scope": "Class2::",
                    "cxx_class": "Class2",
                    "cxx_type": "Class2",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "file_scope": "Class2",
                    "hnamefunc0": "capsule_data_helper"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "22 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "getReference",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "Singleton"
                            ],
                            "storage": [
                                "static"
                            ],
                            "typemap_name": "classes::Singleton"
                        },
                        "decl": "static Singleton& getReference()",
                        "declgen": "static Singleton & getReference(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "classes::Singleton::",
                            "C_name": "CLA_Singleton_get_reference",
                            "C_prototype": "CLA_Singleton * SHadow_rv",
                            "C_return_type": "CLA_Singleton *",
                            "F_C_arguments": "SHT_crv",
                            "F_C_call": "c_singleton_get_reference",
                            "F_C_name": "c_singleton_get_reference",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_name_function": "get_reference",
                            "F_name_generic": "get_reference",
                            "F_name_impl": "singleton_get_reference",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getReference",
                            "PY_this_call": "classes::Singleton::",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "classes::Singleton & SHCXX_rv",
                            "function_name": "getReference",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_reference"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Singleton",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Singleton",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_shadow_&",
                                "stmt1": "c_function_shadow"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Singleton",
                                "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(singleton)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_function_shadow_&",
                                "stmt1": "f_function_shadow",
                                "stmtc0": "c_function_shadow_&",
                                "stmtc1": "c_function_shadow"
                            },
                            "fmtpy": {
                                "PY_to_object_idtor_func": "PP_Singleton_to_Object_idtor",
                                "PyObject": "PY_Singleton",
                                "PyTypeObject": "PY_Singleton_Type",
                                "array_size": "1",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Singleton",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_shadow_&",
                                "stmt1": "py_function_shadow_&",
                                "value_var": "SHValue_rv"
                            }
                        }
                    }
                ],
                "name": "Singleton",
                "options": {
                    "wrap_lua": false
                },
                "parse_keyword": "class",
                "scope": "classes::Singleton::",
                "typemap_name": "classes::Singleton",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapSingleton.h",
                    "C_impl_filename": "wrapSingleton.cpp",
                    "C_name_scope": "Singleton_",
                    "C_type_name": "CLA_Singleton",
                    "F_derived_name": "singleton",
                    "F_name_scope": "singleton_",
                    "PY_PyObject": "PY_Singleton",
                    "PY_PyTypeObject": "PY_Singleton_Type",
                    "PY_capsule_name": "PY_Singleton_capsule_name",
                    "PY_from_object_func": "PP_Singleton_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Singleton_to_Object",
                    "PY_to_object_idtor_func": "PP_Singleton_to_Object_idtor",
                    "PY_type_filename": "pySingletontype.cpp",
                    "class_scope": "Singleton::",
                    "cxx_class": "Singleton",
                    "cxx_type": "Singleton",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "file_scope": "Singleton",
                    "hnamefunc0": "capsule_data_helper"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "23 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor"
                            },
                            "metaattrs": {
                                "intent": "ctor"
                            },
                            "params": [],
                            "specifier": [
                                "Shape"
                            ],
                            "typemap_name": "classes::Shape"
                        },
                        "decl": "Shape()",
                        "declgen": "Shape(void)",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Shape_ctor",
                            "C_prototype": "CLA_Shape * SHadow_rv",
                            "C_return_type": "CLA_Shape *",
                            "F_C_arguments": "SHT_crv",
                            "F_C_call": "c_shape_ctor",
                            "F_C_name": "c_shape_ctor",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_name_function": "ctor",
                            "F_name_generic": "shape",
                            "F_name_impl": "shape_ctor",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "ctor",
                            "LUA_name_impl": "l_Shape_ctor",
                            "PY_name_impl": "PY_Shape_tp_init",
                            "PY_type_impl": "PY_Shape_tp_init",
                            "PY_type_method": "tp_init",
                            "cxx_rv_decl": "classes::Shape SHCXX_rv",
                            "function_name": "ctor",
                            "underscore_name": "ctor"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Shape",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "classes::Shape",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "2",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_ctor_shadow_scalar",
                                "stmt1": "c_ctor"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Shape",
                                "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(shape)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_ctor",
                                "stmt1": "f_ctor",
                                "stmtc0": "c_ctor",
                                "stmtc1": "c_ctor"
                            },
                            "fmtl": {
                                "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_var": "SHCXX_rv",
                                "stmt0": "lua_ctor_scalar",
                                "stmt1": "lua_ctor"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PY_to_object_idtor_func": "PP_Shape_to_Object_idtor",
                                "PyObject": "PY_Shape",
                                "PyTypeObject": "PY_Shape_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Shape",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_default",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv",
                                "vargs": "SHCXX_rv"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "24 ****************************************",
                        "ast": {
                            "declarator": {
                                "name": "get_ivar",
                                "pointer": []
                            },
                            "func_const": true,
                            "metaattrs": {
                                "intent": "function"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int get_ivar() const",
                        "declgen": "int get_ivar(void) const",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Shape_get_ivar",
                            "C_prototype": "const CLA_Shape * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_shape_get_ivar",
                            "F_C_name": "c_shape_get_ivar",
                            "F_C_pure_clause": "pure ",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_ivar",
                            "F_name_generic": "get_ivar",
                            "F_name_impl": "shape_get_ivar",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "get_ivar",
                            "LUA_name_impl": "l_Shape_get_ivar",
                            "PY_name_impl": "PY_get_ivar",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "get_ivar",
                            "shadow_var": "SHadow_self",
                            "underscore_name": "get_ivar"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHC_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_function_native_scalar",
                                "stmt1": "c_default"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_function_native_scalar",
                                "stmt1": "f_default",
                                "stmtc0": "c_function_native_scalar",
                                "stmtc1": "c_default"
                            },
                            "fmtl": {
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv",
                                "push_arg": "SHCXX_rv",
                                "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                "stmt0": "lua_function_native_scalar",
                                "stmt1": "lua_function_native_scalar"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "int",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_function_native_scalar",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv"
                            }
                        }
                    }
                ],
                "name": "Shape",
                "options": {},
                "parse_keyword": "class",
                "scope": "classes::Shape::",
                "typemap_name": "classes::Shape",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapShape.h",
                    "C_impl_filename": "wrapShape.cpp",
                    "C_name_scope": "Shape_",
                    "C_type_name": "CLA_Shape",
                    "F_derived_name": "shape",
                    "F_name_scope": "shape_",
                    "LUA_class_reg": "l_Shape_Reg",
                    "LUA_ctor_name": "Shape",
                    "LUA_metadata": "Shape.metatable",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Shape_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Shape",
                    "PY_PyTypeObject": "PY_Shape_Type",
                    "PY_capsule_name": "PY_Shape_capsule_name",
                    "PY_from_object_func": "PP_Shape_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Shape_to_Object",
                    "PY_to_object_idtor_func": "PP_Shape_to_Object_idtor",
                    "PY_type_filename": "pyShapetype.cpp",
                    "class_scope": "Shape::",
                    "cxx_class": "Shape",
                    "cxx_type": "Shape",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "file_scope": "Shape",
                    "hnamefunc0": "capsule_data_helper"
                }
            },
            {
                "<CLASS>": "****************************************",
                "baseclass": [
                    [
                        "public",
                        "Shape",
                        "classes::Shape"
                    ]
                ],
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "25 ****************************************",
                        "_overloaded": true,
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor"
                            },
                            "metaattrs": {
                                "intent": "ctor"
                            },
                            "params": [],
                            "specifier": [
                                "Circle"
                            ],
                            "typemap_name": "classes::Circle"
                        },
                        "decl": "Circle()",
                        "declgen": "Circle(void)",
                        "options": {
                            "F_create_generic": true
                        },
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "C_name": "CLA_Circle_ctor",
                            "C_prototype": "CLA_Circle * SHadow_rv",
                            "C_return_type": "CLA_Circle *",
                            "F_C_arguments": "SHT_crv",
                            "F_C_call": "c_circle_ctor",
                            "F_C_name": "c_circle_ctor",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_C_var": "SHT_crv",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_name_function": "ctor",
                            "F_name_generic": "circle",
                            "F_name_impl": "circle_ctor",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "ctor",
                            "LUA_name_impl": "l_Circle_ctor",
                            "PY_name_impl": "PY_Circle_tp_init",
                            "PY_type_impl": "PY_Circle_tp_init",
                            "PY_type_method": "tp_init",
                            "cxx_rv_decl": "classes::Circle SHCXX_rv",
                            "function_name": "ctor",
                            "underscore_name": "ctor"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "CLA_Circle",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "classes::Circle",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "3",
                                "sh_type": "SH_TYPE_OTHER",
                                "shadow_var": "SHadow_rv",
                                "stmt0": "c_ctor_shadow_scalar",
                                "stmt1": "c_ctor"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "classes::Circle",
                                "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                                "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                                "f_intent": "OUT",
                                "f_type": "type(circle)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_ctor",
                                "stmt1": "f_ctor",
                                "stmtc0": "c_ctor",
                                "stmtc1": "c_ctor"
                            },
                            "fmtl": {
                                "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_var": "SHCXX_rv",
                                "stmt0": "lua_ctor_scalar",
                                "stmt1": "lua_ctor"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PY_to_object_idtor_func": "PP_Circle_to_Object_idtor",
                                "PyObject": "PY_Circle",
                                "PyTypeObject": "PY_Circle_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "ctor_expr": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                "cxx_type": "classes::Circle",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_default",
                                "stmt1": "py_default",
                                "value_var": "SHValue_rv",
                                "vargs": "SHCXX_rv"
                            }
                        }
                    }
                ],
                "name": "Circle",
                "options": {},
                "parse_keyword": "class",
                "scope": "classes::Circle::",
                "typemap_name": "classes::Circle",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCircle.h",
                    "C_impl_filename": "wrapCircle.cpp",
                    "C_name_scope": "Circle_",
                    "C_type_name": "CLA_Circle",
                    "F_derived_member_base": "shape",
                    "F_derived_name": "circle",
                    "F_name_scope": "circle_",
                    "LUA_class_reg": "l_Circle_Reg",
                    "LUA_ctor_name": "Circle",
                    "LUA_metadata": "Circle.metatable",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Circle_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Circle",
                    "PY_PyTypeObject": "PY_Circle_Type",
                    "PY_PyTypeObject_base": "PY_Shape_Type",
                    "PY_capsule_name": "PY_Circle_capsule_name",
                    "PY_from_object_func": "PP_Circle_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Circle_to_Object",
                    "PY_to_object_idtor_func": "PP_Circle_to_Object_idtor",
                    "PY_type_filename": "pyCircletype.cpp",
                    "class_scope": "Circle::",
                    "cxx_class": "Circle",
                    "cxx_type": "Circle",
                    "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                    "file_scope": "Circle",
                    "hnamefunc0": "capsule_data_helper"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "classes.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "26 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "directionFunc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Class1::DIRECTION"
                            ],
                            "typemap_name": "classes::Class1::DIRECTION"
                        }
                    ],
                    "specifier": [
                        "Class1::DIRECTION"
                    ],
                    "typemap_name": "classes::Class1::DIRECTION"
                },
                "decl": "Class1::DIRECTION directionFunc(Class1::DIRECTION arg);",
                "declgen": "Class1::DIRECTION directionFunc(Class1::DIRECTION arg +value)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "classes::Class1::DIRECTION SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "static_cast<classes::Class1::DIRECTION>(lua_tointeger(L, 1))",
                            "stmt0": "lua_in_native_scalar",
                            "stmt1": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "classes::Class1::DIRECTION SH_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "classes::Class1::DIRECTION",
                            "cxx_val": "static_cast<classes::Class1::DIRECTION>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "CLA_direction_func",
                    "C_prototype": "int arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_direction_func",
                    "F_C_name": "direction_func",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "direction_func",
                    "F_name_generic": "direction_func",
                    "F_name_impl": "direction_func",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "directionFunc",
                    "LUA_name_impl": "l_direction_func",
                    "PY_name_impl": "PY_directionFunc",
                    "cxx_rv_decl": "classes::Class1::DIRECTION SHCXX_rv",
                    "function_name": "directionFunc",
                    "underscore_name": "direction_func"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "classes::Class1::DIRECTION",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "classes::Class1::DIRECTION",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_default",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "static_cast<int>(SHCXX_rv)",
                        "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                        "stmt0": "lua_function_native_scalar",
                        "stmt1": "lua_function_native_scalar"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "classes::Class1::DIRECTION",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "27 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passClassByValue",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passClassByValue(Class1 arg)",
                "declgen": "void passClassByValue(Class1 arg +value)",
                "doxygen": {
                    "brief": "Pass arguments to a function."
                },
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_in_shadow_scalar",
                            "stmt1": "c_in_shadow"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_intent": "IN",
                            "f_type": "type(class1)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_shadow_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_shadow_scalar",
                            "stmtc1": "c_in_shadow"
                        },
                        "fmtpy": {
                            "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Class1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_shadow_scalar",
                            "stmt1": "py_in_shadow_scalar",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "CLA_pass_class_by_value",
                    "C_prototype": "CLA_Class1 * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_pass_class_by_value",
                    "F_C_name": "c_pass_class_by_value",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg%cxxmem",
                    "F_arguments": "arg",
                    "F_name_function": "pass_class_by_value",
                    "F_name_generic": "pass_class_by_value",
                    "F_name_impl": "pass_class_by_value",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passClassByValue",
                    "function_name": "passClassByValue",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "pass_class_by_value"
                }
            },
            {
                "<FUNCTION>": "28 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "useclass",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "classes::Class1"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int useclass(const Class1 *arg)",
                "declgen": "int useclass(const Class1 * arg)",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_arg)",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_in_shadow_*",
                            "stmt1": "c_in_shadow"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                            "f_intent": "IN",
                            "f_type": "type(class1)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_shadow_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_shadow_*",
                            "stmtc1": "c_in_shadow"
                        },
                        "fmtpy": {
                            "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "CLA_Class1",
                            "c_var": "arg",
                            "ctor_expr": "*arg",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(arg)",
                            "cxx_type": "classes::Class1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_object": "PY_Class1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_shadow_*",
                            "stmt1": "py_in_shadow_*",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "CLA_useclass",
                    "C_prototype": "CLA_Class1 * arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_useclass",
                    "F_C_name": "c_useclass",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg%cxxmem",
                    "F_arguments": "arg",
                    "F_name_function": "useclass",
                    "F_name_generic": "useclass",
                    "F_name_impl": "useclass",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_useclass",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "useclass",
                    "underscore_name": "useclass"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_default",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "29 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getclass2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "const Class1 *getclass2()",
                "declgen": "const Class1 * getclass2(void)",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "CLA_getclass2",
                    "C_prototype": "CLA_Class1 * SHadow_rv",
                    "C_return_type": "CLA_Class1 *",
                    "F_C_arguments": "SHT_crv",
                    "F_C_call": "c_getclass2",
                    "F_C_name": "c_getclass2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_name_function": "getclass2",
                    "F_name_generic": "getclass2",
                    "F_name_impl": "getclass2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const classes::Class1 * SHCXX_rv",
                    "function_name": "getclass2",
                    "underscore_name": "getclass2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "CLA_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(SHCXX_rv)",
                        "cxx_type": "classes::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_shadow_*",
                        "stmt1": "c_function_shadow"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "classes::Class1",
                        "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                        "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(class1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_*",
                        "stmt1": "f_function_shadow",
                        "stmtc0": "c_function_shadow_*",
                        "stmtc1": "c_function_shadow"
                    }
                }
            },
            {
                "<FUNCTION>": "30 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getclass3",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "Class1 *getclass3()",
                "declgen": "Class1 * getclass3(void)",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "CLA_getclass3",
                    "C_prototype": "CLA_Class1 * SHadow_rv",
                    "C_return_type": "CLA_Class1 *",
                    "F_C_arguments": "SHT_crv",
                    "F_C_call": "c_getclass3",
                    "F_C_name": "c_getclass3",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_name_function": "getclass3",
                    "F_name_generic": "getclass3",
                    "F_name_impl": "getclass3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getclass3",
                    "cxx_rv_decl": "classes::Class1 * SHCXX_rv",
                    "function_name": "getclass3",
                    "underscore_name": "getclass3"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "CLA_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "classes::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_shadow_*",
                        "stmt1": "c_function_shadow"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "classes::Class1",
                        "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                        "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(class1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_*",
                        "stmt1": "f_function_shadow",
                        "stmtc0": "c_function_shadow_*",
                        "stmtc1": "c_function_shadow"
                    },
                    "fmtpy": {
                        "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                        "PyObject": "PY_Class1",
                        "PyTypeObject": "PY_Class1_Type",
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "*SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "classes::Class1",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_shadow_*",
                        "stmt1": "py_function_shadow_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "31 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstClassReference",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "const Class1 &getConstClassReference()",
                "declgen": "const Class1 & getConstClassReference(void)",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "CLA_get_const_class_reference",
                    "C_prototype": "CLA_Class1 * SHadow_rv",
                    "C_return_type": "CLA_Class1 *",
                    "F_C_arguments": "SHT_crv",
                    "F_C_call": "c_get_const_class_reference",
                    "F_C_name": "c_get_const_class_reference",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_name_function": "get_const_class_reference",
                    "F_name_generic": "get_const_class_reference",
                    "F_name_impl": "get_const_class_reference",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const classes::Class1 & SHCXX_rv",
                    "function_name": "getConstClassReference",
                    "underscore_name": "get_const_class_reference"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "CLA_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<classes::Class1 *>\t(&SHCXX_rv)",
                        "cxx_type": "classes::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_shadow_&",
                        "stmt1": "c_function_shadow"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "classes::Class1",
                        "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                        "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(class1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_&",
                        "stmt1": "f_function_shadow",
                        "stmtc0": "c_function_shadow_&",
                        "stmtc1": "c_function_shadow"
                    }
                }
            },
            {
                "<FUNCTION>": "32 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getClassReference",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "Class1 &getClassReference()",
                "declgen": "Class1 & getClassReference(void)",
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "CLA_get_class_reference",
                    "C_prototype": "CLA_Class1 * SHadow_rv",
                    "C_return_type": "CLA_Class1 *",
                    "F_C_arguments": "SHT_crv",
                    "F_C_call": "c_get_class_reference",
                    "F_C_name": "c_get_class_reference",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_name_function": "get_class_reference",
                    "F_name_generic": "get_class_reference",
                    "F_name_impl": "get_class_reference",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getClassReference",
                    "cxx_rv_decl": "classes::Class1 & SHCXX_rv",
                    "function_name": "getClassReference",
                    "underscore_name": "get_class_reference"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "CLA_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "classes::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_shadow_&",
                        "stmt1": "c_function_shadow"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "classes::Class1",
                        "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                        "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(class1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_&",
                        "stmt1": "f_function_shadow",
                        "stmtc0": "c_function_shadow_&",
                        "stmtc1": "c_function_shadow"
                    },
                    "fmtpy": {
                        "PY_to_object_idtor_func": "PP_Class1_to_Object_idtor",
                        "PyObject": "PY_Class1",
                        "PyTypeObject": "PY_Class1_Type",
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "classes::Class1",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_shadow_&",
                        "stmt1": "py_function_shadow_&",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "33 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "getClassCopy",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "classes::Class1"
                },
                "decl": "Class1 getClassCopy(int flag)",
                "declgen": "Class1 getClassCopy(int flag +value)",
                "doxygen": {
                    "brief": "Return Class1 instance by value, uses copy constructor"
                },
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&flag",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_flag",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "flag",
                            "F_pointer": "SHPTR_flag",
                            "c_var": "flag",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "flag",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "flag",
                    "C_name": "CLA_get_class_copy",
                    "C_prototype": "int flag,\t CLA_Class1 * SHadow_rv",
                    "C_return_type": "CLA_Class1 *",
                    "F_C_arguments": "flag,\t SHT_crv",
                    "F_C_call": "c_get_class_copy",
                    "F_C_name": "c_get_class_copy",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "flag,\t SHT_rv%cxxmem",
                    "F_arguments": "flag",
                    "F_name_function": "get_class_copy",
                    "F_name_generic": "get_class_copy",
                    "F_name_impl": "get_class_copy",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getClassCopy",
                    "underscore_name": "get_class_copy"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "CLA_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "classes::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "1",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_shadow_scalar",
                        "stmt1": "c_function_shadow_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "classes::Class1",
                        "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
                        "f_capsule_data_type": "CLA_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(class1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_scalar",
                        "stmt1": "f_function_shadow",
                        "stmtc0": "c_function_shadow_scalar",
                        "stmtc1": "c_function_shadow_scalar"
                    }
                }
            },
            {
                "<FUNCTION>": "34 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "set_global_flag",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void set_global_flag(int arg)",
                "declgen": "void set_global_flag(int arg +value)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt0": "lua_in_native_scalar",
                            "stmt1": "lua_in_native_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "CLA_set_global_flag",
                    "C_prototype": "int arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_set_global_flag",
                    "F_C_name": "set_global_flag",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "set_global_flag",
                    "F_name_generic": "set_global_flag",
                    "F_name_impl": "set_global_flag",
                    "F_subprogram": "subroutine",
                    "LUA_name": "set_global_flag",
                    "LUA_name_impl": "l_set_global_flag",
                    "PY_name_impl": "PY_set_global_flag",
                    "function_name": "set_global_flag",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "set_global_flag"
                },
                "zz_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "35 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "get_global_flag",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int get_global_flag()",
                "declgen": "int get_global_flag(void)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "CLA_get_global_flag",
                    "C_prototype": "void",
                    "C_return_type": "int",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_global_flag",
                    "F_C_name": "get_global_flag",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_function": "get_global_flag",
                    "F_name_generic": "get_global_flag",
                    "F_name_impl": "get_global_flag",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "get_global_flag",
                    "LUA_name_impl": "l_get_global_flag",
                    "PY_name_impl": "PY_get_global_flag",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "get_global_flag",
                    "underscore_name": "get_global_flag"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_default",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv",
                        "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                        "stmt0": "lua_function_native_scalar",
                        "stmt1": "lua_function_native_scalar"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "36 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "37",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "const std::string & LastFunctionCalled(void) +len(30)",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "CLA_last_function_called",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_last_function_called_bufferify",
                    "F_C_name": "c_last_function_called",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "last_function_called",
                    "F_name_generic": "last_function_called",
                    "F_name_impl": "last_function_called",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "LastFunctionCalled",
                    "LUA_name_impl": "l_last_function_called",
                    "PY_name_impl": "PY_LastFunctionCalled",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "underscore_name": "last_function_called"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_string_&_copy",
                        "stmt1": "c_function_string_&"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_len": "30",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_&_buf_copy",
                        "stmt1": "f_function_string_&_buf",
                        "stmtc0": "c_function_string_&_buf_copy",
                        "stmtc1": "c_function_string_&_buf"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv.c_str()",
                        "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                        "stmt0": "lua_function_string_&",
                        "stmt1": "lua_function_string_&"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_&",
                        "stmt1": "py_function_string_&",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "37 ****************************************",
                "_PTR_C_CXX_index": "36",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "const std::string & LastFunctionCalled(void) +len(30)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "CLA_last_function_called_bufferify",
                    "C_prototype": "char *SHC_rv,\t int SHC_rv_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv,\t SHT_rv_temp0",
                    "F_C_name": "c_last_function_called_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "function_suffix": "_bufferify",
                    "underscore_name": "last_function_called"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_function_string_&_buf_copy",
                        "stmt1": "c_function_string_&_buf",
                        "temp0": "SHC_rv_temp0"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)",
                        "temp0": "SHT_rv_temp0"
                    }
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "classes"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "lua": true,
            "python": true
        }
    },
    "types": {
        "classes::Circle": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Circle",
            "PY_PyTypeObject": "PY_Circle_Type",
            "PY_from_object": "PP_Circle_from_Object",
            "PY_to_object": "PP_Circle_to_Object",
            "PY_to_object_idtor": "PP_Circle_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Circle *>\t({c_var}->addr)",
            "c_type": "CLA_Circle",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Circle",
            "f_c_module": {
                "--import--": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
            "f_c_type": "type(CLA_SHROUD_capsule_data)",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(circle)",
            "f_derived_type": "circle",
            "f_module": {
                "classes_mod": [
                    "circle"
                ]
            },
            "f_module_line": "classes_mod:circle",
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(circle)",
            "flat_name": "classes_Circle",
            "forward": "classes::Circle",
            "idtor": "3",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Class1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Class1",
            "PY_PyTypeObject": "PY_Class1_Type",
            "PY_from_object": "PP_Class1_from_Object",
            "PY_to_object": "PP_Class1_to_Object",
            "PY_to_object_idtor": "PP_Class1_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Class1 *>\t({c_var}->addr)",
            "c_type": "CLA_Class1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Class1",
            "f_c_module": {
                "--import--": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
            "f_c_type": "type(CLA_SHROUD_capsule_data)",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(class1)",
            "f_derived_type": "class1",
            "f_module": {
                "classes_mod": [
                    "class1"
                ]
            },
            "f_module_line": "classes_mod:class1",
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(class1)",
            "flat_name": "classes_Class1",
            "forward": "classes::Class1",
            "idtor": "1",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Class2": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Class2",
            "PY_PyTypeObject": "PY_Class2_Type",
            "PY_from_object": "PP_Class2_from_Object",
            "PY_to_object": "PP_Class2_to_Object",
            "PY_to_object_idtor": "PP_Class2_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Class2 *>\t({c_var}->addr)",
            "c_type": "CLA_Class2",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Class2",
            "f_c_module": {
                "--import--": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
            "f_c_type": "type(CLA_SHROUD_capsule_data)",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(class2)",
            "f_derived_type": "class2",
            "f_module": {
                "classes_mod": [
                    "class2"
                ]
            },
            "f_module_line": "classes_mod:class2",
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(class2)",
            "flat_name": "classes_Class2",
            "forward": "classes::Class2",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Shape": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Shape",
            "PY_PyTypeObject": "PY_Shape_Type",
            "PY_from_object": "PP_Shape_from_Object",
            "PY_to_object": "PP_Shape_to_Object",
            "PY_to_object_idtor": "PP_Shape_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Shape *>\t({c_var}->addr)",
            "c_type": "CLA_Shape",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Shape",
            "f_c_module": {
                "--import--": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
            "f_c_type": "type(CLA_SHROUD_capsule_data)",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(shape)",
            "f_derived_type": "shape",
            "f_module": {
                "classes_mod": [
                    "shape"
                ]
            },
            "f_module_line": "classes_mod:shape",
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(shape)",
            "flat_name": "classes_Shape",
            "forward": "classes::Shape",
            "idtor": "2",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        },
        "classes::Singleton": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Singleton",
            "PY_PyTypeObject": "PY_Singleton_Type",
            "PY_from_object": "PP_Singleton_from_Object",
            "PY_to_object": "PP_Singleton_to_Object",
            "PY_to_object_idtor": "PP_Singleton_to_Object_idtor",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}classes::Singleton *>\t({c_var}->addr)",
            "c_type": "CLA_Singleton",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "classes::Singleton",
            "f_c_module": {
                "--import--": [
                    "CLA_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:CLA_SHROUD_capsule_data",
            "f_c_type": "type(CLA_SHROUD_capsule_data)",
            "f_capsule_data_type": "CLA_SHROUD_capsule_data",
            "f_class": "class(singleton)",
            "f_derived_type": "singleton",
            "f_module": {
                "classes_mod": [
                    "singleton"
                ]
            },
            "f_module_line": "classes_mod:singleton",
            "f_module_name": "classes_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(singleton)",
            "flat_name": "classes_Singleton",
            "forward": "classes::Singleton",
            "impl_header": [
                "classes.hpp"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesclasses.h"
            ]
        }
    }
}