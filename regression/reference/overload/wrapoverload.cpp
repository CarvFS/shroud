// wrapoverload.cpp
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2022, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//

// cxx_header
#include "overload.hpp"
// shroud
#include "wrapoverload.h"

// splicer begin CXX_definitions
// splicer end CXX_definitions

extern "C" {

// splicer begin C_definitions
// splicer end C_definitions

// ----------------------------------------
// Function:  void apply
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  IndexType num_elems +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void OVE_apply_nelems(IndexType num_elems)
{
    // splicer begin function.apply_nelems
    apply(num_elems);
    // splicer end function.apply_nelems
}

// ----------------------------------------
// Function:  void apply
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  IndexType num_elems +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType offset=0 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void OVE_apply_nelems_offset(IndexType num_elems, IndexType offset)
{
    // splicer begin function.apply_nelems_offset
    apply(num_elems, offset);
    // splicer end function.apply_nelems_offset
}

// ----------------------------------------
// Function:  void apply
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  IndexType num_elems +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType offset=0 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType stride=1 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void OVE_apply_nelems_offset_stride(IndexType num_elems,
    IndexType offset, IndexType stride)
{
    // splicer begin function.apply_nelems_offset_stride
    apply(num_elems, offset, stride);
    // splicer end function.apply_nelems_offset_stride
}

// ----------------------------------------
// Function:  void apply
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  TypeID type +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType num_elems +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void OVE_apply_type_nelems(int type, IndexType num_elems)
{
    // splicer begin function.apply_type_nelems
    TypeID SHCXX_type = static_cast<TypeID>(type);
    apply(SHCXX_type, num_elems);
    // splicer end function.apply_type_nelems
}

// ----------------------------------------
// Function:  void apply
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  TypeID type +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType num_elems +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType offset=0 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void OVE_apply_type_nelems_offset(int type, IndexType num_elems,
    IndexType offset)
{
    // splicer begin function.apply_type_nelems_offset
    TypeID SHCXX_type = static_cast<TypeID>(type);
    apply(SHCXX_type, num_elems, offset);
    // splicer end function.apply_type_nelems_offset
}

// ----------------------------------------
// Function:  void apply
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  TypeID type +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType num_elems +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType offset=0 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
// ----------------------------------------
// Argument:  IndexType stride=1 +value
// Attrs:     +intent(in)
// Requested: c_in_native_scalar
// Match:     c_default
void OVE_apply_type_nelems_offset_stride(int type, IndexType num_elems,
    IndexType offset, IndexType stride)
{
    // splicer begin function.apply_type_nelems_offset_stride
    TypeID SHCXX_type = static_cast<TypeID>(type);
    apply(SHCXX_type, num_elems, offset, stride);
    // splicer end function.apply_type_nelems_offset_stride
}

}  // extern "C"
