! wrapfstruct.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfstruct.f
!! \brief Shroud generated wrapper for struct library
!<
! splicer begin file_top
! splicer end file_top
module struct_mod
    use iso_c_binding, only : C_CHAR, C_DOUBLE, C_INT, C_NULL_PTR, C_PTR
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    integer, parameter :: MAXNAME = 20
    ! splicer end module_top

    ! helper capsule_data_helper
    type, bind(C) :: STR_SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type STR_SHROUD_capsule_data


    ! start derived-type cstruct1
    type, bind(C) :: cstruct1
        integer(C_INT) :: ifield
        real(C_DOUBLE) :: dfield
    end type cstruct1
    ! end derived-type cstruct1


    type, bind(C) :: cstruct_ptr
        type(C_PTR) :: cfield
        type(C_PTR) :: const_dvalue
    end type cstruct_ptr


    type, bind(C) :: cstruct_list
        integer(C_INT) :: nitems
        type(C_PTR) :: ivalue
        type(C_PTR) :: dvalue
        type(C_PTR) :: svalue
    end type cstruct_list


    type, bind(C) :: cstruct_numpy
        integer(C_INT) :: nitems
        type(C_PTR) :: ivalue
        type(C_PTR) :: dvalue
    end type cstruct_numpy


    type, bind(C) :: arrays1
        character(kind=C_CHAR) :: name(20)
        integer(C_INT) :: count(10)
    end type arrays1

    ! start derived-type cstruct_as_class
    type cstruct_as_class
        type(STR_SHROUD_capsule_data) :: cxxmem
        ! splicer begin class.Cstruct_as_class.component_part
        ! splicer end class.Cstruct_as_class.component_part
    contains
        procedure :: get_x1 => cstruct_as_class_get_x1
        procedure :: set_x1 => cstruct_as_class_set_x1
        procedure :: get_y1 => cstruct_as_class_get_y1
        procedure :: set_y1 => cstruct_as_class_set_y1
        procedure :: sum => cstruct_as_class_sum
        ! splicer begin class.Cstruct_as_class.type_bound_procedure_part
        ! splicer end class.Cstruct_as_class.type_bound_procedure_part
    end type cstruct_as_class
    ! end derived-type cstruct_as_class

    ! start derived-type cstruct_as_subclass
    type, extends(cstruct_as_class) :: cstruct_as_subclass
        ! splicer begin class.Cstruct_as_subclass.component_part
        ! splicer end class.Cstruct_as_subclass.component_part
    contains
        procedure :: get_x1 => cstruct_as_subclass_get_x1
        procedure :: set_x1 => cstruct_as_subclass_set_x1
        procedure :: get_y1 => cstruct_as_subclass_get_y1
        procedure :: set_y1 => cstruct_as_subclass_set_y1
        procedure :: get_z1 => cstruct_as_subclass_get_z1
        procedure :: set_z1 => cstruct_as_subclass_set_z1
        ! splicer begin class.Cstruct_as_subclass.type_bound_procedure_part
        ! splicer end class.Cstruct_as_subclass.type_bound_procedure_part
    end type cstruct_as_subclass
    ! end derived-type cstruct_as_subclass

    interface operator (.eq.)
        module procedure cstruct_as_class_eq
        module procedure cstruct_as_subclass_eq
    end interface

    interface operator (.ne.)
        module procedure cstruct_as_class_ne
        module procedure cstruct_as_subclass_ne
    end interface

    interface

        ! ----------------------------------------
        ! Function:  int getX1
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! start c_cstruct_as_class_get_x1
        function c_cstruct_as_class_get_x1(self) &
                result(SHT_rv) &
                bind(C, name="STR_Cstruct_as_class_get_x1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_cstruct_as_class_get_x1
        ! end c_cstruct_as_class_get_x1

        ! ----------------------------------------
        ! Function:  void setX1
        ! Requested: c_void_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int val +intent(in)+value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! start c_cstruct_as_class_set_x1
        subroutine c_cstruct_as_class_set_x1(self, val) &
                bind(C, name="STR_Cstruct_as_class_set_x1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: val
        end subroutine c_cstruct_as_class_set_x1
        ! end c_cstruct_as_class_set_x1

        ! ----------------------------------------
        ! Function:  int getY1
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! start c_cstruct_as_class_get_y1
        function c_cstruct_as_class_get_y1(self) &
                result(SHT_rv) &
                bind(C, name="STR_Cstruct_as_class_get_y1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_cstruct_as_class_get_y1
        ! end c_cstruct_as_class_get_y1

        ! ----------------------------------------
        ! Function:  void setY1
        ! Requested: c_void_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int val +intent(in)+value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! start c_cstruct_as_class_set_y1
        subroutine c_cstruct_as_class_set_y1(self, val) &
                bind(C, name="STR_Cstruct_as_class_set_y1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: val
        end subroutine c_cstruct_as_class_set_y1
        ! end c_cstruct_as_class_set_y1

        ! splicer begin class.Cstruct_as_class.additional_interfaces
        ! splicer end class.Cstruct_as_class.additional_interfaces

        ! ----------------------------------------
        ! Function:  int getX1
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! start c_cstruct_as_subclass_get_x1
        function c_cstruct_as_subclass_get_x1(self) &
                result(SHT_rv) &
                bind(C, name="STR_Cstruct_as_subclass_get_x1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_cstruct_as_subclass_get_x1
        ! end c_cstruct_as_subclass_get_x1

        ! ----------------------------------------
        ! Function:  void setX1
        ! Requested: c_void_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int val +intent(in)+value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! start c_cstruct_as_subclass_set_x1
        subroutine c_cstruct_as_subclass_set_x1(self, val) &
                bind(C, name="STR_Cstruct_as_subclass_set_x1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: val
        end subroutine c_cstruct_as_subclass_set_x1
        ! end c_cstruct_as_subclass_set_x1

        ! ----------------------------------------
        ! Function:  int getY1
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! start c_cstruct_as_subclass_get_y1
        function c_cstruct_as_subclass_get_y1(self) &
                result(SHT_rv) &
                bind(C, name="STR_Cstruct_as_subclass_get_y1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_cstruct_as_subclass_get_y1
        ! end c_cstruct_as_subclass_get_y1

        ! ----------------------------------------
        ! Function:  void setY1
        ! Requested: c_void_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int val +intent(in)+value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! start c_cstruct_as_subclass_set_y1
        subroutine c_cstruct_as_subclass_set_y1(self, val) &
                bind(C, name="STR_Cstruct_as_subclass_set_y1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: val
        end subroutine c_cstruct_as_subclass_set_y1
        ! end c_cstruct_as_subclass_set_y1

        ! ----------------------------------------
        ! Function:  int getZ1
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! start c_cstruct_as_subclass_get_z1
        function c_cstruct_as_subclass_get_z1(self) &
                result(SHT_rv) &
                bind(C, name="STR_Cstruct_as_subclass_get_z1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_cstruct_as_subclass_get_z1
        ! end c_cstruct_as_subclass_get_z1

        ! ----------------------------------------
        ! Function:  void setZ1
        ! Requested: c_void_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int val +intent(in)+value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! start c_cstruct_as_subclass_set_z1
        subroutine c_cstruct_as_subclass_set_z1(self, val) &
                bind(C, name="STR_Cstruct_as_subclass_set_z1")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: val
        end subroutine c_cstruct_as_subclass_set_z1
        ! end c_cstruct_as_subclass_set_z1

        ! splicer begin class.Cstruct_as_subclass.additional_interfaces
        ! splicer end class.Cstruct_as_subclass.additional_interfaces

        ! ----------------------------------------
        ! Function:  int passStructByValue
        ! Attrs:     +intent(result)
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  Cstruct1 arg +value
        ! Attrs:     +intent(in)
        ! Requested: c_struct_scalar_in
        ! Match:     c_struct
        ! start pass_struct_by_value
        function pass_struct_by_value(arg) &
                result(SHT_rv) &
                bind(C, name="STR_pass_struct_by_value")
            use iso_c_binding, only : C_INT
            import :: cstruct1
            implicit none
            type(cstruct1), value, intent(IN) :: arg
            integer(C_INT) :: SHT_rv
        end function pass_struct_by_value
        ! end pass_struct_by_value

        ! ----------------------------------------
        ! Function:  int passStruct1
        ! Attrs:     +intent(result)
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  const Cstruct1 * arg
        ! Attrs:     +intent(in)
        ! Requested: c_struct_*_in
        ! Match:     c_struct
        ! start pass_struct1
        function pass_struct1(arg) &
                result(SHT_rv) &
                bind(C, name="STR_pass_struct1")
            use iso_c_binding, only : C_INT
            import :: cstruct1
            implicit none
            type(cstruct1), intent(IN) :: arg
            integer(C_INT) :: SHT_rv
        end function pass_struct1
        ! end pass_struct1

        ! ----------------------------------------
        ! Function:  int passStruct2
        ! Attrs:     +intent(result)
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  const Cstruct1 * s1
        ! Attrs:     +intent(in)
        ! Requested: c_struct_*_in
        ! Match:     c_struct
        ! ----------------------------------------
        ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)
        ! Attrs:     +intent(out)
        ! Requested: c_char_*_out
        ! Match:     c_default
        function c_pass_struct2(s1, outbuf) &
                result(SHT_rv) &
                bind(C, name="STR_pass_struct2")
            use iso_c_binding, only : C_CHAR, C_INT
            import :: cstruct1
            implicit none
            type(cstruct1), intent(IN) :: s1
            character(kind=C_CHAR), intent(OUT) :: outbuf(*)
            integer(C_INT) :: SHT_rv
        end function c_pass_struct2

        ! ----------------------------------------
        ! Function:  int passStruct2
        ! Attrs:     +intent(result)
        ! Requested: c_native_scalar_result_buf
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  const Cstruct1 * s1
        ! Attrs:     +intent(in)
        ! Requested: c_struct_*_in
        ! Match:     c_struct
        ! ----------------------------------------
        ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)+len(Noutbuf)
        ! Attrs:     +intent(out)
        ! Exact:     c_char_*_out_buf
        function c_pass_struct2_bufferify(s1, outbuf, Noutbuf) &
                result(SHT_rv) &
                bind(C, name="STR_pass_struct2_bufferify")
            use iso_c_binding, only : C_CHAR, C_INT
            import :: cstruct1
            implicit none
            type(cstruct1), intent(IN) :: s1
            character(kind=C_CHAR), intent(OUT) :: outbuf(*)
            integer(C_INT), value, intent(IN) :: Noutbuf
            integer(C_INT) :: SHT_rv
        end function c_pass_struct2_bufferify

        ! ----------------------------------------
        ! Function:  int acceptStructInPtr
        ! Attrs:     +intent(result)
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  Cstruct1 * arg +intent(in)
        ! Attrs:     +intent(in)
        ! Requested: c_struct_*_in
        ! Match:     c_struct
        function accept_struct_in_ptr(arg) &
                result(SHT_rv) &
                bind(C, name="STR_accept_struct_in_ptr")
            use iso_c_binding, only : C_INT
            import :: cstruct1
            implicit none
            type(cstruct1), intent(IN) :: arg
            integer(C_INT) :: SHT_rv
        end function accept_struct_in_ptr

        ! ----------------------------------------
        ! Function:  void acceptStructOutPtr
        ! Requested: c_void_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  Cstruct1 * arg +intent(out)
        ! Attrs:     +intent(out)
        ! Requested: c_struct_*_out
        ! Match:     c_struct
        ! ----------------------------------------
        ! Argument:  int i +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  double d +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        subroutine accept_struct_out_ptr(arg, i, d) &
                bind(C, name="STR_accept_struct_out_ptr")
            use iso_c_binding, only : C_DOUBLE, C_INT
            import :: cstruct1
            implicit none
            type(cstruct1), intent(OUT) :: arg
            integer(C_INT), value, intent(IN) :: i
            real(C_DOUBLE), value, intent(IN) :: d
        end subroutine accept_struct_out_ptr

        ! ----------------------------------------
        ! Function:  void acceptStructInOutPtr
        ! Requested: c_void_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  Cstruct1 * arg +intent(inout)
        ! Attrs:     +intent(inout)
        ! Requested: c_struct_*_inout
        ! Match:     c_struct
        subroutine accept_struct_in_out_ptr(arg) &
                bind(C, name="STR_accept_struct_in_out_ptr")
            import :: cstruct1
            implicit none
            type(cstruct1), intent(INOUT) :: arg
        end subroutine accept_struct_in_out_ptr

        ! ----------------------------------------
        ! Function:  Cstruct1 returnStructByValue
        ! Attrs:     +intent(result)
        ! Requested: c_struct_scalar_result
        ! Match:     c_struct_result
        ! ----------------------------------------
        ! Argument:  int i +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  double d +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        function return_struct_by_value(i, d) &
                result(SHT_rv) &
                bind(C, name="STR_return_struct_by_value")
            use iso_c_binding, only : C_DOUBLE, C_INT
            import :: cstruct1
            implicit none
            integer(C_INT), value, intent(IN) :: i
            real(C_DOUBLE), value, intent(IN) :: d
            type(cstruct1) :: SHT_rv
        end function return_struct_by_value

        ! ----------------------------------------
        ! Function:  Cstruct1 * returnStructPtr1
        ! Attrs:     +deref(pointer)+intent(result)
        ! Requested: c_struct_*_result_pointer
        ! Match:     c_struct_*_result
        ! ----------------------------------------
        ! Argument:  int i +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  double d +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        function c_return_struct_ptr1(i, d) &
                result(SHT_rv) &
                bind(C, name="STR_return_struct_ptr1")
            use iso_c_binding, only : C_DOUBLE, C_INT, C_PTR
            implicit none
            integer(C_INT), value, intent(IN) :: i
            real(C_DOUBLE), value, intent(IN) :: d
            type(C_PTR) SHT_rv
        end function c_return_struct_ptr1

        ! ----------------------------------------
        ! Function:  Cstruct1 * returnStructPtr1 +context(DSHC_rv)
        ! Attrs:     +deref(pointer)+intent(result)
        ! Requested: c_struct_*_result_buf_pointer
        ! Match:     c_struct_*_result
        ! ----------------------------------------
        ! Argument:  int i +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  double d +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        function c_return_struct_ptr1_bufferify(i, d) &
                result(SHT_rv) &
                bind(C, name="STR_return_struct_ptr1_bufferify")
            use iso_c_binding, only : C_DOUBLE, C_INT, C_PTR
            implicit none
            integer(C_INT), value, intent(IN) :: i
            real(C_DOUBLE), value, intent(IN) :: d
            type(C_PTR) SHT_rv
        end function c_return_struct_ptr1_bufferify

        ! ----------------------------------------
        ! Function:  Cstruct1 * returnStructPtr2
        ! Attrs:     +deref(pointer)+intent(result)
        ! Requested: c_struct_*_result_pointer
        ! Match:     c_struct_*_result
        ! ----------------------------------------
        ! Argument:  int i +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  double d +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)
        ! Attrs:     +intent(out)
        ! Requested: c_char_*_out
        ! Match:     c_default
        function c_return_struct_ptr2(i, d, outbuf) &
                result(SHT_rv) &
                bind(C, name="STR_return_struct_ptr2")
            use iso_c_binding, only : C_CHAR, C_DOUBLE, C_INT, C_PTR
            implicit none
            integer(C_INT), value, intent(IN) :: i
            real(C_DOUBLE), value, intent(IN) :: d
            character(kind=C_CHAR), intent(OUT) :: outbuf(*)
            type(C_PTR) SHT_rv
        end function c_return_struct_ptr2

        ! ----------------------------------------
        ! Function:  Cstruct1 * returnStructPtr2 +context(DSHC_rv)
        ! Attrs:     +deref(pointer)+intent(result)
        ! Requested: c_struct_*_result_buf_pointer
        ! Match:     c_struct_*_result
        ! ----------------------------------------
        ! Argument:  int i +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  double d +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)+len(Noutbuf)
        ! Attrs:     +intent(out)
        ! Exact:     c_char_*_out_buf
        function c_return_struct_ptr2_bufferify(i, d, outbuf, Noutbuf) &
                result(SHT_rv) &
                bind(C, name="STR_return_struct_ptr2_bufferify")
            use iso_c_binding, only : C_CHAR, C_DOUBLE, C_INT, C_PTR
            implicit none
            integer(C_INT), value, intent(IN) :: i
            real(C_DOUBLE), value, intent(IN) :: d
            character(kind=C_CHAR), intent(OUT) :: outbuf(*)
            integer(C_INT), value, intent(IN) :: Noutbuf
            type(C_PTR) SHT_rv
        end function c_return_struct_ptr2_bufferify

        ! ----------------------------------------
        ! Function:  Cstruct_list * get_global_struct_list
        ! Attrs:     +deref(pointer)+intent(result)
        ! Requested: c_struct_*_result_pointer
        ! Match:     c_struct_*_result
        function c_get_global_struct_list() &
                result(SHT_rv) &
                bind(C, name="STR_get_global_struct_list")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_global_struct_list

        ! ----------------------------------------
        ! Function:  Cstruct_list * get_global_struct_list +context(DSHC_rv)
        ! Attrs:     +deref(pointer)+intent(result)
        ! Requested: c_struct_*_result_buf_pointer
        ! Match:     c_struct_*_result
        function c_get_global_struct_list_bufferify() &
                result(SHT_rv) &
                bind(C, name="STR_get_global_struct_list_bufferify")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_global_struct_list_bufferify

        ! ----------------------------------------
        ! Function:  Cstruct_as_class * Create_Cstruct_as_class
        ! Attrs:     +intent(result)
        ! Requested: c_shadow_*_result
        ! Match:     c_shadow_result
        ! start c_create__cstruct_as_class
        function c_create__cstruct_as_class(SHT_crv) &
                result(SHT_rv) &
                bind(C, name="STR_create__cstruct_as_class")
            use iso_c_binding, only : C_PTR
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_create__cstruct_as_class
        ! end c_create__cstruct_as_class

        ! ----------------------------------------
        ! Function:  Cstruct_as_class * Create_Cstruct_as_class_args
        ! Attrs:     +intent(result)
        ! Requested: c_shadow_*_result
        ! Match:     c_shadow_result
        ! ----------------------------------------
        ! Argument:  int x +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int y +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        function c_create__cstruct_as_class_args(x, y, SHT_crv) &
                result(SHT_rv) &
                bind(C, name="STR_create__cstruct_as_class_args")
            use iso_c_binding, only : C_INT, C_PTR
            import :: STR_SHROUD_capsule_data
            implicit none
            integer(C_INT), value, intent(IN) :: x
            integer(C_INT), value, intent(IN) :: y
            type(STR_SHROUD_capsule_data), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_create__cstruct_as_class_args

        ! ----------------------------------------
        ! Function:  int Cstruct_as_class_sum
        ! Attrs:     +intent(result)
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  const Cstruct_as_class * point +pass
        ! Attrs:     +intent(in)
        ! Requested: c_shadow_*_in
        ! Match:     c_shadow_in
        function c_cstruct_as_class_sum(point) &
                result(SHT_rv) &
                bind(C, name="STR_cstruct_as_class_sum")
            use iso_c_binding, only : C_INT
            import :: STR_SHROUD_capsule_data
            implicit none
            type(STR_SHROUD_capsule_data), intent(IN) :: point
            integer(C_INT) :: SHT_rv
        end function c_cstruct_as_class_sum

        ! ----------------------------------------
        ! Function:  Cstruct_as_subclass * Create_Cstruct_as_subclass_args
        ! Attrs:     +intent(result)
        ! Requested: c_shadow_*_result
        ! Match:     c_shadow_result
        ! ----------------------------------------
        ! Argument:  int x +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int y +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int z +value
        ! Attrs:     +intent(in)
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        function c_create__cstruct_as_subclass_args(x, y, z, SHT_crv) &
                result(SHT_rv) &
                bind(C, name="STR_create__cstruct_as_subclass_args")
            use iso_c_binding, only : C_INT, C_PTR
            import :: STR_SHROUD_capsule_data
            implicit none
            integer(C_INT), value, intent(IN) :: x
            integer(C_INT), value, intent(IN) :: y
            integer(C_INT), value, intent(IN) :: z
            type(STR_SHROUD_capsule_data), intent(OUT) :: SHT_crv
            type(C_PTR) SHT_rv
        end function c_create__cstruct_as_subclass_args

        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

    ! start generic interface Cstruct_as_class
    interface Cstruct_as_class
        module procedure create__cstruct_as_class
        module procedure create__cstruct_as_class_args
    end interface Cstruct_as_class
    ! end generic interface Cstruct_as_class

    interface Cstruct_as_subclass
        module procedure create__cstruct_as_subclass_args
    end interface Cstruct_as_subclass

contains

    ! ----------------------------------------
    ! Function:  int getX1
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start cstruct_as_class_get_x1
    function cstruct_as_class_get_x1(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(cstruct_as_class) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Cstruct_as_class.method.get_x1
        SHT_rv = c_cstruct_as_class_get_x1(obj%cxxmem)
        ! splicer end class.Cstruct_as_class.method.get_x1
    end function cstruct_as_class_get_x1
    ! end cstruct_as_class_get_x1

    ! ----------------------------------------
    ! Function:  void setX1
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int val +intent(in)+value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start cstruct_as_class_set_x1
    subroutine cstruct_as_class_set_x1(obj, val)
        use iso_c_binding, only : C_INT
        class(cstruct_as_class) :: obj
        integer(C_INT), value, intent(IN) :: val
        ! splicer begin class.Cstruct_as_class.method.set_x1
        call c_cstruct_as_class_set_x1(obj%cxxmem, val)
        ! splicer end class.Cstruct_as_class.method.set_x1
    end subroutine cstruct_as_class_set_x1
    ! end cstruct_as_class_set_x1

    ! ----------------------------------------
    ! Function:  int getY1
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start cstruct_as_class_get_y1
    function cstruct_as_class_get_y1(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(cstruct_as_class) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Cstruct_as_class.method.get_y1
        SHT_rv = c_cstruct_as_class_get_y1(obj%cxxmem)
        ! splicer end class.Cstruct_as_class.method.get_y1
    end function cstruct_as_class_get_y1
    ! end cstruct_as_class_get_y1

    ! ----------------------------------------
    ! Function:  void setY1
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int val +intent(in)+value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start cstruct_as_class_set_y1
    subroutine cstruct_as_class_set_y1(obj, val)
        use iso_c_binding, only : C_INT
        class(cstruct_as_class) :: obj
        integer(C_INT), value, intent(IN) :: val
        ! splicer begin class.Cstruct_as_class.method.set_y1
        call c_cstruct_as_class_set_y1(obj%cxxmem, val)
        ! splicer end class.Cstruct_as_class.method.set_y1
    end subroutine cstruct_as_class_set_y1
    ! end cstruct_as_class_set_y1

    ! splicer begin class.Cstruct_as_class.additional_functions
    ! splicer end class.Cstruct_as_class.additional_functions

    ! ----------------------------------------
    ! Function:  int getX1
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start cstruct_as_subclass_get_x1
    function cstruct_as_subclass_get_x1(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(cstruct_as_subclass) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Cstruct_as_subclass.method.get_x1
        SHT_rv = c_cstruct_as_subclass_get_x1(obj%cxxmem)
        ! splicer end class.Cstruct_as_subclass.method.get_x1
    end function cstruct_as_subclass_get_x1
    ! end cstruct_as_subclass_get_x1

    ! ----------------------------------------
    ! Function:  void setX1
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int val +intent(in)+value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start cstruct_as_subclass_set_x1
    subroutine cstruct_as_subclass_set_x1(obj, val)
        use iso_c_binding, only : C_INT
        class(cstruct_as_subclass) :: obj
        integer(C_INT), value, intent(IN) :: val
        ! splicer begin class.Cstruct_as_subclass.method.set_x1
        call c_cstruct_as_subclass_set_x1(obj%cxxmem, val)
        ! splicer end class.Cstruct_as_subclass.method.set_x1
    end subroutine cstruct_as_subclass_set_x1
    ! end cstruct_as_subclass_set_x1

    ! ----------------------------------------
    ! Function:  int getY1
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start cstruct_as_subclass_get_y1
    function cstruct_as_subclass_get_y1(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(cstruct_as_subclass) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Cstruct_as_subclass.method.get_y1
        SHT_rv = c_cstruct_as_subclass_get_y1(obj%cxxmem)
        ! splicer end class.Cstruct_as_subclass.method.get_y1
    end function cstruct_as_subclass_get_y1
    ! end cstruct_as_subclass_get_y1

    ! ----------------------------------------
    ! Function:  void setY1
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int val +intent(in)+value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start cstruct_as_subclass_set_y1
    subroutine cstruct_as_subclass_set_y1(obj, val)
        use iso_c_binding, only : C_INT
        class(cstruct_as_subclass) :: obj
        integer(C_INT), value, intent(IN) :: val
        ! splicer begin class.Cstruct_as_subclass.method.set_y1
        call c_cstruct_as_subclass_set_y1(obj%cxxmem, val)
        ! splicer end class.Cstruct_as_subclass.method.set_y1
    end subroutine cstruct_as_subclass_set_y1
    ! end cstruct_as_subclass_set_y1

    ! ----------------------------------------
    ! Function:  int getZ1
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! start cstruct_as_subclass_get_z1
    function cstruct_as_subclass_get_z1(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(cstruct_as_subclass) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.Cstruct_as_subclass.method.get_z1
        SHT_rv = c_cstruct_as_subclass_get_z1(obj%cxxmem)
        ! splicer end class.Cstruct_as_subclass.method.get_z1
    end function cstruct_as_subclass_get_z1
    ! end cstruct_as_subclass_get_z1

    ! ----------------------------------------
    ! Function:  void setZ1
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int val +intent(in)+value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! start cstruct_as_subclass_set_z1
    subroutine cstruct_as_subclass_set_z1(obj, val)
        use iso_c_binding, only : C_INT
        class(cstruct_as_subclass) :: obj
        integer(C_INT), value, intent(IN) :: val
        ! splicer begin class.Cstruct_as_subclass.method.set_z1
        call c_cstruct_as_subclass_set_z1(obj%cxxmem, val)
        ! splicer end class.Cstruct_as_subclass.method.set_z1
    end subroutine cstruct_as_subclass_set_z1
    ! end cstruct_as_subclass_set_z1

    ! splicer begin class.Cstruct_as_subclass.additional_functions
    ! splicer end class.Cstruct_as_subclass.additional_functions

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  int passStruct2
    ! Attrs:     +intent(result)
    ! Requested: f_native_scalar_result_buf
    ! Match:     f_default
    ! Attrs:     +intent(result)
    ! Requested: c_native_scalar_result_buf
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const Cstruct1 * s1
    ! Attrs:     +intent(in)
    ! Requested: f_struct_*_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_struct_*_in
    ! Match:     c_struct
    ! ----------------------------------------
    ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)
    ! Attrs:     +intent(out)
    ! Requested: f_char_*_out_buf
    ! Match:     f_default
    ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)+len(Noutbuf)
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_out_buf
    !>
    !! Pass name argument which will build a bufferify function.
    !<
    function pass_struct2(s1, outbuf) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        type(cstruct1), intent(IN) :: s1
        character(len=*), intent(OUT) :: outbuf
        integer(C_INT) :: SHT_rv
        ! splicer begin function.pass_struct2
        SHT_rv = c_pass_struct2_bufferify(s1, outbuf, &
            len(outbuf, kind=C_INT))
        ! splicer end function.pass_struct2
    end function pass_struct2

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  Cstruct1 * returnStructPtr1
    ! Attrs:     +deref(pointer)+intent(result)
    ! Exact:     f_struct_*_result_buf_pointer
    ! Function:  Cstruct1 * returnStructPtr1 +context(DSHC_rv)
    ! Attrs:     +deref(pointer)+intent(result)
    ! Requested: c_struct_*_result_buf_pointer
    ! Match:     c_struct_*_result
    ! ----------------------------------------
    ! Argument:  int i +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double d +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    !>
    !! \brief Return a pointer to a struct
    !!
    !! Does not generate a bufferify C wrapper.
    !<
    function return_struct_ptr1(i, d) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, C_INT, C_PTR, c_f_pointer
        integer(C_INT), value, intent(IN) :: i
        real(C_DOUBLE), value, intent(IN) :: d
        type(cstruct1), pointer :: SHT_rv
        ! splicer begin function.return_struct_ptr1
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_return_struct_ptr1_bufferify(i, d)
        call c_f_pointer(SHT_ptr, SHT_rv)
        ! splicer end function.return_struct_ptr1
    end function return_struct_ptr1

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  Cstruct1 * returnStructPtr2
    ! Attrs:     +deref(pointer)+intent(result)
    ! Exact:     f_struct_*_result_buf_pointer
    ! Function:  Cstruct1 * returnStructPtr2 +context(DSHC_rv)
    ! Attrs:     +deref(pointer)+intent(result)
    ! Requested: c_struct_*_result_buf_pointer
    ! Match:     c_struct_*_result
    ! ----------------------------------------
    ! Argument:  int i +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  double d +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)
    ! Attrs:     +intent(out)
    ! Requested: f_char_*_out_buf
    ! Match:     f_default
    ! Argument:  char * outbuf +charlen(LENOUTBUF)+intent(out)+len(Noutbuf)
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_out_buf
    !>
    !! \brief Return a pointer to a struct
    !!
    !! Generates a bufferify C wrapper function.
    !<
    function return_struct_ptr2(i, d, outbuf) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, C_INT, C_PTR, c_f_pointer
        integer(C_INT), value, intent(IN) :: i
        real(C_DOUBLE), value, intent(IN) :: d
        character(len=*), intent(OUT) :: outbuf
        type(cstruct1), pointer :: SHT_rv
        ! splicer begin function.return_struct_ptr2
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_return_struct_ptr2_bufferify(i, d, outbuf, &
            len(outbuf, kind=C_INT))
        call c_f_pointer(SHT_ptr, SHT_rv)
        ! splicer end function.return_struct_ptr2
    end function return_struct_ptr2

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  Cstruct_list * get_global_struct_list
    ! Attrs:     +deref(pointer)+intent(result)
    ! Exact:     f_struct_*_result_buf_pointer
    ! Function:  Cstruct_list * get_global_struct_list +context(DSHC_rv)
    ! Attrs:     +deref(pointer)+intent(result)
    ! Requested: c_struct_*_result_buf_pointer
    ! Match:     c_struct_*_result
    function get_global_struct_list() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR, c_f_pointer
        type(cstruct_list), pointer :: SHT_rv
        ! splicer begin function.get_global_struct_list
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_get_global_struct_list_bufferify()
        call c_f_pointer(SHT_ptr, SHT_rv)
        ! splicer end function.get_global_struct_list
    end function get_global_struct_list

    ! ----------------------------------------
    ! Function:  Cstruct_as_class * Create_Cstruct_as_class
    ! Attrs:     +intent(result)
    ! Requested: f_shadow_*_result
    ! Match:     f_shadow_result
    ! Attrs:     +intent(result)
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    ! start create__cstruct_as_class
    function create__cstruct_as_class() &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        type(cstruct_as_class) :: SHT_rv
        ! splicer begin function.create__cstruct_as_class
        type(C_PTR) :: SHT_prv
        SHT_prv = c_create__cstruct_as_class(SHT_rv%cxxmem)
        ! splicer end function.create__cstruct_as_class
    end function create__cstruct_as_class
    ! end create__cstruct_as_class

    ! ----------------------------------------
    ! Function:  Cstruct_as_class * Create_Cstruct_as_class_args
    ! Attrs:     +intent(result)
    ! Requested: f_shadow_*_result
    ! Match:     f_shadow_result
    ! Attrs:     +intent(result)
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    ! ----------------------------------------
    ! Argument:  int x +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int y +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    function create__cstruct_as_class_args(x, y) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR
        integer(C_INT), value, intent(IN) :: x
        integer(C_INT), value, intent(IN) :: y
        type(cstruct_as_class) :: SHT_rv
        ! splicer begin function.create__cstruct_as_class_args
        type(C_PTR) :: SHT_prv
        SHT_prv = c_create__cstruct_as_class_args(x, y, SHT_rv%cxxmem)
        ! splicer end function.create__cstruct_as_class_args
    end function create__cstruct_as_class_args

    ! ----------------------------------------
    ! Function:  int Cstruct_as_class_sum
    ! Attrs:     +intent(result)
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Attrs:     +intent(result)
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const Cstruct_as_class * point +pass
    ! Attrs:     +intent(in)
    ! Requested: f_shadow_*_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_shadow_*_in
    ! Match:     c_shadow_in
    function cstruct_as_class_sum(point) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(cstruct_as_class), intent(IN) :: point
        integer(C_INT) :: SHT_rv
        ! splicer begin function.sum
        SHT_rv = c_cstruct_as_class_sum(point%cxxmem)
        ! splicer end function.sum
    end function cstruct_as_class_sum

    ! ----------------------------------------
    ! Function:  Cstruct_as_subclass * Create_Cstruct_as_subclass_args
    ! Attrs:     +intent(result)
    ! Requested: f_shadow_*_result
    ! Match:     f_shadow_result
    ! Attrs:     +intent(result)
    ! Requested: c_shadow_*_result
    ! Match:     c_shadow_result
    ! ----------------------------------------
    ! Argument:  int x +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int y +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int z +value
    ! Attrs:     +intent(in)
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    function create__cstruct_as_subclass_args(x, y, z) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_PTR
        integer(C_INT), value, intent(IN) :: x
        integer(C_INT), value, intent(IN) :: y
        integer(C_INT), value, intent(IN) :: z
        type(cstruct_as_subclass) :: SHT_rv
        ! splicer begin function.create__cstruct_as_subclass_args
        type(C_PTR) :: SHT_prv
        SHT_prv = c_create__cstruct_as_subclass_args(x, y, z, &
            SHT_rv%cxxmem)
        ! splicer end function.create__cstruct_as_subclass_args
    end function create__cstruct_as_subclass_args

    ! splicer begin additional_functions
    ! splicer end additional_functions

    function cstruct_as_class_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(cstruct_as_class), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function cstruct_as_class_eq

    function cstruct_as_class_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(cstruct_as_class), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function cstruct_as_class_ne

    function cstruct_as_subclass_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(cstruct_as_subclass), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function cstruct_as_subclass_eq

    function cstruct_as_subclass_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(cstruct_as_subclass), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function cstruct_as_subclass_ne

end module struct_mod
