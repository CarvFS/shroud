Read yaml struct.yaml
Close struct_types.yaml
class Cstruct_as_class
C int getX1(void) 
C void setX1(int val +intent(in)+value) 
C int getY1(void) 
C void setY1(int val +intent(in)+value) 
Close wrapCstruct_as_class.h
Close wrapCstruct_as_class.cpp
class Cstruct_as_subclass
C int getX1(void) 
C void setX1(int val +intent(in)+value) 
C int getY1(void) 
C void setY1(int val +intent(in)+value) 
C int getZ1(void) 
C void setZ1(int val +intent(in)+value) 
Close wrapCstruct_as_subclass.h
Close wrapCstruct_as_subclass.cpp
struct Cstruct1
struct Cstruct_ptr
struct Cstruct_list
struct Cstruct_numpy
struct Arrays1
C int passStructByValue(Cstruct1 arg +value)  +intent(result)
C int passStruct1(const Cstruct1 * arg)  +intent(result)
C int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))  +intent(result)
C int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out)+len)  +intent(result)
C int acceptStructInPtr(Cstruct1 * arg +intent(in))  +intent(result)
C void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +value, double d +value) 
C void acceptStructInOutPtr(Cstruct1 * arg +intent(inout)) 
C Cstruct1 returnStructByValue(int i +value, double d +value)  +intent(result)
C Cstruct1 * returnStructPtr1(int i +value, double d +value)  +deref(pointer)+intent(result)
C Cstruct1 * returnStructPtr1(int i +value, double d +value)  +deref(pointer)+intent(result)
C Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))  +deref(pointer)+intent(result)
C Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out)+len)  +deref(pointer)+intent(result)
C Cstruct_list * get_global_struct_list(void)  +deref(pointer)+intent(result)
C Cstruct_list * get_global_struct_list(void)  +deref(pointer)+intent(result)
C Cstruct_as_class * Create_Cstruct_as_class(void)  +intent(result)
C Cstruct_as_class * Create_Cstruct_as_class_args(int x +value, int y +value)  +intent(result)
C int Cstruct_as_class_sum(const Cstruct_as_class * point +pass)  +intent(result)
C Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +value, int y +value, int z +value)  +intent(result)
Close wrapstruct.h
Close wrapstruct.cpp
Close typesstruct.h
class Cstruct1
class Cstruct_ptr
class Cstruct_list
class Cstruct_numpy
class Arrays1
class Cstruct_as_class
Fortran int getX1(void) 
Fortran void setX1(int val +intent(in)+value) 
Fortran int getY1(void) 
Fortran void setY1(int val +intent(in)+value) 
C-interface int getX1(void) 
C-interface void setX1(int val +intent(in)+value) 
C-interface int getY1(void) 
C-interface void setY1(int val +intent(in)+value) 
class Cstruct_as_subclass
Fortran int getX1(void) 
Fortran void setX1(int val +intent(in)+value) 
Fortran int getY1(void) 
Fortran void setY1(int val +intent(in)+value) 
Fortran int getZ1(void) 
Fortran void setZ1(int val +intent(in)+value) 
C-interface int getX1(void) 
C-interface void setX1(int val +intent(in)+value) 
C-interface int getY1(void) 
C-interface void setY1(int val +intent(in)+value) 
C-interface int getZ1(void) 
C-interface void setZ1(int val +intent(in)+value) 
Fortran int passStructByValue(Cstruct1 arg +value)  +intent(result)
Fortran int passStruct1(const Cstruct1 * arg)  +intent(result)
Fortran int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))  +intent(result)
Fortran int acceptStructInPtr(Cstruct1 * arg +intent(in))  +intent(result)
Fortran void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +value, double d +value) 
Fortran void acceptStructInOutPtr(Cstruct1 * arg +intent(inout)) 
Fortran Cstruct1 returnStructByValue(int i +value, double d +value)  +intent(result)
Fortran Cstruct1 * returnStructPtr1(int i +value, double d +value)  +deref(pointer)+intent(result)
Fortran Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))  +deref(pointer)+intent(result)
Fortran Cstruct_list * get_global_struct_list(void)  +deref(pointer)+intent(result)
Fortran Cstruct_as_class * Create_Cstruct_as_class(void)  +intent(result)
Fortran Cstruct_as_class * Create_Cstruct_as_class_args(int x +value, int y +value)  +intent(result)
Fortran int Cstruct_as_class_sum(const Cstruct_as_class * point +pass)  +intent(result)
Fortran Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +value, int y +value, int z +value)  +intent(result)
C-interface int passStructByValue(Cstruct1 arg +value)  +intent(result)
C-interface int passStruct1(const Cstruct1 * arg)  +intent(result)
C-interface int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))  +intent(result)
C-interface int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out)+len)  +intent(result)
C-interface int acceptStructInPtr(Cstruct1 * arg +intent(in))  +intent(result)
C-interface void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +value, double d +value) 
C-interface void acceptStructInOutPtr(Cstruct1 * arg +intent(inout)) 
C-interface Cstruct1 returnStructByValue(int i +value, double d +value)  +intent(result)
C-interface Cstruct1 * returnStructPtr1(int i +value, double d +value)  +deref(pointer)+intent(result)
C-interface Cstruct1 * returnStructPtr1(int i +value, double d +value)  +deref(pointer)+intent(result)
C-interface Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))  +deref(pointer)+intent(result)
C-interface Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out)+len)  +deref(pointer)+intent(result)
C-interface Cstruct_list * get_global_struct_list(void)  +deref(pointer)+intent(result)
C-interface Cstruct_list * get_global_struct_list(void)  +deref(pointer)+intent(result)
C-interface Cstruct_as_class * Create_Cstruct_as_class(void)  +intent(result)
C-interface Cstruct_as_class * Create_Cstruct_as_class_args(int x +value, int y +value)  +intent(result)
C-interface int Cstruct_as_class_sum(const Cstruct_as_class * point +pass)  +intent(result)
C-interface Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +value, int y +value, int z +value)  +intent(result)
Close wrapfstruct.f
