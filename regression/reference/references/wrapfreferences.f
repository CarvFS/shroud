! wrapfreferences.f
! This file is generated by Shroud 0.11.0. Do not edit.
! Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfreferences.f
!! \brief Shroud generated wrapper for references library
!<
! splicer begin file_top
! splicer end file_top
module references_mod
    use iso_c_binding, only : C_INT, C_NULL_PTR, C_PTR
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    type, bind(C) :: SHROUD_arraywrapper_capsule
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SHROUD_arraywrapper_capsule

    type arraywrapper
        type(SHROUD_arraywrapper_capsule) :: cxxmem
        ! splicer begin class.ArrayWrapper.component_part
        ! splicer end class.ArrayWrapper.component_part
    contains
        procedure :: set_size => arraywrapper_set_size
        procedure :: get_size => arraywrapper_get_size
        procedure :: allocate => arraywrapper_allocate
        procedure :: get_array => arraywrapper_get_array
        procedure :: get_instance => arraywrapper_get_instance
        procedure :: set_instance => arraywrapper_set_instance
        procedure :: associated => arraywrapper_associated
        ! splicer begin class.ArrayWrapper.type_bound_procedure_part
        ! splicer end class.ArrayWrapper.type_bound_procedure_part
    end type arraywrapper

    interface operator (.eq.)
        module procedure arraywrapper_eq
    end interface

    interface operator (.ne.)
        module procedure arraywrapper_ne
    end interface

    interface

        ! ----------------------------------------
        ! Result
        ! Requested: c_unknown_scalar_result
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  size
        ! Requested: c_native_scalar_in
        ! Match:     c_default
        subroutine c_arraywrapper_set_size(self, size) &
                bind(C, name="REF_ArrayWrapper_set_size")
            use iso_c_binding, only : C_INT
            import :: SHROUD_arraywrapper_capsule
            implicit none
            type(SHROUD_arraywrapper_capsule), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: size
        end subroutine c_arraywrapper_set_size

        ! ----------------------------------------
        ! Result
        ! Requested: c_native_scalar_result
        ! Match:     c_default
        pure function c_arraywrapper_get_size(self) &
                result(SHT_rv) &
                bind(C, name="REF_ArrayWrapper_get_size")
            use iso_c_binding, only : C_INT
            import :: SHROUD_arraywrapper_capsule
            implicit none
            type(SHROUD_arraywrapper_capsule), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_arraywrapper_get_size

        ! ----------------------------------------
        ! Result
        ! Requested: c_unknown_scalar_result
        ! Match:     c_default
        subroutine c_arraywrapper_allocate(self) &
                bind(C, name="REF_ArrayWrapper_allocate")
            import :: SHROUD_arraywrapper_capsule
            implicit none
            type(SHROUD_arraywrapper_capsule), intent(IN) :: self
        end subroutine c_arraywrapper_allocate

        ! ----------------------------------------
        ! Result
        ! Requested: c_native_*_result
        ! Match:     c_default
        function c_arraywrapper_get_array(self) &
                result(SHT_rv) &
                bind(C, name="REF_ArrayWrapper_get_array")
            use iso_c_binding, only : C_PTR
            import :: SHROUD_arraywrapper_capsule
            implicit none
            type(SHROUD_arraywrapper_capsule), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_arraywrapper_get_array

        ! splicer begin class.ArrayWrapper.additional_interfaces
        ! splicer end class.ArrayWrapper.additional_interfaces

        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

contains

    ! void setSize(int size +intent(in)+value)
    ! ----------------------------------------
    ! Result
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  size
    ! Requested: f_native_scalar_in
    ! Match:     f_default
    ! Requested: c_native_scalar_in
    ! Match:     c_default
    subroutine arraywrapper_set_size(obj, size)
        use iso_c_binding, only : C_INT
        class(arraywrapper) :: obj
        integer(C_INT), value, intent(IN) :: size
        ! splicer begin class.ArrayWrapper.method.set_size
        call c_arraywrapper_set_size(obj%cxxmem, size)
        ! splicer end class.ArrayWrapper.method.set_size
    end subroutine arraywrapper_set_size

    ! int getSize() const
    ! ----------------------------------------
    ! Result
    ! Requested: f_native_scalar_result
    ! Match:     f_default
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    function arraywrapper_get_size(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(arraywrapper) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.ArrayWrapper.method.get_size
        SHT_rv = c_arraywrapper_get_size(obj%cxxmem)
        ! splicer end class.ArrayWrapper.method.get_size
    end function arraywrapper_get_size

    ! void allocate()
    ! ----------------------------------------
    ! Result
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    subroutine arraywrapper_allocate(obj)
        class(arraywrapper) :: obj
        ! splicer begin class.ArrayWrapper.method.allocate
        call c_arraywrapper_allocate(obj%cxxmem)
        ! splicer end class.ArrayWrapper.method.allocate
    end subroutine arraywrapper_allocate

    ! double * getArray()
    ! ----------------------------------------
    ! Result
    ! Exact:     f_native_*_result
    ! Requested: c_native_*_result
    ! Match:     c_default
    function arraywrapper_get_array(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, C_PTR, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), pointer :: SHT_rv
        ! splicer begin class.ArrayWrapper.method.get_array
        type(C_PTR) :: SHT_ptr
        SHT_ptr = c_arraywrapper_get_array(obj%cxxmem)
        call c_f_pointer(SHT_ptr, SHT_rv)
        ! splicer end class.ArrayWrapper.method.get_array
    end function arraywrapper_get_array

    ! Return pointer to C++ memory.
    function arraywrapper_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(arraywrapper), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function arraywrapper_get_instance

    subroutine arraywrapper_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(arraywrapper), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine arraywrapper_set_instance

    function arraywrapper_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(arraywrapper), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function arraywrapper_associated

    ! splicer begin class.ArrayWrapper.additional_functions
    ! splicer end class.ArrayWrapper.additional_functions

    ! splicer begin additional_functions
    ! splicer end additional_functions

    function arraywrapper_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(arraywrapper), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function arraywrapper_eq

    function arraywrapper_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(arraywrapper), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function arraywrapper_ne

end module references_mod
