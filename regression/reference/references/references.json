{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "classes": [
            {
                "cxx_header": [],
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapArrayWrapper.h",
                    "C_impl_filename": "wrapArrayWrapper.cpp",
                    "C_name_scope": "ArrayWrapper_",
                    "C_type_name": "REF_ArrayWrapper",
                    "F_capsule_data_type": "SHROUD_arraywrapper_capsule",
                    "F_derived_name": "arraywrapper",
                    "F_name_scope": "arraywrapper_",
                    "PY_PyObject": "PY_ArrayWrapper",
                    "PY_PyTypeObject": "PY_ArrayWrapper_Type",
                    "PY_capsule_name": "PY_ArrayWrapper_capsule_name",
                    "PY_from_object_func": "PP_ArrayWrapper_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_ArrayWrapper_to_Object",
                    "PY_to_object_idtor_func": "PP_ArrayWrapper_to_Object_idtor",
                    "PY_type_filename": "pyArrayWrappertype.cpp",
                    "class_scope": "ArrayWrapper::",
                    "cxx_class": "ArrayWrapper",
                    "cxx_type": "ArrayWrapper",
                    "file_scope": "ArrayWrapper"
                },
                "functions": [
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_type": "REF_ArrayWrapper",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "ArrayWrapper",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "c_shadow_scalar_ctor",
                                "stmt1": "c_shadow_scalar_ctor"
                            },
                            "fmtf": {
                                "cxx_type": "ArrayWrapper",
                                "f_type": "type(arraywrapper)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_OTHER",
                                "stmt0": "f_shadow_ctor",
                                "stmt1": "f_shadow_ctor",
                                "stmtc0": "c_shadow_ctor",
                                "stmtc1": "c_shadow_ctor"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PY_to_object_idtor_func": "PP_ArrayWrapper_to_Object_idtor",
                                "PyObject": "PY_ArrayWrapper",
                                "PyTypeObject": "PY_ArrayWrapper_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "ArrayWrapper",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "vargs": "SHCXX_rv"
                            }
                        },
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor"
                            },
                            "params": [],
                            "specifier": [
                                "ArrayWrapper"
                            ],
                            "typemap_name": "ArrayWrapper"
                        },
                        "decl": "ArrayWrapper()",
                        "declgen": "ArrayWrapper()",
                        "fmtdict": {
                            "C_name": "REF_ArrayWrapper_ctor",
                            "C_prototype": "REF_ArrayWrapper * SHC_rv",
                            "C_return_type": "REF_ArrayWrapper *",
                            "F_C_call": "c_arraywrapper_ctor",
                            "F_C_name": "c_arraywrapper_ctor",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_name_function": "ctor",
                            "F_name_generic": "ctor",
                            "F_name_impl": "arraywrapper_ctor",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_ArrayWrapper_tp_init",
                            "PY_type_impl": "PY_ArrayWrapper_tp_init",
                            "PY_type_method": "tp_init",
                            "c_const": "",
                            "cxx_rv_decl": "ArrayWrapper SHCXX_rv",
                            "function_name": "ctor",
                            "underscore_name": "ctor"
                        },
                        "options": {}
                    },
                    {
                        "_fmtargs": {
                            "size": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "size",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&size)",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "size",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_native_scalar_in",
                                    "stmt1": "c_default"
                                },
                                "fmtf": {
                                    "F_pointer": "SHPTR_size",
                                    "c_var": "size",
                                    "f_intent": "IN",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "size",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_native_scalar_in",
                                    "stmt1": "f_default",
                                    "stmtc0": "c_native_scalar_in",
                                    "stmtc1": "c_default"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "int size",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "size",
                                    "cxx_addr": "&",
                                    "cxx_decl": "int size",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "size",
                                    "data_var": "SHData_size",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_size",
                                    "size_var": "SHSize_size",
                                    "stmt0": "py_native_scalar_in",
                                    "stmt1": "py_default"
                                }
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "setSize",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "size",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setSize(int size)",
                        "declgen": "void setSize(int size +intent(in)+value)",
                        "fmtdict": {
                            "C_call_list": "size",
                            "C_name": "REF_ArrayWrapper_set_size",
                            "C_prototype": "REF_ArrayWrapper * self,\t int size",
                            "C_return_type": "void",
                            "F_C_call": "c_arraywrapper_set_size",
                            "F_C_name": "c_arraywrapper_set_size",
                            "F_arg_c_call": "obj%cxxmem,\t size",
                            "F_arguments": "obj,\t size",
                            "F_name_function": "set_size",
                            "F_name_generic": "set_size",
                            "F_name_impl": "arraywrapper_set_size",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_setSize",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "setSize",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_default",
                            "stmtc0": "c",
                            "stmtc1": "c_default",
                            "underscore_name": "set_size"
                        },
                        "options": {}
                    },
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "c_native_scalar_result",
                                "stmt1": "c_default"
                            },
                            "fmtf": {
                                "cxx_type": "int",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_native_scalar_result",
                                "stmt1": "f_default",
                                "stmtc0": "c_native_scalar_result",
                                "stmtc1": "c_default"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_native_result",
                                "stmt1": "py_default"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "getSize",
                                "pointer": []
                            },
                            "func_const": true,
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getSize() const",
                        "declgen": "int getSize() const",
                        "fmtdict": {
                            "C_name": "REF_ArrayWrapper_get_size",
                            "C_prototype": "const REF_ArrayWrapper * self",
                            "C_return_type": "int",
                            "F_C_call": "c_arraywrapper_get_size",
                            "F_C_name": "c_arraywrapper_get_size",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_size",
                            "F_name_generic": "get_size",
                            "F_name_impl": "arraywrapper_get_size",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getSize",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "getSize",
                            "underscore_name": "get_size"
                        },
                        "options": {}
                    },
                    {
                        "ast": {
                            "declarator": {
                                "name": "allocate",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void allocate()",
                        "declgen": "void allocate()",
                        "fmtdict": {
                            "C_name": "REF_ArrayWrapper_allocate",
                            "C_prototype": "REF_ArrayWrapper * self",
                            "C_return_type": "void",
                            "F_C_call": "c_arraywrapper_allocate",
                            "F_C_name": "c_arraywrapper_allocate",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "allocate",
                            "F_name_generic": "allocate",
                            "F_name_impl": "arraywrapper_allocate",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_allocate",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "allocate",
                            "stmt0": "f_subroutine",
                            "stmt1": "f_default",
                            "stmtc0": "c",
                            "stmtc1": "c_default",
                            "underscore_name": "allocate"
                        },
                        "options": {}
                    },
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "double",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "c_native_*_result",
                                "stmt1": "c_default"
                            },
                            "fmtf": {
                                "cxx_type": "double",
                                "f_assumed_shape": "(:)",
                                "f_declare_shape_array": "integer(C_INT) :: SHAPE_SHT_rv(1)\ninterface+\nsubroutine SHROUD_get_shape_SHT_rv(obj, shape)\tbind(C, name=\"REF_SHROUD_create_f_pointer_shape_0\")+\nuse iso_c_binding, only : C_INT\nimport SHROUD_arraywrapper_capsule\nimplicit none\ntype(SHROUD_arraywrapper_capsule), intent(IN) :: obj\ninteger(C_INT), intent(OUT) :: shape(*)\n-end subroutine SHROUD_get_shape_SHT_rv\n-end interface\n",
                                "f_get_shape_array": "call SHROUD_get_shape_SHT_rv(obj%cxxmem, SHAPE_SHT_rv)\n",
                                "f_get_shape_func": "SHROUD_get_shape_SHT_rv",
                                "f_pointer_shape": ", SHAPE_SHT_rv",
                                "f_shape_var": "SHAPE_SHT_rv",
                                "f_type": "real(C_DOUBLE)",
                                "f_var": "SHT_rv",
                                "rank": "1",
                                "sh_type": "SH_TYPE_DOUBLE",
                                "stmt0": "f_native_*_result",
                                "stmt1": "f_native_*_result",
                                "stmtc0": "c_native_*_result",
                                "stmtc1": "c_default"
                            },
                            "fmtpy": {
                                "c_deref": "*",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "double",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "npy_dims": "SHD_rv",
                                "npy_intp_asgn": "SHD_rv[0] = self->obj->getSize();\n",
                                "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                                "npy_rank": "1",
                                "numpy_type": "NPY_DOUBLE",
                                "pointer_shape": "getSize()",
                                "py_var": "SHTPy_rv",
                                "rank": "1",
                                "size_var": "SHSize_rv",
                                "stmt0": "py_native_result_dimension_numpy",
                                "stmt1": "py_native_result_dimension_numpy"
                            }
                        },
                        "ast": {
                            "attrs": {
                                "dimension": "getSize()"
                            },
                            "declarator": {
                                "name": "getArray",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "dimension": [
                                    {
                                        "args": [],
                                        "name": "getSize"
                                    }
                                ]
                            },
                            "params": [],
                            "return_pointer_as": "pointer",
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "double* getArray() +dimension(getSize())",
                        "declgen": "double * getArray() +dimension(getSize())",
                        "fmtdict": {
                            "C_name": "REF_ArrayWrapper_get_array",
                            "C_prototype": "REF_ArrayWrapper * self",
                            "C_return_type": "double *",
                            "F_C_call": "c_arraywrapper_get_array",
                            "F_C_name": "c_arraywrapper_get_array",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_array",
                            "F_name_generic": "get_array",
                            "F_name_impl": "arraywrapper_get_array",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getArray",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "double * SHC_rv",
                            "function_name": "getArray",
                            "underscore_name": "get_array"
                        },
                        "options": {}
                    }
                ],
                "name": "ArrayWrapper",
                "options": {},
                "scope": "ArrayWrapper::",
                "typemap_name": "ArrayWrapper"
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "references.hpp"
        ],
        "language": "cxx",
        "scope_file": [
            "references"
        ]
    }
}