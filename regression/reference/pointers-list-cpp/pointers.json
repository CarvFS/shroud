{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "pointers.hpp"
        ],
        "functions": [
            {
                "_fmtargs": {
                    "argin": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "int argin",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "argin",
                            "cxx_addr": "&",
                            "cxx_decl": "int argin",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "argin",
                            "data_var": "SHData_argin",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_argin",
                            "size_var": "SHSize_argin",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    },
                    "arginout": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arginout",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arginout",
                            "cxx_addr": "",
                            "cxx_decl": "int arginout",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arginout",
                            "data_var": "SHData_arginout",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arginout",
                            "size_var": "SHSize_arginout",
                            "stmt0": "py_native_*_inout",
                            "stmt1": "py_default"
                        }
                    },
                    "argout": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int argout",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "argout",
                            "cxx_addr": "",
                            "cxx_decl": "int argout",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "argout",
                            "data_var": "SHData_argout",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_argout",
                            "size_var": "SHSize_argout",
                            "stmt0": "py_native_*_out",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "intargs",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "const": true,
                            "declarator": {
                                "name": "argin",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arginout",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "argout",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void  intargs(const int argin      +intent(in), int * arginout +intent(inout), int * argout   +intent(out))",
                "declgen": "void intargs(const int argin +intent(in)+value, int * arginout +intent(inout), int * argout +intent(out))",
                "fmtdict": {
                    "PY_name_impl": "PY_intargs",
                    "function_name": "intargs",
                    "underscore_name": "intargs"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "data_var": "SHData_in",
                            "hnamefunc0": "SHROUD_create_from_PyObject_double",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_in",
                            "pytmp_var": "SHTPy_in",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_in_dimension_list",
                            "stmt1": "py_native_in_dimension_list"
                        }
                    },
                    "out": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "hnamefunc0": "SHROUD_to_PyList_double",
                            "npy_descr": "NULL",
                            "npy_descr_code": "",
                            "npy_order": "NPY_CORDER",
                            "npy_prototype": "SHPy_in",
                            "npy_subok": "0",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_out",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_out_allocatable_list_mold",
                            "stmt1": "py_native_out_allocatable_list"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int sizein",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_decl": "int sizein",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "SHSize_in",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "cos_doubles",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "allocatable": "mold=in",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "implied": "size(in)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void cos_doubles(double * in     +intent(in)  +dimension(:), double * out    +intent(out) +allocatable(mold=in), int      sizein +implied(size(in)))",
                "declgen": "void cos_doubles(double * in +dimension(:)+intent(in), double * out +allocatable(mold=in)+intent(out), int sizein +implied(size(in))+intent(in)+value)",
                "doxygen": {
                    "brief": "compute cos of IN and save in OUT",
                    "description": "allocate OUT same type as IN implied size of array"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_cos_doubles",
                    "function_name": "cos_doubles",
                    "underscore_name": "cos_doubles"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "double",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "double",
                            "cxx_var": "in",
                            "data_var": "SHData_in",
                            "hnamefunc0": "SHROUD_create_from_PyObject_double",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_in",
                            "pytmp_var": "SHTPy_in",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_in_dimension_list",
                            "stmt1": "py_native_in_dimension_list"
                        }
                    },
                    "out": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "hnamefunc0": "SHROUD_to_PyList_int",
                            "npy_descr": "SHDPy_out",
                            "npy_descr_code": "PyArray_Descr * SHDPy_out = PyArray_DescrFromType(NPY_INT);\n",
                            "npy_order": "NPY_CORDER",
                            "npy_prototype": "SHPy_in",
                            "npy_subok": "0",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_out",
                            "size_var": "SHSize_in",
                            "stmt0": "py_native_out_allocatable_list_mold",
                            "stmt1": "py_native_out_allocatable_list"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int sizein",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_decl": "int sizein",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "SHSize_in",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "truncate_to_int",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "allocatable": "mold=in",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(in)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void truncate_to_int(double * in     +intent(in)  +dimension(:), int *    out    +intent(out) +allocatable(mold=in), int      sizein +implied(size(in)))",
                "declgen": "void truncate_to_int(double * in +dimension(:)+intent(in), int * out +allocatable(mold=in)+intent(out), int sizein +implied(size(in))+intent(in)+value)",
                "doxygen": {
                    "brief": "truncate IN argument and save in OUT",
                    "description": "allocate OUT different type as IN\nimplied size of array\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_truncate_to_int",
                    "function_name": "truncate_to_int",
                    "underscore_name": "truncate_to_int"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "nvalues": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int nvalues",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "nvalues",
                            "cxx_addr": "",
                            "cxx_decl": "int nvalues",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "data_var": "SHData_nvalues",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nvalues",
                            "size_var": "SHSize_nvalues",
                            "stmt0": "py_native_*_out",
                            "stmt1": "py_default"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "hnamefunc0": "SHROUD_to_PyList_int",
                            "npy_dims": "SHD_values",
                            "npy_intp_asgn": "SHD_values[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_values[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_values",
                            "size_var": "SHSize_values",
                            "stmt0": "py_native_out_dimension_list",
                            "stmt1": "py_native_out_dimension_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "get_values",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values(int *nvalues+intent(OUT), int *values +intent(out)+dimension(3))",
                "declgen": "void get_values(int * nvalues +intent(out), int * values +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into array",
                    "description": "The function knows how long the array must be.\nFortran will treat the dimension as assumed-length.\nThe Python wrapper will create a NumPy array or list so it must\nhave an explicit dimension (not assumed-length).\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_get_values",
                    "function_name": "get_values",
                    "underscore_name": "get_values"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "hnamefunc0": "SHROUD_to_PyList_int",
                            "npy_dims": "SHD_arg1",
                            "npy_intp_asgn": "SHD_arg1[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_arg1[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_out_dimension_list",
                            "stmt1": "py_native_out_dimension_list"
                        }
                    },
                    "arg2": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "hnamefunc0": "SHROUD_to_PyList_int",
                            "npy_dims": "SHD_arg2",
                            "npy_intp_asgn": "SHD_arg2[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_arg2[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_out_dimension_list",
                            "stmt1": "py_native_out_dimension_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "get_values2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void get_values2(int *arg1 +intent(out)+dimension(3), int *arg2 +intent(out)+dimension(3))",
                "declgen": "void get_values2(int * arg1 +dimension(3)+intent(out), int * arg2 +dimension(3)+intent(out))",
                "doxygen": {
                    "brief": "fill values into two arrays",
                    "description": "Test two intent(out) arguments.\nMake sure error handling works with C++.\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_get_values2",
                    "function_name": "get_values2",
                    "underscore_name": "get_values2"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "nvar": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int nvar",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "nvar",
                            "cxx_addr": "&",
                            "cxx_decl": "int nvar",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "nvar",
                            "data_var": "SHData_nvar",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nvar",
                            "size_var": "SHSize_nvar",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "hnamefunc0": "SHROUD_to_PyList_int",
                            "npy_dims": "SHD_values",
                            "npy_intp_asgn": "SHD_values[0] = nvar;\n",
                            "npy_intp_decl": "npy_intp SHD_values[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_values",
                            "size_var": "nvar",
                            "stmt0": "py_native_out_allocatable_list",
                            "stmt1": "py_native_out_allocatable_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "iota_allocatable",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvar",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "allocatable": "nvar",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void iota_allocatable (int nvar, int *values+intent(out)+allocatable(nvar))",
                "declgen": "void iota_allocatable(int nvar +intent(in)+value, int * values +allocatable(nvar)+intent(out))",
                "fmtdict": {
                    "PY_name_impl": "PY_iota_allocatable",
                    "function_name": "iota_allocatable",
                    "underscore_name": "iota_allocatable"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "nvar": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int nvar",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "nvar",
                            "cxx_addr": "&",
                            "cxx_decl": "int nvar",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "nvar",
                            "data_var": "SHData_nvar",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nvar",
                            "size_var": "SHSize_nvar",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "hnamefunc0": "SHROUD_to_PyList_int",
                            "npy_dims": "SHD_values",
                            "npy_intp_asgn": "SHD_values[0] = nvar;\n",
                            "npy_intp_decl": "npy_intp SHD_values[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "nvar",
                            "py_var": "SHPy_values",
                            "size_var": "SHSize_values",
                            "stmt0": "py_native_out_dimension_list",
                            "stmt1": "py_native_out_dimension_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "iota_dimension",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvar",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": "nvar",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void iota_dimension (int nvar, int *values+intent(out)+dimension(nvar))",
                "declgen": "void iota_dimension(int nvar +intent(in)+value, int * values +dimension(nvar)+intent(out))",
                "fmtdict": {
                    "PY_name_impl": "PY_iota_dimension",
                    "function_name": "iota_dimension",
                    "underscore_name": "iota_dimension"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "len": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int len",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "len",
                            "cxx_addr": "&",
                            "cxx_decl": "int len",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "data_var": "SHData_len",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "SHSize_values",
                            "py_var": "SHPy_len",
                            "size_var": "SHSize_len"
                        }
                    },
                    "result": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int result",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "result",
                            "cxx_addr": "",
                            "cxx_decl": "int result",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "data_var": "SHData_result",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_result",
                            "size_var": "SHSize_result",
                            "stmt0": "py_native_*_out",
                            "stmt1": "py_default"
                        }
                    },
                    "values": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "data_var": "SHData_values",
                            "hnamefunc0": "SHROUD_create_from_PyObject_int",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_values",
                            "pytmp_var": "SHTPy_values",
                            "size_var": "SHSize_values",
                            "stmt0": "py_native_in_dimension_list",
                            "stmt1": "py_native_in_dimension_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Sum",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "size(values)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "len",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "result",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Sum(int len +implied(size(values)), int *values +dimension(:)+intent(in), int *result +intent(out))",
                "declgen": "void Sum(int len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))",
                "fmtdict": {
                    "PY_name_impl": "PY_Sum",
                    "function_name": "Sum",
                    "underscore_name": "sum"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "out": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "data_var": "SHData_out",
                            "hnamefunc0": "SHROUD_to_PyList_int",
                            "npy_dims": "SHD_out",
                            "npy_intp_asgn": "SHD_out[0] = 3;\n",
                            "npy_intp_decl": "npy_intp SHD_out[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_out",
                            "size_var": "SHSize_out",
                            "stmt0": "py_native_out_dimension_list",
                            "stmt1": "py_native_out_dimension_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "fillIntArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fillIntArray(int *out +intent(out)+dimension(3))",
                "declgen": "void fillIntArray(int * out +dimension(3)+intent(out))",
                "doxygen": {
                    "description": "Return three values into memory the user provides.\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_fillIntArray",
                    "function_name": "fillIntArray",
                    "underscore_name": "fill_int_array"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "array": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "array",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "array",
                            "data_var": "SHData_array",
                            "hnamefunc0": "SHROUD_create_from_PyObject_int",
                            "hnamefunc1": "SHROUD_to_PyList_int",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_array",
                            "pytmp_var": "SHTPy_array",
                            "size_var": "SHSize_array",
                            "stmt0": "py_native_inout_dimension_list",
                            "stmt1": "py_native_inout_dimension_list"
                        }
                    },
                    "sizein": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int sizein",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "sizein",
                            "cxx_addr": "&",
                            "cxx_decl": "int sizein",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "sizein",
                            "data_var": "SHData_sizein",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "SHSize_array",
                            "py_var": "SHPy_sizein",
                            "size_var": "SHSize_sizein"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "incrementIntArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "array",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(array)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "sizein",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void incrementIntArray(int * array  +dimension(:)+intent(inout), int   sizein +implied(size(array)))",
                "declgen": "void incrementIntArray(int * array +dimension(:)+intent(inout), int sizein +implied(size(array))+intent(in)+value)",
                "doxygen": {
                    "description": "Increment array in place using intent(INOUT).\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_incrementIntArray",
                    "function_name": "incrementIntArray",
                    "underscore_name": "increment_int_array"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "names": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "names",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "names",
                            "data_var": "SHData_names",
                            "hnamefunc0": "SHROUD_create_from_PyObject_char",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_names",
                            "pytmp_var": "SHTPy_names",
                            "size_var": "SHSize_names",
                            "stmt0": "py_char_**_in",
                            "stmt1": "py_char_**_in"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptCharArrayIn",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "names",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptCharArrayIn(char **names +intent(in))",
                "declgen": "void acceptCharArrayIn(char * * names +dimension(:)+intent(in))",
                "fmtdict": {
                    "PY_name_impl": "PY_acceptCharArrayIn",
                    "function_name": "acceptCharArrayIn",
                    "underscore_name": "accept_char_array_in"
                },
                "options": {}
            },
            {
                "_fmtargs": {
                    "value": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int value",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "value",
                            "cxx_addr": "&",
                            "cxx_decl": "int value",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "value",
                            "data_var": "SHData_value",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_value",
                            "size_var": "SHSize_value",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "setGlobalInt",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "value",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void setGlobalInt(int value)",
                "declgen": "void setGlobalInt(int value +intent(in)+value)",
                "fmtdict": {
                    "PY_name_impl": "PY_setGlobalInt",
                    "function_name": "setGlobalInt",
                    "underscore_name": "set_global_int"
                },
                "options": {}
            },
            {
                "_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "sumFixedArray",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int sumFixedArray()",
                "declgen": "int sumFixedArray()",
                "doxygen": {
                    "description": "Used to test values global_array.\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_sumFixedArray",
                    "function_name": "sumFixedArray",
                    "underscore_name": "sum_fixed_array"
                },
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "getPtrToScalar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nitems",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToScalar(int **nitems+intent(out))",
                "declgen": "void getPtrToScalar(int * * nitems +intent(out))",
                "fmtdict": {
                    "function_name": "getPtrToScalar",
                    "underscore_name": "get_ptr_to_scalar"
                },
                "options": {
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "getPtrToFixedArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "10",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "count",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getPtrToFixedArray(int **count+intent(out)+dimension(10))",
                "declgen": "void getPtrToFixedArray(int * * count +dimension(10)+intent(out))",
                "doxygen": {
                    "description": "Return a Fortran pointer to an array which is always the same length.\n"
                },
                "fmtdict": {
                    "function_name": "getPtrToFixedArray",
                    "underscore_name": "get_ptr_to_fixed_array"
                },
                "options": {
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "getRawPtrToScalar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "raw",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nitems",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToScalar(int **nitems+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToScalar(int * * nitems +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Called directly via an interface.\n"
                },
                "fmtdict": {
                    "function_name": "getRawPtrToScalar",
                    "underscore_name": "get_raw_ptr_to_scalar"
                },
                "options": {
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "getRawPtrToFixedArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "raw",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "count",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getRawPtrToFixedArray(int **count+intent(out)+deref(raw))",
                "declgen": "void getRawPtrToFixedArray(int * * count +deref(raw)+intent(out))",
                "doxygen": {
                    "description": "Return a type(C_PTR) to an array which is always the same length.\nCalled directly via an interface.\n# Uses +deref(raw) instead of +dimension(10) like getPtrToFixedArray.\n"
                },
                "fmtdict": {
                    "function_name": "getRawPtrToFixedArray",
                    "underscore_name": "get_raw_ptr_to_fixed_array"
                },
                "options": {
                    "wrap_python": false
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "pointers"
        ]
    }
}