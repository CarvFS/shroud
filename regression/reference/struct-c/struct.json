{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "classes": [
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct1",
                "options": {
                    "literalinclude": true
                },
                "parse_keyword": "struct",
                "scope": "Cstruct1::",
                "typemap_name": "Cstruct1",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "ifield",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ifield",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ifield",
                            "variable_lower": "ifield",
                            "variable_name": "ifield",
                            "variable_upper": "IFIELD"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "dfield",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dfield",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dfield",
                            "variable_lower": "dfield",
                            "variable_name": "dfield",
                            "variable_upper": "DFIELD"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct1.h",
                    "C_impl_filename": "wrapCstruct1.c",
                    "C_name_scope": "Cstruct1_",
                    "C_type_name": "Cstruct1",
                    "F_derived_name": "cstruct1",
                    "F_name_scope": "cstruct1_",
                    "PY_struct_array_descr_create": "PY_Cstruct1_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct1_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct1_array_descr",
                    "class_scope": "Cstruct1::",
                    "cxx_class": "Cstruct1",
                    "cxx_type": "Cstruct1",
                    "file_scope": "Cstruct1"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_ptr",
                "options": {},
                "parse_keyword": "struct",
                "scope": "Cstruct_ptr::",
                "typemap_name": "Cstruct_ptr",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "cfield",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "cfield",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "cfield",
                            "variable_lower": "cfield",
                            "variable_name": "cfield",
                            "variable_upper": "CFIELD"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "const": true,
                            "declarator": {
                                "name": "const_dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "const_dvalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "const_dvalue",
                            "variable_lower": "const_dvalue",
                            "variable_name": "const_dvalue",
                            "variable_upper": "CONST_DVALUE"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_ptr.h",
                    "C_impl_filename": "wrapCstruct_ptr.c",
                    "C_name_scope": "Cstruct_ptr_",
                    "C_type_name": "Cstruct_ptr",
                    "F_derived_name": "cstruct_ptr",
                    "F_name_scope": "cstruct_ptr_",
                    "PY_struct_array_descr_create": "PY_Cstruct_ptr_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_ptr_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_ptr_array_descr",
                    "class_scope": "Cstruct_ptr::",
                    "cxx_class": "Cstruct_ptr",
                    "cxx_type": "Cstruct_ptr",
                    "file_scope": "Cstruct_ptr"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_list",
                "options": {
                    "PY_array_arg": "list"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_list::",
                "typemap_name": "Cstruct_list",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "nitems",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "nitems",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "nitems",
                            "variable_lower": "nitems",
                            "variable_name": "nitems",
                            "variable_upper": "NITEMS"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "attrs": {
                                "dimension": "nitems+nitems"
                            },
                            "declarator": {
                                "name": "ivalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "dimension": [
                                    {
                                        "left": {
                                            "name": "nitems"
                                        },
                                        "op": "+",
                                        "right": {
                                            "name": "nitems"
                                        }
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ivalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ivalue",
                            "variable_lower": "ivalue",
                            "variable_name": "ivalue",
                            "variable_upper": "IVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "attrs": {
                                "dimension": "nitems*TWO"
                            },
                            "declarator": {
                                "name": "dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "dimension": [
                                    {
                                        "left": {
                                            "name": "nitems"
                                        },
                                        "op": "*",
                                        "right": {
                                            "name": "TWO"
                                        }
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dvalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dvalue",
                            "variable_lower": "dvalue",
                            "variable_name": "dvalue",
                            "variable_upper": "DVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "attrs": {
                                "dimension": "nitems"
                            },
                            "declarator": {
                                "name": "svalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "dimension": [
                                    {
                                        "name": "nitems"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "svalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "svalue",
                            "variable_lower": "svalue",
                            "variable_name": "svalue",
                            "variable_upper": "SVALUE"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_list.h",
                    "C_impl_filename": "wrapCstruct_list.c",
                    "C_name_scope": "Cstruct_list_",
                    "C_type_name": "Cstruct_list",
                    "F_derived_name": "cstruct_list",
                    "F_name_scope": "cstruct_list_",
                    "PY_struct_array_descr_create": "PY_Cstruct_list_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_list_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_list_array_descr",
                    "class_scope": "Cstruct_list::",
                    "cxx_class": "Cstruct_list",
                    "cxx_type": "Cstruct_list",
                    "file_scope": "Cstruct_list"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Cstruct_numpy",
                "options": {
                    "PY_array_arg": "numpy"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_numpy::",
                "typemap_name": "Cstruct_numpy",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "nitems",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "nitems",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "nitems",
                            "variable_lower": "nitems",
                            "variable_name": "nitems",
                            "variable_upper": "NITEMS"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "attrs": {
                                "dimension": "nitems"
                            },
                            "declarator": {
                                "name": "ivalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "dimension": [
                                    {
                                        "name": "nitems"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "ivalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "ivalue",
                            "variable_lower": "ivalue",
                            "variable_name": "ivalue",
                            "variable_upper": "IVALUE"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "attrs": {
                                "dimension": "nitems"
                            },
                            "declarator": {
                                "name": "dvalue",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "dimension": [
                                    {
                                        "name": "nitems"
                                    }
                                ]
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "name": "dvalue",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "double",
                            "cxx_type": "double",
                            "field_name": "dvalue",
                            "variable_lower": "dvalue",
                            "variable_name": "dvalue",
                            "variable_upper": "DVALUE"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapCstruct_numpy.h",
                    "C_impl_filename": "wrapCstruct_numpy.c",
                    "C_name_scope": "Cstruct_numpy_",
                    "C_type_name": "Cstruct_numpy",
                    "F_derived_name": "cstruct_numpy",
                    "F_name_scope": "cstruct_numpy_",
                    "PY_struct_array_descr_create": "PY_Cstruct_numpy_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_numpy_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_numpy_array_descr",
                    "class_scope": "Cstruct_numpy::",
                    "cxx_class": "Cstruct_numpy",
                    "cxx_type": "Cstruct_numpy",
                    "file_scope": "Cstruct_numpy"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "name": "Arrays1",
                "options": {
                    "PY_array_arg": "numpy"
                },
                "parse_keyword": "struct",
                "scope": "Arrays1::",
                "typemap_name": "Arrays1",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "array": [
                                {
                                    "constant": "20"
                                }
                            ],
                            "declarator": {
                                "name": "name",
                                "pointer": []
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        "name": "name",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "char",
                            "cxx_type": "char",
                            "field_name": "name",
                            "variable_lower": "name",
                            "variable_name": "name",
                            "variable_upper": "NAME"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "array": [
                                {
                                    "constant": "10"
                                }
                            ],
                            "declarator": {
                                "name": "count",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "count",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "count",
                            "variable_lower": "count",
                            "variable_name": "count",
                            "variable_upper": "COUNT"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_header_filename": "wrapArrays1.h",
                    "C_impl_filename": "wrapArrays1.c",
                    "C_name_scope": "Arrays1_",
                    "C_type_name": "Arrays1",
                    "F_derived_name": "arrays1",
                    "F_name_scope": "arrays1_",
                    "PY_struct_array_descr_create": "PY_Arrays1_create_array_descr",
                    "PY_struct_array_descr_name": "Arrays1_dtype",
                    "PY_struct_array_descr_variable": "PY_Arrays1_array_descr",
                    "class_scope": "Arrays1::",
                    "cxx_class": "Arrays1",
                    "cxx_type": "Arrays1",
                    "file_scope": "Arrays1"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "0 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getX1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getX1()",
                        "declgen": "int getX1(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_class_get_x1",
                            "C_prototype": "STR_Cstruct_as_class * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_class_get_x1",
                            "F_C_name": "c_cstruct_as_class_get_x1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_x1",
                            "F_name_generic": "get_x1",
                            "F_name_impl": "cstruct_as_class_get_x1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "x1",
                            "function_name": "getX1",
                            "underscore_name": "get_x1"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "c_getter_native_scalar",
                                "stmt1": "c_getter_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_getter_native_scalar",
                                "stmt1": "f_getter",
                                "stmtc0": "c_getter_native_scalar",
                                "stmtc1": "c_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "1 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "setX1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setX1(int val)",
                        "declgen": "void setX1(int val +intent(in)+value)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_setter_native_scalar",
                                    "stmt1": "c_setter_native_scalar"
                                },
                                "fmtf": {
                                    "F_C_var": "val",
                                    "c_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "val",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_setter_native_scalar",
                                    "stmt1": "f_setter_native",
                                    "stmtc0": "c_setter_native_scalar",
                                    "stmtc1": "c_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_class_set_x1",
                            "C_prototype": "STR_Cstruct_as_class * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_class_set_x1",
                            "F_C_name": "c_cstruct_as_class_set_x1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_function": "set_x1",
                            "F_name_generic": "set_x1",
                            "F_name_impl": "cstruct_as_class_set_x1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "x1",
                            "function_name": "setX1",
                            "stmt0": "f_setter",
                            "stmt1": "f_setter",
                            "stmtc0": "c_setter",
                            "stmtc1": "c_setter",
                            "underscore_name": "set_x1"
                        }
                    },
                    {
                        "<FUNCTION>": "2 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getY1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getY1()",
                        "declgen": "int getY1(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_class_get_y1",
                            "C_prototype": "STR_Cstruct_as_class * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_class_get_y1",
                            "F_C_name": "c_cstruct_as_class_get_y1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_y1",
                            "F_name_generic": "get_y1",
                            "F_name_impl": "cstruct_as_class_get_y1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "y1",
                            "function_name": "getY1",
                            "underscore_name": "get_y1"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "c_getter_native_scalar",
                                "stmt1": "c_getter_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_getter_native_scalar",
                                "stmt1": "f_getter",
                                "stmtc0": "c_getter_native_scalar",
                                "stmtc1": "c_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "3 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "setY1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setY1(int val)",
                        "declgen": "void setY1(int val +intent(in)+value)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_setter_native_scalar",
                                    "stmt1": "c_setter_native_scalar"
                                },
                                "fmtf": {
                                    "F_C_var": "val",
                                    "c_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "val",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_setter_native_scalar",
                                    "stmt1": "f_setter_native",
                                    "stmtc0": "c_setter_native_scalar",
                                    "stmtc1": "c_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_class_set_y1",
                            "C_prototype": "STR_Cstruct_as_class * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_class_set_y1",
                            "F_C_name": "c_cstruct_as_class_set_y1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_function": "set_y1",
                            "F_name_generic": "set_y1",
                            "F_name_impl": "cstruct_as_class_set_y1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "y1",
                            "function_name": "setY1",
                            "stmt0": "f_setter",
                            "stmt1": "f_setter",
                            "stmtc0": "c_setter",
                            "stmtc1": "c_setter",
                            "underscore_name": "set_y1"
                        }
                    }
                ],
                "name": "Cstruct_as_class",
                "options": {
                    "literalinclude": true,
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_class::",
                "typemap_name": "Cstruct_as_class",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "x1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "x1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "x1",
                            "variable_lower": "x1",
                            "variable_name": "x1",
                            "variable_upper": "X1"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "y1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "y1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "y1",
                            "variable_lower": "y1",
                            "variable_name": "y1",
                            "variable_upper": "Y1"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCstruct_as_class.h",
                    "C_impl_filename": "wrapCstruct_as_class.c",
                    "C_name_scope": "Cstruct_as_class_",
                    "C_type_name": "STR_Cstruct_as_class",
                    "F_derived_name": "cstruct_as_class",
                    "F_name_scope": "cstruct_as_class_",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_class_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_class_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_class_array_descr",
                    "class_scope": "Cstruct_as_class::",
                    "cxx_class": "Cstruct_as_class",
                    "cxx_type": "Cstruct_as_class",
                    "f_capsule_data_type": "STR_SHROUD_capsule_data",
                    "file_scope": "Cstruct_as_class",
                    "hnamefunc0": "capsule_data_helper"
                }
            },
            {
                "<CLASS>": "****************************************",
                "cxx_header": [],
                "functions": [
                    {
                        "<FUNCTION>": "4 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getX1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getX1()",
                        "declgen": "int getX1(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_subclass_get_x1",
                            "C_prototype": "STR_Cstruct_as_subclass * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_subclass_get_x1",
                            "F_C_name": "c_cstruct_as_subclass_get_x1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_x1",
                            "F_name_generic": "get_x1",
                            "F_name_impl": "cstruct_as_subclass_get_x1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "x1",
                            "function_name": "getX1",
                            "underscore_name": "get_x1"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "c_getter_native_scalar",
                                "stmt1": "c_getter_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_getter_native_scalar",
                                "stmt1": "f_getter",
                                "stmtc0": "c_getter_native_scalar",
                                "stmtc1": "c_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "5 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "setX1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setX1(int val)",
                        "declgen": "void setX1(int val +intent(in)+value)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_setter_native_scalar",
                                    "stmt1": "c_setter_native_scalar"
                                },
                                "fmtf": {
                                    "F_C_var": "val",
                                    "c_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "val",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_setter_native_scalar",
                                    "stmt1": "f_setter_native",
                                    "stmtc0": "c_setter_native_scalar",
                                    "stmtc1": "c_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_subclass_set_x1",
                            "C_prototype": "STR_Cstruct_as_subclass * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_subclass_set_x1",
                            "F_C_name": "c_cstruct_as_subclass_set_x1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_function": "set_x1",
                            "F_name_generic": "set_x1",
                            "F_name_impl": "cstruct_as_subclass_set_x1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "x1",
                            "function_name": "setX1",
                            "stmt0": "f_setter",
                            "stmt1": "f_setter",
                            "stmtc0": "c_setter",
                            "stmtc1": "c_setter",
                            "underscore_name": "set_x1"
                        }
                    },
                    {
                        "<FUNCTION>": "6 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getY1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getY1()",
                        "declgen": "int getY1(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_subclass_get_y1",
                            "C_prototype": "STR_Cstruct_as_subclass * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_subclass_get_y1",
                            "F_C_name": "c_cstruct_as_subclass_get_y1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_y1",
                            "F_name_generic": "get_y1",
                            "F_name_impl": "cstruct_as_subclass_get_y1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "y1",
                            "function_name": "getY1",
                            "underscore_name": "get_y1"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "c_getter_native_scalar",
                                "stmt1": "c_getter_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_getter_native_scalar",
                                "stmt1": "f_getter",
                                "stmtc0": "c_getter_native_scalar",
                                "stmtc1": "c_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "7 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "setY1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setY1(int val)",
                        "declgen": "void setY1(int val +intent(in)+value)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_setter_native_scalar",
                                    "stmt1": "c_setter_native_scalar"
                                },
                                "fmtf": {
                                    "F_C_var": "val",
                                    "c_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "val",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_setter_native_scalar",
                                    "stmt1": "f_setter_native",
                                    "stmtc0": "c_setter_native_scalar",
                                    "stmtc1": "c_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_subclass_set_y1",
                            "C_prototype": "STR_Cstruct_as_subclass * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_subclass_set_y1",
                            "F_C_name": "c_cstruct_as_subclass_set_y1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_function": "set_y1",
                            "F_name_generic": "set_y1",
                            "F_name_impl": "cstruct_as_subclass_set_y1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "y1",
                            "function_name": "setY1",
                            "stmt0": "f_setter",
                            "stmt1": "f_setter",
                            "stmtc0": "c_setter",
                            "stmtc1": "c_setter",
                            "underscore_name": "set_y1"
                        }
                    },
                    {
                        "<FUNCTION>": "8 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "getZ1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "getter"
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getZ1()",
                        "declgen": "int getZ1(void)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "C_name": "STR_Cstruct_as_subclass_get_z1",
                            "C_prototype": "STR_Cstruct_as_subclass * self",
                            "C_return_type": "int",
                            "F_C_arguments": "self",
                            "F_C_call": "c_cstruct_as_subclass_get_z1",
                            "F_C_name": "c_cstruct_as_subclass_get_z1",
                            "F_C_result_clause": "\fresult(SHT_rv)",
                            "F_C_subprogram": "function",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_name_function": "get_z1",
                            "F_name_generic": "get_z1",
                            "F_name_impl": "cstruct_as_subclass_get_z1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "field_name": "z1",
                            "function_name": "getZ1",
                            "underscore_name": "get_z1"
                        },
                        "zz_fmtresult": {
                            "fmtc": {
                                "c_const": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cfi_type": "CFI_type_int",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "c_getter_native_scalar",
                                "stmt1": "c_getter_native_scalar"
                            },
                            "fmtf": {
                                "F_C_var": "SHT_rv",
                                "c_var": "SHT_rv",
                                "cxx_type": "int",
                                "f_intent": "OUT",
                                "f_kind": "C_INT",
                                "f_type": "integer(C_INT)",
                                "f_var": "SHT_rv",
                                "sh_type": "SH_TYPE_INT",
                                "stmt0": "f_getter_native_scalar",
                                "stmt1": "f_getter",
                                "stmtc0": "c_getter_native_scalar",
                                "stmtc1": "c_getter_native_scalar"
                            }
                        }
                    },
                    {
                        "<FUNCTION>": "9 ****************************************",
                        "C_generated_path": [
                            "getter/setter"
                        ],
                        "_generated": "getter/setter",
                        "ast": {
                            "declarator": {
                                "name": "setZ1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "setter"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "setter"
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setZ1(int val)",
                        "declgen": "void setZ1(int val +intent(in)+value)",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "f_c": true,
                            "fortran": true
                        },
                        "zz_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_type": "int",
                                    "c_var": "val",
                                    "cfi_type": "CFI_type_int",
                                    "cxx_addr": "&",
                                    "cxx_member": ".",
                                    "cxx_nonconst_ptr": "&val",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "c_setter_native_scalar",
                                    "stmt1": "c_setter_native_scalar"
                                },
                                "fmtf": {
                                    "F_C_var": "val",
                                    "c_var": "val",
                                    "f_intent": "IN",
                                    "f_kind": "C_INT",
                                    "f_type": "integer(C_INT)",
                                    "f_var": "val",
                                    "sh_type": "SH_TYPE_INT",
                                    "stmt0": "f_setter_native_scalar",
                                    "stmt1": "f_setter_native",
                                    "stmtc0": "c_setter_native_scalar",
                                    "stmtc1": "c_setter_native_scalar"
                                }
                            }
                        },
                        "zz_fmtdict": {
                            "C_call_list": "val",
                            "C_name": "STR_Cstruct_as_subclass_set_z1",
                            "C_prototype": "STR_Cstruct_as_subclass * self,\t int val",
                            "C_return_type": "void",
                            "F_C_arguments": "self,\t val",
                            "F_C_call": "c_cstruct_as_subclass_set_z1",
                            "F_C_name": "c_cstruct_as_subclass_set_z1",
                            "F_C_subprogram": "subroutine",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_name_function": "set_z1",
                            "F_name_generic": "set_z1",
                            "F_name_impl": "cstruct_as_subclass_set_z1",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "field_name": "z1",
                            "function_name": "setZ1",
                            "stmt0": "f_setter",
                            "stmt1": "f_setter",
                            "stmtc0": "c_setter",
                            "stmtc1": "c_setter",
                            "underscore_name": "set_z1"
                        }
                    }
                ],
                "name": "Cstruct_as_subclass",
                "options": {
                    "class_baseclass": "Cstruct_as_class",
                    "literalinclude": true,
                    "wrap_python": false,
                    "wrap_struct_as": "class"
                },
                "parse_keyword": "struct",
                "scope": "Cstruct_as_subclass::",
                "typemap_name": "Cstruct_as_subclass",
                "variables": [
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "x1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "x1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "x1",
                            "variable_lower": "x1",
                            "variable_name": "x1",
                            "variable_upper": "X1"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "y1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "y1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "y1",
                            "variable_lower": "y1",
                            "variable_name": "y1",
                            "variable_upper": "Y1"
                        }
                    },
                    {
                        "<VARIABLE>": "****************************************",
                        "ast": {
                            "declarator": {
                                "name": "z1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "name": "z1",
                        "options": {},
                        "wrap": {
                            "c": true,
                            "fortran": true
                        },
                        "zz_fmtdict": {
                            "c_type": "int",
                            "cxx_type": "int",
                            "field_name": "z1",
                            "variable_lower": "z1",
                            "variable_name": "z1",
                            "variable_upper": "Z1"
                        }
                    }
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "wrap_as": "class",
                "zz_fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapCstruct_as_subclass.h",
                    "C_impl_filename": "wrapCstruct_as_subclass.c",
                    "C_name_scope": "Cstruct_as_subclass_",
                    "C_type_name": "STR_Cstruct_as_subclass",
                    "F_derived_member_base": "cstruct_as_class",
                    "F_derived_name": "cstruct_as_subclass",
                    "F_name_scope": "cstruct_as_subclass_",
                    "PY_struct_array_descr_create": "PY_Cstruct_as_subclass_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct_as_subclass_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct_as_subclass_array_descr",
                    "class_scope": "Cstruct_as_subclass::",
                    "cxx_class": "Cstruct_as_subclass",
                    "cxx_type": "Cstruct_as_subclass",
                    "f_capsule_data_type": "STR_SHROUD_capsule_data",
                    "file_scope": "Cstruct_as_subclass",
                    "hnamefunc0": "capsule_data_helper"
                }
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "struct.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "10 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passStructByValue",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStructByValue(Cstruct1 arg)",
                "declgen": "int passStructByValue(Cstruct1 arg +value)",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_in_struct_scalar",
                            "stmt1": "c_in_struct"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_type": "type(cstruct1)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "f_in_struct_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_struct_scalar",
                            "stmtc1": "c_in_struct"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "passStructByValue",
                    "C_prototype": "Cstruct1 arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_pass_struct_by_value",
                    "F_C_name": "pass_struct_by_value",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "pass_struct_by_value",
                    "F_name_generic": "pass_struct_by_value",
                    "F_name_impl": "pass_struct_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStructByValue",
                    "underscore_name": "pass_struct_by_value"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "11 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passStruct1",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct1(const Cstruct1 *arg)",
                "declgen": "int passStruct1(const Cstruct1 * arg)",
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct1 *) arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_in_struct_*",
                            "stmt1": "c_in_struct"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_type": "type(cstruct1)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "f_in_struct_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_struct_*",
                            "stmtc1": "c_in_struct"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "passStruct1",
                    "C_prototype": "const Cstruct1 * arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_pass_struct1",
                    "F_C_name": "pass_struct1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "pass_struct1",
                    "F_name_generic": "pass_struct1",
                    "F_name_impl": "pass_struct1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct1",
                    "underscore_name": "pass_struct1"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "12 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "24",
                "ast": {
                    "declarator": {
                        "name": "passStruct2",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "s1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        },
                        {
                            "attrs": {
                                "charlen": "LENOUTBUF",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct2(const Cstruct1 *s1, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "outbuf",
                            "c_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "outbuf",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    },
                    "s1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "s1",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct1 *) s1",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_in_struct_*",
                            "stmt1": "c_in_struct"
                        },
                        "fmtf": {
                            "F_C_var": "s1",
                            "c_var": "s1",
                            "f_intent": "IN",
                            "f_type": "type(cstruct1)",
                            "f_var": "s1",
                            "sh_type": "SH_TYPE_STRUCT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "s1,\t outbuf",
                    "C_name": "passStruct2",
                    "C_prototype": "const Cstruct1 * s1,\t char * outbuf",
                    "C_return_type": "int",
                    "F_C_arguments": "s1,\t outbuf",
                    "F_C_call": "c_pass_struct2_bufferify",
                    "F_C_name": "c_pass_struct2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "s1,\t outbuf,\t SHT_outbuf_len",
                    "F_arguments": "s1,\t outbuf",
                    "F_name_function": "pass_struct2",
                    "F_name_generic": "pass_struct2",
                    "F_name_impl": "pass_struct2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct2",
                    "underscore_name": "pass_struct2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "24 ****************************************",
                "_PTR_C_CXX_index": "12",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passStruct2",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "s1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        },
                        {
                            "attrs": {
                                "charlen": "LENOUTBUF",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct2(const Cstruct1 *s1, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "int passStruct2(const Cstruct1 * s1, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*_buf",
                            "stmt1": "c_out_char_*_buf"
                        },
                        "fmtf": {
                            "F_C_var": "outbuf",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "outbuf",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_char_*_buf",
                            "stmt1": "f_out_char_*_buf",
                            "stmtc0": "c_out_char_*_buf",
                            "stmtc1": "c_out_char_*_buf"
                        }
                    },
                    "s1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "s1",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct1 *) s1",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_in_struct_*",
                            "stmt1": "c_in_struct"
                        },
                        "fmtf": {
                            "F_C_var": "s1",
                            "c_var": "s1",
                            "f_intent": "IN",
                            "f_type": "type(cstruct1)",
                            "f_var": "s1",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "f_in_struct_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_struct_*",
                            "stmtc1": "c_in_struct"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "s1,\t outbuf",
                    "C_name": "STR_pass_struct2_bufferify",
                    "C_prototype": "const Cstruct1 * s1,\t char *outbuf,\t int SHT_outbuf_len",
                    "C_return_type": "int",
                    "F_C_arguments": "s1,\t outbuf,\t SHT_outbuf_len",
                    "F_C_name": "c_pass_struct2_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "pass_struct2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT"
                    }
                }
            },
            {
                "<FUNCTION>": "13 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStructInPtr",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptStructInPtr(Cstruct1 *arg +intent(in))",
                "declgen": "int acceptStructInPtr(Cstruct1 * arg +intent(in))",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_in_struct_*",
                            "stmt1": "c_in_struct"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_type": "type(cstruct1)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "f_in_struct_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_struct_*",
                            "stmtc1": "c_in_struct"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "acceptStructInPtr",
                    "C_prototype": "Cstruct1 * arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_accept_struct_in_ptr",
                    "F_C_name": "accept_struct_in_ptr",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "accept_struct_in_ptr",
                    "F_name_generic": "accept_struct_in_ptr",
                    "F_name_impl": "accept_struct_in_ptr",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "acceptStructInPtr",
                    "underscore_name": "accept_struct_in_ptr"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "14 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStructOutPtr",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "d",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStructOutPtr(Cstruct1 *arg +intent(out), int i, double d)",
                "declgen": "void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +value, double d +value)",
                "doxygen": {
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_out_struct_*",
                            "stmt1": "c_out_struct"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "OUT",
                            "f_type": "type(cstruct1)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "f_out_struct_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_out_struct_*",
                            "stmtc1": "c_out_struct"
                        }
                    },
                    "d": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "d",
                            "c_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "d",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg,\t i,\t d",
                    "C_name": "acceptStructOutPtr",
                    "C_prototype": "Cstruct1 * arg,\t int i,\t double d",
                    "C_return_type": "void",
                    "F_C_arguments": "arg,\t i,\t d",
                    "F_C_call": "c_accept_struct_out_ptr",
                    "F_C_name": "accept_struct_out_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg,\t i,\t d",
                    "F_arguments": "arg,\t i,\t d",
                    "F_name_function": "accept_struct_out_ptr",
                    "F_name_generic": "accept_struct_out_ptr",
                    "F_name_impl": "accept_struct_out_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "acceptStructOutPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_struct_out_ptr"
                }
            },
            {
                "<FUNCTION>": "15 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "acceptStructInOutPtr",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStructInOutPtr(Cstruct1 *arg +intent(inout))",
                "declgen": "void acceptStructInOutPtr(Cstruct1 * arg +intent(inout))",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "Cstruct1",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_struct",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "arg",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "c_inout_struct_*",
                            "stmt1": "c_inout_struct"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_intent": "INOUT",
                            "f_type": "type(cstruct1)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_STRUCT",
                            "stmt0": "f_inout_struct_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_inout_struct_*",
                            "stmtc1": "c_inout_struct"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "acceptStructInOutPtr",
                    "C_prototype": "Cstruct1 * arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_accept_struct_in_out_ptr",
                    "F_C_name": "accept_struct_in_out_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "accept_struct_in_out_ptr",
                    "F_name_generic": "accept_struct_in_out_ptr",
                    "F_name_impl": "accept_struct_in_out_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "acceptStructInOutPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_struct_in_out_ptr"
                }
            },
            {
                "<FUNCTION>": "16 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnStructByValue",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "d",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 returnStructByValue(int i, double d);",
                "declgen": "Cstruct1 returnStructByValue(int i +value, double d +value)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "d",
                            "c_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "d",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d",
                    "C_name": "returnStructByValue",
                    "C_prototype": "int i,\t double d",
                    "C_return_type": "Cstruct1",
                    "F_C_arguments": "i,\t d",
                    "F_C_call": "c_return_struct_by_value",
                    "F_C_name": "return_struct_by_value",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "i,\t d",
                    "F_arguments": "i,\t d",
                    "F_name_function": "return_struct_by_value",
                    "F_name_generic": "return_struct_by_value",
                    "F_name_impl": "return_struct_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 SHC_rv",
                    "function_name": "returnStructByValue",
                    "underscore_name": "return_struct_by_value"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "c_function_struct_scalar",
                        "stmt1": "c_function_struct"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "Cstruct1",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "f_function_struct_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_struct_scalar",
                        "stmtc1": "c_function_struct"
                    }
                }
            },
            {
                "<FUNCTION>": "17 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "25",
                "ast": {
                    "declarator": {
                        "name": "returnStructPtr1",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "pointer",
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "d",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr1(int i, double d)",
                "declgen": "Cstruct1 * returnStructPtr1(int i +value, double d +value)",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Does not generate a bufferify C wrapper.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "d",
                            "c_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "d",
                            "sh_type": "SH_TYPE_DOUBLE"
                        }
                    },
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d",
                    "C_name": "returnStructPtr1",
                    "C_prototype": "int i,\t double d",
                    "C_return_type": "Cstruct1 *",
                    "F_C_arguments": "i,\t d",
                    "F_C_call": "c_return_struct_ptr1_bufferify",
                    "F_C_name": "c_return_struct_ptr1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "i,\t d",
                    "F_arguments": "i,\t d",
                    "F_name_function": "return_struct_ptr1",
                    "F_name_generic": "return_struct_ptr1",
                    "F_name_impl": "return_struct_ptr1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr1",
                    "underscore_name": "return_struct_ptr1"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "c_function_struct_*_pointer",
                        "stmt1": "c_function_struct_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_local_ptr": "SHC_rv_ptr",
                        "c_var": "SHT_rv",
                        "cxx_type": "Cstruct1",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "f_function_struct_*_buf_pointer",
                        "stmt1": "f_function_struct_*_buf_pointer",
                        "stmtc0": "c_function_struct_*_buf_pointer",
                        "stmtc1": "c_function_struct_*"
                    }
                }
            },
            {
                "<FUNCTION>": "25 ****************************************",
                "_PTR_C_CXX_index": "17",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnStructPtr1",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "pointer",
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "d",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr1(int i, double d)",
                "declgen": "Cstruct1 * returnStructPtr1(int i +value, double d +value)",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Does not generate a bufferify C wrapper.\n"
                },
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "d",
                            "c_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "d",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d",
                    "C_name": "returnStructPtr1",
                    "C_prototype": "int i,\t double d",
                    "C_return_type": "Cstruct1 *",
                    "F_C_arguments": "i,\t d",
                    "F_C_name": "c_return_struct_ptr1_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr1",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_struct_ptr1"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "c_function_struct_*_buf_pointer",
                        "stmt1": "c_function_struct_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_STRUCT"
                    }
                }
            },
            {
                "<FUNCTION>": "18 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "26",
                "ast": {
                    "declarator": {
                        "name": "returnStructPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "pointer",
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "d",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "charlen": "LENOUTBUF",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr2(int i, double d, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Generates a bufferify C wrapper function.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "d",
                            "c_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "d",
                            "sh_type": "SH_TYPE_DOUBLE"
                        }
                    },
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_INT"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "outbuf",
                            "c_var": "outbuf",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "outbuf",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d,\t outbuf",
                    "C_name": "returnStructPtr2",
                    "C_prototype": "int i,\t double d,\t char * outbuf",
                    "C_return_type": "Cstruct1 *",
                    "F_C_arguments": "i,\t d,\t outbuf",
                    "F_C_call": "c_return_struct_ptr2_bufferify",
                    "F_C_name": "c_return_struct_ptr2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "i,\t d,\t outbuf,\t SHT_outbuf_len",
                    "F_arguments": "i,\t d,\t outbuf",
                    "F_name_function": "return_struct_ptr2",
                    "F_name_generic": "return_struct_ptr2",
                    "F_name_impl": "return_struct_ptr2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr2",
                    "underscore_name": "return_struct_ptr2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "c_function_struct_*_pointer",
                        "stmt1": "c_function_struct_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_local_ptr": "SHC_rv_ptr",
                        "c_var": "SHT_rv",
                        "cxx_type": "Cstruct1",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "f_function_struct_*_buf_pointer",
                        "stmt1": "f_function_struct_*_buf_pointer",
                        "stmtc0": "c_function_struct_*_buf_pointer",
                        "stmtc1": "c_function_struct_*"
                    }
                }
            },
            {
                "<FUNCTION>": "26 ****************************************",
                "_PTR_C_CXX_index": "18",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnStructPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "pointer",
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "d",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "charlen": "LENOUTBUF",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr2(int i, double d, char *outbuf+intent(out)+charlen(LENOUTBUF))",
                "declgen": "Cstruct1 * returnStructPtr2(int i +value, double d +value, char * outbuf +charlen(LENOUTBUF)+intent(out))",
                "doxygen": {
                    "brief": "Return a pointer to a struct",
                    "description": "Generates a bufferify C wrapper function.\n"
                },
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "d": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "double",
                            "c_var": "d",
                            "cfi_type": "CFI_type_double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&d",
                            "cxx_type": "double",
                            "cxx_var": "d",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "d",
                            "c_var": "d",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "d",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "i": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "i",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&i",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "i",
                            "c_var": "i",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "i",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "outbuf",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*_buf",
                            "stmt1": "c_out_char_*_buf"
                        },
                        "fmtf": {
                            "F_C_var": "outbuf",
                            "c_var": "outbuf",
                            "c_var_len": "SHT_outbuf_len",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "outbuf",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_char_*_buf",
                            "stmt1": "f_out_char_*_buf",
                            "stmtc0": "c_out_char_*_buf",
                            "stmtc1": "c_out_char_*_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "i,\t d,\t outbuf",
                    "C_name": "STR_return_struct_ptr2_bufferify",
                    "C_prototype": "int i,\t double d,\t char *outbuf,\t int SHT_outbuf_len",
                    "C_return_type": "Cstruct1 *",
                    "F_C_arguments": "i,\t d,\t outbuf,\t SHT_outbuf_len",
                    "F_C_name": "c_return_struct_ptr2_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_struct_ptr2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct1",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "c_function_struct_*_buf_pointer",
                        "stmt1": "c_function_struct_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct1)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_STRUCT"
                    }
                }
            },
            {
                "<FUNCTION>": "19 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "27",
                "ast": {
                    "declarator": {
                        "name": "get_global_struct_list",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "pointer",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "Cstruct_list"
                    ],
                    "typemap_name": "Cstruct_list"
                },
                "decl": "Cstruct_list *get_global_struct_list();",
                "declgen": "Cstruct_list * get_global_struct_list(void)",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "get_global_struct_list",
                    "C_prototype": "void",
                    "C_return_type": "Cstruct_list *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_global_struct_list_bufferify",
                    "F_C_name": "c_get_global_struct_list",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_function": "get_global_struct_list",
                    "F_name_generic": "get_global_struct_list",
                    "F_name_impl": "get_global_struct_list",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_list * SHC_rv",
                    "function_name": "get_global_struct_list",
                    "underscore_name": "get_global_struct_list"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct_list",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct_list",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "c_function_struct_*_pointer",
                        "stmt1": "c_function_struct_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_local_ptr": "SHC_rv_ptr",
                        "c_var": "SHT_rv",
                        "cxx_type": "Cstruct_list",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct_list)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "f_function_struct_*_buf_pointer",
                        "stmt1": "f_function_struct_*_buf_pointer",
                        "stmtc0": "c_function_struct_*_buf_pointer",
                        "stmtc1": "c_function_struct_*"
                    }
                }
            },
            {
                "<FUNCTION>": "27 ****************************************",
                "_PTR_C_CXX_index": "19",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "get_global_struct_list",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "pointer",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "Cstruct_list"
                    ],
                    "typemap_name": "Cstruct_list"
                },
                "decl": "Cstruct_list *get_global_struct_list();",
                "declgen": "Cstruct_list * get_global_struct_list(void)",
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "get_global_struct_list",
                    "C_prototype": "void",
                    "C_return_type": "Cstruct_list *",
                    "F_C_arguments": "",
                    "F_C_name": "c_get_global_struct_list_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_list * SHC_rv",
                    "function_name": "get_global_struct_list",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_global_struct_list"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "Cstruct_list",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_struct",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "Cstruct_list",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_STRUCT",
                        "stmt0": "c_function_struct_*_buf_pointer",
                        "stmt1": "c_function_struct_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct_list)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_STRUCT"
                    }
                }
            },
            {
                "<FUNCTION>": "20 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "Create_Cstruct_as_class",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "Cstruct_as_class"
                    ],
                    "typemap_name": "Cstruct_as_class"
                },
                "decl": "Cstruct_as_class *Create_Cstruct_as_class(void)",
                "declgen": "Cstruct_as_class * Create_Cstruct_as_class(void)",
                "options": {
                    "class_ctor": "Cstruct_as_class",
                    "literalinclude": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_create__cstruct_as_class",
                    "C_prototype": "STR_Cstruct_as_class * SHC_rv",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_call": "c_create__cstruct_as_class",
                    "F_C_name": "c_create__cstruct_as_class",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_name_function": "create__cstruct_as_class",
                    "F_name_generic": "Cstruct_as_class",
                    "F_name_impl": "create__cstruct_as_class",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_as_class * SHCXX_rv",
                    "function_name": "Create_Cstruct_as_class",
                    "underscore_name": "create__cstruct_as_class"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "STR_Cstruct_as_class",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct_as_class",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_shadow_*",
                        "stmt1": "c_function_shadow_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "Cstruct_as_class",
                        "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
                        "f_capsule_data_type": "STR_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct_as_class)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_*",
                        "stmt1": "f_function_shadow_*",
                        "stmtc0": "c_function_shadow_*",
                        "stmtc1": "c_function_shadow_*"
                    }
                }
            },
            {
                "<FUNCTION>": "21 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "Create_Cstruct_as_class_args",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "x",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "y",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "Cstruct_as_class"
                    ],
                    "typemap_name": "Cstruct_as_class"
                },
                "decl": "Cstruct_as_class *Create_Cstruct_as_class_args(int x, int y)",
                "declgen": "Cstruct_as_class * Create_Cstruct_as_class_args(int x +value, int y +value)",
                "options": {
                    "class_ctor": "Cstruct_as_class",
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "x": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "x",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&x",
                            "cxx_type": "int",
                            "cxx_var": "x",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "x",
                            "c_var": "x",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "x",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "y": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "y",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&y",
                            "cxx_type": "int",
                            "cxx_var": "y",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "y",
                            "c_var": "y",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "y",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "x,\t y",
                    "C_name": "STR_create__cstruct_as_class_args",
                    "C_prototype": "int x,\t int y,\t STR_Cstruct_as_class * SHC_rv",
                    "C_return_type": "void",
                    "F_C_arguments": "x,\t y,\t SHT_rv",
                    "F_C_call": "c_create__cstruct_as_class_args",
                    "F_C_name": "c_create__cstruct_as_class_args",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "x,\t y,\t SHT_rv%cxxmem",
                    "F_arguments": "x,\t y",
                    "F_name_function": "create__cstruct_as_class_args",
                    "F_name_generic": "Cstruct_as_class",
                    "F_name_impl": "create__cstruct_as_class_args",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_as_class * SHCXX_rv",
                    "function_name": "Create_Cstruct_as_class_args",
                    "underscore_name": "create__cstruct_as_class_args"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "STR_Cstruct_as_class",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct_as_class",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_shadow_*",
                        "stmt1": "c_function_shadow_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "Cstruct_as_class",
                        "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
                        "f_capsule_data_type": "STR_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct_as_class)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_*",
                        "stmt1": "f_function_shadow_*",
                        "stmtc0": "c_function_shadow_*",
                        "stmtc1": "c_function_shadow_*"
                    }
                }
            },
            {
                "<FUNCTION>": "22 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "Cstruct_as_class_sum",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "pass": true
                            },
                            "const": true,
                            "declarator": {
                                "name": "point",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Cstruct_as_class"
                            ],
                            "typemap_name": "Cstruct_as_class"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int Cstruct_as_class_sum(const Cstruct_as_class *point +pass)",
                "declgen": "int Cstruct_as_class_sum(const Cstruct_as_class * point +pass)",
                "options": {
                    "class_method": "Cstruct_as_class",
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "point": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "STR_Cstruct_as_class",
                            "c_var": "point",
                            "cfi_type": "CFI_type_other",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(Cstruct_as_class *) SHCXX_point",
                            "cxx_type": "Cstruct_as_class",
                            "cxx_var": "SHCXX_point",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_shadow_*",
                            "stmt1": "c_in_shadow"
                        },
                        "fmtf": {
                            "F_C_var": "point",
                            "c_var": "point",
                            "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
                            "f_capsule_data_type": "STR_SHROUD_capsule_data",
                            "f_intent": "IN",
                            "f_type": "type(cstruct_as_class)",
                            "f_var": "point",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_shadow_*",
                            "stmt1": "f_in_shadow",
                            "stmtc0": "c_in_shadow_*",
                            "stmtc1": "c_in_shadow"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_point",
                    "C_name": "STR_cstruct_as_class_sum",
                    "C_prototype": "STR_Cstruct_as_class * point",
                    "C_return_type": "int",
                    "F_C_arguments": "point",
                    "F_C_call": "c_cstruct_as_class_sum",
                    "F_C_name": "c_cstruct_as_class_sum",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "point%cxxmem",
                    "F_arguments": "point",
                    "F_name_function": "sum",
                    "F_name_generic": "cstruct_as_class_sum",
                    "F_name_impl": "cstruct_as_class_sum",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "Cstruct_as_class_sum",
                    "underscore_name": "cstruct_as_class_sum"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "23 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "Create_Cstruct_as_subclass_args",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "x",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "y",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "z",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "Cstruct_as_subclass"
                    ],
                    "typemap_name": "Cstruct_as_subclass"
                },
                "decl": "Cstruct_as_subclass *Create_Cstruct_as_subclass_args(int x, int y, int z)",
                "declgen": "Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +value, int y +value, int z +value)",
                "options": {
                    "class_ctor": "Cstruct_as_subclass",
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "x": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "x",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&x",
                            "cxx_type": "int",
                            "cxx_var": "x",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "x",
                            "c_var": "x",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "x",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "y": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "y",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&y",
                            "cxx_type": "int",
                            "cxx_var": "y",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "y",
                            "c_var": "y",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "y",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    },
                    "z": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "z",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&z",
                            "cxx_type": "int",
                            "cxx_var": "z",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "z",
                            "c_var": "z",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "z",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "x,\t y,\t z",
                    "C_name": "STR_create__cstruct_as_subclass_args",
                    "C_prototype": "int x,\t int y,\t int z,\t STR_Cstruct_as_subclass * SHC_rv",
                    "C_return_type": "void",
                    "F_C_arguments": "x,\t y,\t z,\t SHT_rv",
                    "F_C_call": "c_create__cstruct_as_subclass_args",
                    "F_C_name": "c_create__cstruct_as_subclass_args",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "x,\t y,\t z,\t SHT_rv%cxxmem",
                    "F_arguments": "x,\t y,\t z",
                    "F_name_function": "create__cstruct_as_subclass_args",
                    "F_name_generic": "Cstruct_as_subclass",
                    "F_name_impl": "create__cstruct_as_subclass_args",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "Cstruct_as_subclass * SHCXX_rv",
                    "function_name": "Create_Cstruct_as_subclass_args",
                    "underscore_name": "create__cstruct_as_subclass_args"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "STR_Cstruct_as_subclass",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_other",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHCXX_rv",
                        "cxx_type": "Cstruct_as_subclass",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_shadow_*",
                        "stmt1": "c_function_shadow_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "Cstruct_as_subclass",
                        "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
                        "f_capsule_data_type": "STR_SHROUD_capsule_data",
                        "f_intent": "OUT",
                        "f_type": "type(cstruct_as_subclass)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_shadow_*",
                        "stmt1": "f_function_shadow_*",
                        "stmtc0": "c_function_shadow_*",
                        "stmtc1": "c_function_shadow_*"
                    }
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "struct"
        ],
        "wrap": {
            "c": true,
            "fortran": true
        }
    },
    "types": {
        "Arrays1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Arrays1_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Arrays1",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Arrays1",
            "f_c_module": {
                "--import--": [
                    "arrays1"
                ]
            },
            "f_derived_type": "arrays1",
            "f_module": {
                "struct_mod": [
                    "arrays1"
                ]
            },
            "f_type": "type(arrays1)",
            "flat_name": "Arrays1",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct1_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct1",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct1",
            "f_c_module": {
                "--import--": [
                    "cstruct1"
                ]
            },
            "f_derived_type": "cstruct1",
            "f_module": {
                "struct_mod": [
                    "cstruct1"
                ]
            },
            "f_type": "type(cstruct1)",
            "flat_name": "Cstruct1",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_as_class": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_class *>\t({c_var}->addr)",
            "c_type": "STR_Cstruct_as_class",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_class",
            "f_c_module": {
                "--import--": [
                    "STR_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
            "f_c_type": "type(STR_SHROUD_capsule_data)",
            "f_capsule_data_type": "STR_SHROUD_capsule_data",
            "f_class": "class(cstruct_as_class)",
            "f_derived_type": "cstruct_as_class",
            "f_module": {
                "struct_mod": [
                    "cstruct_as_class"
                ]
            },
            "f_module_line": "struct_mod:cstruct_as_class",
            "f_module_name": "struct_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(cstruct_as_class)",
            "flat_name": "Cstruct_as_class",
            "forward": "Cstruct_as_class",
            "impl_header": [
                "struct.h"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesstruct.h"
            ]
        },
        "Cstruct_as_subclass": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_to_cxx": "static_cast<{c_const}Cstruct_as_subclass *>\t({c_var}->addr)",
            "c_type": "STR_Cstruct_as_subclass",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Cstruct_as_subclass",
            "f_c_module": {
                "--import--": [
                    "STR_SHROUD_capsule_data"
                ]
            },
            "f_c_module_line": "--import--:STR_SHROUD_capsule_data",
            "f_c_type": "type(STR_SHROUD_capsule_data)",
            "f_capsule_data_type": "STR_SHROUD_capsule_data",
            "f_class": "class(cstruct_as_subclass)",
            "f_derived_type": "cstruct_as_subclass",
            "f_module": {
                "struct_mod": [
                    "cstruct_as_subclass"
                ]
            },
            "f_module_line": "struct_mod:cstruct_as_subclass",
            "f_module_name": "struct_mod",
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(cstruct_as_subclass)",
            "flat_name": "Cstruct_as_subclass",
            "forward": "Cstruct_as_subclass",
            "impl_header": [
                "struct.h"
            ],
            "sgroup": "shadow",
            "wrap_header": [
                "typesstruct.h"
            ]
        },
        "Cstruct_list": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_list_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct_list",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_list",
            "f_c_module": {
                "--import--": [
                    "cstruct_list"
                ]
            },
            "f_derived_type": "cstruct_list",
            "f_module": {
                "struct_mod": [
                    "cstruct_list"
                ]
            },
            "f_type": "type(cstruct_list)",
            "flat_name": "Cstruct_list",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_numpy": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_numpy_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct_numpy",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_numpy",
            "f_c_module": {
                "--import--": [
                    "cstruct_numpy"
                ]
            },
            "f_derived_type": "cstruct_numpy",
            "f_module": {
                "struct_mod": [
                    "cstruct_numpy"
                ]
            },
            "f_type": "type(cstruct_numpy)",
            "flat_name": "Cstruct_numpy",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        },
        "Cstruct_ptr": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct_ptr_array_descr",
            "PY_struct_as": "numpy",
            "base": "struct",
            "c_header": [
                "struct.h"
            ],
            "c_type": "Cstruct_ptr",
            "cfi_type": "CFI_type_struct",
            "cxx_type": "Cstruct_ptr",
            "f_c_module": {
                "--import--": [
                    "cstruct_ptr"
                ]
            },
            "f_derived_type": "cstruct_ptr",
            "f_module": {
                "struct_mod": [
                    "cstruct_ptr"
                ]
            },
            "f_type": "type(cstruct_ptr)",
            "flat_name": "Cstruct_ptr",
            "sgroup": "struct",
            "sh_type": "SH_TYPE_STRUCT"
        }
    }
}