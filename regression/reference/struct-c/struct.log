Read yaml struct.yaml
Close struct_types.yaml
class Cstruct_as_class
C method int getX1(void)
C method void setX1(int val +intent(in)+value)
C method int getY1(void)
C method void setY1(int val +intent(in)+value)
Close wrapCstruct_as_class.h
Close wrapCstruct_as_class.c
class Cstruct_as_subclass
C method int getX1(void)
C method void setX1(int val +intent(in)+value)
C method int getY1(void)
C method void setY1(int val +intent(in)+value)
C method int getZ1(void)
C method void setZ1(int val +intent(in)+value)
Close wrapCstruct_as_subclass.h
Close wrapCstruct_as_subclass.c
C function int passStructByValue(Cstruct1 arg +intent(in)+value)
C function int passStruct1(const Cstruct1 * arg +intent(in))
C function int passStruct2(const Cstruct1 * s1 +intent(in), char * outbuf +charlen(LENOUTBUF)+intent(out))
C function int passStruct2(const Cstruct1 * s1 +intent(in), char * outbuf +charlen(LENOUTBUF)+intent(out)+len)
C function int acceptStructInPtr(Cstruct1 * arg +intent(in))
C function void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +intent(in)+value, double d +intent(in)+value)
C function void acceptStructInOutPtr(Cstruct1 * arg +intent(inout))
C function Cstruct1 returnStructByValue(int i +intent(in)+value, double d +intent(in)+value)
C function Cstruct1 * returnStructPtr1(int i +intent(in)+value, double d +intent(in)+value)
C function Cstruct1 * returnStructPtr2(int i +intent(in)+value, double d +intent(in)+value, char * outbuf +charlen(LENOUTBUF)+intent(out))
C function Cstruct1 * returnStructPtr2(int i +intent(in)+value, double d +intent(in)+value, char * outbuf +charlen(LENOUTBUF)+intent(out)+len)
C function Cstruct_list * get_global_struct_list(void)
C function Cstruct_as_class * Create_Cstruct_as_class(void)
C function Cstruct_as_class * Create_Cstruct_as_class_args(int x +intent(in)+value, int y +intent(in)+value)
C function int Cstruct_as_class_sum(const Cstruct_as_class * point +intent(in)+pass)
C function Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +intent(in)+value, int y +intent(in)+value, int z +intent(in)+value)
Close wrapstruct.h
Close wrapstruct.c
Close typesstruct.h
class Cstruct1
class Cstruct_ptr
class Cstruct_list
class Cstruct_numpy
class Arrays1
class Cstruct_as_class
C-interface, Fortran method int getX1(void)
C-interface, Fortran method void setX1(int val +intent(in)+value)
C-interface, Fortran method int getY1(void)
C-interface, Fortran method void setY1(int val +intent(in)+value)
class Cstruct_as_subclass
C-interface, Fortran method int getX1(void)
C-interface, Fortran method void setX1(int val +intent(in)+value)
C-interface, Fortran method int getY1(void)
C-interface, Fortran method void setY1(int val +intent(in)+value)
C-interface, Fortran method int getZ1(void)
C-interface, Fortran method void setZ1(int val +intent(in)+value)
C-interface, Fortran function int passStructByValue(Cstruct1 arg +intent(in)+value)
C-interface, Fortran function int passStruct1(const Cstruct1 * arg +intent(in))
C-interface, Fortran function int passStruct2(const Cstruct1 * s1 +intent(in), char * outbuf +charlen(LENOUTBUF)+intent(out))
C-interface function int passStruct2(const Cstruct1 * s1 +intent(in), char * outbuf +charlen(LENOUTBUF)+intent(out)+len)
C-interface, Fortran function int acceptStructInPtr(Cstruct1 * arg +intent(in))
C-interface, Fortran function void acceptStructOutPtr(Cstruct1 * arg +intent(out), int i +intent(in)+value, double d +intent(in)+value)
C-interface, Fortran function void acceptStructInOutPtr(Cstruct1 * arg +intent(inout))
C-interface, Fortran function Cstruct1 returnStructByValue(int i +intent(in)+value, double d +intent(in)+value)
C-interface, Fortran function Cstruct1 * returnStructPtr1(int i +intent(in)+value, double d +intent(in)+value)
C-interface, Fortran function Cstruct1 * returnStructPtr2(int i +intent(in)+value, double d +intent(in)+value, char * outbuf +charlen(LENOUTBUF)+intent(out))
C-interface function Cstruct1 * returnStructPtr2(int i +intent(in)+value, double d +intent(in)+value, char * outbuf +charlen(LENOUTBUF)+intent(out)+len)
C-interface, Fortran function Cstruct_list * get_global_struct_list(void)
C-interface, Fortran function Cstruct_as_class * Create_Cstruct_as_class(void)
C-interface, Fortran function Cstruct_as_class * Create_Cstruct_as_class_args(int x +intent(in)+value, int y +intent(in)+value)
C-interface, Fortran function int Cstruct_as_class_sum(const Cstruct_as_class * point +intent(in)+pass)
C-interface, Fortran function Cstruct_as_subclass * Create_Cstruct_as_subclass_args(int x +intent(in)+value, int y +intent(in)+value, int z +intent(in)+value)
Close wrapfstruct.f
