{
    "__NOTICE__": "This file is generated by Shroud 0.11.0 and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2020, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "vectors.hpp"
        ],
        "functions": [
            {
                "_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": null,
                            "c_var": "arg",
                            "cxx_T": "int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::vector<int>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "npy_dims": "SHD_arg",
                            "npy_intp_asgn": "SHD_arg[0] = arg->size();\n",
                            "npy_intp_decl": "npy_intp SHD_arg[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "pytmp_var": "SHTPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_vector_in_list",
                            "stmt1": "py_vector_in_list"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_result",
                        "stmt1": "py_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "vector_sum",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_sum(const std::vector<int> &arg)",
                "declgen": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in))",
                "fmtdict": {
                    "PY_name_impl": "PY_vector_sum",
                    "function_name": "vector_sum",
                    "underscore_name": "vector_sum"
                },
                "linenumber": 25,
                "options": {
                    "__line__": 26,
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": null,
                            "c_var": "arg",
                            "cxx_T": "int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::vector<int>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "npy_dims": "SHD_arg",
                            "npy_intp_asgn": "SHD_arg[0] = arg->size();\n",
                            "npy_intp_decl": "npy_intp SHD_arg[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_vector_out_list",
                            "stmt1": "py_vector_out_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out(std::vector<int> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 32,
                    "brief": "Copy vector into Fortran input array"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_vector_iota_out",
                    "function_name": "vector_iota_out",
                    "underscore_name": "vector_iota_out"
                },
                "linenumber": 31,
                "options": {
                    "__line__": 34,
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num(std::vector<int> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 40,
                    "brief": "Copy vector into Fortran input array",
                    "description": "Return the number of items copied into argument\nby setting fstatements for both C and Fortran.\n"
                },
                "fmtdict": {
                    "function_name": "vector_iota_out_with_num",
                    "underscore_name": "vector_iota_out_with_num"
                },
                "fstatements": {
                    "c_buf": {
                        "__line__": 50,
                        "ret": [
                            "return Darg->size;"
                        ],
                        "return_type": "long"
                    },
                    "f": {
                        "__line__": 54,
                        "call": [
                            "{F_result} = {F_C_call}({F_arg_c_call})"
                        ],
                        "declare": [
                            "integer(C_LONG) :: {F_result}"
                        ],
                        "f_module": {
                            "__line__": 56,
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "result": "num"
                    }
                },
                "linenumber": 39,
                "options": {
                    "__line__": 45,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num2(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num2(std::vector<int> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 64,
                    "brief": "Copy vector into Fortran input array",
                    "description": "Return the number of items copied into argument\nby setting fstatements for the Fortran wrapper only.\n"
                },
                "fmtdict": {
                    "function_name": "vector_iota_out_with_num2",
                    "underscore_name": "vector_iota_out_with_num2"
                },
                "fstatements": {
                    "f": {
                        "__line__": 74,
                        "declare": [
                            "integer(C_LONG) :: num"
                        ],
                        "f_module": {
                            "__line__": 76,
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "post_call": [
                            "num = Darg%size"
                        ],
                        "result": "num"
                    }
                },
                "linenumber": 63,
                "options": {
                    "__line__": 69,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_alloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "dimension": ":",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))",
                "declgen": "void vector_iota_out_alloc(std::vector<int> & arg +deref(allocatable)+dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 84,
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "fmtdict": {
                    "function_name": "vector_iota_out_alloc",
                    "underscore_name": "vector_iota_out_alloc"
                },
                "linenumber": 83,
                "options": {
                    "__line__": 86,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_iota_inout_alloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "dimension": ":",
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_inout_alloc(std::vector<int> &arg+intent(inout)+deref(allocatable))",
                "declgen": "void vector_iota_inout_alloc(std::vector<int> & arg +deref(allocatable)+dimension(:)+intent(inout))",
                "doxygen": {
                    "__line__": 92,
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "fmtdict": {
                    "function_name": "vector_iota_inout_alloc",
                    "underscore_name": "vector_iota_inout_alloc"
                },
                "linenumber": 91,
                "options": {
                    "__line__": 94,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_increment",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_increment(std::vector<int> &arg)",
                "declgen": "void vector_increment(std::vector<int> & arg +dimension(:)+intent(inout))",
                "fmtdict": {
                    "function_name": "vector_increment",
                    "underscore_name": "vector_increment"
                },
                "linenumber": 100,
                "options": {
                    "__line__": 101,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": null,
                            "c_var": "arg",
                            "cxx_T": "double",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_type": "std::vector<double>",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "npy_dims": "SHD_arg",
                            "npy_intp_asgn": "SHD_arg[0] = arg->size();\n",
                            "npy_intp_decl": "npy_intp SHD_arg[1];\n",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_vector_out_list",
                            "stmt1": "py_vector_out_list"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_d",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_d(std::vector<double> &arg+intent(out))",
                "declgen": "void vector_iota_out_d(std::vector<double> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 112,
                    "brief": "Copy vector into Fortran input array"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_vector_iota_out_d",
                    "function_name": "vector_iota_out_d",
                    "underscore_name": "vector_iota_out_d"
                },
                "linenumber": 111,
                "options": {
                    "__line__": 114,
                    "wrap_lua": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_string_count",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_string_count(const std::vector< std::string > &arg)",
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in))",
                "doxygen": {
                    "__line__": 120,
                    "brief": "count number of underscore in vector of strings",
                    "decription": "The input will be copied in order to create the C++ argument\n"
                },
                "fmtdict": {
                    "function_name": "vector_string_count",
                    "underscore_name": "vector_string_count"
                },
                "linenumber": 119,
                "options": {
                    "__line__": 124,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_string_fill",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))",
                "declgen": "void vector_string_fill(std::vector<std::string> & arg +dimension(:)+intent(out))",
                "doxygen": {
                    "__line__": 136,
                    "brief": "Fill in arg with some animal names",
                    "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
                },
                "fmtdict": {
                    "function_name": "vector_string_fill",
                    "underscore_name": "vector_string_fill"
                },
                "linenumber": 127,
                "options": {
                    "__line__": 128,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "vector_string_append",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))",
                "declgen": "void vector_string_append(std::vector<std::string> & arg +dimension(:)+intent(inout))",
                "doxygen": {
                    "__line__": 148,
                    "brief": "append '-like' to names."
                },
                "fmtdict": {
                    "function_name": "vector_string_append",
                    "underscore_name": "vector_string_append"
                },
                "linenumber": 142,
                "options": {
                    "__line__": 143,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "n": {
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int n",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "n",
                            "cxx_addr": "&",
                            "cxx_decl": "int n",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "n",
                            "data_var": "SHData_n",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_n",
                            "size_var": "SHSize_n",
                            "stmt0": "py_native_in",
                            "stmt1": "py_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_T": "int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::vector<int>",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "npy_dims": "SHD_rv",
                        "npy_intp_asgn": "SHD_rv[0] = SHCXX_rv->size();\n",
                        "npy_intp_decl": "npy_intp SHD_rv[1];\n",
                        "npy_ndims": "1",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_vector_result_list",
                        "stmt1": "py_vector_result_list"
                    }
                },
                "ast": {
                    "attrs": {
                        "dimension": ":"
                    },
                    "declarator": {
                        "name": "ReturnVectorAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "n",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::vector"
                    ],
                    "template_arguments": [
                        {
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "typemap_name": "std::vector"
                },
                "decl": "std::vector<int> ReturnVectorAlloc(int n)",
                "declgen": "std::vector<int> ReturnVectorAlloc(int n +intent(in)+value) +dimension(:)",
                "doxygen": {
                    "__line__": 156,
                    "description": "Implement iota function.\nReturn a vector as an ALLOCATABLE array.\nCopy results into the new array.\n"
                },
                "fmtdict": {
                    "PY_name_impl": "PY_ReturnVectorAlloc",
                    "function_name": "ReturnVectorAlloc",
                    "underscore_name": "return_vector_alloc"
                },
                "linenumber": 155,
                "options": {
                    "wrap_c": false
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "vectors"
        ]
    }
}