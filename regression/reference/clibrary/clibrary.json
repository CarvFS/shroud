{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "classes": [
            {
                "as_struct": true,
                "cxx_header": "",
                "fmtdict": {
                    "C_header_filename": "wrapCstruct1.h",
                    "C_impl_filename": "wrapCstruct1.c",
                    "C_type_name": "Cstruct1",
                    "F_capsule_data_type": "SHROUD_cstruct1_capsule",
                    "F_derived_name": "cstruct1",
                    "PY_struct_array_descr_create": "PY_Cstruct1_create_array_descr",
                    "PY_struct_array_descr_name": "Cstruct1_dtype",
                    "PY_struct_array_descr_variable": "PY_Cstruct1_array_descr",
                    "class_lower": "cstruct1",
                    "class_prefix": "cstruct1_",
                    "class_scope": "Cstruct1::",
                    "class_upper": "CSTRUCT1",
                    "cxx_class": "Cstruct1",
                    "cxx_type": "Cstruct1"
                },
                "linenumber": 47,
                "name": "Cstruct1",
                "options": {
                    "__line__": 50,
                    "wrap_python": false
                },
                "scope": "Cstruct1::",
                "typemap_name": "Cstruct1",
                "variables": [
                    {
                        "ast": {
                            "declarator": {
                                "name": "ifield",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "fmtdict": {
                            "field_name": "ifield",
                            "variable_lower": "ifield",
                            "variable_name": "ifield",
                            "variable_upper": "IFIELD"
                        },
                        "linenumber": "?",
                        "name": "ifield",
                        "options": {}
                    }
                ]
            }
        ],
        "copyright": [
            "#######################################################################",
            "Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC.",
            "",
            "Produced at the Lawrence Livermore National Laboratory",
            "",
            "LLNL-CODE-738041.",
            "",
            "All rights reserved.",
            "",
            "This file is part of Shroud.",
            "",
            "For details about use and distribution, please read LICENSE.",
            "",
            "#######################################################################"
        ],
        "cxx_header": "clibrary.h",
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_argument": "SH_",
            "C_array_type": "CLI_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_capsule_data_type": "CLI_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrapClibrary.h",
            "C_header_filename_suffix": "h",
            "C_header_utility": "typesClibrary.h",
            "C_impl_filename": "wrapClibrary.c",
            "C_impl_filename_suffix": "c",
            "C_local": "SHC_",
            "C_memory_dtor_function": "CLI_SHROUD_memory_destructor",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "CLI_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapfclibrary.f",
            "F_module_name": "clibrary_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "h",
            "LUA_impl_filename_suffix": "c",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_PyObject": "PyObject",
            "PY_extern_C_begin": "",
            "PY_header_filename": "pyClibrarymodule.h",
            "PY_header_filename_suffix": "h",
            "PY_impl_filename_suffix": "c",
            "PY_library_doc": "library documentation",
            "PY_module_filename": "pyClibrarymodule.c",
            "PY_module_name": "clibrary",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_numpy_array_dtor_context": "PY_array_destructor_context",
            "PY_numpy_array_dtor_function": "PY_array_destructor_function",
            "PY_obj": "obj",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "PY_utility_filename": "pyClibraryutil.c",
            "YAML_type_filename": "clibrary_types.yaml",
            "c_temp": "SHT_",
            "class_prefix": "",
            "class_scope": "",
            "cxx_class": "",
            "function_suffix": "",
            "library": "Clibrary",
            "library_lower": "clibrary",
            "library_upper": "CLIBRARY",
            "namespace_scope": "",
            "stdlib": "",
            "template_suffix": ""
        },
        "functions": [
            {
                "ast": {
                    "declarator": {
                        "name": "Function1",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Function1()",
                "declgen": "void Function1()",
                "fmtdict": {
                    "C_call_code": "Function1(\t);",
                    "C_call_list": "",
                    "C_name": "Function1",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_function1",
                    "F_C_name": "function1",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call c_function1()",
                    "F_name_function": "function1",
                    "F_name_generic": "function1",
                    "F_name_impl": "function1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_Function1",
                    "c_const": "",
                    "function_name": "Function1",
                    "underscore_name": "function1"
                },
                "linenumber": 53,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg1",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg2",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Function2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double Function2(double arg1, int arg2)",
                "declgen": "double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "double SHC_rv =\t Function2(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "Function2",
                    "C_prototype": "double arg1,\t int arg2",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "double",
                    "F_C_call": "c_function2",
                    "F_C_name": "function2",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "SHT_rv = c_function2(arg1,\t arg2)",
                    "F_name_function": "function2",
                    "F_name_generic": "function2",
                    "F_name_impl": "function2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_Function2",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "Function2",
                    "underscore_name": "function2"
                },
                "linenumber": 54,
                "options": {}
            },
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "len",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&len",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "len",
                            "f_var": "len",
                            "pre_call_intent": "size(values,kind=C_INT)"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int len",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "len",
                            "cxx_addr": "&",
                            "cxx_decl": "int len",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "len",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "PyArray_SIZE(SHPy_values)",
                            "py_var": "SHPy_len",
                            "size_var": "SHSize_len"
                        }
                    },
                    "result": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "result",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "result",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "result",
                            "f_var": "result"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "int result",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "result",
                            "cxx_addr": "",
                            "cxx_decl": "int result",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "result",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_result",
                            "size_var": "SHSize_result"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "values",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "values",
                            "f_var": "values"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int * values",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_decl": "int * values",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "numpy_type": "NPY_INT",
                            "py_type": "PyObject",
                            "py_var": "SHPy_values",
                            "pytmp_var": "SHTPy_values",
                            "size_var": "SHSize_values"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Sum",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "size(values)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "len",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "dimension": ":",
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "result",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Sum(int len +implied(size(values)), int *values +dimension(:)+intent(in), int *result +intent(out))",
                "declgen": "void Sum(int len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))",
                "fmtdict": {
                    "C_call_code": "Sum(\tlen,\t values,\t result);",
                    "C_call_list": "len,\t values,\t result",
                    "C_name": "Sum",
                    "C_prototype": "int len,\t int * values,\t int * result",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_sum",
                    "F_C_name": "c_sum",
                    "F_arg_c_call": "len,\t values,\t result",
                    "F_arguments": "values,\t result",
                    "F_call_code": "call c_sum(len,\t values,\t result)",
                    "F_name_function": "sum",
                    "F_name_generic": "sum",
                    "F_name_impl": "sum",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_Sum",
                    "c_const": "",
                    "function_name": "Sum",
                    "underscore_name": "sum"
                },
                "linenumber": 55,
                "options": {
                    "__line__": 58,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "out": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "out",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "out",
                            "f_var": "out"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "int * out",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_decl": "int * out",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "out",
                            "npy_dims": "SHD_out",
                            "npy_ndims": "1",
                            "numpy_type": "NPY_INT",
                            "pointer_shape": "3",
                            "py_var": "SHPy_out",
                            "size_var": "SHSize_out"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "fillIntArray",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "dimension": "3",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fillIntArray(int *out +intent(out)+dimension(3))",
                "declgen": "void fillIntArray(int * out +dimension(3)+intent(out))",
                "doxygen": {
                    "__line__": 63,
                    "description": "Return three values into memory the user provides.\n"
                },
                "fmtdict": {
                    "C_call_code": "fillIntArray(\tout);",
                    "C_call_list": "out",
                    "C_name": "fillIntArray",
                    "C_prototype": "int * out",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_fill_int_array",
                    "F_C_name": "fill_int_array",
                    "F_arg_c_call": "out",
                    "F_arguments": "out",
                    "F_call_code": "call c_fill_int_array(out)",
                    "F_name_function": "fill_int_array",
                    "F_name_generic": "fill_int_array",
                    "F_name_impl": "fill_int_array",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_fillIntArray",
                    "c_const": "",
                    "function_name": "fillIntArray",
                    "underscore_name": "fill_int_array"
                },
                "linenumber": 62,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SH_arg",
                            "f_var": "arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "bool arg",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "bool arg",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg",
                            "numpy_type": "NPY_BOOL",
                            "py_type": "PyObject",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "bool",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "bool",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": "PyBool_Type",
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_BOOL",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Function3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool Function3(bool arg)",
                "declgen": "bool Function3(bool arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "bool SHC_rv =\t Function3(\targ);",
                    "C_call_list": "arg",
                    "C_name": "Function3",
                    "C_prototype": "bool arg",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "bool",
                    "F_C_call": "c_function3",
                    "F_C_name": "c_function3",
                    "F_arg_c_call": "SH_arg",
                    "F_arguments": "arg",
                    "F_call_code": "SHT_rv = c_function3(SH_arg)",
                    "F_name_function": "function3",
                    "F_name_generic": "function3",
                    "F_name_impl": "function3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_Function3",
                    "c_const": "",
                    "cxx_rv_decl": "bool SHC_rv",
                    "function_name": "Function3",
                    "underscore_name": "function3"
                },
                "linenumber": 69,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&arg1",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SH_arg1",
                            "f_var": "arg1"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "bool arg1",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "bool arg1",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg1",
                            "numpy_type": "NPY_BOOL",
                            "py_type": "PyObject",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg2",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SH_arg2",
                            "f_var": "arg2"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool arg2",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_decl": "bool arg2",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "numpy_type": "NPY_BOOL",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2"
                        }
                    },
                    "arg3": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg3",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg3",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg3",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SH_arg3",
                            "f_var": "arg3"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool arg3",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg3",
                            "cxx_addr": "",
                            "cxx_decl": "bool arg3",
                            "cxx_member": "->",
                            "cxx_type": "bool",
                            "cxx_var": "arg3",
                            "numpy_type": "NPY_BOOL",
                            "py_type": "PyObject",
                            "py_var": "SHPy_arg3",
                            "size_var": "SHSize_arg3"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "Function3b",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg3",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void Function3b(const bool arg1, bool *arg2+intent(out), bool *arg3+intent(inout))",
                "declgen": "void Function3b(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))",
                "fmtdict": {
                    "C_call_code": "Function3b(\targ1,\t arg2,\t arg3);",
                    "C_call_list": "arg1,\t arg2,\t arg3",
                    "C_name": "Function3b",
                    "C_prototype": "const bool arg1,\t bool * arg2,\t bool * arg3",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_function3b",
                    "F_C_name": "c_function3b",
                    "F_arg_c_call": "SH_arg1,\t SH_arg2,\t SH_arg3",
                    "F_arguments": "arg1,\t arg2,\t arg3",
                    "F_call_code": "call c_function3b(SH_arg1,\t SH_arg2,\t SH_arg3)",
                    "F_name_function": "function3b",
                    "F_name_generic": "function3b",
                    "F_name_impl": "function3b",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_Function3b",
                    "c_const": "",
                    "function_name": "Function3b",
                    "underscore_name": "function3b"
                },
                "linenumber": 70,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * arg1",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_decl": "const char * arg1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * arg2",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_decl": "const char * arg2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHC_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": "30"
                    },
                    "declarator": {
                        "name": "Function4a",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char *Function4a( const char *arg1, const char *arg2 ) +len(30)",
                "declgen": "char * Function4a(const char * arg1 +intent(in), const char * arg2 +intent(in)) +deref(result_as_arg)+len(30)",
                "fmtdict": {
                    "C_call_code": "char * SHC_rv =\t Function4a(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "Function4a",
                    "C_prototype": "const char * arg1,\t const char * arg2",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "char *",
                    "F_C_call": "c_function4a_bufferify",
                    "F_C_name": "c_function4a",
                    "F_arg_c_call": "trim(arg1)//C_NULL_CHAR,\t trim(arg2)//C_NULL_CHAR,\t SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "call c_function4a_bufferify(trim(arg1)//C_NULL_CHAR,\t trim(arg2)//C_NULL_CHAR,\t SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "function4a",
                    "F_name_generic": "function4a",
                    "F_name_impl": "function4a",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_Function4a",
                    "c_const": "",
                    "cxx_rv_decl": "char * SHC_rv",
                    "function_name": "Function4a",
                    "underscore_name": "function4a"
                },
                "linenumber": 72,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "SHC_rv",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "declarator": {
                        "name": "Function4a",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "char *Function4a( const char *arg1, const char *arg2 ) +len(30)",
                "declgen": "void Function4a(const char * arg1 +intent(in), const char * arg2 +intent(in), char * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "fmtdict": {
                    "C_call_code": "char * SHC_rv =\t Function4a(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "CLI_function4a_bufferify",
                    "C_post_call": "ShroudStrCopy(SHF_rv, NSHF_rv,\t SHC_rv,\t -1);",
                    "C_prototype": "const char * arg1,\t const char * arg2,\t char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_function4a_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "char * SHC_rv",
                    "function_name": "Function4a",
                    "function_suffix": "_bufferify",
                    "underscore_name": "function4a"
                },
                "linenumber": 72,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_var": "name"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * name",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_decl": "const char * name",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptName",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptName(const char *name)",
                "declgen": "void acceptName(const char * name +intent(in))",
                "fmtdict": {
                    "C_call_code": "acceptName(\tname);",
                    "C_call_list": "name",
                    "C_name": "acceptName",
                    "C_prototype": "const char * name",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_name",
                    "F_C_name": "c_accept_name",
                    "F_arg_c_call": "trim(name)//C_NULL_CHAR",
                    "F_arguments": "name",
                    "F_call_code": "call c_accept_name(trim(name)//C_NULL_CHAR)",
                    "F_name_function": "accept_name",
                    "F_name_generic": "accept_name",
                    "F_name_impl": "accept_name",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptName",
                    "c_const": "",
                    "function_name": "acceptName",
                    "underscore_name": "accept_name"
                },
                "linenumber": 76,
                "options": {}
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char name1[MAXNAME]",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name1",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_decl": "char name1[MAXNAME]",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "numpy_type": null,
                            "py_var": "SHPy_name1",
                            "size_var": "SHSize_name1"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnOneName",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnOneName(char *name1+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnOneName(char * name1 +charlen(MAXNAME)+intent(out))",
                "doxygen": {
                    "__line__": 84,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_code": "returnOneName(\tname1);",
                    "C_call_list": "name1",
                    "C_name": "returnOneName",
                    "C_prototype": "char * name1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_return_one_name_bufferify",
                    "F_C_name": "c_return_one_name",
                    "F_arg_c_call": "name1,\t len(name1, kind=C_INT)",
                    "F_arguments": "name1",
                    "F_call_code": "call c_return_one_name_bufferify(name1,\t len(name1, kind=C_INT))",
                    "F_name_function": "return_one_name",
                    "F_name_generic": "return_one_name",
                    "F_name_impl": "return_one_name",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_returnOneName",
                    "c_const": "",
                    "function_name": "returnOneName",
                    "underscore_name": "return_one_name"
                },
                "linenumber": 83,
                "options": {}
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "c_var_len": "Nname1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "name1",
                            "f_var": "name1"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnOneName",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Nname1",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnOneName(char *name1+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnOneName(char * name1 +charlen(MAXNAME)+intent(out)+len(Nname1))",
                "doxygen": {
                    "__line__": 84,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_code": "returnOneName(\tname1);",
                    "C_call_list": "name1",
                    "C_name": "CLI_return_one_name_bufferify",
                    "C_post_call": "ShroudStrBlankFill(name1, Nname1);",
                    "C_prototype": "char * name1,\t int Nname1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_return_one_name_bufferify",
                    "c_const": "",
                    "function_name": "returnOneName",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_one_name"
                },
                "linenumber": 83,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char name1[MAXNAME]",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name1",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_decl": "char name1[MAXNAME]",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "numpy_type": null,
                            "py_var": "SHPy_name1",
                            "size_var": "SHSize_name1"
                        }
                    },
                    "name2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char name2[MAXNAME]",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name2",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_decl": "char name2[MAXNAME]",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "numpy_type": null,
                            "py_var": "SHPy_name2",
                            "size_var": "SHSize_name2"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnTwoNames",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "name2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnTwoNames(char *name1+intent(out)+charlen(MAXNAME), char *name2+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out), char * name2 +charlen(MAXNAME)+intent(out))",
                "doxygen": {
                    "__line__": 93,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_code": "returnTwoNames(\tname1,\t name2);",
                    "C_call_list": "name1,\t name2",
                    "C_name": "returnTwoNames",
                    "C_prototype": "char * name1,\t char * name2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_return_two_names_bufferify",
                    "F_C_name": "c_return_two_names",
                    "F_arg_c_call": "name1,\t len(name1, kind=C_INT),\t name2,\t len(name2, kind=C_INT)",
                    "F_arguments": "name1,\t name2",
                    "F_call_code": "call c_return_two_names_bufferify(name1,\t len(name1, kind=C_INT),\t name2,\t len(name2, kind=C_INT))",
                    "F_name_function": "return_two_names",
                    "F_name_generic": "return_two_names",
                    "F_name_impl": "return_two_names",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_returnTwoNames",
                    "c_const": "",
                    "function_name": "returnTwoNames",
                    "underscore_name": "return_two_names"
                },
                "linenumber": 91,
                "options": {}
            },
            {
                "_fmtargs": {
                    "name1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name1",
                            "c_var_len": "Nname1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name1",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "name1",
                            "f_var": "name1"
                        }
                    },
                    "name2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name2",
                            "c_var_len": "Nname2",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "name2",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "name2",
                            "f_var": "name2"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnTwoNames",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Nname1",
                                "value": false
                            },
                            "declarator": {
                                "name": "name1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Nname2",
                                "value": false
                            },
                            "declarator": {
                                "name": "name2",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnTwoNames(char *name1+intent(out)+charlen(MAXNAME), char *name2+intent(out)+charlen(MAXNAME))",
                "declgen": "void returnTwoNames(char * name1 +charlen(MAXNAME)+intent(out)+len(Nname1), char * name2 +charlen(MAXNAME)+intent(out)+len(Nname2))",
                "doxygen": {
                    "__line__": 93,
                    "brief": "Test charlen attribute",
                    "description": "Each argument is assumed to be at least MAXNAME long.\nThis define is provided by the user.\nThe function will copy into the user provided buffer.\n"
                },
                "fmtdict": {
                    "C_call_code": "returnTwoNames(\tname1,\t name2);",
                    "C_call_list": "name1,\t name2",
                    "C_name": "CLI_return_two_names_bufferify",
                    "C_post_call": "ShroudStrBlankFill(name1, Nname1);\nShroudStrBlankFill(name2, Nname2);",
                    "C_prototype": "char * name1,\t int Nname1,\t char * name2,\t int Nname2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_return_two_names_bufferify",
                    "c_const": "",
                    "function_name": "returnTwoNames",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_two_names"
                },
                "linenumber": 91,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "ltext": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int ltext",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_decl": "int ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "MAXNAME",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char text[MAXNAME]",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "charlen": "MAXNAME",
                            "cxx_addr": "",
                            "cxx_decl": "char text[MAXNAME]",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "numpy_type": null,
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedTextLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void ImpliedTextLen(char *text+intent(out)+charlen(MAXNAME), int ltext+implied(len(text)))",
                "declgen": "void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out), int ltext +implied(len(text))+intent(in)+value)",
                "doxygen": {
                    "__line__": 103,
                    "brief": "Fill text, at most ltext characters."
                },
                "fmtdict": {
                    "C_call_code": "ImpliedTextLen(\ttext,\t ltext);",
                    "C_call_list": "text,\t ltext",
                    "C_name": "ImpliedTextLen",
                    "C_prototype": "char * text,\t int ltext",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_implied_text_len_bufferify",
                    "F_C_name": "c_implied_text_len",
                    "F_arg_c_call": "text,\t len(text, kind=C_INT),\t ltext",
                    "F_arguments": "text",
                    "F_call_code": "call c_implied_text_len_bufferify(text,\t len(text, kind=C_INT),\t ltext)",
                    "F_name_function": "implied_text_len",
                    "F_name_generic": "implied_text_len",
                    "F_name_impl": "implied_text_len",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_ImpliedTextLen",
                    "c_const": "",
                    "function_name": "ImpliedTextLen",
                    "underscore_name": "implied_text_len"
                },
                "linenumber": 101,
                "options": {}
            },
            {
                "_fmtargs": {
                    "ltext": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "ltext",
                            "f_var": "ltext",
                            "pre_call_intent": "len(text,kind=C_INT)"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "c_var_len": "Ntext",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "text",
                            "f_var": "text"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "ImpliedTextLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "MAXNAME",
                                "intent": "out",
                                "len": "Ntext",
                                "value": false
                            },
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void ImpliedTextLen(char *text+intent(out)+charlen(MAXNAME), int ltext+implied(len(text)))",
                "declgen": "void ImpliedTextLen(char * text +charlen(MAXNAME)+intent(out)+len(Ntext), int ltext +implied(len(text))+intent(in)+value)",
                "doxygen": {
                    "__line__": 103,
                    "brief": "Fill text, at most ltext characters."
                },
                "fmtdict": {
                    "C_call_code": "ImpliedTextLen(\ttext,\t ltext);",
                    "C_call_list": "text,\t ltext",
                    "C_name": "CLI_implied_text_len_bufferify",
                    "C_post_call": "ShroudStrBlankFill(text, Ntext);",
                    "C_prototype": "char * text,\t int Ntext,\t int ltext",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_implied_text_len_bufferify",
                    "c_const": "",
                    "function_name": "ImpliedTextLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "implied_text_len"
                },
                "linenumber": 101,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "flag",
                            "f_var": "flag",
                            "pre_call_intent": ".FALSE._C_BOOL"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "false",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    },
                    "ltext": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "ltext",
                            "f_var": "ltext",
                            "pre_call_intent": "len(text,kind=C_INT)"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int ltext",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_decl": "int ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "strlen(text)",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "text",
                            "f_var": "text"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * text",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_decl": "const char * text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "numpy_type": null,
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "false",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int ImpliedLen(const char *text, int ltext+implied(len(text)), bool flag+implied(false))",
                "declgen": "int ImpliedLen(const char * text +intent(in), int ltext +implied(len(text))+intent(in)+value, bool flag +implied(false)+intent(in)+value)",
                "doxygen": {
                    "__line__": 110,
                    "brief": "Return the implied argument - text length",
                    "description": "Pass the Fortran length of the char argument directy to the C function.\nNo need for the bufferify version which will needlessly copy the string.\n"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t ImpliedLen(\ttext,\t ltext,\t flag);",
                    "C_call_list": "text,\t ltext,\t flag",
                    "C_name": "ImpliedLen",
                    "C_prototype": "const char * text,\t int ltext,\t bool flag",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_implied_len",
                    "F_C_name": "c_implied_len",
                    "F_arg_c_call": "trim(text)//C_NULL_CHAR,\t ltext,\t flag",
                    "F_arguments": "text",
                    "F_call_code": "SHT_rv = c_implied_len(trim(text)//C_NULL_CHAR,\t ltext,\t flag)",
                    "F_name_function": "implied_len",
                    "F_name_generic": "implied_len",
                    "F_name_impl": "implied_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedLen",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "ImpliedLen",
                    "underscore_name": "implied_len"
                },
                "linenumber": 106,
                "options": {
                    "F_create_bufferify_function": false,
                    "__line__": 108
                }
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "flag",
                            "f_var": "flag",
                            "pre_call_intent": ".TRUE._C_BOOL"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "true",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    },
                    "ltext": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "ltext",
                            "f_var": "ltext",
                            "pre_call_intent": "len_trim(text,kind=C_INT)"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int ltext",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "ltext",
                            "cxx_addr": "&",
                            "cxx_decl": "int ltext",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ltext",
                            "numpy_type": "NPY_INT",
                            "pre_call_intent": "strlen(text)",
                            "py_var": "SHPy_ltext",
                            "size_var": "SHSize_ltext"
                        }
                    },
                    "text": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "text",
                            "f_var": "text"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * text",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "text",
                            "cxx_addr": "",
                            "cxx_decl": "const char * text",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "text",
                            "numpy_type": null,
                            "py_var": "SHPy_text",
                            "size_var": "SHSize_text"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedLenTrim",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "text",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "implied": "len_trim(text)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ltext",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "true",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int ImpliedLenTrim(const char *text, int ltext+implied(len_trim(text)), bool flag+implied(true))",
                "declgen": "int ImpliedLenTrim(const char * text +intent(in), int ltext +implied(len_trim(text))+intent(in)+value, bool flag +implied(true)+intent(in)+value)",
                "doxygen": {
                    "__line__": 120,
                    "brief": "Return the implied argument - text length",
                    "description": "Pass the Fortran length of the char argument directy to the C function.\nNo need for the bufferify version which will needlessly copy the string.\n"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t ImpliedLenTrim(\ttext,\t ltext,\t flag);",
                    "C_call_list": "text,\t ltext,\t flag",
                    "C_name": "ImpliedLenTrim",
                    "C_prototype": "const char * text,\t int ltext,\t bool flag",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_implied_len_trim",
                    "F_C_name": "c_implied_len_trim",
                    "F_arg_c_call": "trim(text)//C_NULL_CHAR,\t ltext,\t flag",
                    "F_arguments": "text",
                    "F_call_code": "SHT_rv = c_implied_len_trim(trim(text)//C_NULL_CHAR,\t ltext,\t flag)",
                    "F_name_function": "implied_len_trim",
                    "F_name_generic": "implied_len_trim",
                    "F_name_impl": "implied_len_trim",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedLenTrim",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "ImpliedLenTrim",
                    "underscore_name": "implied_len_trim"
                },
                "linenumber": 116,
                "options": {
                    "F_create_bufferify_function": false,
                    "__line__": 118
                }
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "flag",
                            "f_var": "flag",
                            "pre_call_intent": ".TRUE._C_BOOL"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "true",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "bool",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "bool",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": "PyBool_Type",
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_BOOL",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedBoolTrue",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "true",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool ImpliedBoolTrue(bool flag+implied(true))",
                "declgen": "bool ImpliedBoolTrue(bool flag +implied(true)+intent(in)+value)",
                "doxygen": {
                    "__line__": 127,
                    "brief": "Single, implied bool argument"
                },
                "fmtdict": {
                    "C_call_code": "bool SHC_rv =\t ImpliedBoolTrue(\tflag);",
                    "C_call_list": "flag",
                    "C_name": "ImpliedBoolTrue",
                    "C_prototype": "bool flag",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "bool",
                    "F_C_call": "c_implied_bool_true",
                    "F_C_name": "c_implied_bool_true",
                    "F_arg_c_call": "flag",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_implied_bool_true(flag)",
                    "F_name_function": "implied_bool_true",
                    "F_name_generic": "implied_bool_true",
                    "F_name_impl": "implied_bool_true",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedBoolTrue",
                    "c_const": "",
                    "cxx_rv_decl": "bool SHC_rv",
                    "function_name": "ImpliedBoolTrue",
                    "underscore_name": "implied_bool_true"
                },
                "linenumber": 126,
                "options": {}
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "flag",
                            "f_var": "flag",
                            "pre_call_intent": ".FALSE._C_BOOL"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "bool flag",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_decl": "bool flag",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "flag",
                            "numpy_type": "NPY_BOOL",
                            "pre_call_intent": "false",
                            "py_var": "SHPy_flag",
                            "size_var": "SHSize_flag"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "bool",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "bool",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": "PyBool_Type",
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_BOOL",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "ImpliedBoolFalse",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "implied": "false",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "bool"
                    ],
                    "typemap_name": "bool"
                },
                "decl": "bool ImpliedBoolFalse(bool flag+implied(false))",
                "declgen": "bool ImpliedBoolFalse(bool flag +implied(false)+intent(in)+value)",
                "doxygen": {
                    "__line__": 131,
                    "brief": "Single, implied bool argument"
                },
                "fmtdict": {
                    "C_call_code": "bool SHC_rv =\t ImpliedBoolFalse(\tflag);",
                    "C_call_list": "flag",
                    "C_name": "ImpliedBoolFalse",
                    "C_prototype": "bool flag",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "bool",
                    "F_C_call": "c_implied_bool_false",
                    "F_C_name": "c_implied_bool_false",
                    "F_arg_c_call": "flag",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_implied_bool_false(flag)",
                    "F_name_function": "implied_bool_false",
                    "F_name_generic": "implied_bool_false",
                    "F_name_impl": "implied_bool_false",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_ImpliedBoolFalse",
                    "c_const": "",
                    "cxx_rv_decl": "bool SHC_rv",
                    "function_name": "ImpliedBoolFalse",
                    "underscore_name": "implied_bool_false"
                },
                "linenumber": 130,
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "bindC1",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC1()",
                "declgen": "void bindC1()",
                "doxygen": {
                    "__line__": 136,
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates only an interface.\n"
                },
                "fmtdict": {
                    "C_call_code": "bindC1(\t);",
                    "C_call_list": "",
                    "C_name": "bindC1",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "fortran_bindc1b",
                    "F_C_name": "Fortran_bindC1a",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call fortran_bindc1b()",
                    "F_name_function": "bind_c1",
                    "F_name_generic": "bind_c1",
                    "F_name_impl": "Fortran_bindC1a",
                    "F_subprogram": "subroutine",
                    "__line__": 140,
                    "c_const": "",
                    "function_name": "bindC1",
                    "underscore_name": "bind_c1"
                },
                "linenumber": 135,
                "options": {
                    "__line__": 145,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "bindC2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC2(char *outbuf+intent(out))",
                "declgen": "void bindC2(char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 149,
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates a Fortran bufferify function and an interface.\n"
                },
                "fmtdict": {
                    "C_call_code": "bindC2(\toutbuf);",
                    "C_call_list": "outbuf",
                    "C_name": "bindC2",
                    "C_prototype": "char * outbuf",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_bind_c2_bufferify",
                    "F_C_name": "c_bind_c2",
                    "F_arg_c_call": "outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "outbuf",
                    "F_call_code": "call c_bind_c2_bufferify(outbuf,\t len(outbuf, kind=C_INT))",
                    "F_name_function": "bind_c2",
                    "F_name_generic": "bind_c2",
                    "F_name_impl": "Fortran_bindC2a",
                    "F_subprogram": "subroutine",
                    "__line__": 153,
                    "c_const": "",
                    "function_name": "bindC2",
                    "underscore_name": "bind_c2"
                },
                "linenumber": 148,
                "options": {
                    "__line__": 158,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_var": "outbuf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "bindC2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void bindC2(char *outbuf+intent(out))",
                "declgen": "void bindC2(char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 149,
                    "brief": "Rename Fortran name for interface only function",
                    "description": "This creates a Fortran bufferify function and an interface.\n"
                },
                "fmtdict": {
                    "C_call_code": "bindC2(\toutbuf);",
                    "C_call_list": "outbuf",
                    "C_name": "CLI_bind_c2_bufferify",
                    "C_post_call": "ShroudStrBlankFill(outbuf, Noutbuf);",
                    "C_prototype": "char * outbuf,\t int Noutbuf",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_bind_c2_bufferify",
                    "F_name_impl": "Fortran_bindC2a",
                    "__line__": 153,
                    "c_const": "",
                    "function_name": "bindC2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "bind_c2"
                },
                "linenumber": 148,
                "options": {
                    "__line__": 158,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_var": "in"
                        }
                    },
                    "out": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "out",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "out",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "out",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "out",
                            "f_var": "out"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passVoidStarStar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "out",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passVoidStarStar(void *in+intent(in), void **out+intent(out))",
                "declgen": "void passVoidStarStar(void * in +intent(in)+value, void * * out +intent(out))",
                "doxygen": {
                    "__line__": 162,
                    "brief": "Assign in to out.",
                    "description": "No bufferify function is created, only an interface.\n"
                },
                "fmtdict": {
                    "C_call_code": "passVoidStarStar(\tin,\t out);",
                    "C_call_list": "in,\t out",
                    "C_name": "passVoidStarStar",
                    "C_prototype": "void * in,\t void * * out",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_void_star_star",
                    "F_C_name": "pass_void_star_star",
                    "F_arg_c_call": "in,\t out",
                    "F_arguments": "in,\t out",
                    "F_call_code": "call c_pass_void_star_star(in,\t out)",
                    "F_name_function": "pass_void_star_star",
                    "F_name_generic": "pass_void_star_star",
                    "F_name_impl": "pass_void_star_star",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "passVoidStarStar",
                    "underscore_name": "pass_void_star_star"
                },
                "linenumber": 161,
                "options": {
                    "__line__": 166,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passAssumedType",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedType(void *arg+assumedtype)",
                "declgen": "int passAssumedType(void * arg +assumedtype+intent(in))",
                "doxygen": {
                    "__line__": 170,
                    "brief": "Test assumed-type",
                    "description": "No bufferify function is created, only an interface.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t passAssumedType(\targ);",
                    "C_call_list": "arg",
                    "C_name": "passAssumedType",
                    "C_prototype": "void * arg",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_pass_assumed_type",
                    "F_C_name": "pass_assumed_type",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "SHT_rv = c_pass_assumed_type(arg)",
                    "F_name_function": "pass_assumed_type",
                    "F_name_generic": "pass_assumed_type",
                    "F_name_impl": "pass_assumed_type",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passAssumedType",
                    "underscore_name": "pass_assumed_type"
                },
                "linenumber": 169,
                "options": {
                    "__line__": 176,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passAssumedTypeBuf",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedTypeBuf(void *arg+assumedtype, char *outbuf+intent(out))",
                "declgen": "int passAssumedTypeBuf(void * arg +assumedtype+intent(in), char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 180,
                    "brief": "Test assumed-type",
                    "description": "A bufferify function is created.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t passAssumedTypeBuf(\targ,\t outbuf);",
                    "C_call_list": "arg,\t outbuf",
                    "C_name": "passAssumedTypeBuf",
                    "C_prototype": "void * arg,\t char * outbuf",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_pass_assumed_type_buf_bufferify",
                    "F_C_name": "c_pass_assumed_type_buf",
                    "F_arg_c_call": "arg,\t outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "arg,\t outbuf",
                    "F_call_code": "SHT_rv = c_pass_assumed_type_buf_bufferify(arg,\t outbuf,\t len(outbuf, kind=C_INT))",
                    "F_name_function": "pass_assumed_type_buf",
                    "F_name_generic": "pass_assumed_type_buf",
                    "F_name_impl": "pass_assumed_type_buf",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passAssumedTypeBuf",
                    "underscore_name": "pass_assumed_type_buf"
                },
                "linenumber": 179,
                "options": {
                    "__line__": 186,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "arg",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "arg",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_var": "outbuf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passAssumedTypeBuf",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passAssumedTypeBuf(void *arg+assumedtype, char *outbuf+intent(out))",
                "declgen": "int passAssumedTypeBuf(void * arg +assumedtype+intent(in), char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 180,
                    "brief": "Test assumed-type",
                    "description": "A bufferify function is created.\nShould only be call with an C_INT argument, and will\nreturn the value passed in.\n"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t passAssumedTypeBuf(\targ,\t outbuf);",
                    "C_call_list": "arg,\t outbuf",
                    "C_name": "CLI_pass_assumed_type_buf_bufferify",
                    "C_post_call": "ShroudStrBlankFill(outbuf, Noutbuf);",
                    "C_prototype": "void * arg,\t char * outbuf,\t int Noutbuf",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_name": "c_pass_assumed_type_buf_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passAssumedTypeBuf",
                    "function_suffix": "_bufferify",
                    "underscore_name": "pass_assumed_type_buf"
                },
                "linenumber": 179,
                "options": {
                    "__line__": 186,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_var": "in"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&incr",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "incr",
                            "f_var": "incr"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&type",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_var": "type"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "external": true,
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": false
                                    },
                                    "declarator": {
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback2(int type, void * in+assumedtype, void (*incr)(int *)+external)",
                "declgen": "void callback2(int type +intent(in)+value, void * in +assumedtype+intent(in), void ( * incr)(int *) +external+intent(in)+value)",
                "doxygen": {
                    "__line__": 201,
                    "brief": "Test function pointer"
                },
                "fmtdict": {
                    "C_call_code": "callback2(\ttype,\t in,\t incr);",
                    "C_call_list": "type,\t in,\t incr",
                    "C_name": "callback2",
                    "C_prototype": "int type,\t void * in,\t void ( * incr)(\tint *)",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_callback2",
                    "F_C_name": "c_callback2",
                    "F_arg_c_call": "type,\t in,\t incr",
                    "F_arguments": "type,\t in,\t incr",
                    "F_call_code": "call c_callback2(type,\t in,\t incr)",
                    "F_name_function": "callback2",
                    "F_name_generic": "callback2",
                    "F_name_impl": "callback2",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "callback2",
                    "underscore_name": "callback2"
                },
                "linenumber": 199,
                "options": {
                    "__line__": 203,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&incr",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "type",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "type",
                            "idtor": "0"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "external": true,
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": false
                                    },
                                    "declarator": {
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback3(const char *type, void * in+assumedtype, void (*incr)(int *)+external, char *outbuf+intent(out))",
                "declgen": "void callback3(const char * type +intent(in), void * in +assumedtype+intent(in), void ( * incr)(int *) +external+intent(in)+value, char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 209,
                    "brief": "Test function pointer",
                    "description": "A bufferify function will be created.\n"
                },
                "fmtdict": {
                    "C_call_code": "callback3(\ttype,\t in,\t incr,\t outbuf);",
                    "C_call_list": "type,\t in,\t incr,\t outbuf",
                    "C_name": "callback3",
                    "C_prototype": "const char * type,\t void * in,\t void ( * incr)(\tint *),\t char * outbuf",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_callback3_bufferify",
                    "F_C_name": "c_callback3",
                    "F_arg_c_call": "trim(type)//C_NULL_CHAR,\t in,\t incr,\t outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "type,\t in,\t incr,\t outbuf",
                    "F_call_code": "call c_callback3_bufferify(trim(type)//C_NULL_CHAR,\t in,\t incr,\t outbuf,\t len(outbuf, kind=C_INT))",
                    "F_name_function": "callback3",
                    "F_name_generic": "callback3",
                    "F_name_impl": "callback3",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "callback3",
                    "underscore_name": "callback3"
                },
                "linenumber": 207,
                "options": {
                    "__line__": 213,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "in",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "in",
                            "cxx_member": "->",
                            "cxx_type": "void",
                            "cxx_var": "in",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_var": "in"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&incr",
                            "cxx_member": ".",
                            "cxx_type": "void",
                            "cxx_var": "incr",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "incr",
                            "f_var": "incr"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_var": "outbuf"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "type",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "type",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_var": "type"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "callback3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "assumedtype": true,
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "external": true,
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": false
                                    },
                                    "declarator": {
                                        "pointer": [
                                            {
                                                "ptr": "*"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void callback3(const char *type, void * in+assumedtype, void (*incr)(int *)+external, char *outbuf+intent(out))",
                "declgen": "void callback3(const char * type +intent(in), void * in +assumedtype+intent(in), void ( * incr)(int *) +external+intent(in)+value, char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 209,
                    "brief": "Test function pointer",
                    "description": "A bufferify function will be created.\n"
                },
                "fmtdict": {
                    "C_call_code": "callback3(\ttype,\t in,\t incr,\t outbuf);",
                    "C_call_list": "type,\t in,\t incr,\t outbuf",
                    "C_name": "CLI_callback3_bufferify",
                    "C_post_call": "ShroudStrBlankFill(outbuf, Noutbuf);",
                    "C_prototype": "const char * type,\t void * in,\t void ( * incr)(\tint *),\t char * outbuf,\t int Noutbuf",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_callback3_bufferify",
                    "c_const": "",
                    "function_name": "callback3",
                    "function_suffix": "_bufferify",
                    "underscore_name": "callback3"
                },
                "linenumber": 207,
                "options": {
                    "__line__": 213,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "s1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "s1",
                            "cxx_member": "->",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "s1",
                            "f_var": "s1"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passStruct1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "s1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct1(Cstruct1 *s1)",
                "declgen": "int passStruct1(Cstruct1 * s1 +intent(in))",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t passStruct1(\ts1);",
                    "C_call_list": "s1",
                    "C_name": "passStruct1",
                    "C_prototype": "Cstruct1 * s1",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_pass_struct1",
                    "F_C_name": "pass_struct1",
                    "F_arg_c_call": "s1",
                    "F_arguments": "s1",
                    "F_call_code": "SHT_rv = c_pass_struct1(s1)",
                    "F_name_function": "pass_struct1",
                    "F_name_generic": "pass_struct1",
                    "F_name_impl": "pass_struct1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct1",
                    "underscore_name": "pass_struct1"
                },
                "linenumber": 220,
                "options": {
                    "__line__": 221,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        }
                    },
                    "s1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "s1",
                            "cxx_member": "->",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "idtor": "0"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passStruct2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "s1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct2(Cstruct1 *s1, char *outbuf+intent(out))",
                "declgen": "int passStruct2(Cstruct1 * s1 +intent(in), char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 225,
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t passStruct2(\ts1,\t outbuf);",
                    "C_call_list": "s1,\t outbuf",
                    "C_name": "passStruct2",
                    "C_prototype": "Cstruct1 * s1,\t char * outbuf",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_pass_struct2_bufferify",
                    "F_C_name": "c_pass_struct2",
                    "F_arg_c_call": "s1,\t outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "s1,\t outbuf",
                    "F_call_code": "SHT_rv = c_pass_struct2_bufferify(s1,\t outbuf,\t len(outbuf, kind=C_INT))",
                    "F_name_function": "pass_struct2",
                    "F_name_generic": "pass_struct2",
                    "F_name_impl": "pass_struct2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct2",
                    "underscore_name": "pass_struct2"
                },
                "linenumber": 224,
                "options": {
                    "__line__": 228,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_var": "outbuf"
                        }
                    },
                    "s1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "s1",
                            "cxx_member": "->",
                            "cxx_type": "Cstruct1",
                            "cxx_var": "s1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "s1",
                            "f_var": "s1"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passStruct2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "declarator": {
                                "name": "s1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "Cstruct1"
                            ],
                            "typemap_name": "Cstruct1"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int passStruct2(Cstruct1 *s1, char *outbuf+intent(out))",
                "declgen": "int passStruct2(Cstruct1 * s1 +intent(in), char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 225,
                    "description": "Pass name argument which will build a bufferify function.\n"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t passStruct2(\ts1,\t outbuf);",
                    "C_call_list": "s1,\t outbuf",
                    "C_name": "CLI_pass_struct2_bufferify",
                    "C_post_call": "ShroudStrBlankFill(outbuf, Noutbuf);",
                    "C_prototype": "Cstruct1 * s1,\t char * outbuf,\t int Noutbuf",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_name": "c_pass_struct2_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "passStruct2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "pass_struct2"
                },
                "linenumber": 224,
                "options": {
                    "__line__": 228,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "ifield": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ifield",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ifield",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ifield",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "ifield",
                            "f_var": "ifield"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "Cstruct1",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnStructPtr1",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ifield",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "return_pointer_as": "pointer",
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr1(int ifield)",
                "declgen": "Cstruct1 * returnStructPtr1(int ifield +intent(in)+value)",
                "doxygen": {
                    "__line__": 232,
                    "brief": "Return a pointer to a struct",
                    "description": "Does not generate a bufferify C wrapper.\n"
                },
                "fmtdict": {
                    "C_call_code": "Cstruct1 * SHC_rv =\t returnStructPtr1(\tifield);",
                    "C_call_list": "ifield",
                    "C_name": "returnStructPtr1",
                    "C_prototype": "int ifield",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "Cstruct1 *",
                    "F_C_call": "c_return_struct_ptr1",
                    "F_C_name": "c_return_struct_ptr1",
                    "F_arg_c_call": "ifield",
                    "F_arguments": "ifield",
                    "F_call_code": "SHT_ptr = c_return_struct_ptr1(ifield)",
                    "F_name_function": "return_struct_ptr1",
                    "F_name_generic": "return_struct_ptr1",
                    "F_name_impl": "return_struct_ptr1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr1",
                    "underscore_name": "return_struct_ptr1"
                },
                "linenumber": 231,
                "options": {
                    "__line__": 236,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "ifield": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ifield",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ifield",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ifield",
                            "idtor": "0"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "Cstruct1",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnStructPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ifield",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "return_pointer_as": "pointer",
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr2(int ifield, char *outbuf+intent(out))",
                "declgen": "Cstruct1 * returnStructPtr2(int ifield +intent(in)+value, char * outbuf +intent(out))",
                "doxygen": {
                    "__line__": 240,
                    "brief": "Return a pointer to a struct",
                    "description": "Generates a bufferify C wrapper function.\n"
                },
                "fmtdict": {
                    "C_call_code": "Cstruct1 * SHC_rv =\t returnStructPtr2(\tifield,\t outbuf);",
                    "C_call_list": "ifield,\t outbuf",
                    "C_name": "returnStructPtr2",
                    "C_prototype": "int ifield,\t char * outbuf",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "Cstruct1 *",
                    "F_C_call": "c_return_struct_ptr2_bufferify",
                    "F_C_name": "c_return_struct_ptr2",
                    "F_arg_c_call": "ifield,\t outbuf,\t len(outbuf, kind=C_INT)",
                    "F_arguments": "ifield,\t outbuf",
                    "F_call_code": "SHT_ptr = c_return_struct_ptr2_bufferify(ifield,\t outbuf,\t len(outbuf, kind=C_INT))",
                    "F_name_function": "return_struct_ptr2",
                    "F_name_generic": "return_struct_ptr2",
                    "F_name_impl": "return_struct_ptr2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr2",
                    "underscore_name": "return_struct_ptr2"
                },
                "linenumber": 239,
                "options": {
                    "__line__": 244,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "ifield": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "ifield",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "&ifield",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "ifield",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "ifield",
                            "f_var": "ifield"
                        }
                    },
                    "outbuf": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "outbuf",
                            "c_var_len": "Noutbuf",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "outbuf",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "outbuf",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "outbuf",
                            "f_var": "outbuf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "Cstruct1",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnStructPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "ifield",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "Noutbuf",
                                "value": false
                            },
                            "declarator": {
                                "name": "outbuf",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "char"
                        }
                    ],
                    "return_pointer_as": "pointer",
                    "specifier": [
                        "Cstruct1"
                    ],
                    "typemap_name": "Cstruct1"
                },
                "decl": "Cstruct1 *returnStructPtr2(int ifield, char *outbuf+intent(out))",
                "declgen": "Cstruct1 * returnStructPtr2(int ifield +intent(in)+value, char * outbuf +intent(out)+len(Noutbuf))",
                "doxygen": {
                    "__line__": 240,
                    "brief": "Return a pointer to a struct",
                    "description": "Generates a bufferify C wrapper function.\n"
                },
                "fmtdict": {
                    "C_call_code": "Cstruct1 * SHC_rv =\t returnStructPtr2(\tifield,\t outbuf);",
                    "C_call_list": "ifield,\t outbuf",
                    "C_name": "CLI_return_struct_ptr2_bufferify",
                    "C_post_call": "ShroudStrBlankFill(outbuf, Noutbuf);",
                    "C_prototype": "int ifield,\t char * outbuf,\t int Noutbuf",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "Cstruct1 *",
                    "F_C_name": "c_return_struct_ptr2_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "Cstruct1 * SHC_rv",
                    "function_name": "returnStructPtr2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_struct_ptr2"
                },
                "linenumber": 239,
                "options": {
                    "__line__": 244,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "c",
        "options": {
            "C_enum_member_template": "{C_prefix}{C_scope_name}{enum_member_name}",
            "C_enum_template": "{C_prefix}{flat_name}",
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{class_lower}_capsule",
            "F_create_bufferify_function": true,
            "F_enum_member_template": "{F_scope_name}{enum_member_lower}",
            "F_force_wrapper": false,
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}",
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_class_template": "{class_lower}_mod",
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_per_class": false,
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context",
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 32,
            "class_prefix_template": "{class_lower}_",
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": false,
            "wrap_python": true
        }
    },
    "types": {
        "Cstruct1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PYN_descr": "PY_Cstruct1_array_descr",
            "base": "struct",
            "c_header": "clibrary.h",
            "c_statements": {
                "result": {
                    "c_helper": "SH_union_0_t"
                }
            },
            "c_type": "Cstruct1",
            "c_union": "SH_union_0_t",
            "cxx_type": "Cstruct1",
            "f_derived_type": "cstruct1",
            "f_module": {
                "clibrary_mod": [
                    "cstruct1"
                ]
            },
            "f_type": "type(cstruct1)",
            "flat_name": "Cstruct1",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Cstruct1 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Cstruct1 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "EnumTypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "__line__": 43,
            "c_to_cxx": "static_cast<EnumTypeID>({c_var})",
            "c_type": "int",
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "EnumTypeID",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "EnumTypeID",
            "typedef": "int"
        },
        "MPI_Comm": {
            "c_header": "mpi.h",
            "c_to_cxx": "MPI_Comm_f2c({c_var})",
            "c_type": "MPI_Fint",
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})",
            "cxx_type": "MPI_Comm",
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_c_type": "integer(C_INT)",
            "f_kind": "C_INT",
            "f_type": "integer",
            "flat_name": "MPI_Comm"
        },
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "int",
            "cxx_type": "TypeID",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "TypeID",
            "typedef": "int"
        },
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TBOOLEAN",
            "PYN_typenum": "NPY_BOOL",
            "PY_PyTypeObject": "PyBool_Type",
            "c_type": "bool",
            "cxx_type": "bool",
            "f_c_type": "logical(C_BOOL)",
            "f_kind": "C_BOOL",
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            },
            "f_statements": {
                "intent_in": {
                    "c_local_var": true,
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_inout": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ],
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_out": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                },
                "result": {
                    "need_wrapper": true
                }
            },
            "f_type": "logical",
            "flat_name": "bool",
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_deref}{c_var});"
                    ],
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        },
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_ctor": "PyString_FromString({c_var})",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "c_helper": "ShroudStrAlloc ShroudStrFree",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrFree({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_trim},\t {c_var_trim});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_helper": "ShroudStrAlloc ShroudStrCopy ShroudStrFree",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);",
                        "ShroudStrFree({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_len},\t {c_var_trim});"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrBlankFill",
                    "post_call": [
                        "ShroudStrBlankFill({c_var}, {c_var_len});"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "char"
        },
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "(int) {cxx_var}",
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)",
            "PY_format": "c",
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_header": "<string.h>",
                    "cxx_header": "<cstring>",
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});",
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_type": "character",
            "flat_name": "char"
        },
        "charout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.ccharp = {cxx_var};",
                        "{c_var_context}->len = {cxx_var} == NULL ? 0 : {stdlib}strlen({cxx_var});",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "char"
        },
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_DOUBLE",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "d",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "double",
            "cxx_type": "double",
            "f_cast": "real({f_var}, C_DOUBLE)",
            "f_kind": "C_DOUBLE",
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            },
            "f_type": "real(C_DOUBLE)",
            "flat_name": "double"
        },
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_FLOAT",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "f",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "float",
            "cxx_type": "float",
            "f_cast": "real({f_var}, C_FLOAT)",
            "f_kind": "C_FLOAT",
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            },
            "f_type": "real(C_FLOAT)",
            "flat_name": "float"
        },
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "int",
            "cxx_type": "int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "int"
        },
        "int16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int16_t",
            "cxx_type": "int16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "int16_t"
        },
        "int32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int32_t",
            "cxx_type": "int32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "int32_t"
        },
        "int64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int64_t",
            "cxx_type": "int64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "int64_t"
        },
        "int8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int8_t",
            "cxx_type": "int8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "int8_t"
        },
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "long",
            "cxx_type": "long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "long"
        },
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "long long",
            "cxx_type": "long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "long_long"
        },
        "short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "short",
            "cxx_type": "short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "short"
        },
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})",
            "c_header": "<stddef.h>",
            "c_type": "size_t",
            "cxx_type": "size_t",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "C_SIZE_T",
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            },
            "f_type": "integer(C_SIZE_T)",
            "flat_name": "size_t"
        },
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()",
            "PY_build_format": "s#",
            "PY_ctor": "PyString_FromStringAndSize(\t{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size())",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_inout": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_out": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "post_call": [
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t NULL,\t 0);",
                        "-}} else {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());",
                        "-}}"
                    ]
                }
            },
            "c_type": "char",
            "cxx_header": "<string>",
            "cxx_to_c": "{cxx_var}{cxx_member}c_str()",
            "cxx_type": "std::string",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "std_string",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_out": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        },
        "std::vector": {
            "base": "vector",
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "size"
                    ],
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "size",
                        "context"
                    ],
                    "cxx_local_var": "pointer",
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);",
                        "delete cxx_ptr;"
                    ],
                    "destructor_name": "std_vector_{cxx_T}",
                    "post_call": [
                        "{c_var_context}->cxx.addr  = static_cast<void *>({cxx_var});",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.cvoidp = {cxx_var}->empty() ? NULL : &{cxx_var}->front();",
                        "{c_var_context}->len = sizeof({cxx_T});",
                        "{c_var_context}->size = {cxx_var}->size();"
                    ],
                    "pre_call": [
                        "std::vector<{cxx_T}> *{cxx_var} = \tnew std::vector<{cxx_T}>\t(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "capsule_data_helper copy_array",
                    "cxx_local_var": "pointer",
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);",
                        "delete cxx_ptr;"
                    ],
                    "destructor_name": "std_vector_{cxx_T}",
                    "post_call": [
                        "{c_var_context}->cxx.addr  = static_cast<void *>({cxx_var});",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.cvoidp = {cxx_var}->empty() ? NULL : &{cxx_var}->front();",
                        "{c_var_context}->len = sizeof({cxx_T});",
                        "{c_var_context}->size = {cxx_var}->size();"
                    ],
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;"
                    ]
                }
            },
            "c_templates": {
                "std::string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "arg",
                            "size",
                            "len"
                        ],
                        "c_helper": "ShroudLenTrim",
                        "cxx_local_var": "scalar",
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};",
                            "{{+",
                            "{c_const}char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "-for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "{cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ]
                    },
                    "intent_inout_buf": {
                        "buf_args": [
                            "arg",
                            "size",
                            "len"
                        ],
                        "cxx_local_var": "scalar",
                        "post_call": [
                            "{{+",
                            "char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "-{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);",
                            "for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ],
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};",
                            "{{+",
                            "{c_const}char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "-for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "{cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ]
                    },
                    "intent_out_buf": {
                        "buf_args": [
                            "arg",
                            "size",
                            "len"
                        ],
                        "c_helper": "ShroudLenTrim",
                        "cxx_local_var": "scalar",
                        "post_call": [
                            "{{+",
                            "char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);",
                            "-for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ],
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            },
            "cxx_header": "<vector>",
            "cxx_type": "std::vector<{cxx_T}>",
            "f_statements": {
                "intent_inout": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                },
                "intent_inout_allocatable": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "if (allocated({f_var})) deallocate({f_var})",
                        "allocate({f_var}({c_var_context}%size))",
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                },
                "intent_out": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                },
                "intent_out_allocatable": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "allocate({f_var}({c_var_context}%size))",
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                }
            },
            "flat_name": "std_vector_{cxx_T}"
        },
        "stringout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "{c_var_context}->addr.ccharp = NULL;",
                        "{c_var_context}->len = 0;",
                        "-}} else {{+",
                        "{c_var_context}->addr.ccharp = {cxx_var}{cxx_member}data();",
                        "{c_var_context}->len = {cxx_var}{cxx_member}size();",
                        "-}}",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "void",
            "cxx_header": "<string>",
            "cxx_to_c": "static_cast<void *>({cxx_var})",
            "cxx_type": "std::string",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "std_string"
        },
        "uint16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint16_t",
            "cxx_type": "uint16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "uint16_t"
        },
        "uint32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint32_t",
            "cxx_type": "uint32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "uint32_t"
        },
        "uint64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint64_t",
            "cxx_type": "uint64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "uint64_t"
        },
        "uint8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint8_t",
            "cxx_type": "uint8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "uint8_t"
        },
        "unsigned_int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned int",
            "cxx_type": "unsigned int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "unsigned_int"
        },
        "unsigned_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned long",
            "cxx_type": "unsigned long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "unsigned_long"
        },
        "unsigned_long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "unsigned long long",
            "cxx_type": "unsigned long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "unsigned_long_long"
        },
        "unsigned_short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned short",
            "cxx_type": "unsigned short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "unsigned_short"
        },
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)",
            "c_type": "void",
            "cxx_type": "void",
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            },
            "f_type": "type(C_PTR)",
            "flat_name": "void"
        }
    }
}