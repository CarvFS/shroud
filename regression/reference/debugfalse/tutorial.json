{
    "__NOTICE__": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "tutorial.hpp"
        ],
        "enums": [
            {
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "TUT_BLUE",
                        "F_enum_member": "blue",
                        "F_value": 1,
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE"
                    },
                    "RED": {
                        "C_enum_member": "TUT_RED",
                        "F_enum_member": "red",
                        "F_value": 0,
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED"
                    },
                    "WHITE": {
                        "C_enum_member": "TUT_WHITE",
                        "F_enum_member": "white",
                        "F_value": 2,
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n",
                "fmtdict": {
                    "C_enum": "TUT_Color",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR"
                },
                "name": "Color",
                "options": {
                    "bar": 4
                },
                "typemap_name": "tutorial::Color",
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            }
        ],
        "functions": [
            {
                "_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "NoReturnNoArguments",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void NoReturnNoArguments()",
                "declgen": "void NoReturnNoArguments(void)",
                "fmtdict": {
                    "C_name": "TUT_no_return_no_arguments",
                    "C_prototype": "void",
                    "C_return_type": "void",
                    "F_C_arguments": "",
                    "F_C_call": "c_no_return_no_arguments",
                    "F_C_name": "no_return_no_arguments",
                    "F_C_subprogram": "subroutine",
                    "F_arguments": "",
                    "F_name_function": "no_return_no_arguments",
                    "F_name_generic": "no_return_no_arguments",
                    "F_name_impl": "no_return_no_arguments",
                    "F_subprogram": "subroutine",
                    "LUA_name": "NoReturnNoArguments",
                    "LUA_name_impl": "l_no_return_no_arguments",
                    "PY_name_impl": "PY_NoReturnNoArguments",
                    "function_name": "NoReturnNoArguments",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "no_return_no_arguments"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg1",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_arg2",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_tointeger(L, 2)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv",
                        "push_expr": "lua_pushnumber(L, SHCXX_rv)",
                        "stmt0": "lua_native_scalar_result",
                        "stmt1": "lua_native_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_scalar_result",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "PassByValue",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double PassByValue(double arg1, int arg2)",
                "declgen": "double PassByValue(double arg1 +value, int arg2 +value)",
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TUT_pass_by_value",
                    "C_prototype": "double arg1,\t int arg2",
                    "C_return_type": "double",
                    "F_C_arguments": "arg1,\t arg2",
                    "F_C_call": "c_pass_by_value",
                    "F_C_name": "pass_by_value",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "pass_by_value",
                    "F_name_generic": "pass_by_value",
                    "F_name_impl": "pass_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "PassByValue",
                    "LUA_name_impl": "l_pass_by_value",
                    "PY_name_impl": "PY_PassByValue",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "PassByValue",
                    "underscore_name": "pass_by_value"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1",
                            "pop_expr": "lua_tostring(L, 1)",
                            "stmt0": "lua_string_&_in",
                            "stmt1": "lua_string_&_in"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_string_&_in",
                            "stmt1": "py_string_&_in",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_tostring(L, 2)",
                            "stmt0": "lua_string_&_in",
                            "stmt1": "lua_string_&_in"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "ctor_expr": "SH_arg2.data(),\t SH_arg2.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&arg2)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_string_&_in",
                            "stmt1": "py_string_&_in",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_buf_allocatable",
                        "stmt1": "f_string_scalar_result_buf_allocatable",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv.c_str()",
                        "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                        "stmt0": "lua_string_scalar_result",
                        "stmt1": "lua_string_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_scalar_result",
                        "stmt1": "py_string_scalar_result",
                        "value_var": "SHValue_rv"
                    }
                },
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "ConcatenateStrings",
                        "pointer": []
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "result"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string ConcatenateStrings( const std::string& arg1, const std::string& arg2 )",
                "declgen": "const std::string ConcatenateStrings(const std::string & arg1, const std::string & arg2)",
                "doxygen": {
                    "description": "Note that since a reference is returned, no intermediate string\nis allocated.  It is assumed +owner(library).\n"
                },
                "fmtdict": {
                    "F_C_call": "c_concatenate_strings_bufferify",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t DSHF_rv",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "concatenate_strings",
                    "F_name_generic": "concatenate_strings",
                    "F_name_impl": "concatenate_strings",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "ConcatenateStrings",
                    "LUA_name_impl": "l_concatenate_strings",
                    "PY_name_impl": "PY_ConcatenateStrings",
                    "function_name": "ConcatenateStrings",
                    "underscore_name": "concatenate_strings"
                },
                "options": {},
                "wrap": {
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_SHF_rv",
                            "stmt0": "c_string_scalar_result_buf_allocatable",
                            "stmt1": "c_string_scalar_result_buf_allocatable"
                        },
                        "fmtf": {
                            "F_C_var": "SHF_rv",
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "hnamefunc0": "TUT_SHROUD_copy_string_and_free",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_*_result_buf_allocatable",
                            "stmt1": "f_string_*_result_buf_allocatable",
                            "stmtc0": "c_string_*_result_buf_allocatable",
                            "stmtc1": "c_string_*_result_buf_allocatable"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_trim": "Larg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_arg1",
                            "stmt0": "c_string_&_in_buf",
                            "stmt1": "c_string_&_in_buf"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "c_var_trim": "Larg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in_buf",
                            "stmtc1": "c_string_&_in_buf"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "c_var_trim": "Larg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg2)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_arg2",
                            "stmt0": "c_string_&_in_buf",
                            "stmt1": "c_string_&_in_buf"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "c_var_trim": "Larg2",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in_buf",
                            "stmtc1": "c_string_&_in_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_void_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "ConcatenateStrings",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "len_trim": "Larg1"
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "len_trim": "Larg2"
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "context": "DSHF_rv"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "deref": "allocatable",
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string ConcatenateStrings( const std::string& arg1, const std::string& arg2 )",
                "declgen": "void ConcatenateStrings(const std::string & arg1 +len_trim, const std::string & arg2 +len_trim, const std::string * SHF_rv +context(DSHF_rv))",
                "doxygen": {
                    "description": "Note that since a reference is returned, no intermediate string\nis allocated.  It is assumed +owner(library).\n"
                },
                "fmtdict": {
                    "C_call_list": "SHCXX_arg1,\t SHCXX_arg2",
                    "C_name": "TUT_concatenate_strings_bufferify",
                    "C_prototype": "const char * arg1,\t int Larg1,\t const char * arg2,\t int Larg2,\t TUT_SHROUD_array *DSHF_rv",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t Larg1,\t arg2,\t Larg2,\t DSHF_rv",
                    "F_C_name": "c_concatenate_strings_bufferify",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "ConcatenateStrings",
                    "function_suffix": "_bufferify",
                    "underscore_name": "concatenate_strings"
                },
                "generated_suffix": "buf",
                "options": {},
                "wrap": {
                    "c": true
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(void)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_name": "TUT_use_default_arguments",
                    "C_prototype": "void",
                    "C_return_type": "double",
                    "F_C_arguments": "",
                    "F_C_call": "c_use_default_arguments",
                    "F_C_name": "c_use_default_arguments",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arguments": "",
                    "F_name_function": "use_default_arguments",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "",
                    "underscore_name": "use_default_arguments"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg1",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "init": 3.1415,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_call_list": "arg1",
                    "C_name": "TUT_use_default_arguments_arg1",
                    "C_prototype": "double arg1",
                    "C_return_type": "double",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_use_default_arguments_arg1",
                    "F_C_name": "c_use_default_arguments_arg1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "arg1",
                    "F_arguments": "arg1",
                    "F_name_function": "use_default_arguments_arg1",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1",
                    "underscore_name": "use_default_arguments"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_default_funcs": [
                    18,
                    19
                ],
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg1",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "ctor_expr": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_BOOL",
                            "shadow_var": "SHadow_arg2",
                            "stmt0": "c_bool_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "SH_arg2",
                            "f_intent": "IN",
                            "f_kind": "C_BOOL",
                            "f_type": "logical",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_BOOL",
                            "stmt0": "f_bool_scalar_in",
                            "stmt1": "f_bool_in",
                            "stmtc0": "c_bool_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_toboolean(L, 2)",
                            "stmt0": "lua_bool_scalar_in",
                            "stmt1": "lua_bool_scalar_in"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_BOOL",
                            "py_object": "PyObject",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_bool_scalar_in",
                            "stmt1": "py_bool_in",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv",
                        "push_expr": "lua_pushnumber(L, SHCXX_rv)",
                        "stmt0": "lua_native_scalar_result",
                        "stmt1": "lua_native_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_scalar_result",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    0,
                    2
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "init": 3.1415,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "init": "true",
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +value, bool arg2=true +value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TUT_use_default_arguments_arg1_arg2",
                    "C_prototype": "double arg1,\t bool arg2",
                    "C_return_type": "double",
                    "F_C_arguments": "arg1,\t arg2",
                    "F_C_call": "c_use_default_arguments_arg1_arg2",
                    "F_C_name": "c_use_default_arguments_arg1_arg2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "arg1,\t SH_arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "use_default_arguments_arg1_arg2",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1_arg2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "UseDefaultArguments",
                    "LUA_name_impl": "l_use_default_arguments",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_UseDefaultArguments_arg1_arg2",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1_arg2",
                    "underscore_name": "use_default_arguments"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_name",
                            "stmt0": "c_string_&_in",
                            "stmt1": "c_string_&_in"
                        },
                        "fmtf": {
                            "F_C_var": "name"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "name",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name",
                            "pop_expr": "lua_tostring(L, 1)",
                            "stmt0": "lua_string_&_in",
                            "stmt1": "lua_string_&_in"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_string_&_in",
                            "stmt1": "py_string_&_in",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(const std::string& name)",
                "declgen": "void OverloadedFunction(const std::string & name)",
                "fmtdict": {
                    "C_call_list": "SHCXX_name",
                    "C_name": "TUT_overloaded_function_from_name",
                    "C_prototype": "const char * name",
                    "C_return_type": "void",
                    "F_C_arguments": "name",
                    "F_C_call": "c_overloaded_function_from_name_bufferify",
                    "F_C_name": "c_overloaded_function_from_name",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)",
                    "F_arguments": "name",
                    "F_name_function": "overloaded_function_from_name",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_name",
                    "F_subprogram": "subroutine",
                    "LUA_name": "OverloadedFunction",
                    "LUA_name_impl": "l_overloaded_function",
                    "PY_name_impl": "PY_OverloadedFunction_from_name",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_name",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "overloaded_function"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_name",
                            "stmt0": "c_string_&_in_buf",
                            "stmt1": "c_string_&_in_buf"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in_buf",
                            "stmtc1": "c_string_&_in_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "len_trim": "Lname"
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(const std::string& name)",
                "declgen": "void OverloadedFunction(const std::string & name +len_trim)",
                "fmtdict": {
                    "C_call_list": "SHCXX_name",
                    "C_name": "TUT_overloaded_function_from_name_bufferify",
                    "C_prototype": "const char * name,\t int Lname",
                    "C_return_type": "void",
                    "F_C_arguments": "name,\t Lname",
                    "F_C_name": "c_overloaded_function_from_name_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_name_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "overloaded_function"
                },
                "generated_suffix": "buf",
                "options": {},
                "wrap": {
                    "c": true
                }
            },
            {
                "_fmtargs": {
                    "indx": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "indx",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&indx",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_indx",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "indx",
                            "F_pointer": "SHPTR_indx",
                            "c_var": "indx",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "indx",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "indx",
                            "c_var_len": "Lindx",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "lua_var": "SH_Lua_indx",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "indx",
                            "ctor_expr": "indx",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&indx",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "data_var": "SHData_indx",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_indx",
                            "size_var": "SHSize_indx",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_indx"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "indx",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(int indx)",
                "declgen": "void OverloadedFunction(int indx +value)",
                "fmtdict": {
                    "C_call_list": "indx",
                    "C_name": "TUT_overloaded_function_from_index",
                    "C_prototype": "int indx",
                    "C_return_type": "void",
                    "F_C_arguments": "indx",
                    "F_C_call": "c_overloaded_function_from_index",
                    "F_C_name": "c_overloaded_function_from_index",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "indx",
                    "F_arguments": "indx",
                    "F_name_function": "overloaded_function_from_index",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_index",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_OverloadedFunction_from_index",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_index",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "overloaded_function"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "ArgType"
                            ],
                            "typemap_name": "ArgType"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "ArgType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(ArgType arg +value)",
                "fmtdict": {
                    "function_name": "TemplateArgument",
                    "underscore_name": "template_argument"
                },
                "have_template_args": true,
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ],
                "wrap": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(int arg +value)",
                "fmtdict": {
                    "CXX_template": "<int>",
                    "C_call_list": "arg",
                    "C_name": "TUT_template_argument_int",
                    "C_prototype": "int arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_template_argument_int",
                    "F_C_name": "c_template_argument_int",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "template_argument_int",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_int",
                    "F_subprogram": "subroutine",
                    "LUA_name": "TemplateArgument",
                    "LUA_name_impl": "l_template_argument",
                    "PY_name_impl": "PY_TemplateArgument_int",
                    "function_name": "TemplateArgument",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_int",
                    "underscore_name": "template_argument"
                },
                "have_template_args": true,
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(double arg +value)",
                "fmtdict": {
                    "CXX_template": "<double>",
                    "C_call_list": "arg",
                    "C_name": "TUT_template_argument_double",
                    "C_prototype": "double arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_template_argument_double",
                    "F_C_name": "c_template_argument_double",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "template_argument_double",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_double",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_TemplateArgument_double",
                    "function_name": "TemplateArgument",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "template_suffix": "_double",
                    "underscore_name": "template_argument"
                },
                "gen_headers_typedef": [
                    "int",
                    "double"
                ],
                "have_template_args": true,
                "options": {},
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [],
                    "specifier": [
                        "RetType"
                    ],
                    "typemap_name": "RetType"
                },
                "cxx_template": {
                    "RetType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "RetType TemplateReturn(void)",
                "fmtdict": {
                    "function_name": "TemplateReturn",
                    "underscore_name": "template_return"
                },
                "have_template_args": true,
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ],
                "wrap": {}
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "int TemplateReturn(void)",
                "fmtdict": {
                    "CXX_template": "<int>",
                    "C_name": "TUT_template_return_int",
                    "C_prototype": "void",
                    "C_return_type": "int",
                    "F_C_arguments": "",
                    "F_C_call": "c_template_return_int",
                    "F_C_name": "c_template_return_int",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arguments": "",
                    "F_name_function": "template_return_int",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_int",
                    "underscore_name": "template_return"
                },
                "have_template_args": true,
                "options": {
                    "F_create_generic": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_kind": "C_DOUBLE",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "double TemplateReturn(void)",
                "fmtdict": {
                    "CXX_template": "<double>",
                    "C_name": "TUT_template_return_double",
                    "C_prototype": "void",
                    "C_return_type": "double",
                    "F_C_arguments": "",
                    "F_C_call": "c_template_return_double",
                    "F_C_name": "c_template_return_double",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arguments": "",
                    "F_name_function": "template_return_double",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_double",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_double",
                    "underscore_name": "template_return"
                },
                "gen_headers_typedef": [
                    "int",
                    "double"
                ],
                "have_template_args": true,
                "options": {
                    "F_create_generic": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded()",
                "declgen": "void FortranGenericOverloaded(void)",
                "fmtdict": {
                    "C_name": "TUT_fortran_generic_overloaded_0",
                    "C_prototype": "void",
                    "C_return_type": "void",
                    "F_C_arguments": "",
                    "F_C_call": "c_fortran_generic_overloaded_0",
                    "F_C_name": "c_fortran_generic_overloaded_0",
                    "F_C_subprogram": "subroutine",
                    "F_arguments": "",
                    "F_name_function": "fortran_generic_overloaded_0",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_0",
                    "F_subprogram": "subroutine",
                    "LUA_name": "FortranGenericOverloaded",
                    "LUA_name_impl": "l_fortran_generic_overloaded",
                    "PY_name_impl": "PY_FortranGenericOverloaded_0",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_0",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg2",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg2"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2",
                            "pop_expr": "lua_tonumber(L, 2)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "ctor_expr": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg2"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_name",
                            "stmt0": "c_string_&_in",
                            "stmt1": "c_string_&_in"
                        },
                        "fmtf": {
                            "F_C_var": "name"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "name",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name",
                            "pop_expr": "lua_tostring(L, 1)",
                            "stmt0": "lua_string_&_in",
                            "stmt1": "lua_string_&_in"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_string_&_in",
                            "stmt1": "py_string_&_in",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtl": {
                        "stmt0": "lua_subroutine",
                        "stmt1": "lua_subroutine"
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name, double arg2 +value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_name,\t arg2",
                    "C_name": "TUT_fortran_generic_overloaded_1",
                    "C_prototype": "const char * name,\t double arg2",
                    "C_return_type": "void",
                    "F_C_arguments": "name,\t arg2",
                    "F_C_name": "c_fortran_generic_overloaded_1",
                    "F_C_subprogram": "subroutine",
                    "PY_name_impl": "PY_FortranGenericOverloaded_1",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg2)"
                    },
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg2)"
                    }
                ],
                "options": {
                    "F_string_len_trim": true
                },
                "wrap": {
                    "c": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name, float arg2 +value)",
                "fmtdict": {
                    "F_C_call": "c_fortran_generic_overloaded_1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t real(arg2, C_DOUBLE)",
                    "F_arguments": "name,\t arg2",
                    "F_name_function": "fortran_generic_overloaded_1_float",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_float",
                    "F_subprogram": "subroutine",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_float",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "options": {
                    "F_string_len_trim": true
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name, double arg2 +value)",
                "fmtdict": {
                    "F_C_call": "c_fortran_generic_overloaded_1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t arg2",
                    "F_arguments": "name,\t arg2",
                    "F_name_function": "fortran_generic_overloaded_1_double",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_double",
                    "F_subprogram": "subroutine",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_double",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "options": {
                    "F_string_len_trim": true
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg2",
                            "stmt0": "c_native_scalar_in_buf",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in_buf",
                            "stmtc1": "c_default"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_name",
                            "stmt0": "c_string_&_in_buf",
                            "stmt1": "c_string_&_in_buf"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_in_buf",
                            "stmtc1": "c_string_&_in_buf"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "len_trim": "Lname"
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +len_trim, double arg2 +value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_name,\t arg2",
                    "C_name": "TUT_fortran_generic_overloaded_1_bufferify",
                    "C_prototype": "const char * name,\t int Lname,\t double arg2",
                    "C_return_type": "void",
                    "F_C_arguments": "name,\t Lname,\t arg2",
                    "F_C_name": "c_fortran_generic_overloaded_1_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_bufferify",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg2)"
                    },
                    {
                        "decls": [
                            {
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "metaattrs": {
                                    "intent": "in"
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg2)"
                    }
                ],
                "generated_suffix": "buf",
                "options": {
                    "F_string_len_trim": true
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_num",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "num",
                            "F_pointer": "SHPTR_num",
                            "c_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_list": "num",
                    "C_name": "TUT_use_default_overload_num",
                    "C_prototype": "int num",
                    "C_return_type": "int",
                    "F_C_arguments": "num",
                    "F_C_call": "c_use_default_overload_num",
                    "F_C_name": "c_use_default_overload_num",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "num",
                    "F_arguments": "num",
                    "F_name_function": "use_default_overload_num",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num",
                    "underscore_name": "use_default_overload"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_num",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "num",
                            "F_pointer": "SHPTR_num",
                            "c_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_offset",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "offset",
                            "F_pointer": "SHPTR_offset",
                            "c_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +value, int offset=0 +value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_list": "num,\t offset",
                    "C_name": "TUT_use_default_overload_num_offset",
                    "C_prototype": "int num,\t int offset",
                    "C_return_type": "int",
                    "F_C_arguments": "num,\t offset",
                    "F_C_call": "c_use_default_overload_num_offset",
                    "F_C_name": "c_use_default_overload_num_offset",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "num,\t offset",
                    "F_arguments": "num,\t offset",
                    "F_name_function": "use_default_overload_num_offset",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset",
                    "underscore_name": "use_default_overload"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_default_funcs": [
                    24,
                    25
                ],
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_num",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "num",
                            "F_pointer": "SHPTR_num",
                            "c_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "ctor_expr": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_offset",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "offset",
                            "F_pointer": "SHPTR_offset",
                            "c_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset",
                            "pop_expr": "lua_tointeger(L, 2)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "ctor_expr": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_offset"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_stride",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "stride",
                            "F_pointer": "SHPTR_stride",
                            "c_var": "stride",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "stride",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride",
                            "pop_expr": "lua_tointeger(L, 3)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "ctor_expr": "stride",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_stride"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv",
                        "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                        "stmt0": "lua_native_scalar_result",
                        "stmt1": "lua_native_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_scalar_result",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    1,
                    3
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "stride",
                                "pointer": []
                            },
                            "init": 1,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +value, int offset=0 +value, int stride=1 +value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_list": "num,\t offset,\t stride",
                    "C_name": "TUT_use_default_overload_num_offset_stride",
                    "C_prototype": "int num,\t int offset,\t int stride",
                    "C_return_type": "int",
                    "F_C_arguments": "num,\t offset,\t stride",
                    "F_C_call": "c_use_default_overload_num_offset_stride",
                    "F_C_name": "c_use_default_overload_num_offset_stride",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "num,\t offset,\t stride",
                    "F_arguments": "num,\t offset,\t stride",
                    "F_name_function": "use_default_overload_num_offset_stride",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset_stride",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "UseDefaultOverload",
                    "LUA_name_impl": "l_use_default_overload",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_UseDefaultOverload_num_offset_stride",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset_stride",
                    "underscore_name": "use_default_overload"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_num",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "num",
                            "F_pointer": "SHPTR_num",
                            "c_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_type",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "F_pointer": "SHPTR_type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +value, int num +value)",
                "fmtdict": {
                    "C_call_list": "type,\t num",
                    "C_name": "TUT_use_default_overload_3",
                    "C_prototype": "double type,\t int num",
                    "C_return_type": "int",
                    "F_C_arguments": "type,\t num",
                    "F_C_call": "c_use_default_overload_3",
                    "F_C_name": "c_use_default_overload_3",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "type,\t num",
                    "F_arguments": "type,\t num",
                    "F_name_function": "use_default_overload_3",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_3",
                    "underscore_name": "use_default_overload"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_num",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "num",
                            "F_pointer": "SHPTR_num",
                            "c_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_offset",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "offset",
                            "F_pointer": "SHPTR_offset",
                            "c_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_type",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "F_pointer": "SHPTR_type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +value, int num +value, int offset=0 +value)",
                "fmtdict": {
                    "C_call_list": "type,\t num,\t offset",
                    "C_name": "TUT_use_default_overload_4",
                    "C_prototype": "double type,\t int num,\t int offset",
                    "C_return_type": "int",
                    "F_C_arguments": "type,\t num,\t offset",
                    "F_C_call": "c_use_default_overload_4",
                    "F_C_name": "c_use_default_overload_4",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "type,\t num,\t offset",
                    "F_arguments": "type,\t num,\t offset",
                    "F_name_function": "use_default_overload_4",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_4",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_4",
                    "underscore_name": "use_default_overload"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_default_funcs": [
                    26,
                    27
                ],
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_num",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "num",
                            "F_pointer": "SHPTR_num",
                            "c_var": "num",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "num",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num",
                            "pop_expr": "lua_tointeger(L, 2)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "ctor_expr": "num",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&num",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_offset",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "offset",
                            "F_pointer": "SHPTR_offset",
                            "c_var": "offset",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "offset",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset",
                            "pop_expr": "lua_tointeger(L, 3)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "ctor_expr": "offset",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&offset",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_offset"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_stride",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "stride",
                            "F_pointer": "SHPTR_stride",
                            "c_var": "stride",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "stride",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 4,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride",
                            "pop_expr": "lua_tointeger(L, 4)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "ctor_expr": "stride",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&stride",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_stride"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_type",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "F_pointer": "SHPTR_type",
                            "c_var": "type",
                            "f_intent": "IN",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "c_var_len": "Ltype",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "lua_var": "SH_Lua_type",
                            "pop_expr": "lua_tonumber(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "type",
                            "ctor_expr": "type",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "data_var": "SHData_type",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_type",
                            "size_var": "SHSize_type",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_type"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv",
                        "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                        "stmt0": "lua_native_scalar_result",
                        "stmt1": "lua_native_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_scalar_result",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    2,
                    4
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "stride",
                                "pointer": []
                            },
                            "init": 1,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +value, int num +value, int offset=0 +value, int stride=1 +value)",
                "fmtdict": {
                    "C_call_list": "type,\t num,\t offset,\t stride",
                    "C_name": "TUT_use_default_overload_5",
                    "C_prototype": "double type,\t int num,\t int offset,\t int stride",
                    "C_return_type": "int",
                    "F_C_arguments": "type,\t num,\t offset,\t stride",
                    "F_C_call": "c_use_default_overload_5",
                    "F_C_name": "c_use_default_overload_5",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "type,\t num,\t offset,\t stride",
                    "F_arguments": "type,\t num,\t offset,\t stride",
                    "F_name_function": "use_default_overload_5",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_5",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_cleanup_decref": "Py_XDECREF",
                    "PY_name_impl": "PY_UseDefaultOverload_5",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_5",
                    "underscore_name": "use_default_overload"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "lua_tointeger(L, 1)",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "tutorial::TypeID",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::TypeID",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv",
                        "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                        "stmt0": "lua_native_scalar_result",
                        "stmt1": "lua_native_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "tutorial::TypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_scalar_result",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "typefunc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "TypeID"
                            ],
                            "typemap_name": "tutorial::TypeID"
                        }
                    ],
                    "specifier": [
                        "TypeID"
                    ],
                    "typemap_name": "tutorial::TypeID"
                },
                "decl": "TypeID typefunc(TypeID arg)",
                "declgen": "TypeID typefunc(TypeID arg +value)",
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "TUT_typefunc",
                    "C_prototype": "int arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_typefunc",
                    "F_C_name": "typefunc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "typefunc",
                    "F_name_generic": "typefunc",
                    "F_name_impl": "typefunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "typefunc",
                    "LUA_name_impl": "l_typefunc",
                    "PY_name_impl": "PY_typefunc",
                    "cxx_rv_decl": "tutorial::TypeID SHC_rv",
                    "function_name": "typefunc",
                    "underscore_name": "typefunc"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::EnumTypeID SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "static_cast<tutorial::EnumTypeID>(lua_tointeger(L, 1))",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::EnumTypeID SH_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "tutorial::EnumTypeID",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::EnumTypeID",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "static_cast<int>(SHCXX_rv)",
                        "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                        "stmt0": "lua_native_scalar_result",
                        "stmt1": "lua_native_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "tutorial::EnumTypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_scalar_result",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "enumfunc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "EnumTypeID"
                            ],
                            "typemap_name": "tutorial::EnumTypeID"
                        }
                    ],
                    "specifier": [
                        "EnumTypeID"
                    ],
                    "typemap_name": "tutorial::EnumTypeID"
                },
                "decl": "EnumTypeID enumfunc(EnumTypeID arg)",
                "declgen": "EnumTypeID enumfunc(EnumTypeID arg +value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_enumfunc",
                    "C_prototype": "int arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_enumfunc",
                    "F_C_name": "enumfunc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "enumfunc",
                    "F_name_generic": "enumfunc",
                    "F_name_impl": "enumfunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "enumfunc",
                    "LUA_name_impl": "l_enumfunc",
                    "PY_name_impl": "PY_enumfunc",
                    "cxx_rv_decl": "tutorial::EnumTypeID SHCXX_rv",
                    "function_name": "enumfunc",
                    "underscore_name": "enumfunc"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Color SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg",
                            "pop_expr": "static_cast<tutorial::Color>(lua_tointeger(L, 1))",
                            "stmt0": "lua_native_scalar_in",
                            "stmt1": "lua_native_scalar_in"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Color SH_arg",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_native_scalar_in",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "tutorial::Color",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::Color",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "static_cast<int>(SHCXX_rv)",
                        "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                        "stmt0": "lua_native_scalar_result",
                        "stmt1": "lua_native_scalar_result"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "tutorial::Color",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_native_scalar_result",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "colorfunc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "Color"
                            ],
                            "typemap_name": "tutorial::Color"
                        }
                    ],
                    "specifier": [
                        "Color"
                    ],
                    "typemap_name": "tutorial::Color"
                },
                "decl": "Color colorfunc(Color arg);",
                "declgen": "Color colorfunc(Color arg +value)",
                "fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_colorfunc",
                    "C_prototype": "int arg",
                    "C_return_type": "int",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_colorfunc",
                    "F_C_name": "colorfunc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "colorfunc",
                    "F_name_generic": "colorfunc",
                    "F_name_impl": "colorfunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "colorfunc",
                    "LUA_name_impl": "l_colorfunc",
                    "PY_name_impl": "PY_colorfunc",
                    "cxx_rv_decl": "tutorial::Color SHCXX_rv",
                    "function_name": "colorfunc",
                    "underscore_name": "colorfunc"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "max": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "max",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&max",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_max",
                            "stmt0": "c_native_&_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "max",
                            "F_pointer": "SHPTR_max",
                            "c_var": "max",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "max",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_&_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_&_out",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "max",
                            "ctor_expr": "max",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&max",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "data_var": "SHData_max",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_max",
                            "size_var": "SHSize_max",
                            "stmt0": "py_native_&_out",
                            "stmt1": "py_native_&_out",
                            "value_var": "SHValue_max"
                        }
                    },
                    "min": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "min",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&min",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_min",
                            "stmt0": "c_native_&_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "min",
                            "F_pointer": "SHPTR_min",
                            "c_var": "min",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "min",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_&_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_&_out",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "min",
                            "ctor_expr": "min",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&min",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "data_var": "SHData_min",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_min",
                            "size_var": "SHSize_min",
                            "stmt0": "py_native_&_out",
                            "stmt1": "py_native_&_out",
                            "value_var": "SHValue_min"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "getMinMax",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "min",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "max",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getMinMax(int &min +intent(out), int &max +intent(out))",
                "declgen": "void getMinMax(int & min +intent(out), int & max +intent(out))",
                "doxygen": {
                    "brief": "Pass in reference to scalar"
                },
                "fmtdict": {
                    "C_call_list": "*min,\t *max",
                    "C_name": "TUT_get_min_max",
                    "C_prototype": "int * min,\t int * max",
                    "C_return_type": "void",
                    "F_C_arguments": "min,\t max",
                    "F_C_call": "c_get_min_max",
                    "F_C_name": "get_min_max",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "min,\t max",
                    "F_arguments": "min,\t max",
                    "F_name_function": "get_min_max",
                    "F_name_generic": "get_min_max",
                    "F_name_impl": "get_min_max",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_getMinMax",
                    "function_name": "getMinMax",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_min_max"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "in",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&in",
                            "cxx_type": "int",
                            "cxx_var": "in",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_in",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "in",
                            "F_pointer": "SHPTR_in",
                            "c_var": "in",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "in",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&incr",
                            "cxx_type": "int",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_incr",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "incr",
                            "F_pointer": "SHPTR_incr",
                            "c_var": "incr",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "incr",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback1",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "result"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": true
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int callback1(int in, int (*incr)(int));",
                "declgen": "int callback1(int in +value, int ( * incr)(int +value) +value)",
                "doxygen": {
                    "brief": "Test function pointer"
                },
                "fmtdict": {
                    "C_call_list": "in,\t incr",
                    "C_name": "TUT_callback1",
                    "C_prototype": "int in,\t int ( * incr)(\tint)",
                    "C_return_type": "int",
                    "F_C_arguments": "in,\t incr",
                    "F_C_call": "c_callback1",
                    "F_C_name": "callback1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "in,\t incr",
                    "F_arguments": "in,\t incr",
                    "F_name_function": "callback1",
                    "F_name_generic": "callback1",
                    "F_name_impl": "callback1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "callback1",
                    "underscore_name": "callback1"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_string_&_result",
                        "stmt1": "c_string_&_result"
                    },
                    "fmtf": {
                        "c_var_len": "30",
                        "cxx_type": "std::string",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_string_scalar_result_buf_result-as-arg",
                        "stmt1": "f_default",
                        "stmtc0": "c_string_scalar_result_buf",
                        "stmtc1": "c_string_scalar_result_buf"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "push_arg": "SHCXX_rv.c_str()",
                        "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                        "stmt0": "lua_string_&_result",
                        "stmt1": "lua_string_&_result"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_string_&_result",
                        "stmt1": "py_string_&_result",
                        "value_var": "SHValue_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "result-as-arg",
                        "intent": "result"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "const std::string & LastFunctionCalled(void) +len(30)",
                "fmtdict": {
                    "C_name": "TUT_last_function_called",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_last_function_called_bufferify",
                    "F_C_name": "c_last_function_called",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "last_function_called",
                    "F_name_generic": "last_function_called",
                    "F_name_impl": "last_function_called",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "LastFunctionCalled",
                    "LUA_name_impl": "l_last_function_called",
                    "PY_name_impl": "PY_LastFunctionCalled",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "underscore_name": "last_function_called"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "shadow_var": "SHadow_SHF_rv",
                            "stmt0": "c_string_&_result_buf",
                            "stmt1": "c_string_&_result_buf"
                        },
                        "fmtf": {
                            "F_C_var": "SHF_rv",
                            "F_pointer": "SHPTR_SHF_rv",
                            "c_var": "SHT_rv",
                            "c_var_len": "NSHF_rv",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "SHT_rv",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_string_&_result_buf",
                            "stmt1": "f_default",
                            "stmtc0": "c_string_&_result_buf",
                            "stmtc1": "c_string_&_result_buf"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_void_scalar_result_buf",
                        "stmt1": "c_default"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "void LastFunctionCalled(std::string & SHF_rv +len(NSHF_rv)) +len(30)",
                "fmtdict": {
                    "C_name": "TUT_last_function_called_bufferify",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_type": "void",
                    "F_C_arguments": "SHF_rv,\t NSHF_rv",
                    "F_C_name": "c_last_function_called_bufferify",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "function_suffix": "_bufferify",
                    "underscore_name": "last_function_called"
                },
                "generated_suffix": "buf",
                "options": {},
                "wrap": {
                    "c": true
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "Tutorial"
        ],
        "typedefs": [
            {
                "ast": {
                    "declarator": {
                        "name": "TypeID",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {},
                "name": "TypeID",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "EnumTypeID",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {},
                "name": "EnumTypeID",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            }
        ],
        "variables": [
            {
                "ast": {
                    "declarator": {
                        "name": "global_flag",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {
                    "c_type": "int",
                    "cxx_type": "int",
                    "field_name": "global_flag",
                    "variable_lower": "global_flag",
                    "variable_name": "global_flag",
                    "variable_upper": "GLOBAL_FLAG"
                },
                "name": "global_flag",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "tutorial_flag",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {
                    "c_type": "int",
                    "cxx_type": "int",
                    "field_name": "tutorial_flag",
                    "variable_lower": "tutorial_flag",
                    "variable_name": "tutorial_flag",
                    "variable_upper": "TUTORIAL_FLAG"
                },
                "name": "tutorial_flag",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                }
            }
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "lua": true,
            "python": true
        }
    }
}