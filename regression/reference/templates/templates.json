{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "classes": [
            {
                "cxx_header": "<vector>",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapvector_int.h",
                    "C_impl_filename": "wrapvectorforint.cpp",
                    "C_type_name": "TEM_vector_int",
                    "F_capsule_data_type": "SHROUD_vector_capsule",
                    "F_derived_name": "vector_int",
                    "F_impl_filename": "wrapfvector_int.f",
                    "F_module_name": "vector_int_mod",
                    "PY_PyObject": "PY_vector_int",
                    "PY_PyTypeObject": "PY_vector_int_Type",
                    "PY_capsule_name": "PY_vector_int_capsule_name",
                    "PY_from_object_func": "PP_vector_int_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_vector_int_to_Object",
                    "PY_type_filename": "pyvector_inttype.cpp",
                    "__line__": 20,
                    "class_lower": "vector_int",
                    "class_prefix": "vector_int_",
                    "class_scope": "vector_int::",
                    "class_upper": "VECTOR_INT",
                    "cxx_class": "vector_int",
                    "cxx_type": "vector<int>",
                    "fmtsample": "one"
                },
                "functions": [
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_type": "TEM_vector_int",
                                "c_val": "static_cast<void *>(\tSHCXX_rv)",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "std::vector<int>",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "std::vector<int>",
                                "f_var": "SHT_rv"
                            },
                            "fmtpy": {
                                "PyObject": "PY_vector_int",
                                "PyTypeObject": "PY_vector_int_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv"
                            }
                        },
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor"
                            },
                            "params": [],
                            "specifier": [
                                "vector"
                            ],
                            "typemap_name": "std::vector_int"
                        },
                        "decl": "vector()",
                        "declgen": "vector()",
                        "fmtdict": {
                            "C_call_code": "std::vector<int> *SHCXX_rv =\t new std::vector<int>();",
                            "C_call_list": "",
                            "C_name": "TEM_vector_int_ctor",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(\tSHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_prototype": "TEM_vector_int * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TEM_vector_int *",
                            "F_C_call": "c_vector_int_ctor",
                            "F_C_name": "c_vector_int_ctor",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_call_code": "SHT_prv = c_vector_int_ctor(SHT_rv%cxxmem)",
                            "F_name_function": "ctor",
                            "F_name_generic": "ctor",
                            "F_name_impl": "vector_int_ctor",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_vector_int_tp_init",
                            "PY_type_impl": "PY_vector_int_tp_init",
                            "PY_type_method": "tp_init",
                            "c_const": "",
                            "c_rv_decl": "TEM_vector_int *SHC_rv",
                            "cxx_rv_decl": "std::vector<int> *SHCXX_rv",
                            "function_name": "ctor",
                            "underscore_name": "ctor"
                        },
                        "linenumber": 32,
                        "options": {}
                    },
                    {
                        "ast": {
                            "attrs": {
                                "_destructor": true,
                                "_name": "dtor"
                            },
                            "params": [],
                            "specifier": [
                                "vector"
                            ],
                            "typemap_name": "std::vector"
                        },
                        "decl": "~vector()",
                        "declgen": "~vector()",
                        "fmtdict": {
                            "C_call_code": "delete SH_this;\nself->addr = NULL;",
                            "C_call_list": "",
                            "C_name": "TEM_vector_int_dtor",
                            "C_pre_call": "std::vector<int> *SH_this =\t static_cast<std::vector<int> *>(self->addr);",
                            "C_prototype": "TEM_vector_int * self",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_vector_int_dtor",
                            "F_C_name": "c_vector_int_dtor",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "call c_vector_int_dtor(obj%cxxmem)",
                            "F_name_function": "dtor",
                            "F_name_generic": "dtor",
                            "F_name_impl": "vector_int_dtor",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "dtor",
                            "underscore_name": "dtor"
                        },
                        "linenumber": 33,
                        "options": {}
                    },
                    {
                        "ast": {
                            "declarator": {
                                "name": "push_back",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": false
                                    },
                                    "const": true,
                                    "declarator": {
                                        "name": "value",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "T"
                                    ],
                                    "typemap_name": "std::vector::T"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void push_back( const T& value+intent(in) )",
                        "declgen": "void push_back(const T & value +intent(in))",
                        "fmtdict": {
                            "function_name": "push_back",
                            "underscore_name": "push_back"
                        },
                        "have_template_args": true,
                        "linenumber": 34,
                        "options": {
                            "wrap_c": false,
                            "wrap_fortran": false,
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "value",
                                    "cxx_addr": "",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<int *>\t(value))",
                                    "cxx_member": "->",
                                    "cxx_type": "int",
                                    "cxx_var": "value",
                                    "idtor": "0"
                                },
                                "fmtf": {
                                    "c_var": "value",
                                    "f_var": "value"
                                },
                                "fmtpy": {
                                    "c_const": "const ",
                                    "c_decl": "int value",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "value",
                                    "cxx_addr": "&",
                                    "cxx_decl": "int value",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "value",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_value"
                                }
                            }
                        },
                        "_generated": "cxx_template",
                        "ast": {
                            "declarator": {
                                "name": "push_back",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": false
                                    },
                                    "const": true,
                                    "declarator": {
                                        "name": "value",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void push_back( const T& value+intent(in) )",
                        "declgen": "void push_back(const int & value +intent(in))",
                        "fmtdict": {
                            "C_call_code": "SH_this->push_back(\t*value);",
                            "C_call_list": "*value",
                            "C_name": "TEM_vector_int_push_back",
                            "C_pre_call": "std::vector<int> *SH_this =\t static_cast<std::vector<int> *>(self->addr);",
                            "C_prototype": "TEM_vector_int * self,\t const int * value",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_vector_int_push_back",
                            "F_C_name": "c_vector_int_push_back",
                            "F_arg_c_call": "obj%cxxmem,\t value",
                            "F_arguments": "obj,\t value",
                            "F_call_code": "call c_vector_int_push_back(obj%cxxmem,\t value)",
                            "F_name_function": "push_back",
                            "F_name_generic": "push_back",
                            "F_name_impl": "vector_int_push_back",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_vector_int_push_back",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "push_back",
                            "underscore_name": "push_back"
                        },
                        "have_template_args": true,
                        "linenumber": 34,
                        "options": {
                            "wrap_c": true,
                            "wrap_fortran": true,
                            "wrap_lua": false,
                            "wrap_python": true
                        }
                    },
                    {
                        "ast": {
                            "declarator": {
                                "name": "at",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "n",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "size_type"
                                    ],
                                    "typemap_name": "std::vector::size_type"
                                }
                            ],
                            "return_pointer_as": "pointer",
                            "specifier": [
                                "T"
                            ],
                            "typemap_name": "std::vector::T"
                        },
                        "decl": "T & at(size_type n)",
                        "declgen": "T & at(size_type n +intent(in)+value)",
                        "fmtdict": {
                            "function_name": "at",
                            "underscore_name": "at"
                        },
                        "have_template_args": true,
                        "linenumber": 35,
                        "options": {
                            "wrap_c": false,
                            "wrap_fortran": false,
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_CXX_return_templated": true,
                        "_fmtargs": {
                            "n": {
                                "fmtc": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "n",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&n)",
                                    "cxx_member": ".",
                                    "cxx_type": "std::vector::size_type",
                                    "cxx_var": "n",
                                    "idtor": "0"
                                },
                                "fmtf": {
                                    "c_var": "n",
                                    "f_var": "n"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "size_t n",
                                    "c_deref": "",
                                    "c_type": "size_t",
                                    "c_var": "n",
                                    "cxx_addr": "&",
                                    "cxx_decl": "std::vector::size_type n",
                                    "cxx_member": ".",
                                    "cxx_type": "std::vector::size_type",
                                    "cxx_var": "n",
                                    "numpy_type": null,
                                    "py_var": "SHPy_n"
                                }
                            }
                        },
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "int",
                                "f_var": "SHT_rv"
                            },
                            "fmtpy": {
                                "PyObject": "PyObject",
                                "PyTypeObject": null,
                                "c_deref": "",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHC_rv",
                                "npy_dims": "NULL",
                                "npy_ndims": "0",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv"
                            }
                        },
                        "_generated": "cxx_template",
                        "ast": {
                            "declarator": {
                                "name": "at",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "n",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "size_type"
                                    ],
                                    "typemap_name": "std::vector::size_type"
                                }
                            ],
                            "return_pointer_as": "pointer",
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "T & at(size_type n)",
                        "declgen": "int & at(size_type n +intent(in)+value)",
                        "fmtdict": {
                            "C_call_code": "int & SHC_rv =\t SH_this->at(\tn);",
                            "C_call_list": "n",
                            "C_name": "TEM_vector_int_at",
                            "C_pre_call": "std::vector<int> *SH_this =\t static_cast<std::vector<int> *>(self->addr);",
                            "C_prototype": "TEM_vector_int * self,\t size_t n",
                            "C_return_code": "return &SHC_rv;",
                            "C_return_type": "int *",
                            "F_C_call": "c_vector_int_at",
                            "F_C_name": "c_vector_int_at",
                            "F_arg_c_call": "obj%cxxmem,\t n",
                            "F_arguments": "obj,\t n",
                            "F_call_code": "SHT_ptr = c_vector_int_at(obj%cxxmem,\t n)",
                            "F_name_function": "at",
                            "F_name_generic": "at",
                            "F_name_impl": "vector_int_at",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_vector_int_at",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int & SHC_rv",
                            "function_name": "at",
                            "underscore_name": "at"
                        },
                        "have_template_args": true,
                        "linenumber": 35,
                        "options": {
                            "wrap_c": true,
                            "wrap_fortran": true,
                            "wrap_lua": false,
                            "wrap_python": true
                        }
                    }
                ],
                "linenumber": 15,
                "name": "vector",
                "options": {
                    "__line__": 23,
                    "optsample": "two"
                },
                "scope": "std::vector::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "fmtdict": {
                            "C_impl_filename": "wrapvectorforint.cpp",
                            "__line__": 20,
                            "fmtsample": "one"
                        },
                        "instantiation": "<int>",
                        "options": {
                            "__line__": 23,
                            "optsample": "two"
                        }
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "std::vector_int"
            },
            {
                "cxx_header": "<vector>",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapvector_double.h",
                    "C_impl_filename": "wrapvector_double.cpp",
                    "C_type_name": "TEM_vector_double",
                    "F_capsule_data_type": "SHROUD_vector_capsule",
                    "F_derived_name": "vector_double",
                    "F_impl_filename": "wrapfvector_double.f",
                    "F_module_name": "vector_double_mod",
                    "PY_PyObject": "PY_vector_double",
                    "PY_PyTypeObject": "PY_vector_double_Type",
                    "PY_capsule_name": "PY_vector_double_capsule_name",
                    "PY_from_object_func": "PP_vector_double_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_vector_double_to_Object",
                    "PY_type_filename": "pyvector_doubletype.cpp",
                    "class_lower": "vector_double",
                    "class_prefix": "vector_double_",
                    "class_scope": "vector_double::",
                    "class_upper": "VECTOR_DOUBLE",
                    "cxx_class": "vector_double",
                    "cxx_type": "vector<double>"
                },
                "functions": [
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_type": "TEM_vector_double",
                                "c_val": "static_cast<void *>(\tSHCXX_rv)",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "std::vector<double>",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "std::vector<double>",
                                "f_var": "SHT_rv"
                            },
                            "fmtpy": {
                                "PyObject": "PY_vector_double",
                                "PyTypeObject": "PY_vector_double_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv"
                            }
                        },
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor"
                            },
                            "params": [],
                            "specifier": [
                                "vector"
                            ],
                            "typemap_name": "std::vector_double"
                        },
                        "decl": "vector()",
                        "declgen": "vector()",
                        "fmtdict": {
                            "C_call_code": "std::vector<double> *SHCXX_rv =\t new std::vector<double>();",
                            "C_call_list": "",
                            "C_name": "TEM_vector_double_ctor",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(\tSHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_prototype": "TEM_vector_double * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TEM_vector_double *",
                            "F_C_call": "c_vector_double_ctor",
                            "F_C_name": "c_vector_double_ctor",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_call_code": "SHT_prv = c_vector_double_ctor(SHT_rv%cxxmem)",
                            "F_name_function": "ctor",
                            "F_name_generic": "ctor",
                            "F_name_impl": "vector_double_ctor",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_vector_double_tp_init",
                            "PY_type_impl": "PY_vector_double_tp_init",
                            "PY_type_method": "tp_init",
                            "c_const": "",
                            "c_rv_decl": "TEM_vector_double *SHC_rv",
                            "cxx_rv_decl": "std::vector<double> *SHCXX_rv",
                            "function_name": "ctor",
                            "underscore_name": "ctor"
                        },
                        "linenumber": 32,
                        "options": {}
                    },
                    {
                        "ast": {
                            "attrs": {
                                "_destructor": true,
                                "_name": "dtor"
                            },
                            "params": [],
                            "specifier": [
                                "vector"
                            ],
                            "typemap_name": "std::vector"
                        },
                        "decl": "~vector()",
                        "declgen": "~vector()",
                        "fmtdict": {
                            "C_call_code": "delete SH_this;\nself->addr = NULL;",
                            "C_call_list": "",
                            "C_name": "TEM_vector_double_dtor",
                            "C_pre_call": "std::vector<double> *SH_this =\t static_cast<std::vector<double> *>(self->addr);",
                            "C_prototype": "TEM_vector_double * self",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_vector_double_dtor",
                            "F_C_name": "c_vector_double_dtor",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "call c_vector_double_dtor(obj%cxxmem)",
                            "F_name_function": "dtor",
                            "F_name_generic": "dtor",
                            "F_name_impl": "vector_double_dtor",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "dtor",
                            "underscore_name": "dtor"
                        },
                        "linenumber": 33,
                        "options": {}
                    },
                    {
                        "ast": {
                            "declarator": {
                                "name": "push_back",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": false
                                    },
                                    "const": true,
                                    "declarator": {
                                        "name": "value",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "T"
                                    ],
                                    "typemap_name": "std::vector::T"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void push_back( const T& value+intent(in) )",
                        "declgen": "void push_back(const T & value +intent(in))",
                        "fmtdict": {
                            "function_name": "push_back",
                            "underscore_name": "push_back"
                        },
                        "have_template_args": true,
                        "linenumber": 34,
                        "options": {
                            "wrap_c": false,
                            "wrap_fortran": false,
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "value",
                                    "cxx_addr": "",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<double *>\t(value))",
                                    "cxx_member": "->",
                                    "cxx_type": "double",
                                    "cxx_var": "value",
                                    "idtor": "0"
                                },
                                "fmtf": {
                                    "c_var": "value",
                                    "f_var": "value"
                                },
                                "fmtpy": {
                                    "c_const": "const ",
                                    "c_decl": "double value",
                                    "c_deref": "",
                                    "c_type": "double",
                                    "c_var": "value",
                                    "cxx_addr": "&",
                                    "cxx_decl": "double value",
                                    "cxx_member": ".",
                                    "cxx_type": "double",
                                    "cxx_var": "value",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_value"
                                }
                            }
                        },
                        "_generated": "cxx_template",
                        "ast": {
                            "declarator": {
                                "name": "push_back",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": false
                                    },
                                    "const": true,
                                    "declarator": {
                                        "name": "value",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void push_back( const T& value+intent(in) )",
                        "declgen": "void push_back(const double & value +intent(in))",
                        "fmtdict": {
                            "C_call_code": "SH_this->push_back(\t*value);",
                            "C_call_list": "*value",
                            "C_name": "TEM_vector_double_push_back",
                            "C_pre_call": "std::vector<double> *SH_this =\t static_cast<std::vector<double> *>(self->addr);",
                            "C_prototype": "TEM_vector_double * self,\t const double * value",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_vector_double_push_back",
                            "F_C_name": "c_vector_double_push_back",
                            "F_arg_c_call": "obj%cxxmem,\t value",
                            "F_arguments": "obj,\t value",
                            "F_call_code": "call c_vector_double_push_back(obj%cxxmem,\t value)",
                            "F_name_function": "push_back",
                            "F_name_generic": "push_back",
                            "F_name_impl": "vector_double_push_back",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_vector_double_push_back",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "push_back",
                            "underscore_name": "push_back"
                        },
                        "have_template_args": true,
                        "linenumber": 34,
                        "options": {
                            "wrap_c": true,
                            "wrap_fortran": true,
                            "wrap_lua": false,
                            "wrap_python": true
                        }
                    },
                    {
                        "ast": {
                            "declarator": {
                                "name": "at",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "n",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "size_type"
                                    ],
                                    "typemap_name": "std::vector::size_type"
                                }
                            ],
                            "return_pointer_as": "pointer",
                            "specifier": [
                                "T"
                            ],
                            "typemap_name": "std::vector::T"
                        },
                        "decl": "T & at(size_type n)",
                        "declgen": "T & at(size_type n +intent(in)+value)",
                        "fmtdict": {
                            "function_name": "at",
                            "underscore_name": "at"
                        },
                        "have_template_args": true,
                        "linenumber": 35,
                        "options": {
                            "wrap_c": false,
                            "wrap_fortran": false,
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_CXX_return_templated": true,
                        "_fmtargs": {
                            "n": {
                                "fmtc": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "n",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&n)",
                                    "cxx_member": ".",
                                    "cxx_type": "std::vector::size_type",
                                    "cxx_var": "n",
                                    "idtor": "0"
                                },
                                "fmtf": {
                                    "c_var": "n",
                                    "f_var": "n"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "size_t n",
                                    "c_deref": "",
                                    "c_type": "size_t",
                                    "c_var": "n",
                                    "cxx_addr": "&",
                                    "cxx_decl": "std::vector::size_type n",
                                    "cxx_member": ".",
                                    "cxx_type": "std::vector::size_type",
                                    "cxx_var": "n",
                                    "numpy_type": null,
                                    "py_var": "SHPy_n"
                                }
                            }
                        },
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "double",
                                "cxx_var": "SHC_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "double",
                                "f_var": "SHT_rv"
                            },
                            "fmtpy": {
                                "PyObject": "PyObject",
                                "PyTypeObject": null,
                                "c_deref": "",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHC_rv",
                                "npy_dims": "NULL",
                                "npy_ndims": "0",
                                "numpy_type": "NPY_DOUBLE",
                                "py_var": "SHTPy_rv"
                            }
                        },
                        "_generated": "cxx_template",
                        "ast": {
                            "declarator": {
                                "name": "at",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "n",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "size_type"
                                    ],
                                    "typemap_name": "std::vector::size_type"
                                }
                            ],
                            "return_pointer_as": "pointer",
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        "decl": "T & at(size_type n)",
                        "declgen": "double & at(size_type n +intent(in)+value)",
                        "fmtdict": {
                            "C_call_code": "double & SHC_rv =\t SH_this->at(\tn);",
                            "C_call_list": "n",
                            "C_name": "TEM_vector_double_at",
                            "C_pre_call": "std::vector<double> *SH_this =\t static_cast<std::vector<double> *>(self->addr);",
                            "C_prototype": "TEM_vector_double * self,\t size_t n",
                            "C_return_code": "return &SHC_rv;",
                            "C_return_type": "double *",
                            "F_C_call": "c_vector_double_at",
                            "F_C_name": "c_vector_double_at",
                            "F_arg_c_call": "obj%cxxmem,\t n",
                            "F_arguments": "obj,\t n",
                            "F_call_code": "SHT_ptr = c_vector_double_at(obj%cxxmem,\t n)",
                            "F_name_function": "at",
                            "F_name_generic": "at",
                            "F_name_impl": "vector_double_at",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_vector_double_at",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "double & SHC_rv",
                            "function_name": "at",
                            "underscore_name": "at"
                        },
                        "have_template_args": true,
                        "linenumber": 35,
                        "options": {
                            "wrap_c": true,
                            "wrap_fortran": true,
                            "wrap_lua": false,
                            "wrap_python": true
                        }
                    }
                ],
                "linenumber": 15,
                "name": "vector",
                "options": {},
                "scope": "std::vector::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "fmtdict": {
                            "C_impl_filename": "wrapvectorforint.cpp",
                            "__line__": 20,
                            "fmtsample": "one"
                        },
                        "instantiation": "<int>",
                        "options": {
                            "__line__": 23,
                            "optsample": "two"
                        }
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "std::vector_double"
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapWorker.h",
                    "C_impl_filename": "wrapWorker.cpp",
                    "C_type_name": "TEM_worker",
                    "F_capsule_data_type": "SHROUD_worker_capsule",
                    "F_derived_name": "worker",
                    "F_impl_filename": "wrapfWorker.f",
                    "F_module_name": "worker_mod",
                    "PY_PyObject": "PY_Worker",
                    "PY_PyTypeObject": "PY_Worker_Type",
                    "PY_capsule_name": "PY_Worker_capsule_name",
                    "PY_from_object_func": "PP_Worker_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Worker_to_Object",
                    "PY_type_filename": "pyWorkertype.cpp",
                    "class_lower": "worker",
                    "class_prefix": "worker_",
                    "class_scope": "Worker::",
                    "class_upper": "WORKER",
                    "cxx_class": "Worker",
                    "cxx_type": "Worker"
                },
                "linenumber": 41,
                "name": "Worker",
                "options": {},
                "scope": "Worker::",
                "typemap_name": "Worker"
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapImplWorker1.h",
                    "C_impl_filename": "wrapImplWorker1.cpp",
                    "C_type_name": "TEM_implworker1",
                    "F_capsule_data_type": "SHROUD_implworker1_capsule",
                    "F_derived_name": "implworker1",
                    "F_impl_filename": "wrapfImplWorker1.f",
                    "F_module_name": "implworker1_mod",
                    "PY_PyObject": "PY_ImplWorker1",
                    "PY_PyTypeObject": "PY_ImplWorker1_Type",
                    "PY_capsule_name": "PY_ImplWorker1_capsule_name",
                    "PY_from_object_func": "PP_ImplWorker1_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_ImplWorker1_to_Object",
                    "PY_type_filename": "pyImplWorker1type.cpp",
                    "class_lower": "implworker1",
                    "class_prefix": "implworker1_",
                    "class_scope": "ImplWorker1::",
                    "class_upper": "IMPLWORKER1",
                    "cxx_class": "ImplWorker1",
                    "cxx_type": "ImplWorker1"
                },
                "linenumber": 47,
                "name": "ImplWorker1",
                "options": {
                    "__line__": 48,
                    "wrap_fortran": false
                },
                "scope": "internal::ImplWorker1::",
                "typemap_name": "internal::ImplWorker1"
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapuser_int.h",
                    "C_impl_filename": "wrapuser_int.cpp",
                    "C_type_name": "TEM_user_int",
                    "F_capsule_data_type": "SHROUD_user_capsule",
                    "F_derived_name": "user_int",
                    "F_impl_filename": "wrapfuser_int.f",
                    "F_module_name": "user_int_mod",
                    "PY_PyObject": "PY_user_int",
                    "PY_PyTypeObject": "PY_user_int_Type",
                    "PY_capsule_name": "PY_user_int_capsule_name",
                    "PY_from_object_func": "PP_user_int_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_user_int_to_Object",
                    "PY_type_filename": "pyuser_inttype.cpp",
                    "class_lower": "user_int",
                    "class_prefix": "user_int_",
                    "class_scope": "user_int::",
                    "class_upper": "USER_INT",
                    "cxx_class": "user_int",
                    "cxx_type": "user<int>"
                },
                "functions": [
                    {
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "name": "nested",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg1",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "T"
                                    ],
                                    "typemap_name": "user::T"
                                },
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg2",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "U"
                                    ],
                                    "typemap_name": "U"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "cxx_template": {
                            "U": [
                                "double"
                            ]
                        },
                        "decl": "template<U> void nested( T arg1, U arg2 );",
                        "declgen": "void nested(T arg1 +intent(in)+value, U arg2 +intent(in)+value)",
                        "fmtdict": {
                            "function_name": "nested",
                            "underscore_name": "nested"
                        },
                        "have_template_args": true,
                        "linenumber": 56,
                        "options": {
                            "wrap_c": false,
                            "wrap_fortran": false,
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "U"
                        ]
                    },
                    {
                        "_fmtargs": {
                            "arg1": {
                                "fmtc": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "arg1",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "arg1",
                                    "idtor": "0"
                                },
                                "fmtf": {
                                    "c_var": "arg1",
                                    "f_var": "arg1"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "int arg1",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "arg1",
                                    "cxx_addr": "&",
                                    "cxx_decl": "int arg1",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "arg1",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_arg1"
                                }
                            },
                            "arg2": {
                                "fmtc": {
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "arg2",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                                    "cxx_member": ".",
                                    "cxx_type": "double",
                                    "cxx_var": "arg2",
                                    "idtor": "0"
                                },
                                "fmtf": {
                                    "c_var": "arg2",
                                    "f_var": "arg2"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "double arg2",
                                    "c_deref": "",
                                    "c_type": "double",
                                    "c_var": "arg2",
                                    "cxx_addr": "&",
                                    "cxx_decl": "double arg2",
                                    "cxx_member": ".",
                                    "cxx_type": "double",
                                    "cxx_var": "arg2",
                                    "numpy_type": "NPY_DOUBLE",
                                    "py_var": "SHPy_arg2"
                                }
                            }
                        },
                        "_generated": "cxx_template",
                        "_overloaded": true,
                        "ast": {
                            "declarator": {
                                "name": "nested",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg1",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                },
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg2",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "template<U> void nested( T arg1, U arg2 );",
                        "declgen": "void nested(int arg1 +intent(in)+value, double arg2 +intent(in)+value)",
                        "fmtdict": {
                            "CXX_template": "<double>",
                            "C_call_code": "SH_this->nested<double>(\targ1,\t arg2);",
                            "C_call_list": "arg1,\t arg2",
                            "C_name": "TEM_user_int_nested_double",
                            "C_pre_call": "user<int> *SH_this =\t static_cast<user<int> *>(self->addr);",
                            "C_prototype": "TEM_user_int * self,\t int arg1,\t double arg2",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_user_int_nested_double",
                            "F_C_name": "c_user_int_nested_double",
                            "F_arg_c_call": "obj%cxxmem,\t arg1,\t arg2",
                            "F_arguments": "obj,\t arg1,\t arg2",
                            "F_call_code": "call c_user_int_nested_double(obj%cxxmem,\t arg1,\t arg2)",
                            "F_name_function": "nested_double",
                            "F_name_generic": "nested",
                            "F_name_impl": "user_int_nested_double",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_user_int_nested_double",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "nested",
                            "template_suffix": "_double",
                            "underscore_name": "nested"
                        },
                        "have_template_args": true,
                        "linenumber": 56,
                        "options": {
                            "wrap_c": true,
                            "wrap_fortran": true,
                            "wrap_lua": false,
                            "wrap_python": true
                        },
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ],
                                        "typemap_name": "double"
                                    }
                                ],
                                "instantiation": "<double>"
                            }
                        ],
                        "template_parameters": [
                            "U"
                        ]
                    }
                ],
                "linenumber": 51,
                "name": "user",
                "options": {},
                "scope": "user::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "user_int"
            }
        ],
        "cxx_header": "templates.hpp",
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_argument": "SH_",
            "C_array_type": "TEM_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_capsule_data_type": "TEM_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wraptemplates.h",
            "C_header_filename_suffix": "h",
            "C_header_helper": "typestemplates.h",
            "C_impl_filename": "wraptemplates.cpp",
            "C_impl_filename_suffix": "cpp",
            "C_local": "SHC_",
            "C_memory_dtor_function": "TEM_SHROUD_memory_destructor",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "TEM_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapftemplates.f",
            "F_module_name": "templates_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "hpp",
            "LUA_impl_filename_suffix": "cpp",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_PyObject": "PyObject",
            "PY_extern_C_begin": "extern \"C\" ",
            "PY_header_filename": "pytemplatesmodule.hpp",
            "PY_header_filename_suffix": "hpp",
            "PY_helper_filename": "pytemplateshelper.cpp",
            "PY_impl_filename_suffix": "cpp",
            "PY_library_doc": "library documentation",
            "PY_module_filename": "pytemplatesmodule.cpp",
            "PY_module_name": "templates",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_numpy_array_dtor_context": "PY_array_destructor_context",
            "PY_numpy_array_dtor_function": "PY_array_destructor_function",
            "PY_obj": "obj",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "YAML_type_filename": "templates_types.yaml",
            "c_temp": "SHT_",
            "class_prefix": "",
            "class_scope": "",
            "cxx_class": "",
            "function_suffix": "",
            "library": "templates",
            "library_lower": "templates",
            "library_upper": "TEMPLATES",
            "namespace_scope": "",
            "stdlib": "std::",
            "template_suffix": ""
        },
        "functions": [
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "T"
                            ],
                            "typemap_name": "T"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "U"
                            ],
                            "typemap_name": "U"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "T": [
                        "int",
                        "float"
                    ]
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(T arg1 +intent(in)+value, U arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 77,
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "function_name": "FunctionTU",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "linenumber": 76,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg1",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg1",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "long arg2",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "long arg2",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_arg2"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(int arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 77,
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<int, long>",
                    "C_call_code": "FunctionTU<int, long>(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TEM_function_tu_0",
                    "C_prototype": "int arg1,\t long arg2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_function_tu_0",
                    "F_C_name": "c_function_tu_0",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "call c_function_tu_0(arg1,\t arg2)",
                    "F_name_function": "function_tu_0",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_0",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_FunctionTU_0",
                    "c_const": "",
                    "function_name": "FunctionTU",
                    "template_suffix": "_0",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "linenumber": 76,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "float arg1",
                            "c_deref": "",
                            "c_type": "float",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "float arg1",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "numpy_type": "NPY_FLOAT",
                            "py_var": "SHPy_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg2",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(float arg1 +intent(in)+value, double arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 77,
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<float, double>",
                    "C_call_code": "FunctionTU<float, double>(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TEM_function_tu_1",
                    "C_prototype": "float arg1,\t double arg2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_function_tu_1",
                    "F_C_name": "c_function_tu_1",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "call c_function_tu_1(arg1,\t arg2)",
                    "F_name_function": "function_tu_1",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_FunctionTU_1",
                    "c_const": "",
                    "function_name": "FunctionTU",
                    "template_suffix": "_1",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "linenumber": 76,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "cxx_template": {
                    "T": [
                        "internal::ImplWorker1"
                    ]
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "__line__": 91,
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "function_name": "UseImplWorker",
                    "underscore_name": "use_impl_worker"
                },
                "linenumber": 90,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "__line__": 91,
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "CXX_template": "<internal::ImplWorker1>",
                    "C_call_code": "int SHC_rv =\t UseImplWorker<internal::ImplWorker1>(\t);",
                    "C_call_list": "",
                    "C_name": "TEM_use_impl_worker_internal_ImplWorker1",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_impl_worker_internal_implworker1",
                    "F_C_name": "c_use_impl_worker_internal_implworker1",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_use_impl_worker_internal_implworker1()",
                    "F_name_function": "use_impl_worker_internal_ImplWorker1",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_internal_ImplWorker1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseImplWorker_internal_ImplWorker1",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_internal_ImplWorker1",
                    "underscore_name": "use_impl_worker"
                },
                "linenumber": 90,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            }
        ],
        "language": "c++",
        "options": {
            "C_enum_member_template": "{C_prefix}{C_scope_name}{enum_member_name}",
            "C_enum_template": "{C_prefix}{flat_name}",
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_helper_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{class_lower}_capsule",
            "F_create_bufferify_function": true,
            "F_enum_member_template": "{F_scope_name}{enum_member_lower}",
            "F_force_wrapper": false,
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}",
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_class_template": "{class_lower}_mod",
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_per_class": true,
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context",
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 9,
            "class_prefix_template": "{class_lower}_",
            "debug": false,
            "debug_index": false,
            "doxygen": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": false,
            "wrap_python": true
        }
    },
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h",
            "c_to_cxx": "MPI_Comm_f2c({c_var})",
            "c_type": "MPI_Fint",
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})",
            "cxx_type": "MPI_Comm",
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_c_type": "integer(C_INT)",
            "f_kind": "C_INT",
            "f_type": "integer",
            "flat_name": "MPI_Comm"
        },
        "Worker": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Worker",
            "PY_PyTypeObject": "PY_Worker_Type",
            "PY_from_object": "PP_Worker_from_Object",
            "PY_to_object": "PP_Worker_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}Worker *>({c_var}{c_member}addr)",
            "c_type": "TEM_worker",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Worker",
            "f_c_module": {
                "--import--": [
                    "SHROUD_worker_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_worker_capsule)",
            "f_capsule_data_type": "SHROUD_worker_capsule",
            "f_derived_type": "worker",
            "f_module": {
                "worker_mod": [
                    "worker"
                ]
            },
            "f_module_name": "worker_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(worker)",
            "flat_name": "Worker",
            "forward": "Worker",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Worker * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Worker * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TBOOLEAN",
            "PYN_typenum": "NPY_BOOL",
            "PY_PyTypeObject": "PyBool_Type",
            "c_type": "bool",
            "cxx_type": "bool",
            "f_c_type": "logical(C_BOOL)",
            "f_kind": "C_BOOL",
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            },
            "f_statements": {
                "intent_in": {
                    "c_local_var": true,
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_inout": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ],
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_out": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                },
                "result": {
                    "need_wrapper": true
                }
            },
            "f_type": "logical",
            "flat_name": "bool",
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_deref}{c_var});"
                    ],
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        },
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_ctor": "PyString_FromString({c_var})",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "c_helper": "ShroudStrAlloc ShroudStrFree",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrFree({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_trim},\t {c_var_trim});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_helper": "ShroudStrAlloc ShroudStrCopy ShroudStrFree",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);",
                        "ShroudStrFree({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_len},\t {c_var_trim});"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrAlloc ShroudStrCopy ShroudStrFree",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);",
                        "ShroudStrFree({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_len},\t 0);"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "char"
        },
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "(int) {cxx_var}",
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)",
            "PY_format": "c",
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_header": "<string.h>",
                    "cxx_header": "<cstring>",
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});",
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_type": "character",
            "flat_name": "char"
        },
        "charout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.ccharp = {cxx_var};",
                        "{c_var_context}->len = {cxx_var} == NULL ? 0 : strlen({cxx_var});",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "char"
        },
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_DOUBLE",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "d",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "double",
            "cxx_type": "double",
            "f_cast": "real({f_var}, C_DOUBLE)",
            "f_kind": "C_DOUBLE",
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            },
            "f_type": "real(C_DOUBLE)",
            "flat_name": "double"
        },
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_FLOAT",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "f",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "float",
            "cxx_type": "float",
            "f_cast": "real({f_var}, C_FLOAT)",
            "f_kind": "C_FLOAT",
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            },
            "f_type": "real(C_FLOAT)",
            "flat_name": "float"
        },
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "int",
            "cxx_type": "int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "int"
        },
        "int16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int16_t",
            "cxx_type": "int16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "int16_t"
        },
        "int32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int32_t",
            "cxx_type": "int32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "int32_t"
        },
        "int64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int64_t",
            "cxx_type": "int64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "int64_t"
        },
        "int8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int8_t",
            "cxx_type": "int8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "int8_t"
        },
        "internal::ImplWorker1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_ImplWorker1",
            "PY_PyTypeObject": "PY_ImplWorker1_Type",
            "PY_from_object": "PP_ImplWorker1_from_Object",
            "PY_to_object": "PP_ImplWorker1_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}internal::ImplWorker1 *>({c_var}{c_member}addr)",
            "c_type": "TEM_implworker1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "internal::ImplWorker1",
            "f_c_module": {
                "--import--": [
                    "SHROUD_implworker1_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_implworker1_capsule)",
            "f_capsule_data_type": "SHROUD_implworker1_capsule",
            "f_derived_type": "implworker1",
            "f_module": {
                "implworker1_mod": [
                    "implworker1"
                ]
            },
            "f_module_name": "implworker1_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(implworker1)",
            "flat_name": "internal_ImplWorker1",
            "forward": "internal::ImplWorker1",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}internal::ImplWorker1 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}internal::ImplWorker1 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "long",
            "cxx_type": "long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "long"
        },
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "long long",
            "cxx_type": "long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "long_long"
        },
        "short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "short",
            "cxx_type": "short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "short"
        },
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})",
            "c_header": "<stddef.h>",
            "c_type": "size_t",
            "cxx_type": "size_t",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "C_SIZE_T",
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            },
            "f_type": "integer(C_SIZE_T)",
            "flat_name": "size_t"
        },
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()",
            "PY_build_format": "s#",
            "PY_ctor": "PyString_FromStringAndSize(\t{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size())",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_inout": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_out": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "post_call": [
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t NULL,\t 0);",
                        "-}} else {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());",
                        "-}}"
                    ]
                }
            },
            "c_type": "char",
            "cxx_header": "<string>",
            "cxx_to_c": "{cxx_var}{cxx_member}c_str()",
            "cxx_type": "std::string",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "std_string",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_out": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        },
        "std::vector": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector *>({c_var}{c_member}addr)",
            "c_type": "TEM_vector",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "vector",
            "f_module": {
                "vector_mod": [
                    "vector"
                ]
            },
            "f_module_name": "vector_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector)",
            "flat_name": "std_vector",
            "forward": "std::vector",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "std::vector::T": {
            "base": "template",
            "c_type": "c_T",
            "cxx_type": "cxx_T",
            "f_type": "f_T",
            "flat_name": "cxx_T"
        },
        "std::vector::size_type": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})",
            "c_header": "<stddef.h>",
            "c_type": "size_t",
            "cxx_type": "std::vector::size_type",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "C_SIZE_T",
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            },
            "f_type": "integer(C_SIZE_T)",
            "flat_name": "std_vector_size_type",
            "typedef": "size_t"
        },
        "std::vector_double": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_double",
            "PY_PyTypeObject": "PY_vector_double_Type",
            "PY_from_object": "PP_vector_double_from_Object",
            "PY_to_object": "PP_vector_double_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector<double> *>({c_var}{c_member}addr)",
            "c_type": "TEM_vector_double",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<double>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "vector_double",
            "f_module": {
                "vector_double_mod": [
                    "vector_double"
                ]
            },
            "f_module_name": "vector_double_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_double)",
            "flat_name": "std_vector_double",
            "forward": "std::vector<double>",
            "idtor": "2",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<double> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<double> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "std::vector_int": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_int",
            "PY_PyTypeObject": "PY_vector_int_Type",
            "PY_from_object": "PP_vector_int_from_Object",
            "PY_to_object": "PP_vector_int_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector<int> *>({c_var}{c_member}addr)",
            "c_type": "TEM_vector_int",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<int>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "vector_int",
            "f_module": {
                "vector_int_mod": [
                    "vector_int"
                ]
            },
            "f_module_name": "vector_int_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_int)",
            "flat_name": "std_vector_int",
            "forward": "std::vector<int>",
            "idtor": "1",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "stringout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "{c_var_context}->addr.ccharp = NULL;",
                        "{c_var_context}->len = 0;",
                        "-}} else {{+",
                        "{c_var_context}->addr.ccharp = {cxx_var}{cxx_member}data();",
                        "{c_var_context}->len = {cxx_var}{cxx_member}size();",
                        "-}}",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "void",
            "cxx_header": "<string>",
            "cxx_to_c": "static_cast<void *>({cxx_var})",
            "cxx_type": "std::string",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "std_string"
        },
        "uint16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint16_t",
            "cxx_type": "uint16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "uint16_t"
        },
        "uint32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint32_t",
            "cxx_type": "uint32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "uint32_t"
        },
        "uint64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint64_t",
            "cxx_type": "uint64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "uint64_t"
        },
        "uint8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint8_t",
            "cxx_type": "uint8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "uint8_t"
        },
        "unsigned_int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned int",
            "cxx_type": "unsigned int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "unsigned_int"
        },
        "unsigned_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned long",
            "cxx_type": "unsigned long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "unsigned_long"
        },
        "unsigned_long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "unsigned long long",
            "cxx_type": "unsigned long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "unsigned_long_long"
        },
        "unsigned_short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned short",
            "cxx_type": "unsigned short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "unsigned_short"
        },
        "user": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}user *>({c_var}{c_member}addr)",
            "c_type": "TEM_user",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "user",
            "f_c_module": {
                "--import--": [
                    "SHROUD_user_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_user_capsule)",
            "f_capsule_data_type": "SHROUD_user_capsule",
            "f_derived_type": "user",
            "f_module": {
                "user_mod": [
                    "user"
                ]
            },
            "f_module_name": "user_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(user)",
            "flat_name": "user",
            "forward": "user",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}user * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}user * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "user::T": {
            "base": "template",
            "c_type": "c_T",
            "cxx_type": "cxx_T",
            "f_type": "f_T",
            "flat_name": "cxx_T"
        },
        "user_int": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_user_int",
            "PY_PyTypeObject": "PY_user_int_Type",
            "PY_from_object": "PP_user_int_from_Object",
            "PY_to_object": "PP_user_int_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}user<int> *>({c_var}{c_member}addr)",
            "c_type": "TEM_user_int",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "user<int>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_user_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_user_capsule)",
            "f_capsule_data_type": "SHROUD_user_capsule",
            "f_derived_type": "user_int",
            "f_module": {
                "user_int_mod": [
                    "user_int"
                ]
            },
            "f_module_name": "user_int_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(user_int)",
            "flat_name": "user_int",
            "forward": "user<int>",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}user<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}user<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)",
            "c_type": "void",
            "cxx_type": "void",
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            },
            "f_type": "type(C_PTR)",
            "flat_name": "void"
        }
    }
}