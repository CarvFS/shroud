{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.", 
    "library": {
        "classes": [
            {
                "cxx_header": "<vector>", 
                "fmtdict": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapvector.h", 
                    "C_impl_filename": "wrapvectorforint.cpp", 
                    "C_type_name": "TEM_vector_0", 
                    "F_derived_name": "vector_0", 
                    "F_impl_filename": "wrapfvector.f", 
                    "F_module_name": "vector_mod", 
                    "__line__": 16, 
                    "class_lower": "vector_0", 
                    "class_prefix": "vector_", 
                    "class_scope": "vector_0::", 
                    "class_upper": "VECTOR_0", 
                    "cxx_class": "vector_0", 
                    "cxx_type": "vector<int>", 
                    "fmtblah": "one"
                }, 
                "functions": [
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_type": "TEM_vector", 
                                "c_val": "static_cast<void *>(\tSHCXX_rv)", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_member": "->", 
                                "cxx_type": "std::vector", 
                                "cxx_var": "SHCXX_rv", 
                                "idtor": "0"
                            }, 
                            "fmtf": {
                                "cxx_type": "std::vector", 
                                "f_var": "SHT_rv"
                            }
                        }, 
                        "ast": {
                            "attrs": {
                                "_constructor": true, 
                                "_name": "ctor"
                            }, 
                            "params": [], 
                            "specifier": [
                                "vector"
                            ], 
                            "typemap_name": "std::vector"
                        }, 
                        "decl": "vector()", 
                        "declgen": "vector()", 
                        "fmtdict": {
                            "C_call_code": "std::vector *SHCXX_rv =\t new std::vector_0();", 
                            "C_call_list": "", 
                            "C_name": "TEM_vector_ctor", 
                            "C_post_call": "TEM_vector SHC_rv;\nSHC_rv.addr = static_cast<void *>(\tSHCXX_rv);\nSHC_rv.idtor = 0;", 
                            "C_prototype": "", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "TEM_vector", 
                            "F_C_call": "c_vector_ctor", 
                            "F_C_name": "c_vector_ctor", 
                            "F_arg_c_call": "", 
                            "F_arguments": "", 
                            "F_call_code": "SHT_rv%cxxmem = c_vector_ctor()", 
                            "F_name_function": "ctor", 
                            "F_name_generic": "ctor", 
                            "F_name_impl": "vector_ctor", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "c_const": "", 
                            "c_rv_decl": "TEM_vector *SHC_rv", 
                            "cxx_rv_decl": "std::vector *SHCXX_rv", 
                            "function_name": "ctor", 
                            "underscore_name": "ctor"
                        }, 
                        "linenumber": 24, 
                        "options": {}
                    }, 
                    {
                        "ast": {
                            "attrs": {
                                "_destructor": true, 
                                "_name": "dtor"
                            }, 
                            "params": [], 
                            "specifier": [
                                "vector"
                            ], 
                            "typemap_name": "std::vector"
                        }, 
                        "decl": "~vector()", 
                        "declgen": "~vector()", 
                        "fmtdict": {
                            "C_call_code": "delete SH_this;\nself->addr = NULL;", 
                            "C_call_list": "", 
                            "C_name": "TEM_vector_dtor", 
                            "C_pre_call": "std::vector<int> *SH_this =\t static_cast<std::vector<int> *>(self->addr);", 
                            "C_prototype": "TEM_vector_0 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_vector_dtor", 
                            "F_C_name": "c_vector_dtor", 
                            "F_arg_c_call": "obj%cxxmem", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_vector_dtor(obj%cxxmem)", 
                            "F_name_function": "dtor", 
                            "F_name_generic": "dtor", 
                            "F_name_impl": "vector_dtor", 
                            "F_subprogram": "subroutine", 
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "self", 
                            "function_name": "dtor", 
                            "underscore_name": "dtor"
                        }, 
                        "linenumber": 25, 
                        "options": {}
                    }, 
                    {
                        "_overloaded": true, 
                        "ast": {
                            "declarator": {
                                "name": "push_back", 
                                "pointer": []
                            }, 
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": false
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "T"
                                    ], 
                                    "typemap_name": "std::vector::T"
                                }
                            ], 
                            "specifier": [
                                "void"
                            ], 
                            "typemap_name": "void"
                        }, 
                        "decl": "void push_back( const T& value+intent(in) );", 
                        "declgen": "void push_back(const T & value +intent(in))", 
                        "fmtdict": {
                            "function_name": "push_back", 
                            "function_suffix": "_0", 
                            "underscore_name": "push_back"
                        }, 
                        "have_template_args": true, 
                        "linenumber": 26, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "const ", 
                                    "c_deref": "", 
                                    "c_member": ".", 
                                    "c_var": "value", 
                                    "cxx_addr": "&", 
                                    "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<int *>\t(&value))", 
                                    "cxx_member": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "value", 
                                    "idtor": "0"
                                }, 
                                "fmtf": {
                                    "c_var": "value", 
                                    "f_var": "value"
                                }
                            }
                        }, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "declarator": {
                                "name": "push_back", 
                                "pointer": []
                            }, 
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": false
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ], 
                                    "typemap_name": "int"
                                }
                            ], 
                            "specifier": [
                                "void"
                            ], 
                            "typemap_name": "void"
                        }, 
                        "decl": "void push_back( const T& value+intent(in) );", 
                        "declgen": "void push_back(const int value +intent(in))", 
                        "fmtdict": {
                            "C_call_code": "SH_this->push_back(\tvalue);", 
                            "C_call_list": "value", 
                            "C_name": "TEM_vector_push_back_XXXX", 
                            "C_pre_call": "std::vector<int> *SH_this =\t static_cast<std::vector<int> *>(self->addr);", 
                            "C_prototype": "TEM_vector_0 * self,\t const int value", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_vector_push_back_xxxx", 
                            "F_C_name": "c_vector_push_back_xxxx", 
                            "F_arg_c_call": "obj%cxxmem,\t value", 
                            "F_arguments": "obj,\t value", 
                            "F_call_code": "call c_vector_push_back_xxxx(obj%cxxmem,\t value)", 
                            "F_name_function": "push_back_XXXX", 
                            "F_name_generic": "push_back", 
                            "F_name_impl": "vector_push_back_XXXX", 
                            "F_subprogram": "subroutine", 
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "self", 
                            "function_name": "push_back", 
                            "function_suffix": "_XXXX", 
                            "underscore_name": "push_back"
                        }, 
                        "have_template_args": true, 
                        "linenumber": 26, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }
                ], 
                "linenumber": 11, 
                "name": "vector", 
                "options": {
                    "__line__": 19, 
                    "optblah": "two"
                }, 
                "scope": "std::vector::", 
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ], 
                                "typemap_name": "int"
                            }
                        ], 
                        "fmtdict": {
                            "C_impl_filename": "wrapvectorforint.cpp", 
                            "__line__": 16, 
                            "fmtblah": "one"
                        }, 
                        "instantiation": "<int>", 
                        "options": {
                            "__line__": 19, 
                            "optblah": "two"
                        }
                    }
                ], 
                "template_parameters": [
                    "T"
                ], 
                "typemap_name": "std::vector_0"
            }, 
            {
                "cxx_header": "", 
                "fmtdict": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapuser.h", 
                    "C_impl_filename": "wrapuser.cpp", 
                    "C_type_name": "TEM_user_0", 
                    "F_derived_name": "user_0", 
                    "F_impl_filename": "wrapfuser.f", 
                    "F_module_name": "user_mod", 
                    "class_lower": "user_0", 
                    "class_prefix": "user_", 
                    "class_scope": "user_0::", 
                    "class_upper": "USER_0", 
                    "cxx_class": "user_0", 
                    "cxx_type": "user<int>"
                }, 
                "functions": [
                    {
                        "_overloaded": true, 
                        "ast": {
                            "declarator": {
                                "name": "nested", 
                                "pointer": []
                            }, 
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "declarator": {
                                        "name": "arg1", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "T"
                                    ], 
                                    "typemap_name": "user::T"
                                }, 
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "declarator": {
                                        "name": "arg2", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "U"
                                    ], 
                                    "typemap_name": "U"
                                }
                            ], 
                            "specifier": [
                                "void"
                            ], 
                            "typemap_name": "void"
                        }, 
                        "cxx_template": {
                            "U": [
                                "double"
                            ]
                        }, 
                        "decl": "template<U> void nested( T arg1, U arg2 );", 
                        "declgen": "void nested(T arg1 +intent(in)+value, U arg2 +intent(in)+value)", 
                        "fmtdict": {
                            "function_name": "nested", 
                            "underscore_name": "nested"
                        }, 
                        "have_template_args": true, 
                        "linenumber": 35, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }, 
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ], 
                                        "typemap_name": "double"
                                    }
                                ], 
                                "instantiation": "<double>"
                            }
                        ], 
                        "template_name_to_index": {
                            "U": 0
                        }, 
                        "template_parameters": [
                            "U"
                        ]
                    }, 
                    {
                        "_fmtargs": {
                            "arg1": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_deref": "", 
                                    "c_member": ".", 
                                    "c_var": "arg1", 
                                    "cxx_addr": "&", 
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)", 
                                    "cxx_member": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "arg1", 
                                    "idtor": "0"
                                }, 
                                "fmtf": {
                                    "c_var": "arg1", 
                                    "f_var": "arg1"
                                }
                            }, 
                            "arg2": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_deref": "", 
                                    "c_member": ".", 
                                    "c_var": "arg2", 
                                    "cxx_addr": "&", 
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)", 
                                    "cxx_member": ".", 
                                    "cxx_type": "double", 
                                    "cxx_var": "arg2", 
                                    "idtor": "0"
                                }, 
                                "fmtf": {
                                    "c_var": "arg2", 
                                    "f_var": "arg2"
                                }
                            }
                        }, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "declarator": {
                                "name": "nested", 
                                "pointer": []
                            }, 
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "declarator": {
                                        "name": "arg1", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ], 
                                    "typemap_name": "int"
                                }, 
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "declarator": {
                                        "name": "arg2", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "double"
                                    ], 
                                    "typemap_name": "double"
                                }
                            ], 
                            "specifier": [
                                "void"
                            ], 
                            "typemap_name": "void"
                        }, 
                        "decl": "template<U> void nested( T arg1, U arg2 );", 
                        "declgen": "void nested(int arg1 +intent(in)+value, double arg2 +intent(in)+value)", 
                        "fmtdict": {
                            "CXX_template": "<double>", 
                            "C_call_code": "SH_this->nested<double>(\targ1,\t arg2);", 
                            "C_call_list": "arg1,\t arg2", 
                            "C_name": "TEM_user_nested_double", 
                            "C_pre_call": "user<int> *SH_this =\t static_cast<user<int> *>(self->addr);", 
                            "C_prototype": "TEM_user_0 * self,\t int arg1,\t double arg2", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_user_nested_double", 
                            "F_C_name": "c_user_nested_double", 
                            "F_arg_c_call": "obj%cxxmem,\t arg1,\t arg2", 
                            "F_arguments": "obj,\t arg1,\t arg2", 
                            "F_call_code": "call c_user_nested_double(obj%cxxmem,\t arg1,\t arg2)", 
                            "F_name_function": "nested_double", 
                            "F_name_generic": "nested", 
                            "F_name_impl": "user_nested_double", 
                            "F_subprogram": "subroutine", 
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "self", 
                            "function_name": "nested", 
                            "function_suffix": "_double", 
                            "underscore_name": "nested"
                        }, 
                        "have_template_args": true, 
                        "linenumber": 35, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }, 
                        "template_arguments": [
                            {
                                "asts": [
                                    {
                                        "specifier": [
                                            "double"
                                        ], 
                                        "typemap_name": "double"
                                    }
                                ], 
                                "instantiation": "<double>"
                            }
                        ], 
                        "template_name_to_index": {
                            "U": 0
                        }, 
                        "template_parameters": [
                            "U"
                        ]
                    }
                ], 
                "linenumber": 30, 
                "name": "user", 
                "options": {}, 
                "scope": "user::", 
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ], 
                                "typemap_name": "int"
                            }
                        ], 
                        "instantiation": "<int>"
                    }
                ], 
                "template_parameters": [
                    "T"
                ], 
                "typemap_name": "user_0"
            }
        ], 
        "fmtdict": {
            "CXX_local": "SHCXX_", 
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "", 
            "C_argument": "SH_", 
            "C_array_type": "TEM_SHROUD_array", 
            "C_bufferify_suffix": "_bufferify", 
            "C_capsule_data_type": "TEM_SHROUD_capsule_data", 
            "C_custom_return_type": "", 
            "C_header_filename": "wraptemplates.h", 
            "C_header_filename_suffix": "h", 
            "C_header_helper": "typestemplates.h", 
            "C_impl_filename": "wraptemplates.cpp", 
            "C_impl_filename_suffix": "cpp", 
            "C_local": "SHC_", 
            "C_memory_dtor_function": "TEM_SHROUD_memory_destructor", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "TEM_", 
            "C_result": "rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_array_type": "SHROUD_array", 
            "F_capsule_data_type": "SHROUD_capsule_data", 
            "F_capsule_final_function": "SHROUD_capsule_final", 
            "F_capsule_type": "SHROUD_capsule", 
            "F_derived_member": "cxxmem", 
            "F_filename_suffix": "f", 
            "F_impl_filename": "wrapftemplates.f", 
            "F_module_name": "templates_mod", 
            "F_name_assign": "assign", 
            "F_name_associated": "associated", 
            "F_name_final": "final", 
            "F_name_instance_get": "get_instance", 
            "F_name_instance_set": "set_instance", 
            "F_pointer": "SHT_ptr", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename_suffix": "hpp", 
            "LUA_impl_filename_suffix": "cpp", 
            "LUA_prefix": "l_", 
            "LUA_result": "rv", 
            "LUA_state_var": "L", 
            "LUA_this_call": "", 
            "PY_module_name": "templates", 
            "PY_numpy_array_capsule_name": "PY_array_dtor", 
            "PY_numpy_array_dtor_context": "PY_array_destructor_context", 
            "PY_numpy_array_dtor_function": "PY_array_destructor_function", 
            "PY_prefix": "PY_", 
            "PY_result": "SHTPy_rv", 
            "PY_this_call": "", 
            "YAML_type_filename": "templates_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "class_scope": "", 
            "cxx_class": "", 
            "function_suffix": "", 
            "library": "templates", 
            "library_lower": "templates", 
            "library_upper": "TEMPLATES", 
            "namespace_scope": "", 
            "stdlib": "std::"
        }, 
        "functions": [
            {
                "_overloaded": true, 
                "ast": {
                    "declarator": {
                        "name": "FunctionTU", 
                        "pointer": []
                    }, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "T"
                            ], 
                            "typemap_name": "T"
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "U"
                            ], 
                            "typemap_name": "U"
                        }
                    ], 
                    "specifier": [
                        "void"
                    ], 
                    "typemap_name": "void"
                }, 
                "cxx_template": {
                    "T": [
                        "int", 
                        "float"
                    ]
                }, 
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)", 
                "declgen": "void FunctionTU(T arg1 +intent(in)+value, U arg2 +intent(in)+value)", 
                "fmtdict": {
                    "function_name": "FunctionTU", 
                    "underscore_name": "function_tu"
                }, 
                "have_template_args": true, 
                "linenumber": 55, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }, 
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ], 
                                "typemap_name": "int"
                            }, 
                            {
                                "specifier": [
                                    "long"
                                ], 
                                "typemap_name": "long"
                            }
                        ], 
                        "instantiation": "<int, long>"
                    }, 
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ], 
                                "typemap_name": "float"
                            }, 
                            {
                                "specifier": [
                                    "double"
                                ], 
                                "typemap_name": "double"
                            }
                        ], 
                        "instantiation": "<float, double>"
                    }
                ], 
                "template_name_to_index": {
                    "T": 0, 
                    "U": 1
                }, 
                "template_parameters": [
                    "T", 
                    "U"
                ]
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "", 
                            "c_member": ".", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)", 
                            "cxx_member": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "arg1", 
                            "idtor": "0"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "", 
                            "c_member": ".", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)", 
                            "cxx_member": ".", 
                            "cxx_type": "long", 
                            "cxx_var": "arg2", 
                            "idtor": "0"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }
                    }
                }, 
                "_generated": "cxx_template", 
                "_overloaded": true, 
                "ast": {
                    "declarator": {
                        "name": "FunctionTU", 
                        "pointer": []
                    }, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ], 
                            "typemap_name": "int"
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "long"
                            ], 
                            "typemap_name": "long"
                        }
                    ], 
                    "specifier": [
                        "void"
                    ], 
                    "typemap_name": "void"
                }, 
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)", 
                "declgen": "void FunctionTU(int arg1 +intent(in)+value, long arg2 +intent(in)+value)", 
                "fmtdict": {
                    "CXX_template": "<int, long>", 
                    "C_call_code": "FunctionTU<int, long>(\targ1,\t arg2);", 
                    "C_call_list": "arg1,\t arg2", 
                    "C_name": "TEM_function_tu_0", 
                    "C_prototype": "int arg1,\t long arg2", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function_tu_0", 
                    "F_C_name": "c_function_tu_0", 
                    "F_arg_c_call": "arg1,\t arg2", 
                    "F_arguments": "arg1,\t arg2", 
                    "F_call_code": "call c_function_tu_0(arg1,\t arg2)", 
                    "F_name_function": "function_tu_0", 
                    "F_name_generic": "function_tu", 
                    "F_name_impl": "function_tu_0", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "FunctionTU", 
                    "function_suffix": "_0", 
                    "underscore_name": "function_tu"
                }, 
                "have_template_args": true, 
                "linenumber": 55, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }, 
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ], 
                                "typemap_name": "int"
                            }, 
                            {
                                "specifier": [
                                    "long"
                                ], 
                                "typemap_name": "long"
                            }
                        ], 
                        "instantiation": "<int, long>"
                    }, 
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ], 
                                "typemap_name": "float"
                            }, 
                            {
                                "specifier": [
                                    "double"
                                ], 
                                "typemap_name": "double"
                            }
                        ], 
                        "instantiation": "<float, double>"
                    }
                ], 
                "template_name_to_index": {
                    "T": 0, 
                    "U": 1
                }, 
                "template_parameters": [
                    "T", 
                    "U"
                ]
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "", 
                            "c_member": ".", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)", 
                            "cxx_member": ".", 
                            "cxx_type": "float", 
                            "cxx_var": "arg1", 
                            "idtor": "0"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "", 
                            "c_member": ".", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)", 
                            "cxx_member": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg2", 
                            "idtor": "0"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }
                    }
                }, 
                "_generated": "cxx_template", 
                "_overloaded": true, 
                "ast": {
                    "declarator": {
                        "name": "FunctionTU", 
                        "pointer": []
                    }, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "float"
                            ], 
                            "typemap_name": "float"
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ], 
                            "typemap_name": "double"
                        }
                    ], 
                    "specifier": [
                        "void"
                    ], 
                    "typemap_name": "void"
                }, 
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)", 
                "declgen": "void FunctionTU(float arg1 +intent(in)+value, double arg2 +intent(in)+value)", 
                "fmtdict": {
                    "CXX_template": "<float, double>", 
                    "C_call_code": "FunctionTU<float, double>(\targ1,\t arg2);", 
                    "C_call_list": "arg1,\t arg2", 
                    "C_name": "TEM_function_tu_1", 
                    "C_prototype": "float arg1,\t double arg2", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function_tu_1", 
                    "F_C_name": "c_function_tu_1", 
                    "F_arg_c_call": "arg1,\t arg2", 
                    "F_arguments": "arg1,\t arg2", 
                    "F_call_code": "call c_function_tu_1(arg1,\t arg2)", 
                    "F_name_function": "function_tu_1", 
                    "F_name_generic": "function_tu", 
                    "F_name_impl": "function_tu_1", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "FunctionTU", 
                    "function_suffix": "_1", 
                    "underscore_name": "function_tu"
                }, 
                "have_template_args": true, 
                "linenumber": 55, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }, 
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ], 
                                "typemap_name": "int"
                            }, 
                            {
                                "specifier": [
                                    "long"
                                ], 
                                "typemap_name": "long"
                            }
                        ], 
                        "instantiation": "<int, long>"
                    }, 
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ], 
                                "typemap_name": "float"
                            }, 
                            {
                                "specifier": [
                                    "double"
                                ], 
                                "typemap_name": "double"
                            }
                        ], 
                        "instantiation": "<float, double>"
                    }
                ], 
                "template_name_to_index": {
                    "T": 0, 
                    "U": 1
                }, 
                "template_parameters": [
                    "T", 
                    "U"
                ]
            }
        ], 
        "language": "c++", 
        "options": {
            "C_enum_member_template": "{enum_member_name}", 
            "C_enum_template": "{C_prefix}{class_prefix}{enum_name}", 
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_header_helper_template": "types{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_line_length": 72, 
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor", 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_capsule_template": "C{c_var}", 
            "C_var_context_template": "D{c_var}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_abstract_interface_argument_template": "arg{index}", 
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}", 
            "F_auto_reference_count": false, 
            "F_enum_member_template": "{class_prefix}{enum_lower}_{enum_member_lower}", 
            "F_force_wrapper": false, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_line_length": 72, 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": true, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_return_fortran_pointer": true, 
            "F_standard": 2003, 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter", 
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}", 
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor", 
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context", 
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function", 
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr", 
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype", 
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": false, 
            "debug_index": false, 
            "doxygen": true, 
            "return_scalar_pointer": "pointer", 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": false, 
            "wrap_python": false
        }
    }, 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cxx": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_kind": "C_INT", 
            "f_type": "integer"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PYN_typenum": "NPY_BOOL", 
            "PY_PyTypeObject": "PyBool_Type", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_kind": "C_BOOL", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_deref}{c_var});"
                    ], 
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t {stdlib}strlen({cxx_var}));", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstdlib> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t {stdlib}strlen({cxx_var}));", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) {stdlib}malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{+", 
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "-}} else {{+", 
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t {stdlib}strlen({cxx_var}));", 
                        "-}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "(int) {cxx_var}", 
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)", 
            "PY_format": "c", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_type": "character"
        }, 
        "charout": {
            "base": "string", 
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        " post_call intent_out_buf"
                    ], 
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "context"
                    ], 
                    "c_helper": "copy_string", 
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var_context}->cxx.idtor = {idtor};", 
                        "{c_var_context}->addr.ccharp = {cxx_var};", 
                        "{c_var_context}->len = {cxx_var} == NULL ? 0 : strlen({cxx_var});", 
                        "{c_var_context}->size = 1;"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_statements": {
                "result": {
                    "f_helper": "copy_string", 
                    "need_wrapper": true, 
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})", 
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            }, 
            "f_type": "type(C_PTR)YY"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_DOUBLE", 
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})", 
            "PY_format": "d", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_FLOAT", 
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})", 
            "PY_format": "f", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_INT", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "i", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONG", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "l", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONG", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "l", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONGLONG", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_kind": "C_LONG_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})", 
            "c_header": "<stddef.h>", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()", 
            "PY_build_format": "s#", 
            "PY_ctor": "PyString_FromStringAndSize(\t{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size())", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}{cxx_member}empty()) {{+", 
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "-}} else {{+", 
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());", 
                        "-}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}{cxx_member}c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_out": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        }, 
        "std::vector": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "base": "shadow", 
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                }, 
                "result": {
                    "c_header": "<stdlib.h>", 
                    "cxx_header": "<stdlib.h>", 
                    "post_call": [
                        "TEM_vector {c_var};", 
                        "{c_var}.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var}.idtor = {idtor};"
                    ]
                }
            }, 
            "c_to_cxx": "static_cast<{c_const}std::vector *>({c_var}{c_member}addr)", 
            "c_type": "TEM_vector", 
            "cxx_header": "<vector>", 
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})", 
            "cxx_type": "std::vector", 
            "f_c_module": {
                "--import--": [
                    "SHROUD_capsule_data"
                ]
            }, 
            "f_c_type": "type(SHROUD_capsule_data)", 
            "f_derived_type": "vector", 
            "f_module": {
                "vector_mod": [
                    "vector"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%cxxmem", 
            "f_type": "type(vector)", 
            "forward": "std::vector", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}std::vector * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}std::vector * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "std::vector::T": {
            "base": "template", 
            "c_type": "c_T", 
            "cxx_type": "cxx_T", 
            "f_type": "f_T"
        }, 
        "std::vector_0": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "base": "shadow", 
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                }, 
                "result": {
                    "c_header": "<stdlib.h>", 
                    "cxx_header": "<stdlib.h>", 
                    "post_call": [
                        "TEM_vector_0 {c_var};", 
                        "{c_var}.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var}.idtor = {idtor};"
                    ]
                }
            }, 
            "c_to_cxx": "static_cast<{c_const}std::vector<int> *>({c_var}{c_member}addr)", 
            "c_type": "TEM_vector_0", 
            "cxx_header": "<vector>", 
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})", 
            "cxx_type": "std::vector<int>", 
            "f_c_module": {
                "--import--": [
                    "SHROUD_capsule_data"
                ]
            }, 
            "f_c_type": "type(SHROUD_capsule_data)", 
            "f_derived_type": "vector_0", 
            "f_module": {
                "vector_mod": [
                    "vector_0"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%cxxmem", 
            "f_type": "type(vector_0)", 
            "forward": "std::vector<int>", 
            "idtor": "1", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}std::vector<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}std::vector<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "stringout": {
            "base": "string", 
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        " post_call intent_out_buf"
                    ], 
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "context"
                    ], 
                    "c_helper": "copy_string", 
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var_context}->cxx.idtor = {idtor};", 
                        "if ({cxx_var}{cxx_member}empty()) {{+", 
                        "{c_var_context}->addr.ccharp = NULL;", 
                        "{c_var_context}->len = 0;", 
                        "-}} else {{+", 
                        "{c_var_context}->addr.ccharp = {cxx_var}{cxx_member}data();", 
                        "{c_var_context}->len = {cxx_var}{cxx_member}size();", 
                        "-}}", 
                        "{c_var_context}->size = 1;"
                    ]
                }
            }, 
            "c_type": "void", 
            "cxx_header": "<string>", 
            "cxx_to_c": "static_cast<void *>({cxx_var})", 
            "cxx_type": "std::string", 
            "f_statements": {
                "result": {
                    "f_helper": "copy_string", 
                    "need_wrapper": true, 
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})", 
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            }, 
            "f_type": "type(C_PTR)YY"
        }, 
        "unsigned_int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_INT", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "i", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "user": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "base": "shadow", 
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                }, 
                "result": {
                    "c_header": "<stdlib.h>", 
                    "cxx_header": "<stdlib.h>", 
                    "post_call": [
                        "TEM_user {c_var};", 
                        "{c_var}.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var}.idtor = {idtor};"
                    ]
                }
            }, 
            "c_to_cxx": "static_cast<{c_const}user *>({c_var}{c_member}addr)", 
            "c_type": "TEM_user", 
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})", 
            "cxx_type": "user", 
            "f_c_module": {
                "--import--": [
                    "SHROUD_capsule_data"
                ]
            }, 
            "f_c_type": "type(SHROUD_capsule_data)", 
            "f_derived_type": "user", 
            "f_module": {
                "user_mod": [
                    "user"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%cxxmem", 
            "f_type": "type(user)", 
            "forward": "user", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}user * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}user * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "user::T": {
            "base": "template", 
            "c_type": "c_T", 
            "cxx_type": "cxx_T", 
            "f_type": "f_T"
        }, 
        "user_0": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "base": "shadow", 
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                }, 
                "result": {
                    "c_header": "<stdlib.h>", 
                    "cxx_header": "<stdlib.h>", 
                    "post_call": [
                        "TEM_user_0 {c_var};", 
                        "{c_var}.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var}.idtor = {idtor};"
                    ]
                }
            }, 
            "c_to_cxx": "static_cast<{c_const}user<int> *>({c_var}{c_member}addr)", 
            "c_type": "TEM_user_0", 
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})", 
            "cxx_type": "user<int>", 
            "f_c_module": {
                "--import--": [
                    "SHROUD_capsule_data"
                ]
            }, 
            "f_c_type": "type(SHROUD_capsule_data)", 
            "f_derived_type": "user_0", 
            "f_module": {
                "user_mod": [
                    "user_0"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%cxxmem", 
            "f_type": "type(user_0)", 
            "forward": "user<int>", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}user<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}user<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}