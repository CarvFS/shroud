{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "classes": [
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "foo.h",
                    "C_impl_filename": "foo.cpp",
                    "C_type_name": "TES_names",
                    "F_capsule_data_type": "SHROUD_names_capsule",
                    "F_derived_name": "FNames",
                    "F_impl_filename": "foo.f",
                    "F_module_name": "name_module",
                    "PY_PyObject": "PY_Names",
                    "PY_PyTypeObject": "PY_Names_Type",
                    "PY_capsule_name": "PY_Names_capsule_name",
                    "PY_from_object_func": "PP_Names_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Names_to_Object",
                    "PY_type_filename": "pyNamestype.cpp",
                    "__line__": 61,
                    "class_lower": "names",
                    "class_prefix": "names_",
                    "class_scope": "Names::",
                    "class_upper": "NAMES",
                    "cxx_class": "Names",
                    "cxx_type": "Names"
                },
                "functions": [
                    {
                        "ast": {
                            "declarator": {
                                "name": "method1",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void method1()",
                        "declgen": "void method1()",
                        "fmtdict": {
                            "C_call_code": "SH_this->method1(\t);",
                            "C_call_list": "",
                            "C_name": "XXX_TES_names_method1",
                            "C_pre_call": "Names *SH_this =\t static_cast<Names *>(self->addr);",
                            "C_prototype": "TES_names * self",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "xxx_tes_names_method1",
                            "F_C_name": "xxx_tes_names_method1",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "call xxx_tes_names_method1(obj%cxxmem)",
                            "F_name_function": "type_method1",
                            "F_name_generic": "method1",
                            "F_name_impl": "names_method1",
                            "F_subprogram": "subroutine",
                            "PY_name_impl": "PY_names_method1",
                            "__line__": 70,
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "method1",
                            "underscore_name": "method1"
                        },
                        "linenumber": 69,
                        "options": {}
                    },
                    {
                        "ast": {
                            "declarator": {
                                "name": "method2",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void method2()",
                        "declgen": "void method2()",
                        "fmtdict": {
                            "CXX_this": "SH_this2",
                            "C_call_code": "SH_this->method2(\t);",
                            "C_call_list": "",
                            "C_name": "XXX_TES_names_method2",
                            "C_pre_call": "Names *SH_this2 =\t static_cast<Names *>(self2->addr);",
                            "C_prototype": "TES_names * self2",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "C_this": "self2",
                            "F_C_call": "xxx_tes_names_method2",
                            "F_C_name": "xxx_tes_names_method2",
                            "F_arg_c_call": "obj2%cxxmem",
                            "F_arguments": "obj2",
                            "F_call_code": "call xxx_tes_names_method2(obj2%cxxmem)",
                            "F_name_function": "method2",
                            "F_name_generic": "method2",
                            "F_name_impl": "names_method2",
                            "F_subprogram": "subroutine",
                            "F_this": "obj2",
                            "PY_name_impl": "PY_names_method2",
                            "__line__": 73,
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self2",
                            "function_name": "method2",
                            "underscore_name": "method2"
                        },
                        "linenumber": 72,
                        "options": {}
                    }
                ],
                "linenumber": 56,
                "name": "Names",
                "options": {
                    "C_name_template": "XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}",
                    "F_C_name_template": "XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}",
                    "__line__": 57,
                    "none": "foo"
                },
                "scope": "Names::",
                "typemap_name": "Names"
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapNames2.hh",
                    "C_impl_filename": "wrapNames2.cc",
                    "C_type_name": "TES_names2",
                    "F_capsule_data_type": "SHROUD_names2_capsule",
                    "F_derived_name": "names2",
                    "F_impl_filename": "wrapfNames2.F",
                    "F_module_name": "names2_mod",
                    "PY_PyObject": "PY_Names2",
                    "PY_PyTypeObject": "PY_Names2_Type",
                    "PY_capsule_name": "PY_Names2_capsule_name",
                    "PY_from_object_func": "PP_Names2_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Names2_to_Object",
                    "PY_type_filename": "pyNames2type.cpp",
                    "class_lower": "names2",
                    "class_prefix": "names2_",
                    "class_scope": "Names2::",
                    "class_upper": "NAMES2",
                    "cxx_class": "Names2",
                    "cxx_type": "Names2"
                },
                "linenumber": 79,
                "name": "Names2",
                "options": {},
                "scope": "Names2::",
                "typemap_name": "Names2"
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapImplWorker1.hh",
                    "C_impl_filename": "wrapImplWorker1.cc",
                    "C_type_name": "TES_implworker1",
                    "F_capsule_data_type": "SHROUD_implworker1_capsule",
                    "F_derived_name": "implworker1",
                    "F_impl_filename": "wrapfImplWorker1.F",
                    "F_module_name": "implworker1_mod",
                    "__line__": 126,
                    "class_lower": "implworker1",
                    "class_prefix": "implworker1_",
                    "class_scope": "ImplWorker1::",
                    "class_upper": "IMPLWORKER1",
                    "cxx_class": "ImplWorker1",
                    "cxx_type": "ImplWorker1",
                    "template_suffix": "_instantiation3"
                },
                "linenumber": 125,
                "name": "ImplWorker1",
                "options": {
                    "__line__": 128,
                    "wrap_fortran": false,
                    "wrap_python": false
                },
                "scope": "internal::ImplWorker1::",
                "typemap_name": "internal::ImplWorker1"
            },
            {
                "cxx_header": "<vector>",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapVvv1.hh",
                    "C_impl_filename": "wrapVvv1.cc",
                    "C_type_name": "TES_vvv1",
                    "F_capsule_data_type": "SHROUD_vector_capsule",
                    "F_derived_name": "FFvvv1",
                    "F_impl_filename": "wrapfVvv1.F",
                    "F_module_name": "vvv1_mod",
                    "PY_PyObject": "PY_Vvv1",
                    "PY_PyTypeObject": "PY_Vvv1_Type",
                    "PY_capsule_name": "PY_Vvv1_capsule_name",
                    "PY_from_object_func": "PP_Vvv1_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Vvv1_to_Object",
                    "PY_type_filename": "pyVvv1type.cpp",
                    "__line__": 159,
                    "class_lower": "vvv1",
                    "class_prefix": "vvv1_",
                    "class_scope": "VvV1::",
                    "class_upper": "VVV1",
                    "cxx_class": "Vvv1",
                    "cxx_type": "vector<int>"
                },
                "linenumber": 154,
                "name": "vector",
                "options": {},
                "scope": "std::vector::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "fmtdict": {
                            "F_derived_name": "FFvvv1",
                            "__line__": 159,
                            "class_lower": "vvv1",
                            "class_scope": "VvV1::",
                            "class_upper": "VVV1",
                            "cxx_class": "Vvv1"
                        },
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 171,
                            "template_suffix": "_instantiation5"
                        },
                        "instantiation": "<long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "std::Vvv1"
            },
            {
                "cxx_header": "<vector>",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapvector_double.hh",
                    "C_impl_filename": "wrapvector_double.cc",
                    "C_type_name": "TES_vector_double",
                    "F_capsule_data_type": "SHROUD_vector_capsule",
                    "F_derived_name": "vector_double",
                    "F_impl_filename": "wrapfvector_double.F",
                    "F_module_name": "vector_double_mod",
                    "PY_PyObject": "PY_vector_double",
                    "PY_PyTypeObject": "PY_vector_double_Type",
                    "PY_capsule_name": "PY_vector_double_capsule_name",
                    "PY_from_object_func": "PP_vector_double_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_vector_double_to_Object",
                    "PY_type_filename": "pyvector_doubletype.cpp",
                    "class_lower": "vector_double",
                    "class_prefix": "vector_double_",
                    "class_scope": "vector_double::",
                    "class_upper": "VECTOR_DOUBLE",
                    "cxx_class": "vector_double",
                    "cxx_type": "vector<double>"
                },
                "linenumber": 154,
                "name": "vector",
                "options": {},
                "scope": "std::vector::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "fmtdict": {
                            "F_derived_name": "FFvvv1",
                            "__line__": 159,
                            "class_lower": "vvv1",
                            "class_scope": "VvV1::",
                            "class_upper": "VVV1",
                            "cxx_class": "Vvv1"
                        },
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 171,
                            "template_suffix": "_instantiation5"
                        },
                        "instantiation": "<long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "std::vector_double"
            },
            {
                "cxx_header": "<vector>",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapvector_instantiation5.hh",
                    "C_impl_filename": "wrapvector_instantiation5.cc",
                    "C_type_name": "TES_vector_instantiation5",
                    "F_capsule_data_type": "SHROUD_vector_capsule",
                    "F_derived_name": "vector_instantiation5",
                    "F_impl_filename": "wrapfvector_instantiation5.F",
                    "F_module_name": "vector_instantiation5_mod",
                    "PY_PyObject": "PY_vector_instantiation5",
                    "PY_PyTypeObject": "PY_vector_instantiation5_Type",
                    "PY_capsule_name": "PY_vector_instantiation5_capsule_name",
                    "PY_from_object_func": "PP_vector_instantiation5_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_vector_instantiation5_to_Object",
                    "PY_type_filename": "pyvector_instantiation5type.cpp",
                    "__line__": 171,
                    "class_lower": "vector_instantiation5",
                    "class_prefix": "vector_instantiation5_",
                    "class_scope": "vector_instantiation5::",
                    "class_upper": "VECTOR_INSTANTIATION5",
                    "cxx_class": "vector_instantiation5",
                    "cxx_type": "vector<long>",
                    "template_suffix": "_instantiation5"
                },
                "linenumber": 154,
                "name": "vector",
                "options": {},
                "scope": "std::vector::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "fmtdict": {
                            "F_derived_name": "FFvvv1",
                            "__line__": 159,
                            "class_lower": "vvv1",
                            "class_scope": "VvV1::",
                            "class_upper": "VVV1",
                            "cxx_class": "Vvv1"
                        },
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 171,
                            "template_suffix": "_instantiation5"
                        },
                        "instantiation": "<long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "std::vector_instantiation5"
            },
            {
                "cxx_header": "<vector>",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapvector_instantiation3.hh",
                    "C_impl_filename": "wrapvector_instantiation3.cc",
                    "C_type_name": "TES_vector_instantiation3",
                    "F_capsule_data_type": "SHROUD_vector_capsule",
                    "F_derived_name": "vector_instantiation3",
                    "F_impl_filename": "wrapfvector_instantiation3.F",
                    "F_module_name": "vector_instantiation3_mod",
                    "PY_PyObject": "PY_vector_instantiation3",
                    "PY_PyTypeObject": "PY_vector_instantiation3_Type",
                    "PY_capsule_name": "PY_vector_instantiation3_capsule_name",
                    "PY_from_object_func": "PP_vector_instantiation3_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_vector_instantiation3_to_Object",
                    "PY_type_filename": "pyvector_instantiation3type.cpp",
                    "class_lower": "vector_instantiation3",
                    "class_prefix": "vector_instantiation3_",
                    "class_scope": "vector_instantiation3::",
                    "class_upper": "VECTOR_INSTANTIATION3",
                    "cxx_class": "vector_instantiation3",
                    "cxx_type": "vector<internal::ImplWorker1>"
                },
                "linenumber": 154,
                "name": "vector",
                "options": {},
                "scope": "std::vector::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "fmtdict": {
                            "F_derived_name": "FFvvv1",
                            "__line__": 159,
                            "class_lower": "vvv1",
                            "class_scope": "VvV1::",
                            "class_upper": "VVV1",
                            "cxx_class": "Vvv1"
                        },
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 171,
                            "template_suffix": "_instantiation5"
                        },
                        "instantiation": "<long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ],
                "typemap_name": "std::vector_instantiation3"
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wraptwoTs_0.hh",
                    "C_impl_filename": "wraptwoTs_0.cc",
                    "C_type_name": "TES_twots_0",
                    "F_capsule_data_type": "SHROUD_twots_capsule",
                    "F_derived_name": "twots_0",
                    "F_impl_filename": "wrapftwoTs_0.F",
                    "F_module_name": "twots_0_mod",
                    "PY_PyObject": "PY_twoTs_0",
                    "PY_PyTypeObject": "PY_twoTs_0_Type",
                    "PY_capsule_name": "PY_twoTs_0_capsule_name",
                    "PY_from_object_func": "PP_twoTs_0_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_twoTs_0_to_Object",
                    "PY_type_filename": "pytwoTs_0type.cpp",
                    "class_lower": "twots_0",
                    "class_prefix": "twots_0_",
                    "class_scope": "twoTs_0::",
                    "class_upper": "TWOTS_0",
                    "cxx_class": "twoTs_0",
                    "cxx_type": "twoTs<int, long>"
                },
                "linenumber": 177,
                "name": "twoTs",
                "options": {},
                "scope": "twoTs::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 182,
                            "template_suffix": "_instantiation4"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T1",
                    "T2"
                ],
                "typemap_name": "twoTs_0"
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wraptwoTs_instantiation4.hh",
                    "C_impl_filename": "wraptwoTs_instantiation4.cc",
                    "C_type_name": "TES_twots_instantiation4",
                    "F_capsule_data_type": "SHROUD_twots_capsule",
                    "F_derived_name": "twots_instantiation4",
                    "F_impl_filename": "wrapftwoTs_instantiation4.F",
                    "F_module_name": "twots_instantiation4_mod",
                    "PY_PyObject": "PY_twoTs_instantiation4",
                    "PY_PyTypeObject": "PY_twoTs_instantiation4_Type",
                    "PY_capsule_name": "PY_twoTs_instantiation4_capsule_name",
                    "PY_from_object_func": "PP_twoTs_instantiation4_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_twoTs_instantiation4_to_Object",
                    "PY_type_filename": "pytwoTs_instantiation4type.cpp",
                    "__line__": 182,
                    "class_lower": "twots_instantiation4",
                    "class_prefix": "twots_instantiation4_",
                    "class_scope": "twoTs_instantiation4::",
                    "class_upper": "TWOTS_INSTANTIATION4",
                    "cxx_class": "twoTs_instantiation4",
                    "cxx_type": "twoTs<float, double>",
                    "template_suffix": "_instantiation4"
                },
                "linenumber": 177,
                "name": "twoTs",
                "options": {},
                "scope": "twoTs::",
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 182,
                            "template_suffix": "_instantiation4"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T1",
                    "T2"
                ],
                "typemap_name": "twoTs_instantiation4"
            }
        ],
        "copyright": [
            "#######################################################################",
            "Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC.",
            "",
            "Produced at the Lawrence Livermore National Laboratory",
            "",
            "LLNL-CODE-738041.",
            "",
            "All rights reserved.",
            "",
            "This file is part of Shroud.",
            "",
            "For details about use and distribution, please read LICENSE.",
            "",
            "#######################################################################"
        ],
        "enums": [
            {
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "TES_BLUE",
                        "F_enum_member": "blue",
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE",
                        "evalue": 1
                    },
                    "RED": {
                        "C_enum_member": "TES_RED",
                        "F_enum_member": "red",
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED",
                        "evalue": 0
                    },
                    "WHITE": {
                        "C_enum_member": "TES_WHITE",
                        "F_enum_member": "white",
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE",
                        "evalue": 2
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n",
                "fmtdict": {
                    "C_enum": "TES_Color",
                    "C_scope_name": "",
                    "F_scope_name": "",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR",
                    "flat_name": "Color"
                },
                "linenumber": 43,
                "name": "Color",
                "options": {
                    "__line__": 49,
                    "bar": 4
                },
                "typemap_name": "Color"
            }
        ],
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_argument": "ARG_",
            "C_array_type": "TES_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_capsule_data_type": "TES_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "top.h",
            "C_header_filename_suffix": "hh",
            "C_header_utility": "typestestnames.hh",
            "C_impl_filename": "top.cpp",
            "C_impl_filename_suffix": "cc",
            "C_local": "SHC_",
            "C_memory_dtor_function": "TES_SHROUD_memory_destructor",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "TES_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "F",
            "F_impl_filename": "top.f",
            "F_module_name": "top_module",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "hpp",
            "LUA_impl_filename_suffix": "cpp",
            "LUA_module_name": "lua_module_name",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_PyObject": "PyObject",
            "PY_extern_C_begin": "extern \"C\" ",
            "PY_header_filename": "pytestnamesmodule.hpp",
            "PY_header_filename_suffix": "hpp",
            "PY_impl_filename_suffix": "cpp",
            "PY_library_doc": "library documentation",
            "PY_module_filename": "pytestnamesmodule.cpp",
            "PY_module_name": "testnames",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_numpy_array_dtor_context": "PY_array_destructor_context",
            "PY_numpy_array_dtor_function": "PY_array_destructor_function",
            "PY_obj": "obj",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "PY_utility_filename": "pytestnamesutil.cpp",
            "YAML_type_filename": "testnames_types.yaml",
            "__line__": 30,
            "c_temp": "SHT_",
            "class_prefix": "",
            "class_scope": "",
            "cxx_class": "",
            "function_suffix": "",
            "library": "testnames",
            "library_lower": "testnames",
            "library_upper": "TESTNAMES",
            "namespace_scope": "",
            "stdlib": "std::",
            "template_suffix": ""
        },
        "functions": [
            {
                "ast": {
                    "declarator": {
                        "name": "function1",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function1()",
                "declgen": "void function1()",
                "fmtdict": {
                    "C_call_code": "function1(\t);",
                    "C_call_list": "",
                    "C_name": "YYY_TES_function1",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_function1",
                    "F_C_name": "yyy_tes_function1",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call yyy_tes_function1()",
                    "F_name_function": "function1",
                    "F_name_generic": "function1",
                    "F_name_impl": "testnames_function1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function1",
                    "c_const": "",
                    "function_name": "function1",
                    "underscore_name": "function1"
                },
                "linenumber": 88,
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "function2",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function2()",
                "declgen": "void function2()",
                "fmtdict": {
                    "C_call_code": "function2(\t);",
                    "C_call_list": "",
                    "C_name": "c_name_special",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "f_c_name_special",
                    "F_C_name": "f_c_name_special",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call f_c_name_special()",
                    "F_name_function": "function2",
                    "F_name_generic": "function2",
                    "F_name_impl": "f_name_special",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function2",
                    "__line__": 90,
                    "c_const": "",
                    "function_name": "function2",
                    "underscore_name": "function2"
                },
                "linenumber": 89,
                "options": {}
            },
            {
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "i",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&i)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "i",
                            "f_var": "i"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int i",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "i",
                            "cxx_addr": "&",
                            "cxx_decl": "int i",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "i",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_i"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "function3a",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function3a(int i)",
                "declgen": "void function3a(int i +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "function3a(\ti);",
                    "C_call_list": "i",
                    "C_name": "YYY_TES_function3a_0",
                    "C_prototype": "int i",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_function3a_0",
                    "F_C_name": "yyy_tes_function3a_0",
                    "F_arg_c_call": "i",
                    "F_arguments": "i",
                    "F_call_code": "call yyy_tes_function3a_0(i)",
                    "F_name_function": "function3a_0",
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_int",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function3a_0",
                    "__line__": 97,
                    "c_const": "",
                    "function_name": "function3a",
                    "function_suffix": "_0",
                    "underscore_name": "function3a"
                },
                "linenumber": 96,
                "options": {}
            },
            {
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "i",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&i)",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "i",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "i",
                            "f_var": "i"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "long i",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "i",
                            "cxx_addr": "&",
                            "cxx_decl": "long i",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "i",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_i"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "function3a",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "i",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function3a(long i)",
                "declgen": "void function3a(long i +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "function3a(\ti);",
                    "C_call_list": "i",
                    "C_name": "YYY_TES_function3a_1",
                    "C_prototype": "long i",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_function3a_1",
                    "F_C_name": "yyy_tes_function3a_1",
                    "F_arg_c_call": "i",
                    "F_arguments": "i",
                    "F_call_code": "call yyy_tes_function3a_1(i)",
                    "F_name_function": "function3a_1",
                    "F_name_generic": "generic3",
                    "F_name_impl": "F_name_function3a_long",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_function3a_1",
                    "__line__": 101,
                    "c_const": "",
                    "function_name": "function3a",
                    "function_suffix": "_1",
                    "underscore_name": "function3a"
                },
                "linenumber": 100,
                "options": {}
            },
            {
                "_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(ARG_rv))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_rv",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * rv",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "rv",
                            "cxx_addr": "&",
                            "cxx_decl": "const std::string & rv",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_rv",
                            "numpy_type": null,
                            "py_var": "SHPy_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "function4",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int function4(const std::string &rv)",
                "declgen": "int function4(const std::string & rv +intent(in))",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t function4(\tARG_rv);",
                    "C_call_list": "ARG_rv",
                    "C_name": "YYY_TES_function4",
                    "C_pre_call": "const std::string ARG_rv(rv);",
                    "C_prototype": "const char * rv",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "yyy_tes_function4_bufferify",
                    "F_C_name": "yyy_tes_function4",
                    "F_arg_c_call": "rv,\t len_trim(rv, kind=C_INT)",
                    "F_arguments": "rv",
                    "F_call_code": "SHT_rv = yyy_tes_function4_bufferify(rv,\t len_trim(rv, kind=C_INT))",
                    "F_name_function": "function4",
                    "F_name_generic": "function4",
                    "F_name_impl": "testnames_function4",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_function4",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "function4",
                    "underscore_name": "function4"
                },
                "linenumber": 107,
                "options": {}
            },
            {
                "_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "rv",
                            "c_var_trim": "Lrv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(ARG_rv))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "ARG_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "rv",
                            "f_var": "rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "function4",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Lrv",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "_buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int function4(const std::string &rv)",
                "declgen": "int function4(const std::string & rv +intent(in)+len_trim(Lrv))",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t function4(\tARG_rv);",
                    "C_call_list": "ARG_rv",
                    "C_name": "YYY_TES_function4_bufferify",
                    "C_pre_call": "const std::string ARG_rv(rv, Lrv);",
                    "C_prototype": "const char * rv,\t int Lrv",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_name": "yyy_tes_function4_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "function4",
                    "function_suffix": "_bufferify",
                    "underscore_name": "function4"
                },
                "linenumber": 107,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "ast": {
                    "attrs": {
                        "name": "fiveplus"
                    },
                    "declarator": {
                        "name": "function5",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void function5() +name(fiveplus)",
                "declgen": "void function5() +name(fiveplus)",
                "fmtdict": {
                    "C_call_code": "fiveplus(\t);",
                    "C_call_list": "",
                    "C_name": "YYY_TES_fiveplus",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "yyy_tes_fiveplus",
                    "F_C_name": "yyy_tes_fiveplus",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call yyy_tes_fiveplus()",
                    "F_name_function": "fiveplus",
                    "F_name_generic": "fiveplus",
                    "F_name_impl": "testnames_fiveplus",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_fiveplus",
                    "c_const": "",
                    "function_name": "fiveplus",
                    "underscore_name": "fiveplus"
                },
                "linenumber": 109,
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "init_ns1",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void init_ns1()",
                "declgen": "void init_ns1()",
                "fmtdict": {
                    "C_call_code": "ns1::init_ns1(\t);",
                    "C_call_list": "",
                    "C_name": "TES_init_ns1",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_init_ns1",
                    "F_C_name": "c_init_ns1",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call c_init_ns1()",
                    "F_name_function": "init_ns1",
                    "F_name_generic": "init_ns1",
                    "F_name_impl": "testnames_init_ns1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_init_ns1",
                    "c_const": "",
                    "function_name": "init_ns1",
                    "underscore_name": "init_ns1"
                },
                "linenumber": 116,
                "options": {}
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "T"
                            ],
                            "typemap_name": "T"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "U"
                            ],
                            "typemap_name": "U"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "T": [
                        "int",
                        "float"
                    ]
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(T arg1 +intent(in)+value, U arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 137,
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "function_name": "FunctionTU",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "linenumber": 136,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1",
                            "__line__": 141
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 147,
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg1",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg1",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg1",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "long arg2",
                            "c_deref": "",
                            "c_type": "long",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "long arg2",
                            "cxx_member": ".",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "numpy_type": "NPY_LONG",
                            "py_var": "SHPy_arg2"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(int arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 137,
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<int, long>",
                    "C_call_code": "FunctionTU<int, long>(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "c_name_instantiation1",
                    "C_prototype": "int arg1,\t long arg2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "f_c_name_instantiation1",
                    "F_C_name": "f_c_name_instantiation1",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "call f_c_name_instantiation1(arg1,\t arg2)",
                    "F_name_function": "function_tu_0",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "f_name_instantiation1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_name_instantiation1",
                    "__line__": 141,
                    "c_const": "",
                    "function_name": "FunctionTU",
                    "template_suffix": "_0",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "linenumber": 136,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1",
                            "__line__": 141
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 147,
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "float arg1",
                            "c_deref": "",
                            "c_type": "float",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "float arg1",
                            "cxx_member": ".",
                            "cxx_type": "float",
                            "cxx_var": "arg1",
                            "numpy_type": "NPY_FLOAT",
                            "py_var": "SHPy_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg2",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FunctionTU",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<T,U> void FunctionTU(T arg1, U arg2)",
                "declgen": "void FunctionTU(float arg1 +intent(in)+value, double arg2 +intent(in)+value)",
                "doxygen": {
                    "__line__": 137,
                    "brief": "Function template with two template parameters."
                },
                "fmtdict": {
                    "CXX_template": "<float, double>",
                    "C_call_code": "FunctionTU<float, double>(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TES_function_tu_instantiation2",
                    "C_prototype": "float arg1,\t double arg2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_function_tu_instantiation2",
                    "F_C_name": "c_function_tu_instantiation2",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "call c_function_tu_instantiation2(arg1,\t arg2)",
                    "F_name_function": "function_tu_instantiation2",
                    "F_name_generic": "function_tu",
                    "F_name_impl": "function_tu_instantiation2",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_FunctionTU_instantiation2",
                    "__line__": 147,
                    "c_const": "",
                    "function_name": "FunctionTU",
                    "template_suffix": "_instantiation2",
                    "underscore_name": "function_tu"
                },
                "have_template_args": true,
                "linenumber": 136,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "fmtdict": {
                            "C_name": "c_name_instantiation1",
                            "F_C_name": "f_c_name_instantiation1",
                            "F_name_impl": "f_name_instantiation1",
                            "PY_name_impl": "PY_name_instantiation1",
                            "__line__": 141
                        },
                        "instantiation": "<int, long>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "fmtdict": {
                            "__line__": 147,
                            "template_suffix": "_instantiation2"
                        },
                        "instantiation": "<float, double>"
                    }
                ],
                "template_parameters": [
                    "T",
                    "U"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "cxx_template": {
                    "T": [
                        "internal::ImplWorker1"
                    ]
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "__line__": 188,
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "function_name": "UseImplWorker",
                    "underscore_name": "use_impl_worker"
                },
                "linenumber": 187,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseImplWorker",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename T> int UseImplWorker()",
                "declgen": "int UseImplWorker()",
                "doxygen": {
                    "__line__": 188,
                    "brief": "Function which uses a templated T in the implemetation."
                },
                "fmtdict": {
                    "CXX_template": "<internal::ImplWorker1>",
                    "C_call_code": "int SHC_rv =\t UseImplWorker<internal::ImplWorker1>(\t);",
                    "C_call_list": "",
                    "C_name": "TES_use_impl_worker_instantiation3",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_impl_worker_instantiation3",
                    "F_C_name": "c_use_impl_worker_instantiation3",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_use_impl_worker_instantiation3()",
                    "F_name_function": "use_impl_worker_instantiation3",
                    "F_name_generic": "use_impl_worker",
                    "F_name_impl": "use_impl_worker_instantiation3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseImplWorker_instantiation3",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseImplWorker",
                    "template_suffix": "_instantiation3",
                    "underscore_name": "use_impl_worker"
                },
                "linenumber": 187,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "internal::ImplWorker1"
                                ],
                                "typemap_name": "internal::ImplWorker1"
                            }
                        ],
                        "instantiation": "<internal::ImplWorker1>"
                    }
                ],
                "template_parameters": [
                    "T"
                ]
            }
        ],
        "language": "cxx",
        "options": {
            "C_enum_member_template": "{C_prefix}{C_scope_name}{enum_member_name}",
            "C_enum_template": "{C_prefix}{flat_name}",
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{class_lower}_capsule",
            "F_create_bufferify_function": true,
            "F_enum_member_template": "{F_scope_name}{enum_member_lower}",
            "F_force_wrapper": true,
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}",
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_class_template": "{class_lower}_mod",
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_per_class": true,
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context",
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 23,
            "class_prefix_template": "{class_lower}_",
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": false,
            "wrap_python": true
        }
    },
    "types": {
        "Color": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_to_cxx": "static_cast<Color>({c_var})",
            "c_type": "int",
            "cxx_to_c": "static_cast<int>({cxx_var})",
            "cxx_type": "Color",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "Color"
        },
        "MPI_Comm": {
            "c_header": "mpi.h",
            "c_to_cxx": "MPI_Comm_f2c({c_var})",
            "c_type": "MPI_Fint",
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})",
            "cxx_type": "MPI_Comm",
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_c_type": "integer(C_INT)",
            "f_kind": "C_INT",
            "f_type": "integer",
            "flat_name": "MPI_Comm"
        },
        "Names": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Names",
            "PY_PyTypeObject": "PY_Names_Type",
            "PY_from_object": "PP_Names_from_Object",
            "PY_to_object": "PP_Names_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}Names *>({c_var}{c_member}addr)",
            "c_type": "TES_names",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Names",
            "f_c_module": {
                "--import--": [
                    "SHROUD_names_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_names_capsule)",
            "f_capsule_data_type": "SHROUD_names_capsule",
            "f_derived_type": "FNames",
            "f_module": {
                "name_module": [
                    "FNames"
                ]
            },
            "f_module_name": "name_module",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(FNames)",
            "flat_name": "Names",
            "forward": "Names",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Names * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Names * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "Names2": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Names2",
            "PY_PyTypeObject": "PY_Names2_Type",
            "PY_from_object": "PP_Names2_from_Object",
            "PY_to_object": "PP_Names2_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}Names2 *>({c_var}{c_member}addr)",
            "c_type": "TES_names2",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "Names2",
            "f_c_module": {
                "--import--": [
                    "SHROUD_names2_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_names2_capsule)",
            "f_capsule_data_type": "SHROUD_names2_capsule",
            "f_derived_type": "names2",
            "f_module": {
                "names2_mod": [
                    "names2"
                ]
            },
            "f_module_name": "names2_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(names2)",
            "flat_name": "Names2",
            "forward": "Names2",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Names2 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}Names2 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TBOOLEAN",
            "PYN_typenum": "NPY_BOOL",
            "PY_PyTypeObject": "PyBool_Type",
            "c_type": "bool",
            "cxx_type": "bool",
            "f_c_type": "logical(C_BOOL)",
            "f_kind": "C_BOOL",
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            },
            "f_statements": {
                "intent_in": {
                    "c_local_var": true,
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_inout": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ],
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_out": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                },
                "result": {
                    "need_wrapper": true
                }
            },
            "f_type": "logical",
            "flat_name": "bool",
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_deref}{c_var});"
                    ],
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        },
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_ctor": "PyString_FromString({c_var})",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "c_helper": "ShroudStrAlloc ShroudStrFree",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrFree({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_trim},\t {c_var_trim});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_helper": "ShroudStrAlloc ShroudStrCopy ShroudStrFree",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);",
                        "ShroudStrFree({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_len},\t {c_var_trim});"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrBlankFill",
                    "post_call": [
                        "ShroudStrBlankFill({c_var}, {c_var_len});"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "char"
        },
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "(int) {cxx_var}",
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)",
            "PY_format": "c",
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_header": "<string.h>",
                    "cxx_header": "<cstring>",
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});",
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_type": "character",
            "flat_name": "char"
        },
        "charout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.ccharp = {cxx_var};",
                        "{c_var_context}->len = {cxx_var} == NULL ? 0 : {stdlib}strlen({cxx_var});",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "char"
        },
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_DOUBLE",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "d",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "double",
            "cxx_type": "double",
            "f_cast": "real({f_var}, C_DOUBLE)",
            "f_kind": "C_DOUBLE",
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            },
            "f_type": "real(C_DOUBLE)",
            "flat_name": "double"
        },
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_FLOAT",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "f",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "float",
            "cxx_type": "float",
            "f_cast": "real({f_var}, C_FLOAT)",
            "f_kind": "C_FLOAT",
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            },
            "f_type": "real(C_FLOAT)",
            "flat_name": "float"
        },
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "int",
            "cxx_type": "int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "int"
        },
        "int16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int16_t",
            "cxx_type": "int16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "int16_t"
        },
        "int32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int32_t",
            "cxx_type": "int32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "int32_t"
        },
        "int64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int64_t",
            "cxx_type": "int64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "int64_t"
        },
        "int8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int8_t",
            "cxx_type": "int8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "int8_t"
        },
        "internal::ImplWorker1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}internal::ImplWorker1 *>({c_var}{c_member}addr)",
            "c_type": "TES_implworker1",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "internal::ImplWorker1",
            "f_c_module": {
                "--import--": [
                    "SHROUD_implworker1_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_implworker1_capsule)",
            "f_capsule_data_type": "SHROUD_implworker1_capsule",
            "f_derived_type": "implworker1",
            "f_module": {
                "implworker1_mod": [
                    "implworker1"
                ]
            },
            "f_module_name": "implworker1_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(implworker1)",
            "flat_name": "internal_ImplWorker1",
            "forward": "internal::ImplWorker1",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}internal::ImplWorker1 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}internal::ImplWorker1 * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            },
            "template_suffix": "_instantiation3"
        },
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "long",
            "cxx_type": "long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "long"
        },
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "long long",
            "cxx_type": "long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "long_long"
        },
        "short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "short",
            "cxx_type": "short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "short"
        },
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})",
            "c_header": "<stddef.h>",
            "c_type": "size_t",
            "cxx_type": "size_t",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "C_SIZE_T",
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            },
            "f_type": "integer(C_SIZE_T)",
            "flat_name": "size_t"
        },
        "std::Vvv1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_Vvv1",
            "PY_PyTypeObject": "PY_Vvv1_Type",
            "PY_from_object": "PP_Vvv1_from_Object",
            "PY_to_object": "PP_Vvv1_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector<int> *>({c_var}{c_member}addr)",
            "c_type": "TES_vvv1",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<int>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "FFvvv1",
            "f_module": {
                "vvv1_mod": [
                    "FFvvv1"
                ]
            },
            "f_module_name": "vvv1_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(FFvvv1)",
            "flat_name": "std_vector_int",
            "forward": "std::vector<int>",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<int> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()",
            "PY_build_format": "s#",
            "PY_ctor": "PyString_FromStringAndSize(\t{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size())",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_inout": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_out": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "post_call": [
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t NULL,\t 0);",
                        "-}} else {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());",
                        "-}}"
                    ]
                }
            },
            "c_type": "char",
            "cxx_header": "<string>",
            "cxx_to_c": "{cxx_var}{cxx_member}c_str()",
            "cxx_type": "std::string",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "std_string",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_out": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        },
        "std::vector": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector *>({c_var}{c_member}addr)",
            "c_type": "TES_vector",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "vector",
            "f_module": {
                "vector_mod": [
                    "vector"
                ]
            },
            "f_module_name": "vector_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector)",
            "flat_name": "std_vector",
            "forward": "std::vector",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "std::vector::T": {
            "base": "template",
            "c_type": "c_T",
            "cxx_type": "cxx_T",
            "f_type": "f_T",
            "flat_name": "cxx_T"
        },
        "std::vector_double": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_double",
            "PY_PyTypeObject": "PY_vector_double_Type",
            "PY_from_object": "PP_vector_double_from_Object",
            "PY_to_object": "PP_vector_double_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector<double> *>({c_var}{c_member}addr)",
            "c_type": "TES_vector_double",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<double>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "vector_double",
            "f_module": {
                "vector_double_mod": [
                    "vector_double"
                ]
            },
            "f_module_name": "vector_double_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_double)",
            "flat_name": "std_vector_double",
            "forward": "std::vector<double>",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<double> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<double> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "std::vector_instantiation3": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_instantiation3",
            "PY_PyTypeObject": "PY_vector_instantiation3_Type",
            "PY_from_object": "PP_vector_instantiation3_from_Object",
            "PY_to_object": "PP_vector_instantiation3_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector<internal::ImplWorker1> *>({c_var}{c_member}addr)",
            "c_type": "TES_vector_instantiation3",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<internal::ImplWorker1>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "vector_instantiation3",
            "f_module": {
                "vector_instantiation3_mod": [
                    "vector_instantiation3"
                ]
            },
            "f_module_name": "vector_instantiation3_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_instantiation3)",
            "flat_name": "std_vector_internal_ImplWorker1",
            "forward": "std::vector<internal::ImplWorker1>",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<internal::ImplWorker1> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<internal::ImplWorker1> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "std::vector_instantiation5": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_vector_instantiation5",
            "PY_PyTypeObject": "PY_vector_instantiation5_Type",
            "PY_from_object": "PP_vector_instantiation5_from_Object",
            "PY_to_object": "PP_vector_instantiation5_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}std::vector<long> *>({c_var}{c_member}addr)",
            "c_type": "TES_vector_instantiation5",
            "cxx_header": "<vector>",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "std::vector<long>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_vector_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_vector_capsule)",
            "f_capsule_data_type": "SHROUD_vector_capsule",
            "f_derived_type": "vector_instantiation5",
            "f_module": {
                "vector_instantiation5_mod": [
                    "vector_instantiation5"
                ]
            },
            "f_module_name": "vector_instantiation5_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(vector_instantiation5)",
            "flat_name": "std_vector_long",
            "forward": "std::vector<long>",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<long> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}std::vector<long> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "stringout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "{c_var_context}->addr.ccharp = NULL;",
                        "{c_var_context}->len = 0;",
                        "-}} else {{+",
                        "{c_var_context}->addr.ccharp = {cxx_var}{cxx_member}data();",
                        "{c_var_context}->len = {cxx_var}{cxx_member}size();",
                        "-}}",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "void",
            "cxx_header": "<string>",
            "cxx_to_c": "static_cast<void *>({cxx_var})",
            "cxx_type": "std::string",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "std_string"
        },
        "twoTs": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}twoTs *>({c_var}{c_member}addr)",
            "c_type": "TES_twots",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "twoTs",
            "f_c_module": {
                "--import--": [
                    "SHROUD_twots_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_twots_capsule)",
            "f_capsule_data_type": "SHROUD_twots_capsule",
            "f_derived_type": "twots",
            "f_module": {
                "twots_mod": [
                    "twots"
                ]
            },
            "f_module_name": "twots_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(twots)",
            "flat_name": "twoTs",
            "forward": "twoTs",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}twoTs * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}twoTs * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "twoTs::T1": {
            "base": "template",
            "c_type": "c_T",
            "cxx_type": "cxx_T",
            "f_type": "f_T",
            "flat_name": "cxx_T"
        },
        "twoTs::T2": {
            "base": "template",
            "c_type": "c_T",
            "cxx_type": "cxx_T",
            "f_type": "f_T",
            "flat_name": "cxx_T"
        },
        "twoTs_0": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_twoTs_0",
            "PY_PyTypeObject": "PY_twoTs_0_Type",
            "PY_from_object": "PP_twoTs_0_from_Object",
            "PY_to_object": "PP_twoTs_0_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}twoTs<int, long> *>({c_var}{c_member}addr)",
            "c_type": "TES_twots_0",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "twoTs<int, long>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_twots_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_twots_capsule)",
            "f_capsule_data_type": "SHROUD_twots_capsule",
            "f_derived_type": "twots_0",
            "f_module": {
                "twots_0_mod": [
                    "twots_0"
                ]
            },
            "f_module_name": "twots_0_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(twots_0)",
            "flat_name": "twoTs_int,_long",
            "forward": "twoTs<int, long>",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}twoTs<int, long> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}twoTs<int, long> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "twoTs_instantiation4": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")",
            "LUA_type": "LUA_TUSERDATA",
            "PY_PyObject": "PY_twoTs_instantiation4",
            "PY_PyTypeObject": "PY_twoTs_instantiation4_Type",
            "PY_from_object": "PP_twoTs_instantiation4_from_Object",
            "PY_to_object": "PP_twoTs_instantiation4_to_Object",
            "base": "shadow",
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                },
                "result": {
                    "c_header": "<stdlib.h>",
                    "cxx_header": "<stdlib.h>",
                    "post_call": [
                        "{c_var}->addr = {cxx_cast_to_void_ptr};",
                        "{c_var}->idtor = {idtor};"
                    ]
                }
            },
            "c_to_cxx": "static_cast<{c_const}twoTs<float, double> *>({c_var}{c_member}addr)",
            "c_type": "TES_twots_instantiation4",
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})",
            "cxx_type": "twoTs<float, double>",
            "f_c_module": {
                "--import--": [
                    "SHROUD_twots_capsule"
                ]
            },
            "f_c_type": "type(SHROUD_twots_capsule)",
            "f_capsule_data_type": "SHROUD_twots_capsule",
            "f_derived_type": "twots_instantiation4",
            "f_module": {
                "twots_instantiation4_mod": [
                    "twots_instantiation4"
                ]
            },
            "f_module_name": "twots_instantiation4_mod",
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result_ptr} = {F_C_call}({F_arg_c_call})"
                    ],
                    "need_wrapper": true
                }
            },
            "f_to_c": "{f_var}%cxxmem",
            "f_type": "type(twots_instantiation4)",
            "flat_name": "twoTs_float,_double",
            "forward": "twoTs<float, double>",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}twoTs<float, double> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "pointer",
                    "post_parse": [
                        "{c_const}twoTs<float, double> * {cxx_var} =\t {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});",
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        },
        "uint16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint16_t",
            "cxx_type": "uint16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "uint16_t"
        },
        "uint32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint32_t",
            "cxx_type": "uint32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "uint32_t"
        },
        "uint64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint64_t",
            "cxx_type": "uint64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "uint64_t"
        },
        "uint8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint8_t",
            "cxx_type": "uint8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "uint8_t"
        },
        "unsigned_int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned int",
            "cxx_type": "unsigned int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "unsigned_int"
        },
        "unsigned_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned long",
            "cxx_type": "unsigned long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "unsigned_long"
        },
        "unsigned_long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "unsigned long long",
            "cxx_type": "unsigned long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "unsigned_long_long"
        },
        "unsigned_short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned short",
            "cxx_type": "unsigned short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "unsigned_short"
        },
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)",
            "c_type": "void",
            "cxx_type": "void",
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            },
            "f_type": "type(C_PTR)",
            "flat_name": "void"
        }
    }
}