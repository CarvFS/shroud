Read yaml example.yaml
Read splicer csplicer.c
Read splicer fsplicer.f
Read splicer pysplicer.c
Close userlibrary_types.yaml
class ExClass1
C ExClass1(void)  +intent(ctor)
C ExClass1(const string * name)  +intent(ctor)
C ExClass1(const string * name +len_trim)  +intent(ctor)
C ~ExClass1(void)  +intent(dtor)
C int incrementCount(int incr +value)  +intent(function)
C const string & getNameErrorCheck(void) const  +deref(allocatable)+intent(function)
C const string & getNameErrorCheck(void) const  +deref(allocatable)+intent(function)
C const string & getNameArg(void) const  +deref(result-as-arg)+intent(function)
C void getNameArg(string & name +len(Nname)) const  +intent(subroutine)
C int getValue(int value +value)  +intent(function)
C long getValue(long value +value)  +intent(function)
C bool hasAddr(bool in +value)  +intent(function)
C void SplicerSpecial(void) 
Close wrapexample_nested_ExClass1.h
Close wrapexample_nested_ExClass1.cpp
class ExClass2
C ExClass2(const string * name +len_trim(trim_name))  +intent(ctor)
C ExClass2(const string * name +len_trim(trim_name))  +intent(ctor)
C ~ExClass2(void)  +intent(dtor)
C const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +deref(result-as-arg)+intent(function)
C void getName(string & SHF_rv +len(NSHF_rv)) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +intent(subroutine)
C const string & getName2(void)  +deref(allocatable)+intent(function)
C const string & getName2(void)  +deref(allocatable)+intent(function)
C string & getName3(void) const  +deref(allocatable)+intent(function)
C string & getName3(void) const  +deref(allocatable)+intent(function)
C string & getName4(void)  +deref(allocatable)+intent(function)
C string & getName4(void)  +deref(allocatable)+intent(function)
C int GetNameLength(void) const  +intent(function)
C ExClass1 * get_class1(const ExClass1 * in)  +intent(function)
C void declare(TypeID type +value)  +intent(subroutine)
C void declare(TypeID type +value, SidreLength len=1 +value)  +intent(subroutine)
C void destroyall(void) 
C TypeID getTypeID(void) const  +intent(function)
C void setValue(int value +value) 
C void setValue(long value +value) 
C void setValue(float value +value) 
C void setValue(double value +value) 
C int getValue(void)  +intent(function)
C double getValue(void)  +intent(function)
Close wrapexample_nested_ExClass2.h
Close wrapexample_nested_ExClass2.cpp
C void local_function1(void) 
C bool isNameValid(const std::string & name)  +intent(function)
C bool isNameValid(const std::string & name +len_trim)  +intent(function)
C bool isInitialized(void)  +intent(function)
C void test_names(const std::string & name) 
C void test_names(const std::string & name +len_trim) 
C void test_names(const std::string & name, int flag +value) 
C void test_names(const std::string & name +len_trim, int flag +value) 
C void testoptional(void) 
C void testoptional(int i=1 +value) 
C void testoptional(int i=1 +value, long j=2 +value) 
C size_t test_size_t(void)  +intent(function)
C void testmpi(MPI_Comm comm +value) 
C void testmpi(void) 
C void FuncPtr1(void ( * get)(void) +value) 
C void FuncPtr2(double * ( * get)(void)) 
C void FuncPtr3(double ( * get)(int i +value, int +value) +value) 
C void FuncPtr4(double ( * get)(double +value, int +value) +value) 
C void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value) 
C void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout)) 
C int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)  +intent(function)
C void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+value) 
Close wrapUserLibrary_example_nested.h
Close wrapUserLibrary_example_nested.cpp
Close wrapUserLibrary.cpp
class ExClass1
Fortran ExClass1(void)  +intent(ctor)
Fortran ExClass1(const string * name)  +intent(ctor)
Fortran ~ExClass1(void)  +intent(dtor)
Fortran int incrementCount(int incr +value)  +intent(function)
Fortran const string & getNameErrorCheck(void) const  +deref(allocatable)+intent(function)
Fortran void getNameArg(string & name +len(Nname)) const  +intent(subroutine)
Fortran int getValue(int value +value)  +intent(function)
Fortran long getValue(long value +value)  +intent(function)
Fortran bool hasAddr(bool in +value)  +intent(function)
Fortran void SplicerSpecial(void) 
C-interface ExClass1(void)  +intent(ctor)
C-interface ExClass1(const string * name)  +intent(ctor)
C-interface ExClass1(const string * name +len_trim)  +intent(ctor)
C-interface ~ExClass1(void)  +intent(dtor)
C-interface int incrementCount(int incr +value)  +intent(function)
C-interface const string & getNameErrorCheck(void) const  +deref(allocatable)+intent(function)
C-interface const string & getNameErrorCheck(void) const  +deref(allocatable)+intent(function)
C-interface const string & getNameArg(void) const  +deref(result-as-arg)+intent(function)
C-interface void getNameArg(string & name +len(Nname)) const  +intent(subroutine)
C-interface int getValue(int value +value)  +intent(function)
C-interface long getValue(long value +value)  +intent(function)
C-interface bool hasAddr(bool in +value)  +intent(function)
C-interface void SplicerSpecial(void) 
class ExClass2
Fortran ExClass2(const string * name +len_trim(trim_name))  +intent(ctor)
Fortran ~ExClass2(void)  +intent(dtor)
Fortran const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +deref(result-as-arg)+intent(function)
Fortran const string & getName2(void)  +deref(allocatable)+intent(function)
Fortran string & getName3(void) const  +deref(allocatable)+intent(function)
Fortran string & getName4(void)  +deref(allocatable)+intent(function)
Fortran int GetNameLength(void) const  +intent(function)
Fortran ExClass1 * get_class1(const ExClass1 * in)  +intent(function)
Fortran void declare(TypeID type +value, int len=1 +value)  +intent(subroutine)
Fortran void declare(TypeID type +value, long len=1 +value)  +intent(subroutine)
Fortran void declare(TypeID type +value, int len=1 +value)  +intent(subroutine)
Fortran void declare(TypeID type +value, long len=1 +value)  +intent(subroutine)
Fortran void destroyall(void) 
Fortran TypeID getTypeID(void) const  +intent(function)
Fortran void setValue(int value +value) 
Fortran void setValue(long value +value) 
Fortran void setValue(float value +value) 
Fortran void setValue(double value +value) 
Fortran int getValue(void)  +intent(function)
Fortran double getValue(void)  +intent(function)
C-interface ExClass2(const string * name +len_trim(trim_name))  +intent(ctor)
C-interface ExClass2(const string * name +len_trim(trim_name))  +intent(ctor)
C-interface ~ExClass2(void)  +intent(dtor)
C-interface const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +deref(result-as-arg)+intent(function)
C-interface void getName(string & SHF_rv +len(NSHF_rv)) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))  +intent(subroutine)
C-interface const string & getName2(void)  +deref(allocatable)+intent(function)
C-interface const string & getName2(void)  +deref(allocatable)+intent(function)
C-interface string & getName3(void) const  +deref(allocatable)+intent(function)
C-interface string & getName3(void) const  +deref(allocatable)+intent(function)
C-interface string & getName4(void)  +deref(allocatable)+intent(function)
C-interface string & getName4(void)  +deref(allocatable)+intent(function)
C-interface int GetNameLength(void) const  +intent(function)
C-interface ExClass1 * get_class1(const ExClass1 * in)  +intent(function)
C-interface void declare(TypeID type +value)  +intent(subroutine)
C-interface void declare(TypeID type +value, SidreLength len=1 +value)  +intent(subroutine)
C-interface void destroyall(void) 
C-interface TypeID getTypeID(void) const  +intent(function)
C-interface void setValue(int value +value) 
C-interface void setValue(long value +value) 
C-interface void setValue(float value +value) 
C-interface void setValue(double value +value) 
C-interface int getValue(void)  +intent(function)
C-interface double getValue(void)  +intent(function)
Fortran void local_function1(void) 
Fortran bool isNameValid(const std::string & name)  +intent(function)
Fortran bool isInitialized(void)  +intent(function)
Fortran void test_names(const std::string & name) 
Fortran void test_names(const std::string & name, int flag +value) 
Fortran void testoptional(void) 
Fortran void testoptional(int i=1 +value) 
Fortran void testoptional(int i=1 +value, long j=2 +value) 
Fortran size_t test_size_t(void)  +intent(function)
Fortran void testmpi(MPI_Comm comm +value) 
Fortran void testmpi(void) 
Fortran void FuncPtr1(void ( * get)(void) +value) 
Fortran void FuncPtr2(double * ( * get)(void)) 
Fortran void FuncPtr3(double ( * get)(int i +value, int +value) +value) 
Fortran void FuncPtr4(double ( * get)(double +value, int +value) +value) 
Fortran void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value) 
Fortran void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout)) 
Fortran int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)  +intent(function)
Fortran void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+value) 
C-interface void local_function1(void) 
C-interface bool isNameValid(const std::string & name)  +intent(function)
C-interface bool isNameValid(const std::string & name +len_trim)  +intent(function)
C-interface bool isInitialized(void)  +intent(function)
C-interface void test_names(const std::string & name) 
C-interface void test_names(const std::string & name +len_trim) 
C-interface void test_names(const std::string & name, int flag +value) 
C-interface void test_names(const std::string & name +len_trim, int flag +value) 
C-interface void testoptional(void) 
C-interface void testoptional(int i=1 +value) 
C-interface void testoptional(int i=1 +value, long j=2 +value) 
C-interface size_t test_size_t(void)  +intent(function)
C-interface void testmpi(MPI_Comm comm +value) 
C-interface void testmpi(void) 
C-interface void FuncPtr1(void ( * get)(void) +value) 
C-interface void FuncPtr2(double * ( * get)(void)) 
C-interface void FuncPtr3(double ( * get)(int i +value, int +value) +value) 
C-interface void FuncPtr4(double ( * get)(double +value, int +value) +value) 
C-interface void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value) 
C-interface void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout)) 
C-interface int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)  +intent(function)
C-interface void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+value) 
Close wrapfUserLibrary_example_nested.f
Close wrapfUserLibrary_example.f
Close wrapfuserlibrary.f
Close utilUserLibrary.cpp
Close typesUserLibrary.h
class ExClass1
Python method ExClass1(void)
Python method ExClass1(const string * name)
Python method ~ExClass1(void)
Python method int incrementCount(int incr +value)
Python method const string & getNameErrorCheck(void) const
Python method const string & getNameArg(void) const
Python method int getValue(int value +value)
Python method long getValue(long value +value)
Python method bool hasAddr(bool in +value)
Python method void SplicerSpecial(void)
Close pyexample_nested_ExClass1type.cpp
class ExClass2
Python method ExClass2(const string * name +len_trim(trim_name))
Python method ~ExClass2(void)
Python method const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
Python method const string & getName2(void)
Python method string & getName3(void) const
Python method string & getName4(void)
Python method int GetNameLength(void) const
Python method ExClass1 * get_class1(const ExClass1 * in)
Python method void * declare(TypeID type +value, SidreLength len=1 +value)
Python method void destroyall(void)
Python method TypeID getTypeID(void) const
Python method void setValue(int value +value)
Python method void setValue(long value +value)
Python method void setValue(float value +value)
Python method void setValue(double value +value)
Python method int getValue(void)
Python method double getValue(void)
Close pyexample_nested_ExClass2type.cpp
Python function void local_function1(void)
Python function bool isNameValid(const std::string & name)
Python function bool isInitialized(void)
Python function void test_names(const std::string & name)
Python function void test_names(const std::string & name, int flag +value)
Python function void testoptional(int i=1 +value, long j=2 +value)
Python function size_t test_size_t(void)
Python function void testmpi(MPI_Comm comm +value)
Python function void testmpi(void)
Python function void FuncPtr1(void ( * get)(void) +value)
Python function void FuncPtr2(double * ( * get)(void))
Python function void FuncPtr3(double ( * get)(int i +value, int +value) +value)
Python function void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)
Python function void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
Python function int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)
Python function void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)
Close pyUserLibrary_example_nestedmodule.cpp
Close pyUserLibrary_examplemodule.cpp
Close pyUserLibrarymodule.cpp
Close pyUserLibraryutil.cpp
Close pyUserLibrarymodule.hpp
Close setup.py
Lua method ExClass1(void)
Lua method ExClass1(const string * name)
Lua method ~ExClass1(void)
Lua method int incrementCount(int incr +value)
Lua method const string & getNameErrorCheck(void) const
Lua method const string & getNameArg(void) const
Lua method int getValue(int value +value)
Lua method long getValue(long value +value)
Lua method bool hasAddr(bool in +value)
Lua method void SplicerSpecial(void)
Lua method ExClass2(const string * name +len_trim(trim_name))
Lua method ~ExClass2(void)
Lua method const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
Lua method const string & getName2(void)
Lua method string & getName3(void) const
Lua method string & getName4(void)
Lua method int GetNameLength(void) const
Lua method ExClass1 * get_class1(const ExClass1 * in)
Lua method void * declare(TypeID type +value, SidreLength len=1 +value)
Lua method void * declare(TypeID type +value, SidreLength len=1 +value)
Lua method void destroyall(void)
Lua method TypeID getTypeID(void) const
Lua method void setValue(int value +value)
Lua method void setValue(long value +value)
Lua method void setValue(float value +value)
Lua method void setValue(double value +value)
Lua method int getValue(void)
Lua method double getValue(void)
Lua function void local_function1(void)
Lua function bool isNameValid(const std::string & name)
Lua function bool isInitialized(void)
Lua function void test_names(const std::string & name)
Lua function void test_names(const std::string & name, int flag +value)
Lua function void testoptional(int i=1 +value, long j=2 +value)
Lua function void testoptional(int i=1 +value, long j=2 +value)
Lua function void testoptional(int i=1 +value, long j=2 +value)
Lua function size_t test_size_t(void)
Lua function void testmpi(void)
Lua function void testmpi(MPI_Comm comm +value)
Lua function void FuncPtr1(void ( * get)(void) +value)
Lua function void FuncPtr2(double * ( * get)(void))
Lua function void FuncPtr3(double ( * get)(int i +value, int +value) +value)
Lua function void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)
Lua function void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
Lua function int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)
Lua function void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)
Close luaUserLibrarymodule.hpp
Close luaUserLibrarymodule.cpp
