Read yaml example.yaml
Read splicer csplicer.c
Read splicer fsplicer.f
Read splicer pysplicer.c
Close userlibrary_types.yaml
class ExClass1
C method ExClass1(void)
C method ExClass1(const string * name +intent(in))
C method ExClass1(const string * name +intent(in)+len_trim)
C method ~ExClass1(void)
C method int incrementCount(int incr +intent(in)+value)
C method const string & getNameErrorCheck(void) const +deref(allocatable)
C method void getNameErrorCheck(const string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)) const
C method const string & getNameArg(void) const +deref(result-as-arg)
C method void getNameArg(string & name +intent(out)+len(Nname)) const
C method int getValue(int value +intent(in)+value)
C method long getValue(long value +intent(in)+value)
C method bool hasAddr(bool in +intent(in)+value)
C method void SplicerSpecial(void)
Close wrapexample_nested_ExClass1.h
Close wrapexample_nested_ExClass1.cpp
class ExClass2
C method ExClass2(const string * name +intent(in)+len_trim(trim_name))
C method ExClass2(const string * name +intent(in)+len_trim(trim_name))
C method ~ExClass2(void)
C method const string & getName(void) const +deref(result-as-arg)+len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
C method void getName(string & SHF_rv +intent(out)+len(NSHF_rv)) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
C method const string & getName2(void) +deref(allocatable)
C method void getName2(const string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C method string & getName3(void) const +deref(allocatable)
C method void getName3(string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)) const
C method string & getName4(void) +deref(allocatable)
C method void getName4(string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C method int GetNameLength(void) const
C method ExClass1 * get_class1(const ExClass1 * in +intent(in))
C method void declare(TypeID type +intent(in)+value)
C method void declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
C method void destroyall(void)
C method TypeID getTypeID(void) const
C method void setValue(int value +intent(in)+value)
C method void setValue(long value +intent(in)+value)
C method void setValue(float value +intent(in)+value)
C method void setValue(double value +intent(in)+value)
C method int getValue(void)
C method double getValue(void)
Close wrapexample_nested_ExClass2.h
Close wrapexample_nested_ExClass2.cpp
C function void local_function1(void)
C function bool isNameValid(const std::string & name +intent(in))
C function bool isNameValid(const std::string & name +intent(in)+len_trim)
C function bool isInitialized(void)
C function void test_names(const std::string & name +intent(in))
C function void test_names(const std::string & name +intent(in)+len_trim)
C function void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
C function void test_names(const std::string & name +intent(in)+len_trim, int flag +intent(in)+value)
C function void testoptional(void)
C function void testoptional(int i=1 +intent(in)+value)
C function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
C function size_t test_size_t(void)
C function void testmpi(MPI_Comm comm +intent(in)+value)
C function void testmpi(void)
C function void FuncPtr1(void ( * get)(void) +intent(in)+value)
C function void FuncPtr2(double * ( * get)(void) +intent(in))
C function void FuncPtr3(double ( * get)(int i +value, int +value) +intent(in)+value)
C function void FuncPtr4(double ( * get)(double +value, int +value) +intent(in)+value)
C function void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +intent(in)+value)
C function void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
C function int verylongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
C function void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+intent(in)+value)
Close wrapUserLibrary_example_nested.h
Close wrapUserLibrary_example_nested.cpp
Close wrapUserLibrary.cpp
Close typesUserLibrary.h
class ExClass1
Fortran ExClass1(void)
Fortran ExClass1(const string * name +intent(in))
Fortran ~ExClass1(void)
Fortran int incrementCount(int incr +intent(in)+value)
Fortran const string & getNameErrorCheck(void) const +deref(allocatable)
Fortran void getNameArg(string & name +intent(out)+len(Nname)) const
Fortran int getValue(int value +intent(in)+value)
Fortran long getValue(long value +intent(in)+value)
Fortran bool hasAddr(bool in +intent(in)+value)
Fortran void SplicerSpecial(void)
C-interface ExClass1(void)
C-interface ExClass1(const string * name +intent(in))
C-interface ExClass1(const string * name +intent(in)+len_trim)
C-interface ~ExClass1(void)
C-interface int incrementCount(int incr +intent(in)+value)
C-interface const string & getNameErrorCheck(void) const +deref(allocatable)
C-interface void getNameErrorCheck(const string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)) const
C-interface const string & getNameArg(void) const +deref(result-as-arg)
C-interface void getNameArg(string & name +intent(out)+len(Nname)) const
C-interface int getValue(int value +intent(in)+value)
C-interface long getValue(long value +intent(in)+value)
C-interface bool hasAddr(bool in +intent(in)+value)
C-interface void SplicerSpecial(void)
class ExClass2
Fortran ExClass2(const string * name +intent(in)+len_trim(trim_name))
Fortran ~ExClass2(void)
Fortran const string & getName(void) const +deref(result-as-arg)+len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
Fortran const string & getName2(void) +deref(allocatable)
Fortran string & getName3(void) const +deref(allocatable)
Fortran string & getName4(void) +deref(allocatable)
Fortran int GetNameLength(void) const
Fortran ExClass1 * get_class1(const ExClass1 * in +intent(in))
Fortran void declare(TypeID type +intent(in)+value, int len=1 +intent(in)+value)
Fortran void declare(TypeID type +intent(in)+value, long len=1 +intent(in)+value)
Fortran void declare(TypeID type +intent(in)+value, int len=1 +intent(in)+value)
Fortran void declare(TypeID type +intent(in)+value, long len=1 +intent(in)+value)
Fortran void destroyall(void)
Fortran TypeID getTypeID(void) const
Fortran void setValue(int value +intent(in)+value)
Fortran void setValue(long value +intent(in)+value)
Fortran void setValue(float value +intent(in)+value)
Fortran void setValue(double value +intent(in)+value)
Fortran int getValue(void)
Fortran double getValue(void)
C-interface ExClass2(const string * name +intent(in)+len_trim(trim_name))
C-interface ExClass2(const string * name +intent(in)+len_trim(trim_name))
C-interface ~ExClass2(void)
C-interface const string & getName(void) const +deref(result-as-arg)+len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
C-interface void getName(string & SHF_rv +intent(out)+len(NSHF_rv)) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
C-interface const string & getName2(void) +deref(allocatable)
C-interface void getName2(const string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C-interface string & getName3(void) const +deref(allocatable)
C-interface void getName3(string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)) const
C-interface string & getName4(void) +deref(allocatable)
C-interface void getName4(string & SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C-interface int GetNameLength(void) const
C-interface ExClass1 * get_class1(const ExClass1 * in +intent(in))
C-interface void declare(TypeID type +intent(in)+value)
C-interface void declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
C-interface void destroyall(void)
C-interface TypeID getTypeID(void) const
C-interface void setValue(int value +intent(in)+value)
C-interface void setValue(long value +intent(in)+value)
C-interface void setValue(float value +intent(in)+value)
C-interface void setValue(double value +intent(in)+value)
C-interface int getValue(void)
C-interface double getValue(void)
Fortran void local_function1(void)
Fortran bool isNameValid(const std::string & name +intent(in))
Fortran bool isInitialized(void)
Fortran void test_names(const std::string & name +intent(in))
Fortran void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
Fortran void testoptional(void)
Fortran void testoptional(int i=1 +intent(in)+value)
Fortran void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
Fortran size_t test_size_t(void)
Fortran void testmpi(MPI_Comm comm +intent(in)+value)
Fortran void testmpi(void)
Fortran void FuncPtr1(void ( * get)(void) +intent(in)+value)
Fortran void FuncPtr2(double * ( * get)(void) +intent(in))
Fortran void FuncPtr3(double ( * get)(int i +value, int +value) +intent(in)+value)
Fortran void FuncPtr4(double ( * get)(double +value, int +value) +intent(in)+value)
Fortran void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +intent(in)+value)
Fortran void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
Fortran int verylongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
Fortran void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+intent(in)+value)
C-interface void local_function1(void)
C-interface bool isNameValid(const std::string & name +intent(in))
C-interface bool isNameValid(const std::string & name +intent(in)+len_trim)
C-interface bool isInitialized(void)
C-interface void test_names(const std::string & name +intent(in))
C-interface void test_names(const std::string & name +intent(in)+len_trim)
C-interface void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
C-interface void test_names(const std::string & name +intent(in)+len_trim, int flag +intent(in)+value)
C-interface void testoptional(void)
C-interface void testoptional(int i=1 +intent(in)+value)
C-interface void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
C-interface size_t test_size_t(void)
C-interface void testmpi(MPI_Comm comm +intent(in)+value)
C-interface void testmpi(void)
C-interface void FuncPtr1(void ( * get)(void) +intent(in)+value)
C-interface void FuncPtr2(double * ( * get)(void) +intent(in))
C-interface void FuncPtr3(double ( * get)(int i +value, int +value) +intent(in)+value)
C-interface void FuncPtr4(double ( * get)(double +value, int +value) +intent(in)+value)
C-interface void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +intent(in)+value)
C-interface void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
C-interface int verylongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
C-interface void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+intent(in)+value)
Close wrapfUserLibrary_example_nested.f
Close wrapfUserLibrary_example.f
Close wrapfuserlibrary.f
Close utilUserLibrary.cpp
class ExClass1
Python method ExClass1(void)
Python method ExClass1(const string * name +intent(in))
Python method ~ExClass1(void)
Python method int incrementCount(int incr +intent(in)+value)
Python method const string & getNameErrorCheck(void) const +deref(allocatable)
Python method const string & getNameArg(void) const +deref(result-as-arg)
Python method int getValue(int value +intent(in)+value)
Python method long getValue(long value +intent(in)+value)
Python method bool hasAddr(bool in +intent(in)+value)
Python method void SplicerSpecial(void)
Close pyexample_nested_ExClass1type.cpp
class ExClass2
Python method ExClass2(const string * name +intent(in)+len_trim(trim_name))
Python method ~ExClass2(void)
Python method const string & getName(void) const +deref(result-as-arg)+len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
Python method const string & getName2(void) +deref(allocatable)
Python method string & getName3(void) const +deref(allocatable)
Python method string & getName4(void) +deref(allocatable)
Python method int GetNameLength(void) const
Python method ExClass1 * get_class1(const ExClass1 * in +intent(in))
Python method void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
Python method void destroyall(void)
Python method TypeID getTypeID(void) const
Python method void setValue(int value +intent(in)+value)
Python method void setValue(long value +intent(in)+value)
Python method void setValue(float value +intent(in)+value)
Python method void setValue(double value +intent(in)+value)
Python method int getValue(void)
Python method double getValue(void)
Close pyexample_nested_ExClass2type.cpp
Python function void local_function1(void)
Python function bool isNameValid(const std::string & name +intent(in))
Python function bool isInitialized(void)
Python function void test_names(const std::string & name +intent(in))
Python function void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
Python function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
Python function size_t test_size_t(void)
Python function void testmpi(MPI_Comm comm +intent(in)+value)
Python function void testmpi(void)
Python function void FuncPtr1(void ( * get)(void) +intent(in)+value)
Python function void FuncPtr2(double * ( * get)(void) +intent(in))
Python function void FuncPtr3(double ( * get)(int i +value, int +value) +intent(in)+value)
Python function void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +intent(in)+value)
Python function void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
Python function int verylongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
Python function void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+intent(in)+value)
Close pyUserLibrary_example_nestedmodule.cpp
Close pyUserLibrary_examplemodule.cpp
Close pyUserLibrarymodule.cpp
Close pyUserLibraryutil.cpp
Close pyUserLibrarymodule.hpp
Close setup.py
Lua method ExClass1(void)
Lua method ExClass1(const string * name +intent(in))
Lua method ~ExClass1(void)
Lua method int incrementCount(int incr +intent(in)+value)
Lua method const string & getNameErrorCheck(void) const +deref(allocatable)
Lua method const string & getNameArg(void) const +deref(result-as-arg)
Lua method int getValue(int value +intent(in)+value)
Lua method long getValue(long value +intent(in)+value)
Lua method bool hasAddr(bool in +intent(in)+value)
Lua method void SplicerSpecial(void)
Lua method ExClass2(const string * name +intent(in)+len_trim(trim_name))
Lua method ~ExClass2(void)
Lua method const string & getName(void) const +deref(result-as-arg)+len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))
Lua method const string & getName2(void) +deref(allocatable)
Lua method string & getName3(void) const +deref(allocatable)
Lua method string & getName4(void) +deref(allocatable)
Lua method int GetNameLength(void) const
Lua method ExClass1 * get_class1(const ExClass1 * in +intent(in))
Lua method void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
Lua method void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
Lua method void destroyall(void)
Lua method TypeID getTypeID(void) const
Lua method void setValue(int value +intent(in)+value)
Lua method void setValue(long value +intent(in)+value)
Lua method void setValue(float value +intent(in)+value)
Lua method void setValue(double value +intent(in)+value)
Lua method int getValue(void)
Lua method double getValue(void)
Lua function void local_function1(void)
Lua function bool isNameValid(const std::string & name +intent(in))
Lua function bool isInitialized(void)
Lua function void test_names(const std::string & name +intent(in))
Lua function void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
Lua function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
Lua function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
Lua function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
Lua function size_t test_size_t(void)
Lua function void testmpi(void)
Lua function void testmpi(MPI_Comm comm +intent(in)+value)
Lua function void FuncPtr1(void ( * get)(void) +intent(in)+value)
Lua function void FuncPtr2(double * ( * get)(void) +intent(in))
Lua function void FuncPtr3(double ( * get)(int i +value, int +value) +intent(in)+value)
Lua function void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +intent(in)+value)
Lua function void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))
Lua function int verylongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
Lua function void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+intent(in)+value)
Close luaUserLibrarymodule.hpp
Close luaUserLibrarymodule.cpp
