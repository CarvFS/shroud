{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "language": "cxx",
        "namespaces": [
            {
                "<NAMESPACE>": "****************************************",
                "name": "example",
                "namespaces": [
                    {
                        "<NAMESPACE>": "****************************************",
                        "classes": [
                            {
                                "<CLASS>": "****************************************",
                                "cxx_header": [
                                    "ExClass1.hpp"
                                ],
                                "functions": [
                                    {
                                        "<FUNCTION>": "0 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "attrs": {
                                                "_constructor": true,
                                                "_name": "ctor"
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "ExClass1"
                                            ],
                                            "typemap_name": "example::nested::ExClass1"
                                        },
                                        "decl": "ExClass1()",
                                        "declgen": "ExClass1(void)",
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass1_ctor_0",
                                            "C_prototype": "AA_example_nested_ExClass1 * SHadow_rv",
                                            "C_return_type": "AA_example_nested_ExClass1 *",
                                            "F_C_arguments": "SHT_crv",
                                            "F_C_call": "c_exclass1_ctor_0",
                                            "F_C_name": "c_exclass1_ctor_0",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "SHT_rv%cxxmem",
                                            "F_arguments": "",
                                            "F_name_function": "ctor_0",
                                            "F_name_generic": "exclass1",
                                            "F_name_impl": "exclass1_ctor_0",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "ctor",
                                            "LUA_name_impl": "l_example_nested_ExClass1_ctor",
                                            "PY_name_impl": "PP_ExClass1_tp_init_0",
                                            "PY_type_impl": "PP_ExClass1_tp_init_0",
                                            "PY_type_method": "tp_init",
                                            "cxx_rv_decl": "example::nested::ExClass1 SHCXX_rv",
                                            "function_name": "ctor",
                                            "function_suffix": "_0",
                                            "underscore_name": "ctor"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "AA_example_nested_ExClass1",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_type": "example::nested::ExClass1",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "1",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_shadow_scalar_ctor",
                                                "stmt1": "c_shadow_scalar_ctor"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "example::nested::ExClass1",
                                                "f_intent": "OUT",
                                                "f_type": "type(exclass1)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_shadow_ctor",
                                                "stmt1": "f_shadow_ctor",
                                                "stmtc0": "c_shadow_ctor",
                                                "stmtc1": "c_shadow_ctor"
                                            },
                                            "fmtl": {
                                                "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_var": "SHCXX_rv",
                                                "stmt0": "lua_shadow_scalar_ctor",
                                                "stmt1": "lua_shadow_ctor"
                                            },
                                            "fmtpy": {
                                                "PY_build_format": "O",
                                                "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                "PyObject": "PP_ExClass1",
                                                "PyTypeObject": "PP_ExClass1_Type",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "example::nested::ExClass1",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_default",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv",
                                                "vargs": "SHCXX_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "1 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_F_C_index": "10",
                                        "_overloaded": true,
                                        "ast": {
                                            "attrs": {
                                                "_constructor": true,
                                                "_name": "ctor"
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "const": true,
                                                    "declarator": {
                                                        "name": "name",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "ExClass1"
                                            ],
                                            "typemap_name": "example::nested::ExClass1"
                                        },
                                        "decl": "ExClass1( const string *name )",
                                        "declgen": "ExClass1(const string * name)",
                                        "doxygen": {
                                            "brief": "constructor",
                                            "description": "longer description\nusually multiple lines\n",
                                            "return": "return new instance"
                                        },
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "name": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_name",
                                                    "stmt0": "c_string_*_in",
                                                    "stmt1": "c_string_*_in"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "name"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": " *",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_len": "Lname",
                                                    "cxx_member": "->",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "name",
                                                    "lua_var": "SH_Lua_name",
                                                    "pop_expr": "lua_tostring(L, 1)",
                                                    "stmt0": "lua_string_*_in",
                                                    "stmt1": "lua_string_*_in"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                                    "cxx_addr": "",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SH_name",
                                                    "data_var": "SHData_name",
                                                    "numpy_type": null,
                                                    "py_var": "SHPy_name",
                                                    "size_var": "SHSize_name",
                                                    "stmt0": "py_string_*_in",
                                                    "stmt1": "py_string_*_in",
                                                    "value_var": "SHValue_name"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "&SHCXX_name",
                                            "C_name": "AA_example_nested_ExClass1_ctor_1",
                                            "C_prototype": "const char * name,\t AA_example_nested_ExClass1 * SHadow_rv",
                                            "C_return_type": "AA_example_nested_ExClass1 *",
                                            "F_C_arguments": "name,\t SHT_crv",
                                            "F_C_call": "c_exclass1_ctor_1_bufferify",
                                            "F_C_name": "c_exclass1_ctor_1",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t SHT_rv%cxxmem",
                                            "F_arguments": "name",
                                            "F_name_function": "ctor_1",
                                            "F_name_generic": "exclass1",
                                            "F_name_impl": "exclass1_ctor_1",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "PY_name_impl": "PP_ExClass1_tp_init_1",
                                            "PY_type_impl": "PP_ExClass1_tp_init_1",
                                            "PY_type_method": "tp_init",
                                            "cxx_rv_decl": "example::nested::ExClass1 SHCXX_rv",
                                            "function_name": "ctor",
                                            "function_suffix": "_1",
                                            "underscore_name": "ctor"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "AA_example_nested_ExClass1",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_type": "example::nested::ExClass1",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "1",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_shadow_scalar_ctor",
                                                "stmt1": "c_shadow_scalar_ctor"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "example::nested::ExClass1",
                                                "f_intent": "OUT",
                                                "f_type": "type(exclass1)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_shadow_ctor",
                                                "stmt1": "f_shadow_ctor",
                                                "stmtc0": "c_shadow_ctor",
                                                "stmtc1": "c_shadow_ctor"
                                            },
                                            "fmtl": {
                                                "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_var": "SHCXX_rv",
                                                "stmt0": "lua_shadow_scalar_ctor",
                                                "stmt1": "lua_shadow_ctor"
                                            },
                                            "fmtpy": {
                                                "PY_build_format": "O",
                                                "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                "PyObject": "PP_ExClass1",
                                                "PyTypeObject": "PP_ExClass1_Type",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "example::nested::ExClass1",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_default",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv",
                                                "vargs": "SHCXX_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "10 ****************************************",
                                        "_PTR_C_CXX_index": "1",
                                        "_generated": "arg_to_buffer",
                                        "_overloaded": true,
                                        "ast": {
                                            "attrs": {
                                                "_constructor": true,
                                                "_name": "ctor"
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "len_trim": "Lname"
                                                    },
                                                    "const": true,
                                                    "declarator": {
                                                        "name": "name",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "stmts_suffix": "buf",
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "ExClass1"
                                            ],
                                            "typemap_name": "example::nested::ExClass1"
                                        },
                                        "decl": "ExClass1( const string *name )",
                                        "declgen": "ExClass1(const string * name +len_trim)",
                                        "doxygen": {
                                            "brief": "constructor",
                                            "description": "longer description\nusually multiple lines\n",
                                            "return": "return new instance"
                                        },
                                        "generated_suffix": "buf",
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "name": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_trim": "Lname",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_name",
                                                    "stmt0": "c_string_*_in_buf",
                                                    "stmt1": "c_string_*_in_buf"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "name",
                                                    "F_pointer": "SHPTR_name",
                                                    "c_var": "name",
                                                    "c_var_trim": "Lname",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "name",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_*_in_buf",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_string_*_in_buf",
                                                    "stmtc1": "c_string_*_in_buf"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "&SHCXX_name",
                                            "C_name": "AA_example_nested_ExClass1_ctor_1_bufferify",
                                            "C_prototype": "const char * name,\t int Lname,\t AA_example_nested_ExClass1 * SHadow_rv",
                                            "C_return_type": "AA_example_nested_ExClass1 *",
                                            "F_C_arguments": "name,\t Lname,\t SHT_crv",
                                            "F_C_name": "c_exclass1_ctor_1_bufferify",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_name_generic": "exclass1",
                                            "cxx_rv_decl": "example::nested::ExClass1 SHCXX_rv",
                                            "function_name": "ctor",
                                            "function_suffix": "_1_bufferify",
                                            "underscore_name": "ctor"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "AA_example_nested_ExClass1",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_type": "example::nested::ExClass1",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "1",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_shadow_scalar_ctor_buf",
                                                "stmt1": "c_shadow_scalar_ctor"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "f_intent": "OUT",
                                                "f_type": "type(exclass1)"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "2 ****************************************",
                                        "ast": {
                                            "attrs": {
                                                "_destructor": "ExClass1",
                                                "_name": "dtor"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "~ExClass1()",
                                        "declgen": "~ExClass1(void)",
                                        "doxygen": {
                                            "brief": "destructor",
                                            "description": "longer description joined with previous line"
                                        },
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass1_dtor",
                                            "C_prototype": "AA_example_nested_ExClass1 * self",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass1_dtor",
                                            "F_C_name": "c_exclass1_dtor",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "delete",
                                            "F_name_generic": "dtor",
                                            "F_name_impl": "exclass1_dtor",
                                            "F_subprogram": "subroutine",
                                            "LUA_name": "dtor",
                                            "LUA_name_impl": "l_example_nested_ExClass1_dtor",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "dtor",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_shadow_dtor",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_shadow_dtor",
                                            "stmtc1": "c_shadow_dtor",
                                            "underscore_name": "dtor"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_shadow_scalar_dtor",
                                                "stmt1": "lua_shadow_dtor"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "3 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "incrementCount",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "incr",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "decl": "int incrementCount(int incr)",
                                        "declgen": "int incrementCount(int incr +value)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "incr": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "incr",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&incr",
                                                    "cxx_type": "int",
                                                    "cxx_var": "incr",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "shadow_var": "SHadow_incr",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "incr",
                                                    "F_pointer": "SHPTR_incr",
                                                    "c_var": "incr",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_var": "incr",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "incr",
                                                    "c_var_len": "Lincr",
                                                    "cxx_member": ".",
                                                    "cxx_type": "int",
                                                    "cxx_var": "incr",
                                                    "lua_var": "SH_Lua_incr",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "int",
                                                    "c_var": "incr",
                                                    "ctor_expr": "incr",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&incr",
                                                    "cxx_type": "int",
                                                    "cxx_var": "incr",
                                                    "data_var": "SHData_incr",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_incr",
                                                    "size_var": "SHSize_incr",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_incr"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "incr",
                                            "C_name": "AA_example_nested_ExClass1_increment_count",
                                            "C_prototype": "AA_example_nested_ExClass1 * self,\t int incr",
                                            "C_return_type": "int",
                                            "F_C_arguments": "self,\t incr",
                                            "F_C_call": "c_exclass1_increment_count",
                                            "F_C_name": "c_exclass1_increment_count",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t incr",
                                            "F_arguments": "obj,\t incr",
                                            "F_name_function": "increment_count",
                                            "F_name_generic": "increment_count",
                                            "F_name_impl": "exclass1_increment_count",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "incrementCount",
                                            "LUA_name_impl": "l_example_nested_ExClass1_increment_count",
                                            "PY_name_impl": "PP_incrementCount",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "int SHC_rv",
                                            "function_name": "incrementCount",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "increment_count"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_type": "int",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHC_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHC_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_INT",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_native_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "int",
                                                "f_intent": "OUT",
                                                "f_kind": "C_INT",
                                                "f_type": "integer(C_INT)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_INT",
                                                "stmt0": "f_native_scalar_result",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_native_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                "stmt0": "lua_native_scalar_result",
                                                "stmt1": "lua_native_scalar_result"
                                            },
                                            "fmtpy": {
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_INT",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_native_scalar_result",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "4 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_F_C_index": "11",
                                        "ast": {
                                            "const": true,
                                            "declarator": {
                                                "name": "getNameErrorCheck",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "func_const": true,
                                            "metaattrs": {
                                                "deref": "allocatable",
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getNameErrorCheck() const",
                                        "declgen": "const string & getNameErrorCheck(void) const",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass1_get_name_error_check",
                                            "C_prototype": "const AA_example_nested_ExClass1 * self",
                                            "C_return_type": "const char *",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass1_get_name_error_check_bufferify",
                                            "F_C_name": "c_exclass1_get_name_error_check",
                                            "F_C_pure_clause": "pure ",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t DSHF_rv",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_name_error_check",
                                            "F_name_generic": "get_name_error_check",
                                            "F_name_impl": "exclass1_get_name_error_check",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getNameErrorCheck",
                                            "LUA_name_impl": "l_example_nested_ExClass1_get_name_error_check",
                                            "PY_name_impl": "PP_getNameErrorCheck",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getNameErrorCheck",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name_error_check"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "const ",
                                                "c_rv_decl": "const char * SHC_rv",
                                                "c_type": "char",
                                                "c_val": "SHCXX_rv.c_str()",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_string_&_result",
                                                "stmt1": "c_string_&_result"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "std::string",
                                                "f_intent": "OUT",
                                                "f_kind": "C_CHAR",
                                                "f_type": "character(*)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_string_scalar_result_buf_allocatable",
                                                "stmt1": "f_string_scalar_result_buf_allocatable",
                                                "stmtc0": "c_string_scalar_result_buf_allocatable",
                                                "stmtc1": "c_string_scalar_result_buf_allocatable"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv.c_str()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv.c_str()",
                                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                "stmt0": "lua_string_&_result",
                                                "stmt1": "lua_string_&_result"
                                            },
                                            "fmtpy": {
                                                "array_size": "1",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_string_&_result",
                                                "stmt1": "py_string_&_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "11 ****************************************",
                                        "_PTR_C_CXX_index": "4",
                                        "_generated": "arg_to_buffer",
                                        "ast": {
                                            "declarator": {
                                                "name": "getNameErrorCheck",
                                                "pointer": []
                                            },
                                            "func_const": true,
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "context": "DSHF_rv"
                                                    },
                                                    "const": true,
                                                    "declarator": {
                                                        "name": "SHF_rv",
                                                        "pointer": [
                                                            {
                                                                "ptr": "&"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "deref": "allocatable",
                                                        "intent": "out",
                                                        "is_result": true
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "const string& getNameErrorCheck() const",
                                        "declgen": "void getNameErrorCheck(const string & SHF_rv +context(DSHF_rv)) const",
                                        "generated_suffix": "buf",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "SHF_rv": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "SHF_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_SHF_rv",
                                                    "stmt0": "c_string_&_result_buf_allocatable",
                                                    "stmt1": "c_string_&_result_buf_allocatable"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "SHF_rv",
                                                    "F_pointer": "SHPTR_SHF_rv",
                                                    "c_var": "SHT_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "SHT_rv",
                                                    "hnamefunc0": "AA_SHROUD_copy_string_and_free",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_&_result_buf_allocatable",
                                                    "stmt1": "f_string_&_result_buf_allocatable",
                                                    "stmtc0": "c_string_&_result_buf_allocatable",
                                                    "stmtc1": "c_string_&_result_buf_allocatable"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass1_get_name_error_check_bufferify",
                                            "C_prototype": "const AA_example_nested_ExClass1 * self,\t AA_SHROUD_array *DSHF_rv",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t DSHF_rv",
                                            "F_C_name": "c_exclass1_get_name_error_check_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getNameErrorCheck",
                                            "function_suffix": "_bufferify",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name_error_check"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "void",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_type": "void",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_CPTR",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_void_scalar_result_buf",
                                                "stmt1": "c_default"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "5 ****************************************",
                                        "ast": {
                                            "const": true,
                                            "declarator": {
                                                "name": "getNameArg",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "func_const": true,
                                            "metaattrs": {
                                                "deref": "result-as-arg",
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getNameArg() const",
                                        "declgen": "const string & getNameArg(void) const",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass1_get_name_arg",
                                            "C_prototype": "const AA_example_nested_ExClass1 * self",
                                            "C_return_type": "const char *",
                                            "F_C_arguments": "self",
                                            "F_C_name": "c_exclass1_get_name_arg",
                                            "F_C_pure_clause": "pure ",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_string_result_as_arg": "name",
                                            "LUA_name": "getNameArg",
                                            "LUA_name_impl": "l_example_nested_ExClass1_get_name_arg",
                                            "PY_name_impl": "PP_getNameArg",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getNameArg",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name_arg"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "const ",
                                                "c_rv_decl": "const char * SHC_rv",
                                                "c_type": "char",
                                                "c_val": "SHCXX_rv.c_str()",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_string_&_result",
                                                "stmt1": "c_string_&_result"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "f_intent": "OUT",
                                                "f_type": "character(*)"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv.c_str()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv.c_str()",
                                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                "stmt0": "lua_string_&_result",
                                                "stmt1": "lua_string_&_result"
                                            },
                                            "fmtpy": {
                                                "array_size": "1",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_string_&_result",
                                                "stmt1": "py_string_&_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "12 ****************************************",
                                        "_PTR_C_CXX_index": "5",
                                        "_generated": "arg_to_buffer",
                                        "ast": {
                                            "declarator": {
                                                "name": "getNameArg",
                                                "pointer": []
                                            },
                                            "func_const": true,
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "len": "Nname"
                                                    },
                                                    "declarator": {
                                                        "name": "name",
                                                        "pointer": [
                                                            {
                                                                "ptr": "&"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "out",
                                                        "is_result": true
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "const string& getNameArg() const",
                                        "declgen": "void getNameArg(string & name +len(Nname)) const",
                                        "generated_suffix": "buf",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "name": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_len": "Nname",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_name",
                                                    "stmt0": "c_string_&_result_buf",
                                                    "stmt1": "c_string_&_result_buf"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "name",
                                                    "F_pointer": "SHPTR_name",
                                                    "c_var": "name",
                                                    "c_var_len": "Nname",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "name",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_&_result_buf",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_string_&_result_buf",
                                                    "stmtc1": "c_string_&_result_buf"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass1_get_name_arg_bufferify",
                                            "C_prototype": "const AA_example_nested_ExClass1 * self,\t char * name,\t int Nname",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t name,\t Nname",
                                            "F_C_name": "c_exclass1_get_name_arg_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "F_string_result_as_arg": "name",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getNameArg",
                                            "function_suffix": "_bufferify",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name_arg"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "void",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_type": "void",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_CPTR",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_void_scalar_result_buf",
                                                "stmt1": "c_default"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "13 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer",
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_C_CXX_index": "5",
                                        "_PTR_F_C_index": "12",
                                        "_generated": "arg_to_buffer",
                                        "ast": {
                                            "declarator": {
                                                "name": "getNameArg",
                                                "pointer": []
                                            },
                                            "func_const": true,
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "len": "Nname"
                                                    },
                                                    "declarator": {
                                                        "name": "name",
                                                        "pointer": [
                                                            {
                                                                "ptr": "&"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "out",
                                                        "is_result": true
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "const string& getNameArg() const",
                                        "declgen": "void getNameArg(string & name +len(Nname)) const",
                                        "generated_suffix": "buf",
                                        "options": {},
                                        "wrap": {
                                            "fortran": true
                                        },
                                        "zz_fmtdict": {
                                            "F_C_call": "c_exclass1_get_name_arg_bufferify",
                                            "F_arg_c_call": "obj%cxxmem,\t name,\t len(name, kind=C_INT)",
                                            "F_arguments": "obj,\t name",
                                            "F_name_function": "get_name_arg",
                                            "F_name_generic": "get_name_arg",
                                            "F_name_impl": "exclass1_get_name_arg",
                                            "F_string_result_as_arg": "name",
                                            "F_subprogram": "subroutine",
                                            "function_name": "getNameArg",
                                            "function_suffix": "",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "underscore_name": "get_name_arg"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "6 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "value",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "decl": "int  getValue(int value)",
                                        "declgen": "int getValue(int value +value)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "shadow_var": "SHadow_value",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "value",
                                                    "F_pointer": "SHPTR_value",
                                                    "c_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_var": "value",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "value",
                                            "C_name": "AA_example_nested_ExClass1_get_value_from_int",
                                            "C_prototype": "AA_example_nested_ExClass1 * self,\t int value",
                                            "C_return_type": "int",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_exclass1_get_value_from_int",
                                            "F_C_name": "c_exclass1_get_value_from_int",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_name_function": "get_value_from_int",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "exclass1_get_value_from_int",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getValue",
                                            "LUA_name_impl": "l_example_nested_ExClass1_get_value",
                                            "PY_name_impl": "PP_getValue_from_int",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "int SHC_rv",
                                            "function_name": "getValue",
                                            "function_suffix": "_from_int",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_type": "int",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHC_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHC_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_INT",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_native_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "int",
                                                "f_intent": "OUT",
                                                "f_kind": "C_INT",
                                                "f_type": "integer(C_INT)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_INT",
                                                "stmt0": "f_native_scalar_result",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_native_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                "stmt0": "lua_native_scalar_result",
                                                "stmt1": "lua_native_scalar_result"
                                            },
                                            "fmtpy": {
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_INT",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_native_scalar_result",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "7 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "value",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "long"
                                                    ],
                                                    "typemap_name": "long"
                                                }
                                            ],
                                            "specifier": [
                                                "long"
                                            ],
                                            "typemap_name": "long"
                                        },
                                        "decl": "long getValue(long value)",
                                        "declgen": "long getValue(long value +value)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "shadow_var": "SHadow_value",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "value",
                                                    "F_pointer": "SHPTR_value",
                                                    "c_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_LONG",
                                                    "f_type": "integer(C_LONG)",
                                                    "f_var": "value",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_LONG",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "value",
                                            "C_name": "AA_example_nested_ExClass1_get_value_1",
                                            "C_prototype": "AA_example_nested_ExClass1 * self,\t long value",
                                            "C_return_type": "long",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_exclass1_get_value_1",
                                            "F_C_name": "c_exclass1_get_value_1",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_name_function": "get_value_1",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "exclass1_get_value_1",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "PY_name_impl": "PP_getValue_1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "long SHC_rv",
                                            "function_name": "getValue",
                                            "function_suffix": "_1",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_type": "long",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHC_rv",
                                                "cxx_type": "long",
                                                "cxx_var": "SHC_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_LONG",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_native_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "long",
                                                "f_intent": "OUT",
                                                "f_kind": "C_LONG",
                                                "f_type": "integer(C_LONG)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_LONG",
                                                "stmt0": "f_native_scalar_result",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_native_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                "stmt0": "lua_native_scalar_result",
                                                "stmt1": "lua_native_scalar_result"
                                            },
                                            "fmtpy": {
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "long",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_LONG",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_native_scalar_result",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "8 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "hasAddr",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "in",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "bool"
                                                    ],
                                                    "typemap_name": "bool"
                                                }
                                            ],
                                            "specifier": [
                                                "bool"
                                            ],
                                            "typemap_name": "bool"
                                        },
                                        "decl": "bool hasAddr(bool in)",
                                        "declgen": "bool hasAddr(bool in +value)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "in": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "in",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&in",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "in",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_BOOL",
                                                    "shadow_var": "SHadow_in",
                                                    "stmt0": "c_bool_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "in",
                                                    "F_pointer": "SHPTR_in",
                                                    "c_var": "SH_in",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_BOOL",
                                                    "f_type": "logical",
                                                    "f_var": "in",
                                                    "sh_type": "SH_TYPE_BOOL",
                                                    "stmt0": "f_bool_scalar_in",
                                                    "stmt1": "f_bool_in",
                                                    "stmtc0": "c_bool_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "in",
                                                    "c_var_len": "Lin",
                                                    "cxx_member": ".",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "in",
                                                    "lua_var": "SH_Lua_in",
                                                    "pop_expr": "lua_toboolean(L, 1)",
                                                    "stmt0": "lua_bool_scalar_in",
                                                    "stmt1": "lua_bool_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "PyTypeObject": "PyBool_Type",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "bool",
                                                    "c_var": "in",
                                                    "ctor_expr": "in",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&in",
                                                    "cxx_type": "bool",
                                                    "cxx_var": "in",
                                                    "data_var": "SHData_in",
                                                    "numpy_type": "NPY_BOOL",
                                                    "py_object": "PyObject",
                                                    "py_var": "SHPy_in",
                                                    "size_var": "SHSize_in",
                                                    "stmt0": "py_bool_scalar_in",
                                                    "stmt1": "py_bool_in",
                                                    "value_var": "SHValue_in"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "in",
                                            "C_name": "AA_example_nested_ExClass1_has_addr",
                                            "C_prototype": "AA_example_nested_ExClass1 * self,\t bool in",
                                            "C_return_type": "bool",
                                            "F_C_arguments": "self,\t in",
                                            "F_C_call": "c_exclass1_has_addr",
                                            "F_C_name": "c_exclass1_has_addr",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t SH_in",
                                            "F_arguments": "obj,\t in",
                                            "F_name_function": "has_addr",
                                            "F_name_generic": "has_addr",
                                            "F_name_impl": "exclass1_has_addr",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "hasAddr",
                                            "LUA_name_impl": "l_example_nested_ExClass1_has_addr",
                                            "PY_name_impl": "PP_hasAddr",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "bool SHC_rv",
                                            "function_name": "hasAddr",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "has_addr"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_type": "bool",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHC_rv",
                                                "cxx_type": "bool",
                                                "cxx_var": "SHC_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_BOOL",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_bool_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "bool",
                                                "f_intent": "OUT",
                                                "f_kind": "C_BOOL",
                                                "f_type": "logical",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_BOOL",
                                                "stmt0": "f_bool_scalar_result",
                                                "stmt1": "f_bool_result",
                                                "stmtc0": "c_bool_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "lua_pushboolean(L, SHCXX_rv)",
                                                "stmt0": "lua_bool_scalar_result",
                                                "stmt1": "lua_bool_scalar_result"
                                            },
                                            "fmtpy": {
                                                "PyTypeObject": "PyBool_Type",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "bool",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_BOOL",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_bool_scalar_result",
                                                "stmt1": "py_bool_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "9 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "SplicerSpecial",
                                                "pointer": []
                                            },
                                            "params": [],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void SplicerSpecial()",
                                        "declgen": "void SplicerSpecial(void)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass1_splicer_special",
                                            "C_prototype": "AA_example_nested_ExClass1 * self",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass1_splicer_special",
                                            "F_C_name": "c_exclass1_splicer_special",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "splicer_special",
                                            "F_name_generic": "splicer_special",
                                            "F_name_impl": "exclass1_splicer_special",
                                            "F_subprogram": "subroutine",
                                            "LUA_name": "SplicerSpecial",
                                            "LUA_name_impl": "l_example_nested_ExClass1_splicer_special",
                                            "PY_name_impl": "PP_SplicerSpecial",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "SplicerSpecial",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "underscore_name": "splicer_special"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_subroutine",
                                                "stmt1": "lua_subroutine"
                                            }
                                        }
                                    }
                                ],
                                "name": "ExClass1",
                                "options": {},
                                "parse_keyword": "class",
                                "python": {
                                    "type": [
                                        "init",
                                        "repr",
                                        "richcompare"
                                    ]
                                },
                                "scope": "example::nested::ExClass1::",
                                "typemap_name": "example::nested::ExClass1",
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "CXX_this_call": "SH_this->",
                                    "C_header_filename": "wrapexample_nested_ExClass1.h",
                                    "C_impl_filename": "wrapexample_nested_ExClass1.cpp",
                                    "C_name_scope": "example_nested_ExClass1_",
                                    "C_type_name": "AA_example_nested_ExClass1",
                                    "F_derived_name": "exclass1",
                                    "F_name_scope": "exclass1_",
                                    "LUA_class_reg": "l_ExClass1_Reg",
                                    "LUA_ctor_name": "ExClass1",
                                    "LUA_metadata": "ExClass1.metatable",
                                    "LUA_this_call": "SH_this->self->",
                                    "LUA_userdata_member": "self",
                                    "LUA_userdata_type": "l_ExClass1_Type",
                                    "LUA_userdata_var": "SH_this",
                                    "PY_PyObject": "PP_ExClass1",
                                    "PY_PyTypeObject": "PP_ExClass1_Type",
                                    "PY_capsule_name": "PY_ExClass1_capsule_name",
                                    "PY_from_object_func": "PP_ExClass1_from_Object",
                                    "PY_this_call": "self->obj->",
                                    "PY_to_object_func": "PP_ExClass1_to_Object",
                                    "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                    "PY_type_filename": "pyexample_nested_ExClass1type.cpp",
                                    "class_scope": "ExClass1::",
                                    "cxx_class": "ExClass1",
                                    "cxx_type": "ExClass1",
                                    "file_scope": "example_nested_ExClass1",
                                    "hnamefunc0": "capsule_data_helper"
                                }
                            },
                            {
                                "<CLASS>": "****************************************",
                                "classes": [
                                    {
                                        "<CLASS>": "****************************************",
                                        "cxx_header": [],
                                        "name": "ExClass2Nested",
                                        "options": {},
                                        "parse_keyword": "class",
                                        "scope": "example::nested::ExClass2::ExClass2Nested::",
                                        "typemap_name": "example::nested::ExClass2Nested",
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_header_filename": "wrapexample_nested_ExClass2_ExClass2Nested.h",
                                            "C_impl_filename": "wrapexample_nested_ExClass2_ExClass2Nested.cpp",
                                            "C_name_scope": "example_nested_ExClass2_ExClass2Nested_",
                                            "C_type_name": "AA_example_nested_ExClass2_ExClass2Nested",
                                            "F_derived_name": "exclass2nested",
                                            "F_name_scope": "exclass2_exclass2nested_",
                                            "class_scope": "ExClass2Nested::",
                                            "cxx_class": "ExClass2Nested",
                                            "cxx_type": "ExClass2Nested",
                                            "file_scope": "example_nested_ExClass2_ExClass2Nested"
                                        }
                                    }
                                ],
                                "cxx_header": [
                                    "ExClass2.hpp"
                                ],
                                "functions": [
                                    {
                                        "<FUNCTION>": "14 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_F_C_index": "36",
                                        "_overloaded": true,
                                        "ast": {
                                            "attrs": {
                                                "_constructor": true,
                                                "_name": "ctor"
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "len_trim": "trim_name"
                                                    },
                                                    "const": true,
                                                    "declarator": {
                                                        "name": "name",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "ExClass2"
                                            ],
                                            "typemap_name": "example::nested::ExClass2"
                                        },
                                        "decl": "ExClass2(const string *name)",
                                        "declgen": "ExClass2(const string * name +len_trim(trim_name))",
                                        "doxygen": {
                                            "brief": "constructor"
                                        },
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "name": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_trim": "trim_name",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_name",
                                                    "stmt0": "c_string_*_in",
                                                    "stmt1": "c_string_*_in"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "name"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": " *",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_len": "Lname",
                                                    "cxx_member": "->",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "name",
                                                    "lua_var": "SH_Lua_name",
                                                    "pop_expr": "lua_tostring(L, 1)",
                                                    "stmt0": "lua_string_*_in",
                                                    "stmt1": "lua_string_*_in"
                                                },
                                                "fmtpy": {
                                                    "array_size": "1",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_type": "char",
                                                    "c_var": "name",
                                                    "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                                    "cxx_addr": "",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SH_name",
                                                    "data_var": "SHData_name",
                                                    "numpy_type": null,
                                                    "py_var": "SHPy_name",
                                                    "size_var": "SHSize_name",
                                                    "stmt0": "py_string_*_in",
                                                    "stmt1": "py_string_*_in",
                                                    "value_var": "SHValue_name"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "&SHCXX_name",
                                            "C_name": "AA_example_nested_ExClass2_ctor",
                                            "C_prototype": "const char * name,\t AA_example_nested_ExClass2 * SHadow_rv",
                                            "C_return_type": "AA_example_nested_ExClass2 *",
                                            "F_C_arguments": "name,\t SHT_crv",
                                            "F_C_call": "c_exclass2_ctor_bufferify",
                                            "F_C_name": "c_exclass2_ctor",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t SHT_rv%cxxmem",
                                            "F_arguments": "name",
                                            "F_name_function": "ctor",
                                            "F_name_generic": "exclass2",
                                            "F_name_impl": "exclass2_ctor",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "ctor",
                                            "LUA_name_impl": "l_example_nested_ExClass2_ctor",
                                            "PY_name_impl": "PP_ExClass2_tp_init",
                                            "PY_type_impl": "PP_ExClass2_tp_init",
                                            "PY_type_method": "tp_init",
                                            "cxx_rv_decl": "example::nested::ExClass2 SHCXX_rv",
                                            "function_name": "ctor",
                                            "underscore_name": "ctor"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "AA_example_nested_ExClass2",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_type": "example::nested::ExClass2",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "2",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_shadow_scalar_ctor",
                                                "stmt1": "c_shadow_scalar_ctor"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "example::nested::ExClass2",
                                                "f_intent": "OUT",
                                                "f_type": "type(exclass2)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_shadow_ctor",
                                                "stmt1": "f_shadow_ctor",
                                                "stmtc0": "c_shadow_ctor",
                                                "stmtc1": "c_shadow_ctor"
                                            },
                                            "fmtl": {
                                                "c_var": "static_cast<LUAc_constvoid *>(\tSHCXX_rv)",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_var": "SHCXX_rv",
                                                "stmt0": "lua_shadow_scalar_ctor",
                                                "stmt1": "lua_shadow_ctor"
                                            },
                                            "fmtpy": {
                                                "PY_build_format": "O",
                                                "PY_to_object_idtor_func": "PP_ExClass2_to_Object_idtor",
                                                "PyObject": "PP_ExClass2",
                                                "PyTypeObject": "PP_ExClass2_Type",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "example::nested::ExClass2",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_default",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv",
                                                "vargs": "SHCXX_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "36 ****************************************",
                                        "_PTR_C_CXX_index": "14",
                                        "_generated": "arg_to_buffer",
                                        "_overloaded": true,
                                        "ast": {
                                            "attrs": {
                                                "_constructor": true,
                                                "_name": "ctor"
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "len_trim": "trim_name"
                                                    },
                                                    "const": true,
                                                    "declarator": {
                                                        "name": "name",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "stmts_suffix": "buf",
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "ExClass2"
                                            ],
                                            "typemap_name": "example::nested::ExClass2"
                                        },
                                        "decl": "ExClass2(const string *name)",
                                        "declgen": "ExClass2(const string * name +len_trim(trim_name))",
                                        "doxygen": {
                                            "brief": "constructor"
                                        },
                                        "generated_suffix": "buf",
                                        "options": {
                                            "F_create_generic": true
                                        },
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "name": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "name",
                                                    "c_var_trim": "trim_name",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_name",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_name",
                                                    "stmt0": "c_string_*_in_buf",
                                                    "stmt1": "c_string_*_in_buf"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "name",
                                                    "F_pointer": "SHPTR_name",
                                                    "c_var": "name",
                                                    "c_var_trim": "trim_name",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "name",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_*_in_buf",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_string_*_in_buf",
                                                    "stmtc1": "c_string_*_in_buf"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "&SHCXX_name",
                                            "C_name": "AA_example_nested_ExClass2_ctor_bufferify",
                                            "C_prototype": "const char * name,\t int trim_name,\t AA_example_nested_ExClass2 * SHadow_rv",
                                            "C_return_type": "AA_example_nested_ExClass2 *",
                                            "F_C_arguments": "name,\t trim_name,\t SHT_crv",
                                            "F_C_name": "c_exclass2_ctor_bufferify",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_name_generic": "exclass2",
                                            "cxx_rv_decl": "example::nested::ExClass2 SHCXX_rv",
                                            "function_name": "ctor",
                                            "function_suffix": "_bufferify",
                                            "underscore_name": "ctor"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "AA_example_nested_ExClass2",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_type": "example::nested::ExClass2",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "2",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_shadow_scalar_ctor_buf",
                                                "stmt1": "c_shadow_scalar_ctor"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "f_intent": "OUT",
                                                "f_type": "type(exclass2)"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "15 ****************************************",
                                        "ast": {
                                            "attrs": {
                                                "_destructor": "ExClass2",
                                                "_name": "dtor"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "~ExClass2()",
                                        "declgen": "~ExClass2(void)",
                                        "doxygen": {
                                            "brief": "destructor"
                                        },
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_dtor",
                                            "C_prototype": "AA_example_nested_ExClass2 * self",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_dtor",
                                            "F_C_name": "c_exclass2_dtor",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "delete",
                                            "F_name_generic": "dtor",
                                            "F_name_impl": "exclass2_dtor",
                                            "F_subprogram": "subroutine",
                                            "LUA_name": "dtor",
                                            "LUA_name_impl": "l_example_nested_ExClass2_dtor",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "dtor",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_shadow_dtor",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_shadow_dtor",
                                            "stmtc1": "c_shadow_dtor",
                                            "underscore_name": "dtor"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_shadow_scalar_dtor",
                                                "stmt1": "lua_shadow_dtor"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "16 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_F_C_index": "37",
                                        "ast": {
                                            "attrs": {
                                                "len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "getName",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "func_const": true,
                                            "metaattrs": {
                                                "deref": "result-as-arg",
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getName() const",
                                        "declgen": "const string & getName(void) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name",
                                            "C_prototype": "const AA_example_nested_ExClass2 * self",
                                            "C_return_type": "const char *",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_name_bufferify",
                                            "F_C_name": "c_exclass2_get_name",
                                            "F_C_pure_clause": "pure ",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv,\t len(SHT_rv, kind=C_INT)",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_name",
                                            "F_name_generic": "get_name",
                                            "F_name_impl": "exclass2_get_name",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getName",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_name",
                                            "PY_name_impl": "PP_getName",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getName",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "const ",
                                                "c_rv_decl": "const char * SHC_rv",
                                                "c_type": "char",
                                                "c_val": "SHCXX_rv.c_str()",
                                                "c_var": "SHC_rv",
                                                "c_var_len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_string_&_result",
                                                "stmt1": "c_string_&_result"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "c_var_len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})",
                                                "cxx_type": "std::string",
                                                "f_intent": "OUT",
                                                "f_kind": "C_CHAR",
                                                "f_type": "character(*)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_string_scalar_result_buf_result-as-arg",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_string_scalar_result_buf_result-as-arg",
                                                "stmtc1": "c_string_scalar_result_buf"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv.c_str()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv.c_str()",
                                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                "stmt0": "lua_string_&_result",
                                                "stmt1": "lua_string_&_result"
                                            },
                                            "fmtpy": {
                                                "array_size": "1",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_string_&_result",
                                                "stmt1": "py_string_&_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "37 ****************************************",
                                        "_PTR_C_CXX_index": "16",
                                        "_generated": "arg_to_buffer",
                                        "ast": {
                                            "attrs": {
                                                "len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})"
                                            },
                                            "declarator": {
                                                "name": "getName",
                                                "pointer": []
                                            },
                                            "func_const": true,
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "len": "NSHF_rv"
                                                    },
                                                    "declarator": {
                                                        "name": "SHF_rv",
                                                        "pointer": [
                                                            {
                                                                "ptr": "&"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "out",
                                                        "is_result": true
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "const string& getName() const",
                                        "declgen": "void getName(string & SHF_rv +len(NSHF_rv)) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))",
                                        "generated_suffix": "buf",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "SHF_rv": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "SHF_rv",
                                                    "c_var_len": "NSHF_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_SHF_rv",
                                                    "stmt0": "c_string_&_result_buf",
                                                    "stmt1": "c_string_&_result_buf"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "SHF_rv",
                                                    "F_pointer": "SHPTR_SHF_rv",
                                                    "c_var": "SHT_rv",
                                                    "c_var_len": "NSHF_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "SHT_rv",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_&_result_buf",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_string_&_result_buf",
                                                    "stmtc1": "c_string_&_result_buf"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name_bufferify",
                                            "C_prototype": "const AA_example_nested_ExClass2 * self,\t char * SHF_rv,\t int NSHF_rv",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t SHF_rv,\t NSHF_rv",
                                            "F_C_name": "c_exclass2_get_name_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getName",
                                            "function_suffix": "_bufferify",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "void",
                                                "c_var": "SHC_rv",
                                                "c_var_len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_type": "void",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_CPTR",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_void_scalar_result_buf",
                                                "stmt1": "c_default"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "17 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_F_C_index": "38",
                                        "ast": {
                                            "const": true,
                                            "declarator": {
                                                "name": "getName2",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "deref": "allocatable",
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "const string& getName2()",
                                        "declgen": "const string & getName2(void)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name2",
                                            "C_prototype": "AA_example_nested_ExClass2 * self",
                                            "C_return_type": "const char *",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_name2_bufferify",
                                            "F_C_name": "c_exclass2_get_name2",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t DSHF_rv",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_name2",
                                            "F_name_generic": "get_name2",
                                            "F_name_impl": "exclass2_get_name2",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getName2",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_name2",
                                            "PY_name_impl": "PP_getName2",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getName2",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name2"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "const ",
                                                "c_rv_decl": "const char * SHC_rv",
                                                "c_type": "char",
                                                "c_val": "SHCXX_rv.c_str()",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_string_&_result",
                                                "stmt1": "c_string_&_result"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "std::string",
                                                "f_intent": "OUT",
                                                "f_kind": "C_CHAR",
                                                "f_type": "character(*)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_string_scalar_result_buf_allocatable",
                                                "stmt1": "f_string_scalar_result_buf_allocatable",
                                                "stmtc0": "c_string_scalar_result_buf_allocatable",
                                                "stmtc1": "c_string_scalar_result_buf_allocatable"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv.c_str()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv.c_str()",
                                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                "stmt0": "lua_string_&_result",
                                                "stmt1": "lua_string_&_result"
                                            },
                                            "fmtpy": {
                                                "array_size": "1",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_string_&_result",
                                                "stmt1": "py_string_&_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "38 ****************************************",
                                        "_PTR_C_CXX_index": "17",
                                        "_generated": "arg_to_buffer",
                                        "ast": {
                                            "declarator": {
                                                "name": "getName2",
                                                "pointer": []
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "context": "DSHF_rv"
                                                    },
                                                    "const": true,
                                                    "declarator": {
                                                        "name": "SHF_rv",
                                                        "pointer": [
                                                            {
                                                                "ptr": "&"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "deref": "allocatable",
                                                        "intent": "out",
                                                        "is_result": true
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "const string& getName2()",
                                        "declgen": "void getName2(const string & SHF_rv +context(DSHF_rv))",
                                        "generated_suffix": "buf",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "SHF_rv": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "SHF_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_SHF_rv",
                                                    "stmt0": "c_string_&_result_buf_allocatable",
                                                    "stmt1": "c_string_&_result_buf_allocatable"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "SHF_rv",
                                                    "F_pointer": "SHPTR_SHF_rv",
                                                    "c_var": "SHT_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "SHT_rv",
                                                    "hnamefunc0": "AA_SHROUD_copy_string_and_free",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_&_result_buf_allocatable",
                                                    "stmt1": "f_string_&_result_buf_allocatable",
                                                    "stmtc0": "c_string_&_result_buf_allocatable",
                                                    "stmtc1": "c_string_&_result_buf_allocatable"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name2_bufferify",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_SHROUD_array *DSHF_rv",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t DSHF_rv",
                                            "F_C_name": "c_exclass2_get_name2_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "const std::string & SHCXX_rv",
                                            "function_name": "getName2",
                                            "function_suffix": "_bufferify",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name2"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "void",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_type": "void",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_CPTR",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_void_scalar_result_buf",
                                                "stmt1": "c_default"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "18 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_F_C_index": "39",
                                        "ast": {
                                            "declarator": {
                                                "name": "getName3",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "func_const": true,
                                            "metaattrs": {
                                                "deref": "allocatable",
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "string& getName3() const",
                                        "declgen": "string & getName3(void) const",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name3",
                                            "C_prototype": "const AA_example_nested_ExClass2 * self",
                                            "C_return_type": "char *",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_name3_bufferify",
                                            "F_C_name": "c_exclass2_get_name3",
                                            "F_C_pure_clause": "pure ",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t DSHF_rv",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_name3",
                                            "F_name_generic": "get_name3",
                                            "F_name_impl": "exclass2_get_name3",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getName3",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_name3",
                                            "PY_name_impl": "PP_getName3",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "std::string & SHCXX_rv",
                                            "function_name": "getName3",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name3"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_rv_decl": "char * SHC_rv",
                                                "c_type": "char",
                                                "c_val": "SHCXX_rv.c_str()",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_string_&_result",
                                                "stmt1": "c_string_&_result"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "std::string",
                                                "f_intent": "OUT",
                                                "f_kind": "C_CHAR",
                                                "f_type": "character(*)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_string_scalar_result_buf_allocatable",
                                                "stmt1": "f_string_scalar_result_buf_allocatable",
                                                "stmtc0": "c_string_scalar_result_buf_allocatable",
                                                "stmtc1": "c_string_scalar_result_buf_allocatable"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv.c_str()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv.c_str()",
                                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                "stmt0": "lua_string_&_result",
                                                "stmt1": "lua_string_&_result"
                                            },
                                            "fmtpy": {
                                                "array_size": "1",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_string_&_result",
                                                "stmt1": "py_string_&_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "39 ****************************************",
                                        "_PTR_C_CXX_index": "18",
                                        "_generated": "arg_to_buffer",
                                        "ast": {
                                            "declarator": {
                                                "name": "getName3",
                                                "pointer": []
                                            },
                                            "func_const": true,
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "context": "DSHF_rv"
                                                    },
                                                    "declarator": {
                                                        "name": "SHF_rv",
                                                        "pointer": [
                                                            {
                                                                "ptr": "&"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "deref": "allocatable",
                                                        "intent": "out",
                                                        "is_result": true
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "string& getName3() const",
                                        "declgen": "void getName3(string & SHF_rv +context(DSHF_rv)) const",
                                        "generated_suffix": "buf",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "SHF_rv": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "SHF_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_SHF_rv",
                                                    "stmt0": "c_string_&_result_buf_allocatable",
                                                    "stmt1": "c_string_&_result_buf_allocatable"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "SHF_rv",
                                                    "F_pointer": "SHPTR_SHF_rv",
                                                    "c_var": "SHT_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "SHT_rv",
                                                    "hnamefunc0": "AA_SHROUD_copy_string_and_free",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_&_result_buf_allocatable",
                                                    "stmt1": "f_string_&_result_buf_allocatable",
                                                    "stmtc0": "c_string_&_result_buf_allocatable",
                                                    "stmtc1": "c_string_&_result_buf_allocatable"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name3_bufferify",
                                            "C_prototype": "const AA_example_nested_ExClass2 * self,\t AA_SHROUD_array *DSHF_rv",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t DSHF_rv",
                                            "F_C_name": "c_exclass2_get_name3_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "std::string & SHCXX_rv",
                                            "function_name": "getName3",
                                            "function_suffix": "_bufferify",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name3"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "void",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_type": "void",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_CPTR",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_void_scalar_result_buf",
                                                "stmt1": "c_default"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "19 ****************************************",
                                        "C_generated_path": [
                                            "arg_to_buffer"
                                        ],
                                        "_PTR_F_C_index": "40",
                                        "ast": {
                                            "declarator": {
                                                "name": "getName4",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "deref": "allocatable",
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        "decl": "string& getName4()",
                                        "declgen": "string & getName4(void)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name4",
                                            "C_prototype": "AA_example_nested_ExClass2 * self",
                                            "C_return_type": "char *",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_name4_bufferify",
                                            "F_C_name": "c_exclass2_get_name4",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t DSHF_rv",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_name4",
                                            "F_name_generic": "get_name4",
                                            "F_name_impl": "exclass2_get_name4",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getName4",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_name4",
                                            "PY_name_impl": "PP_getName4",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "std::string & SHCXX_rv",
                                            "function_name": "getName4",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name4"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_rv_decl": "char * SHC_rv",
                                                "c_type": "char",
                                                "c_val": "SHCXX_rv.c_str()",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_string_&_result",
                                                "stmt1": "c_string_&_result"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "std::string",
                                                "f_intent": "OUT",
                                                "f_kind": "C_CHAR",
                                                "f_type": "character(*)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_string_scalar_result_buf_allocatable",
                                                "stmt1": "f_string_scalar_result_buf_allocatable",
                                                "stmtc0": "c_string_scalar_result_buf_allocatable",
                                                "stmtc1": "c_string_scalar_result_buf_allocatable"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv.c_str()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv.c_str()",
                                                "push_expr": "lua_pushstring(L, SHCXX_rv.c_str())",
                                                "stmt0": "lua_string_&_result",
                                                "stmt1": "lua_string_&_result"
                                            },
                                            "fmtpy": {
                                                "array_size": "1",
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "std::string",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_string_&_result",
                                                "stmt1": "py_string_&_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "40 ****************************************",
                                        "_PTR_C_CXX_index": "19",
                                        "_generated": "arg_to_buffer",
                                        "ast": {
                                            "declarator": {
                                                "name": "getName4",
                                                "pointer": []
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "context": "DSHF_rv"
                                                    },
                                                    "declarator": {
                                                        "name": "SHF_rv",
                                                        "pointer": [
                                                            {
                                                                "ptr": "&"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "deref": "allocatable",
                                                        "intent": "out",
                                                        "is_result": true
                                                    },
                                                    "specifier": [
                                                        "string"
                                                    ],
                                                    "typemap_name": "std::string"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "string& getName4()",
                                        "declgen": "void getName4(string & SHF_rv +context(DSHF_rv))",
                                        "generated_suffix": "buf",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "SHF_rv": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "SHF_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_rv",
                                                    "cxx_type": "std::string",
                                                    "cxx_var": "SHCXX_rv",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_SHF_rv",
                                                    "stmt0": "c_string_&_result_buf_allocatable",
                                                    "stmt1": "c_string_&_result_buf_allocatable"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "SHF_rv",
                                                    "F_pointer": "SHPTR_SHF_rv",
                                                    "c_var": "SHT_rv",
                                                    "c_var_context": "DSHF_rv",
                                                    "f_intent": "OUT",
                                                    "f_kind": "C_CHAR",
                                                    "f_type": "character(*)",
                                                    "f_var": "SHT_rv",
                                                    "hnamefunc0": "AA_SHROUD_copy_string_and_free",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_string_&_result_buf_allocatable",
                                                    "stmt1": "f_string_&_result_buf_allocatable",
                                                    "stmtc0": "c_string_&_result_buf_allocatable",
                                                    "stmtc1": "c_string_&_result_buf_allocatable"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name4_bufferify",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_SHROUD_array *DSHF_rv",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t DSHF_rv",
                                            "F_C_name": "c_exclass2_get_name4_bufferify",
                                            "F_C_subprogram": "subroutine",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "std::string & SHCXX_rv",
                                            "function_name": "getName4",
                                            "function_suffix": "_bufferify",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name4"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "void",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_type": "void",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_CPTR",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_void_scalar_result_buf",
                                                "stmt1": "c_default"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "20 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "GetNameLength",
                                                "pointer": []
                                            },
                                            "func_const": true,
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "decl": "int GetNameLength() const",
                                        "declgen": "int GetNameLength(void) const",
                                        "doxygen": {
                                            "brief": "helper function for Fortran"
                                        },
                                        "options": {},
                                        "splicer": {
                                            "c": [
                                                "return SH_this->getName().length();"
                                            ]
                                        },
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_name_length",
                                            "C_prototype": "const AA_example_nested_ExClass2 * self",
                                            "C_return_type": "int",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_name_length",
                                            "F_C_name": "c_exclass2_get_name_length",
                                            "F_C_pure_clause": "pure ",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_name_length",
                                            "F_name_generic": "get_name_length",
                                            "F_name_impl": "exclass2_get_name_length",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "GetNameLength",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_name_length",
                                            "PY_name_impl": "PP_GetNameLength",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "int SHC_rv",
                                            "function_name": "GetNameLength",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_name_length"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_type": "int",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHC_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHC_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_INT",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_native_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "int",
                                                "f_intent": "OUT",
                                                "f_kind": "C_INT",
                                                "f_type": "integer(C_INT)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_INT",
                                                "stmt0": "f_native_scalar_result",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_native_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                "stmt0": "lua_native_scalar_result",
                                                "stmt1": "lua_native_scalar_result"
                                            },
                                            "fmtpy": {
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_INT",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_native_scalar_result",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "21 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "get_class1",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "const": true,
                                                    "declarator": {
                                                        "name": "in",
                                                        "pointer": [
                                                            {
                                                                "ptr": "*"
                                                            }
                                                        ]
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "ExClass1"
                                                    ],
                                                    "typemap_name": "example::nested::ExClass1"
                                                }
                                            ],
                                            "specifier": [
                                                "ExClass1"
                                            ],
                                            "typemap_name": "example::nested::ExClass1"
                                        },
                                        "decl": "ExClass1 *get_class1(const ExClass1 *in)",
                                        "declgen": "ExClass1 * get_class1(const ExClass1 * in)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "in": {
                                                "fmtc": {
                                                    "c_addr": "",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_member": "->",
                                                    "c_var": "in",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "const_cast<example::nested::ExClass1 *>\t(SHCXX_in)",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "SHCXX_in",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "shadow_var": "SHadow_in",
                                                    "stmt0": "c_shadow_*_in",
                                                    "stmt1": "c_shadow_in"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "in",
                                                    "F_pointer": "SHPTR_in",
                                                    "c_var": "in",
                                                    "f_intent": "IN",
                                                    "f_type": "type(exclass1)",
                                                    "f_var": "in",
                                                    "sh_type": "SH_TYPE_OTHER",
                                                    "stmt0": "f_shadow_*_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_shadow_*_in",
                                                    "stmtc1": "c_shadow_in"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": " *",
                                                    "c_member": "->",
                                                    "c_var": "\t(l_ExClass2_Type *)\t luaL_checkudata(\tL, 1, \"ExClass2.metatable\")",
                                                    "c_var_len": "Lin",
                                                    "cxx_member": "->",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "in",
                                                    "lua_var": "SH_Lua_in",
                                                    "pop_expr": "static_cast<example::nested::ExClass1 *>\t(\t(l_ExClass2_Type *)\t luaL_checkudata(\tL, 1, \"ExClass2.metatable\")->addr)",
                                                    "stmt0": "lua_shadow_*_in",
                                                    "stmt1": "lua_shadow_*_in"
                                                },
                                                "fmtpy": {
                                                    "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                    "PyObject": "PP_ExClass1",
                                                    "PyTypeObject": "PP_ExClass1_Type",
                                                    "array_size": "1",
                                                    "c_const": "const ",
                                                    "c_deref": "*",
                                                    "c_type": "AA_example_nested_ExClass1",
                                                    "c_var": "in",
                                                    "ctor_expr": "*in",
                                                    "cxx_addr": "",
                                                    "cxx_member": "->",
                                                    "cxx_nonconst_ptr": "const_cast<example::nested::ExClass1 *>\t(in)",
                                                    "cxx_type": "example::nested::ExClass1",
                                                    "cxx_var": "in",
                                                    "data_var": "SHData_in",
                                                    "numpy_type": null,
                                                    "py_object": "PP_ExClass1",
                                                    "py_var": "SHPy_in",
                                                    "size_var": "SHSize_in",
                                                    "stmt0": "py_shadow_*_in",
                                                    "stmt1": "py_shadow_*_in",
                                                    "value_var": "SHValue_in"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "SHCXX_in",
                                            "C_name": "AA_example_nested_ExClass2_get_class1",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t AA_example_nested_ExClass1 * in,\t AA_example_nested_ExClass1 * SHadow_rv",
                                            "C_return_type": "AA_example_nested_ExClass1 *",
                                            "F_C_arguments": "self,\t in,\t SHT_crv",
                                            "F_C_call": "c_exclass2_get_class1",
                                            "F_C_name": "c_exclass2_get_class1",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem,\t in%cxxmem,\t SHT_rv%cxxmem",
                                            "F_arguments": "obj,\t in",
                                            "F_name_function": "get_class1",
                                            "F_name_generic": "get_class1",
                                            "F_name_impl": "exclass2_get_class1",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "get_class1",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_class1",
                                            "PY_name_impl": "PP_get_class1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "example::nested::ExClass1 * SHCXX_rv",
                                            "function_name": "get_class1",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_class1"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_type": "AA_example_nested_ExClass1",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_nonconst_ptr": "SHCXX_rv",
                                                "cxx_type": "example::nested::ExClass1",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_shadow_*_result",
                                                "stmt1": "c_shadow_result"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "example::nested::ExClass1",
                                                "f_intent": "OUT",
                                                "f_type": "type(exclass1)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_OTHER",
                                                "stmt0": "f_shadow_*_result",
                                                "stmt1": "f_shadow_result",
                                                "stmtc0": "c_shadow_*_result",
                                                "stmtc1": "c_shadow_result"
                                            },
                                            "fmtl": {
                                                "c_var": "static_cast<void *>(\tSHCXX_rv)",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "static_cast<void *>(\tSHCXX_rv)",
                                                "push_expr": "PUSH",
                                                "stmt0": "lua_shadow_*_result",
                                                "stmt1": "lua_shadow_*_result"
                                            },
                                            "fmtpy": {
                                                "PY_to_object_idtor_func": "PP_ExClass1_to_Object_idtor",
                                                "PyObject": "PP_ExClass1",
                                                "PyTypeObject": "PP_ExClass1_Type",
                                                "array_size": "1",
                                                "c_deref": "*",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "*SHCXX_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_nonconst_ptr": "SHCXX_rv",
                                                "cxx_type": "example::nested::ExClass1",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_shadow_*_result",
                                                "stmt1": "py_shadow_*_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "27 ****************************************",
                                        "_generated": "has_default_arg",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void * declare(TypeID type +value)",
                                        "fortran_generic": [
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "function_suffix": "_int",
                                                "generic": "(int len=1)"
                                            },
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "function_suffix": "_long",
                                                "generic": "(long len=1)"
                                            }
                                        ],
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {},
                                        "zz_fmtdict": {
                                            "function_name": "declare",
                                            "function_suffix": "_0",
                                            "underscore_name": "declare"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "34 ****************************************",
                                        "_generated": "return_this",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void declare(TypeID type +value)",
                                        "fortran_generic": [
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "function_suffix": "_int",
                                                "generic": "(int len=1)"
                                            },
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "function_suffix": "_long",
                                                "generic": "(long len=1)"
                                            }
                                        ],
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "type": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "type",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SHCXX_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SHCXX_type",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "shadow_var": "SHadow_type",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "type",
                                                    "F_pointer": "SHPTR_type",
                                                    "c_var": "type",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_var": "type",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "SHCXX_type",
                                            "C_name": "AA_example_nested_ExClass2_declare_0",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t int type",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t type",
                                            "F_C_name": "c_exclass2_declare_0",
                                            "F_C_subprogram": "subroutine",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "declare",
                                            "function_suffix": "_0",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "c",
                                            "stmt1": "c_default",
                                            "underscore_name": "declare"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "41 ****************************************",
                                        "C_generated_path": [
                                            "fortran_generic",
                                            "return_this"
                                        ],
                                        "_PTR_F_C_index": "34",
                                        "_generated": "fortran_generic",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "len",
                                                        "pointer": []
                                                    },
                                                    "init": 1,
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void declare(TypeID type +value, int len=1 +value)",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "fortran": true
                                        },
                                        "zz_fmtdict": {
                                            "F_C_call": "c_exclass2_declare_0",
                                            "F_arg_c_call": "obj%cxxmem,\t type",
                                            "F_arguments": "obj,\t type",
                                            "F_name_function": "declare_0_int",
                                            "F_name_generic": "declare",
                                            "F_name_impl": "exclass2_declare_0_int",
                                            "F_subprogram": "subroutine",
                                            "function_name": "declare",
                                            "function_suffix": "_0_int",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "underscore_name": "declare"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "42 ****************************************",
                                        "C_generated_path": [
                                            "fortran_generic",
                                            "return_this"
                                        ],
                                        "_PTR_F_C_index": "34",
                                        "_generated": "fortran_generic",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "len",
                                                        "pointer": []
                                                    },
                                                    "init": 1,
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "long"
                                                    ],
                                                    "typemap_name": "long"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void declare(TypeID type +value, long len=1 +value)",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "fortran": true
                                        },
                                        "zz_fmtdict": {
                                            "F_C_call": "c_exclass2_declare_0",
                                            "F_arg_c_call": "obj%cxxmem,\t type",
                                            "F_arguments": "obj,\t type",
                                            "F_name_function": "declare_0_long",
                                            "F_name_generic": "declare",
                                            "F_name_impl": "exclass2_declare_0_long",
                                            "F_subprogram": "subroutine",
                                            "function_name": "declare",
                                            "function_suffix": "_0_long",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "underscore_name": "declare"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "22 ****************************************",
                                        "_default_funcs": [
                                            27
                                        ],
                                        "_has_default_arg": true,
                                        "_nargs": [
                                            1,
                                            2
                                        ],
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "len",
                                                        "pointer": []
                                                    },
                                                    "init": 1,
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "SidreLength"
                                                    ],
                                                    "typemap_name": "SidreLength"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void * declare(TypeID type +value, SidreLength len=1 +value)",
                                        "fortran_generic": [
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "function_suffix": "_int",
                                                "generic": "(int len=1)"
                                            },
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "function_suffix": "_long",
                                                "generic": "(long len=1)"
                                            }
                                        ],
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "len": {
                                                "fmtl": {
                                                    "LUA_index": 2,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "len",
                                                    "c_var_len": "Llen",
                                                    "cxx_member": ".",
                                                    "cxx_type": "SidreLength",
                                                    "cxx_var": "len",
                                                    "lua_var": "SH_Lua_len",
                                                    "pop_expr": "lua_tointeger(L, 2)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "SIDRE_SidreLength",
                                                    "c_var": "len",
                                                    "ctor_expr": "len",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&len",
                                                    "cxx_type": "SidreLength",
                                                    "cxx_var": "len",
                                                    "data_var": "SHData_len",
                                                    "numpy_type": "NPY_LONG",
                                                    "py_var": "SHPy_len",
                                                    "size_var": "SHSize_len",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_len"
                                                }
                                            },
                                            "type": {
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "lua_tointeger(L, 1)",
                                                    "c_var_len": "Ltype",
                                                    "cxx_member": ".",
                                                    "cxx_type": "TypeID",
                                                    "cxx_var": "type",
                                                    "lua_var": "SH_Lua_type",
                                                    "pop_expr": "getTypeID(lua_tointeger(L, 1))",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "int",
                                                    "c_var": "type",
                                                    "ctor_expr": "type",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SH_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SH_type",
                                                    "data_var": "SHData_type",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_type",
                                                    "size_var": "SHSize_type",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_type"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "LUA_name": "declare",
                                            "LUA_name_impl": "l_example_nested_ExClass2_declare",
                                            "PY_cleanup_decref": "Py_XDECREF",
                                            "PY_name_impl": "PP_declare_1",
                                            "function_name": "declare",
                                            "function_suffix": "_1",
                                            "underscore_name": "declare"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "PUSH",
                                                "stmt0": "lua_void_*_result",
                                                "stmt1": "lua_void_*_result"
                                            },
                                            "fmtpy": {
                                                "array_size": "1",
                                                "c_deref": "*",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "",
                                                "cxx_member": "->",
                                                "cxx_nonconst_ptr": "SHCXX_rv",
                                                "cxx_type": "void",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": null,
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_void_*_result",
                                                "stmt1": "py_void_*_result",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "35 ****************************************",
                                        "_default_funcs": [
                                            27
                                        ],
                                        "_generated": "return_this",
                                        "_has_default_arg": true,
                                        "_nargs": [
                                            1,
                                            2
                                        ],
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "len",
                                                        "pointer": []
                                                    },
                                                    "init": 1,
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "SidreLength"
                                                    ],
                                                    "typemap_name": "SidreLength"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void declare(TypeID type +value, SidreLength len=1 +value)",
                                        "fortran_generic": [
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "function_suffix": "_int",
                                                "generic": "(int len=1)"
                                            },
                                            {
                                                "decls": [
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "type",
                                                            "pointer": []
                                                        },
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "TypeID"
                                                        ],
                                                        "typemap_name": "TypeID"
                                                    },
                                                    {
                                                        "attrs": {
                                                            "value": true
                                                        },
                                                        "declarator": {
                                                            "name": "len",
                                                            "pointer": []
                                                        },
                                                        "init": 1,
                                                        "metaattrs": {
                                                            "intent": "in"
                                                        },
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "function_suffix": "_long",
                                                "generic": "(long len=1)"
                                            }
                                        ],
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "c": true,
                                            "f_c": true
                                        },
                                        "zz_fmtargs": {
                                            "len": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "len",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&len",
                                                    "cxx_type": "SidreLength",
                                                    "cxx_var": "len",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "shadow_var": "SHadow_len",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "len",
                                                    "F_pointer": "SHPTR_len",
                                                    "c_var": "len",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_LONG",
                                                    "f_type": "integer(C_LONG)",
                                                    "f_var": "len",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                }
                                            },
                                            "type": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "type",
                                                    "cxx_addr": "&",
                                                    "cxx_decl": "TypeID SHCXX_type",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&SHCXX_type",
                                                    "cxx_type": "TypeID",
                                                    "cxx_val": "getTypeID(type)",
                                                    "cxx_var": "SHCXX_type",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "shadow_var": "SHadow_type",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "type",
                                                    "F_pointer": "SHPTR_type",
                                                    "c_var": "type",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_var": "type",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "C_call_list": "SHCXX_type,\t len",
                                            "C_name": "AA_example_nested_ExClass2_declare_1",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t int type,\t SIDRE_SidreLength len",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t type,\t len",
                                            "F_C_name": "c_exclass2_declare_1",
                                            "F_C_subprogram": "subroutine",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "declare",
                                            "function_suffix": "_1",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "c",
                                            "stmt1": "c_default",
                                            "underscore_name": "declare"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "43 ****************************************",
                                        "C_generated_path": [
                                            "fortran_generic",
                                            "return_this"
                                        ],
                                        "_PTR_F_C_index": "35",
                                        "_default_funcs": [
                                            27
                                        ],
                                        "_generated": "fortran_generic",
                                        "_has_default_arg": true,
                                        "_nargs": [
                                            1,
                                            2
                                        ],
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "len",
                                                        "pointer": []
                                                    },
                                                    "init": 1,
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void declare(TypeID type +value, int len=1 +value)",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "fortran": true
                                        },
                                        "zz_fmtdict": {
                                            "F_C_call": "c_exclass2_declare_1",
                                            "F_arg_c_call": "obj%cxxmem,\t type,\t int(len, C_LONG)",
                                            "F_arguments": "obj,\t type,\t len",
                                            "F_name_function": "declare_1_int",
                                            "F_name_generic": "declare",
                                            "F_name_impl": "exclass2_declare_1_int",
                                            "F_subprogram": "subroutine",
                                            "function_name": "declare",
                                            "function_suffix": "_1_int",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "underscore_name": "declare"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "44 ****************************************",
                                        "C_generated_path": [
                                            "fortran_generic",
                                            "return_this"
                                        ],
                                        "_PTR_F_C_index": "35",
                                        "_default_funcs": [
                                            27
                                        ],
                                        "_generated": "fortran_generic",
                                        "_has_default_arg": true,
                                        "_nargs": [
                                            1,
                                            2
                                        ],
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "declare",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "type",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "TypeID"
                                                    ],
                                                    "typemap_name": "TypeID"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "len",
                                                        "pointer": []
                                                    },
                                                    "init": 1,
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "long"
                                                    ],
                                                    "typemap_name": "long"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void* declare(TypeID type, SidreLength len = 1)",
                                        "declgen": "void declare(TypeID type +value, long len=1 +value)",
                                        "options": {},
                                        "return_this": true,
                                        "wrap": {
                                            "fortran": true
                                        },
                                        "zz_fmtdict": {
                                            "F_C_call": "c_exclass2_declare_1",
                                            "F_arg_c_call": "obj%cxxmem,\t type,\t int(len, C_LONG)",
                                            "F_arguments": "obj,\t type,\t len",
                                            "F_name_function": "declare_1_long",
                                            "F_name_generic": "declare",
                                            "F_name_impl": "exclass2_declare_1_long",
                                            "F_subprogram": "subroutine",
                                            "function_name": "declare",
                                            "function_suffix": "_1_long",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "underscore_name": "declare"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "23 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "destroyall",
                                                "pointer": []
                                            },
                                            "params": [],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "void destroyall()",
                                        "declgen": "void destroyall(void)",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_destroyall",
                                            "C_prototype": "AA_example_nested_ExClass2 * self",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_destroyall",
                                            "F_C_name": "c_exclass2_destroyall",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "destroyall",
                                            "F_name_generic": "destroyall",
                                            "F_name_impl": "exclass2_destroyall",
                                            "F_subprogram": "subroutine",
                                            "LUA_name": "destroyall",
                                            "LUA_name_impl": "l_example_nested_ExClass2_destroyall",
                                            "PY_name_impl": "PP_destroyall",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "destroyall",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "underscore_name": "destroyall"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_subroutine",
                                                "stmt1": "lua_subroutine"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "24 ****************************************",
                                        "ast": {
                                            "declarator": {
                                                "name": "getTypeID",
                                                "pointer": []
                                            },
                                            "func_const": true,
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "TypeID"
                                            ],
                                            "typemap_name": "TypeID"
                                        },
                                        "decl": "TypeID getTypeID() const",
                                        "declgen": "TypeID getTypeID(void) const",
                                        "options": {},
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "C_name": "AA_example_nested_ExClass2_get_type_id",
                                            "C_prototype": "const AA_example_nested_ExClass2 * self",
                                            "C_return_type": "int",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_type_id",
                                            "F_C_name": "c_exclass2_get_type_id",
                                            "F_C_pure_clause": "pure ",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_type_id",
                                            "F_name_generic": "get_type_id",
                                            "F_name_impl": "exclass2_get_type_id",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getTypeID",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_type_id",
                                            "PY_name_impl": "PP_getTypeID",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "TypeID SHCXX_rv",
                                            "function_name": "getTypeID",
                                            "shadow_var": "SHadow_self",
                                            "underscore_name": "get_type_id"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_rv_decl": "int SHC_rv",
                                                "c_type": "int",
                                                "c_val": "static_cast<int>(SHCXX_rv)",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "TypeID",
                                                "cxx_var": "SHCXX_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_INT",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_native_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "TypeID",
                                                "f_intent": "OUT",
                                                "f_kind": "C_INT",
                                                "f_type": "integer(C_INT)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_INT",
                                                "stmt0": "f_native_scalar_result",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_native_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "static_cast<int>(SHCXX_rv)",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "static_cast<int>(SHCXX_rv)",
                                                "push_expr": "lua_pushinteger(L, static_cast<int>(SHCXX_rv))",
                                                "stmt0": "lua_native_scalar_result",
                                                "stmt1": "lua_native_scalar_result"
                                            },
                                            "fmtpy": {
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "TypeID",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_INT",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_native_scalar_result",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "25 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "pointer": []
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "value",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "ValueType"
                                                    ],
                                                    "typemap_name": "ValueType"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "cxx_template": {
                                            "ValueType": [
                                                "int",
                                                "long",
                                                "float",
                                                "double"
                                            ]
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(ValueType value +value)",
                                        "have_template_args": true,
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {},
                                        "zz_fmtdict": {
                                            "function_name": "setValue",
                                            "underscore_name": "set_value"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "28 ****************************************",
                                        "C_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_generated": "cxx_template",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "pointer": []
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "value",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(int value +value)",
                                        "have_template_args": true,
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "shadow_var": "SHadow_value",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "value",
                                                    "F_pointer": "SHPTR_value",
                                                    "c_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_INT",
                                                    "f_type": "integer(C_INT)",
                                                    "f_var": "value",
                                                    "sh_type": "SH_TYPE_INT",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "int",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "int",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_INT",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<int>",
                                            "C_call_list": "value",
                                            "C_name": "AA_example_nested_ExClass2_set_value_int",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t int value",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_exclass2_set_value_int",
                                            "F_C_name": "c_exclass2_set_value_int",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_name_function": "set_value_int",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "exclass2_set_value_int",
                                            "F_subprogram": "subroutine",
                                            "LUA_name": "setValue",
                                            "LUA_name_impl": "l_example_nested_ExClass2_set_value",
                                            "PY_name_impl": "PP_setValue_int",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "template_suffix": "_int",
                                            "underscore_name": "set_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_subroutine",
                                                "stmt1": "lua_subroutine"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "29 ****************************************",
                                        "C_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_generated": "cxx_template",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "pointer": []
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "value",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "long"
                                                    ],
                                                    "typemap_name": "long"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(long value +value)",
                                        "have_template_args": true,
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "shadow_var": "SHadow_value",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "value",
                                                    "F_pointer": "SHPTR_value",
                                                    "c_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_LONG",
                                                    "f_type": "integer(C_LONG)",
                                                    "f_var": "value",
                                                    "sh_type": "SH_TYPE_LONG",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tointeger(L, 1)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "long",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "long",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_LONG",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<long>",
                                            "C_call_list": "value",
                                            "C_name": "AA_example_nested_ExClass2_set_value_long",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t long value",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_exclass2_set_value_long",
                                            "F_C_name": "c_exclass2_set_value_long",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_name_function": "set_value_long",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "exclass2_set_value_long",
                                            "F_subprogram": "subroutine",
                                            "PY_name_impl": "PP_setValue_long",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "template_suffix": "_long",
                                            "underscore_name": "set_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_subroutine",
                                                "stmt1": "lua_subroutine"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "30 ****************************************",
                                        "C_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_generated": "cxx_template",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "pointer": []
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "value",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "float"
                                                    ],
                                                    "typemap_name": "float"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(float value +value)",
                                        "have_template_args": true,
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "float",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_FLOAT",
                                                    "shadow_var": "SHadow_value",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "value",
                                                    "F_pointer": "SHPTR_value",
                                                    "c_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_FLOAT",
                                                    "f_type": "real(C_FLOAT)",
                                                    "f_var": "value",
                                                    "sh_type": "SH_TYPE_FLOAT",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "float",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tonumber(L, 1)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "float",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "float",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_FLOAT",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<float>",
                                            "C_call_list": "value",
                                            "C_name": "AA_example_nested_ExClass2_set_value_float",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t float value",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_exclass2_set_value_float",
                                            "F_C_name": "c_exclass2_set_value_float",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_name_function": "set_value_float",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "exclass2_set_value_float",
                                            "F_subprogram": "subroutine",
                                            "PY_name_impl": "PP_setValue_float",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "template_suffix": "_float",
                                            "underscore_name": "set_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_subroutine",
                                                "stmt1": "lua_subroutine"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "31 ****************************************",
                                        "C_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_generated": "cxx_template",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "setValue",
                                                "pointer": []
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "value",
                                                        "pointer": []
                                                    },
                                                    "metaattrs": {
                                                        "intent": "in"
                                                    },
                                                    "specifier": [
                                                        "double"
                                                    ],
                                                    "typemap_name": "double"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        },
                                        "decl": "template<typename ValueType> void setValue(ValueType value)",
                                        "declgen": "void setValue(double value +value)",
                                        "gen_headers_typedef": [
                                            "int",
                                            "long",
                                            "float",
                                            "double"
                                        ],
                                        "have_template_args": true,
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "long"
                                                        ],
                                                        "typemap_name": "long"
                                                    }
                                                ],
                                                "instantiation": "<long>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "float"
                                                        ],
                                                        "typemap_name": "float"
                                                    }
                                                ],
                                                "instantiation": "<float>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtargs": {
                                            "value": {
                                                "fmtc": {
                                                    "c_addr": "&",
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "double",
                                                    "cxx_var": "value",
                                                    "idtor": "0",
                                                    "sh_type": "SH_TYPE_DOUBLE",
                                                    "shadow_var": "SHadow_value",
                                                    "stmt0": "c_native_scalar_in",
                                                    "stmt1": "c_default"
                                                },
                                                "fmtf": {
                                                    "F_C_var": "value",
                                                    "F_pointer": "SHPTR_value",
                                                    "c_var": "value",
                                                    "f_intent": "IN",
                                                    "f_kind": "C_DOUBLE",
                                                    "f_type": "real(C_DOUBLE)",
                                                    "f_var": "value",
                                                    "sh_type": "SH_TYPE_DOUBLE",
                                                    "stmt0": "f_native_scalar_in",
                                                    "stmt1": "f_default",
                                                    "stmtc0": "c_native_scalar_in",
                                                    "stmtc1": "c_default"
                                                },
                                                "fmtl": {
                                                    "LUA_index": 1,
                                                    "c_deref": "",
                                                    "c_member": ".",
                                                    "c_var": "value",
                                                    "c_var_len": "Lvalue",
                                                    "cxx_member": ".",
                                                    "cxx_type": "double",
                                                    "cxx_var": "value",
                                                    "lua_var": "SH_Lua_value",
                                                    "pop_expr": "lua_tonumber(L, 1)",
                                                    "stmt0": "lua_native_scalar_in",
                                                    "stmt1": "lua_native_scalar_in"
                                                },
                                                "fmtpy": {
                                                    "c_const": "",
                                                    "c_deref": "",
                                                    "c_type": "double",
                                                    "c_var": "value",
                                                    "ctor_expr": "value",
                                                    "cxx_addr": "&",
                                                    "cxx_member": ".",
                                                    "cxx_nonconst_ptr": "&value",
                                                    "cxx_type": "double",
                                                    "cxx_var": "value",
                                                    "data_var": "SHData_value",
                                                    "numpy_type": "NPY_DOUBLE",
                                                    "py_var": "SHPy_value",
                                                    "size_var": "SHSize_value",
                                                    "stmt0": "py_native_scalar_in",
                                                    "stmt1": "py_default",
                                                    "value_var": "SHValue_value"
                                                }
                                            }
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<double>",
                                            "C_call_list": "value",
                                            "C_name": "AA_example_nested_ExClass2_set_value_double",
                                            "C_prototype": "AA_example_nested_ExClass2 * self,\t double value",
                                            "C_return_type": "void",
                                            "F_C_arguments": "self,\t value",
                                            "F_C_call": "c_exclass2_set_value_double",
                                            "F_C_name": "c_exclass2_set_value_double",
                                            "F_C_subprogram": "subroutine",
                                            "F_arg_c_call": "obj%cxxmem,\t value",
                                            "F_arguments": "obj,\t value",
                                            "F_name_function": "set_value_double",
                                            "F_name_generic": "set_value",
                                            "F_name_impl": "exclass2_set_value_double",
                                            "F_subprogram": "subroutine",
                                            "PY_name_impl": "PP_setValue_double",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "function_name": "setValue",
                                            "shadow_var": "SHadow_self",
                                            "stmt0": "f_subroutine",
                                            "stmt1": "f_default",
                                            "stmtc0": "c",
                                            "stmtc1": "c_default",
                                            "template_suffix": "_double",
                                            "underscore_name": "set_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtl": {
                                                "stmt0": "lua_subroutine",
                                                "stmt1": "lua_subroutine"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "26 ****************************************",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "ValueType"
                                            ],
                                            "typemap_name": "ValueType"
                                        },
                                        "cxx_template": {
                                            "ValueType": [
                                                "int",
                                                "double"
                                            ]
                                        },
                                        "decl": "template<typename ValueType> ValueType getValue()",
                                        "declgen": "ValueType getValue(void)",
                                        "have_template_args": true,
                                        "options": {},
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {},
                                        "zz_fmtdict": {
                                            "function_name": "getValue",
                                            "underscore_name": "get_value"
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "32 ****************************************",
                                        "C_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_generated": "cxx_template",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        "decl": "template<typename ValueType> ValueType getValue()",
                                        "declgen": "int getValue(void)",
                                        "have_template_args": true,
                                        "options": {
                                            "F_create_generic": false
                                        },
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<int>",
                                            "C_name": "AA_example_nested_ExClass2_get_value_int",
                                            "C_prototype": "AA_example_nested_ExClass2 * self",
                                            "C_return_type": "int",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_value_int",
                                            "F_C_name": "c_exclass2_get_value_int",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_value_int",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "exclass2_get_value_int",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "LUA_name": "getValue",
                                            "LUA_name_impl": "l_example_nested_ExClass2_get_value",
                                            "PY_name_impl": "PP_getValue_int",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "int SHC_rv",
                                            "function_name": "getValue",
                                            "shadow_var": "SHadow_self",
                                            "template_suffix": "_int",
                                            "underscore_name": "get_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_type": "int",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHC_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHC_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_INT",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_native_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "int",
                                                "f_intent": "OUT",
                                                "f_kind": "C_INT",
                                                "f_type": "integer(C_INT)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_INT",
                                                "stmt0": "f_native_scalar_result",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_native_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                                "stmt0": "lua_native_scalar_result",
                                                "stmt1": "lua_native_scalar_result"
                                            },
                                            "fmtpy": {
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "int",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_INT",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_native_scalar_result",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    },
                                    {
                                        "<FUNCTION>": "33 ****************************************",
                                        "C_generated_path": [
                                            "cxx_template"
                                        ],
                                        "_generated": "cxx_template",
                                        "_overloaded": true,
                                        "ast": {
                                            "declarator": {
                                                "name": "getValue",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "result"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        },
                                        "decl": "template<typename ValueType> ValueType getValue()",
                                        "declgen": "double getValue(void)",
                                        "gen_headers_typedef": [
                                            "int",
                                            "double"
                                        ],
                                        "have_template_args": true,
                                        "options": {
                                            "F_create_generic": false
                                        },
                                        "template_arguments": [
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "int"
                                                        ],
                                                        "typemap_name": "int"
                                                    }
                                                ],
                                                "instantiation": "<int>"
                                            },
                                            {
                                                "asts": [
                                                    {
                                                        "specifier": [
                                                            "double"
                                                        ],
                                                        "typemap_name": "double"
                                                    }
                                                ],
                                                "instantiation": "<double>"
                                            }
                                        ],
                                        "template_parameters": [
                                            "ValueType"
                                        ],
                                        "wrap": {
                                            "c": true,
                                            "f_c": true,
                                            "fortran": true,
                                            "lua": true,
                                            "python": true
                                        },
                                        "zz_fmtdict": {
                                            "CXX_template": "<double>",
                                            "C_name": "AA_example_nested_ExClass2_get_value_double",
                                            "C_prototype": "AA_example_nested_ExClass2 * self",
                                            "C_return_type": "double",
                                            "F_C_arguments": "self",
                                            "F_C_call": "c_exclass2_get_value_double",
                                            "F_C_name": "c_exclass2_get_value_double",
                                            "F_C_result_clause": "\fresult(SHT_rv)",
                                            "F_C_subprogram": "function",
                                            "F_C_var": "SHT_crv",
                                            "F_arg_c_call": "obj%cxxmem",
                                            "F_arguments": "obj",
                                            "F_name_function": "get_value_double",
                                            "F_name_generic": "get_value",
                                            "F_name_impl": "exclass2_get_value_double",
                                            "F_result_clause": "\fresult(SHT_rv)",
                                            "F_subprogram": "function",
                                            "PY_name_impl": "PP_getValue_double",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "self",
                                            "cxx_rv_decl": "double SHC_rv",
                                            "function_name": "getValue",
                                            "shadow_var": "SHadow_self",
                                            "template_suffix": "_double",
                                            "underscore_name": "get_value"
                                        },
                                        "zz_fmtresult": {
                                            "fmtc": {
                                                "c_const": "",
                                                "c_get_value": "",
                                                "c_type": "double",
                                                "c_var": "SHC_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHC_rv",
                                                "cxx_type": "double",
                                                "cxx_var": "SHC_rv",
                                                "idtor": "0",
                                                "sh_type": "SH_TYPE_DOUBLE",
                                                "shadow_var": "SHadow_rv",
                                                "stmt0": "c_native_scalar_result",
                                                "stmt1": "c_default"
                                            },
                                            "fmtf": {
                                                "F_C_var": "SHT_rv",
                                                "c_var": "SHT_rv",
                                                "cxx_type": "double",
                                                "f_intent": "OUT",
                                                "f_kind": "C_DOUBLE",
                                                "f_type": "real(C_DOUBLE)",
                                                "f_var": "SHT_rv",
                                                "sh_type": "SH_TYPE_DOUBLE",
                                                "stmt0": "f_native_scalar_result",
                                                "stmt1": "f_default",
                                                "stmtc0": "c_native_scalar_result",
                                                "stmtc1": "c_default"
                                            },
                                            "fmtl": {
                                                "c_var": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_var": "SHCXX_rv",
                                                "push_arg": "SHCXX_rv",
                                                "push_expr": "lua_pushnumber(L, SHCXX_rv)",
                                                "stmt0": "lua_native_scalar_result",
                                                "stmt1": "lua_native_scalar_result"
                                            },
                                            "fmtpy": {
                                                "c_deref": "",
                                                "c_var": "SHCXX_rv",
                                                "ctor_expr": "SHCXX_rv",
                                                "cxx_addr": "&",
                                                "cxx_member": ".",
                                                "cxx_nonconst_ptr": "&SHCXX_rv",
                                                "cxx_type": "double",
                                                "cxx_var": "SHCXX_rv",
                                                "data_var": "SHData_rv",
                                                "numpy_type": "NPY_DOUBLE",
                                                "py_var": "SHTPy_rv",
                                                "size_var": "SHSize_rv",
                                                "stmt0": "py_native_scalar_result",
                                                "stmt1": "py_default",
                                                "value_var": "SHValue_rv"
                                            }
                                        }
                                    }
                                ],
                                "name": "ExClass2",
                                "options": {},
                                "parse_keyword": "class",
                                "python": {
                                    "type": [
                                        "dealloc",
                                        "print",
                                        "compare",
                                        "getattr",
                                        "setattr",
                                        "getattro",
                                        "setattro",
                                        "repr",
                                        "hash",
                                        "call",
                                        "str",
                                        "init",
                                        "alloc",
                                        "new",
                                        "free",
                                        "del"
                                    ]
                                },
                                "scope": "example::nested::ExClass2::",
                                "typemap_name": "example::nested::ExClass2",
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "CXX_this_call": "SH_this->",
                                    "C_header_filename": "wrapexample_nested_ExClass2.h",
                                    "C_impl_filename": "wrapexample_nested_ExClass2.cpp",
                                    "C_name_scope": "example_nested_ExClass2_",
                                    "C_type_name": "AA_example_nested_ExClass2",
                                    "F_derived_name": "exclass2",
                                    "F_name_scope": "exclass2_",
                                    "LUA_class_reg": "l_ExClass2_Reg",
                                    "LUA_ctor_name": "ExClass2",
                                    "LUA_metadata": "ExClass2.metatable",
                                    "LUA_this_call": "SH_this->self->",
                                    "LUA_userdata_member": "self",
                                    "LUA_userdata_type": "l_ExClass2_Type",
                                    "LUA_userdata_var": "SH_this",
                                    "PY_PyObject": "PP_ExClass2",
                                    "PY_PyTypeObject": "PP_ExClass2_Type",
                                    "PY_capsule_name": "PY_ExClass2_capsule_name",
                                    "PY_from_object_func": "PP_ExClass2_from_Object",
                                    "PY_this_call": "self->obj->",
                                    "PY_to_object_func": "PP_ExClass2_to_Object",
                                    "PY_to_object_idtor_func": "PP_ExClass2_to_Object_idtor",
                                    "PY_type_filename": "pyexample_nested_ExClass2type.cpp",
                                    "class_scope": "ExClass2::",
                                    "cxx_class": "ExClass2",
                                    "cxx_type": "ExClass2",
                                    "file_scope": "example_nested_ExClass2",
                                    "hnamefunc0": "capsule_data_helper"
                                }
                            }
                        ],
                        "functions": [
                            {
                                "<FUNCTION>": "45 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "local_function1",
                                        "pointer": []
                                    },
                                    "params": [],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void local_function1()",
                                "declgen": "void local_function1(void)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "AA_example_nested_local_function1",
                                    "C_prototype": "void",
                                    "C_return_type": "void",
                                    "F_C_arguments": "",
                                    "F_C_call": "c_local_function1",
                                    "F_C_name": "local_function1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arguments": "",
                                    "F_name_function": "local_function1",
                                    "F_name_generic": "local_function1",
                                    "F_name_impl": "local_function1",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "local_function1",
                                    "LUA_name_impl": "l_example_nested_local_function1",
                                    "PY_name_impl": "PP_local_function1",
                                    "function_name": "local_function1",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "local_function1"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "46 ****************************************",
                                "C_generated_path": [
                                    "arg_to_buffer"
                                ],
                                "_PTR_F_C_index": "64",
                                "ast": {
                                    "declarator": {
                                        "name": "isNameValid",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "result"
                                    },
                                    "params": [
                                        {
                                            "const": true,
                                            "declarator": {
                                                "name": "name",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "std::string"
                                            ],
                                            "typemap_name": "std::string"
                                        }
                                    ],
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                },
                                "decl": "bool isNameValid(const std::string& name)",
                                "declgen": "bool isNameValid(const std::string & name)",
                                "options": {},
                                "splicer": {
                                    "c": [
                                        "return name != NULL;"
                                    ],
                                    "c_buf": [
                                        "return name != NULL;"
                                    ],
                                    "f": [
                                        "rv = name .ne. \" \""
                                    ]
                                },
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "name",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "shadow_var": "SHadow_name",
                                            "stmt0": "c_string_&_in",
                                            "stmt1": "c_string_&_in"
                                        },
                                        "fmtf": {
                                            "F_C_var": "name"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "name",
                                            "c_var_len": "Lname",
                                            "cxx_member": ".",
                                            "cxx_type": "std::string",
                                            "cxx_var": "name",
                                            "lua_var": "SH_Lua_name",
                                            "pop_expr": "lua_tostring(L, 1)",
                                            "stmt0": "lua_string_&_in",
                                            "stmt1": "lua_string_&_in"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SH_name",
                                            "data_var": "SHData_name",
                                            "numpy_type": null,
                                            "py_var": "SHPy_name",
                                            "size_var": "SHSize_name",
                                            "stmt0": "py_string_&_in",
                                            "stmt1": "py_string_&_in",
                                            "value_var": "SHValue_name"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "SHCXX_name",
                                    "C_name": "AA_example_nested_is_name_valid",
                                    "C_prototype": "const char * name",
                                    "C_return_type": "bool",
                                    "F_C_arguments": "name",
                                    "F_C_call": "c_is_name_valid_bufferify",
                                    "F_C_name": "c_is_name_valid",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_C_var": "SHT_crv",
                                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)",
                                    "F_arguments": "name",
                                    "F_name_function": "is_name_valid",
                                    "F_name_generic": "is_name_valid",
                                    "F_name_impl": "is_name_valid",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "LUA_name": "isNameValid",
                                    "LUA_name_impl": "l_example_nested_is_name_valid",
                                    "PY_name_impl": "PP_isNameValid",
                                    "cxx_rv_decl": "bool SHC_rv",
                                    "function_name": "isNameValid",
                                    "underscore_name": "is_name_valid"
                                },
                                "zz_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "",
                                        "c_type": "bool",
                                        "c_var": "SHC_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHC_rv",
                                        "cxx_type": "bool",
                                        "cxx_var": "SHC_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_BOOL",
                                        "shadow_var": "SHadow_rv",
                                        "stmt0": "c_bool_scalar_result",
                                        "stmt1": "c_default"
                                    },
                                    "fmtf": {
                                        "F_C_var": "SHT_rv",
                                        "c_var": "SHT_rv",
                                        "cxx_type": "bool",
                                        "f_intent": "OUT",
                                        "f_kind": "C_BOOL",
                                        "f_type": "logical",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_BOOL",
                                        "stmt0": "f_bool_scalar_result_buf",
                                        "stmt1": "f_bool_result",
                                        "stmtc0": "c_bool_scalar_result_buf",
                                        "stmtc1": "c_default"
                                    },
                                    "fmtl": {
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_var": "SHCXX_rv",
                                        "push_arg": "SHCXX_rv",
                                        "push_expr": "lua_pushboolean(L, SHCXX_rv)",
                                        "stmt0": "lua_bool_scalar_result",
                                        "stmt1": "lua_bool_scalar_result"
                                    },
                                    "fmtpy": {
                                        "PyTypeObject": "PyBool_Type",
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "ctor_expr": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHCXX_rv",
                                        "cxx_type": "bool",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": "NPY_BOOL",
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_bool_scalar_result",
                                        "stmt1": "py_bool_result",
                                        "value_var": "SHValue_rv"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "64 ****************************************",
                                "_PTR_C_CXX_index": "46",
                                "_generated": "arg_to_buffer",
                                "ast": {
                                    "declarator": {
                                        "name": "isNameValid",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "result"
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "len_trim": "Lname"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "name",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "std::string"
                                            ],
                                            "stmts_suffix": "buf",
                                            "typemap_name": "std::string"
                                        }
                                    ],
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                },
                                "decl": "bool isNameValid(const std::string& name)",
                                "declgen": "bool isNameValid(const std::string & name +len_trim)",
                                "generated_suffix": "buf",
                                "options": {},
                                "splicer": {
                                    "c": [
                                        "return name != NULL;"
                                    ],
                                    "c_buf": [
                                        "return name != NULL;"
                                    ],
                                    "f": [
                                        "rv = name .ne. \" \""
                                    ]
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true
                                },
                                "zz_fmtargs": {
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "name",
                                            "c_var_trim": "Lname",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "shadow_var": "SHadow_name",
                                            "stmt0": "c_string_&_in_buf",
                                            "stmt1": "c_string_&_in_buf"
                                        },
                                        "fmtf": {
                                            "F_C_var": "name",
                                            "F_pointer": "SHPTR_name",
                                            "c_var": "name",
                                            "c_var_trim": "Lname",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_var": "name",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt0": "f_string_&_in_buf",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_string_&_in_buf",
                                            "stmtc1": "c_string_&_in_buf"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "SHCXX_name",
                                    "C_name": "AA_example_nested_is_name_valid_bufferify",
                                    "C_prototype": "const char * name,\t int Lname",
                                    "C_return_type": "bool",
                                    "F_C_arguments": "name,\t Lname",
                                    "F_C_name": "c_is_name_valid_bufferify",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_C_var": "SHT_crv",
                                    "cxx_rv_decl": "bool SHC_rv",
                                    "function_name": "isNameValid",
                                    "function_suffix": "_bufferify",
                                    "underscore_name": "is_name_valid"
                                },
                                "zz_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "",
                                        "c_type": "bool",
                                        "c_var": "SHC_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHC_rv",
                                        "cxx_type": "bool",
                                        "cxx_var": "SHC_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_BOOL",
                                        "shadow_var": "SHadow_rv",
                                        "stmt0": "c_bool_scalar_result_buf",
                                        "stmt1": "c_default"
                                    },
                                    "fmtf": {
                                        "F_C_var": "SHT_rv",
                                        "c_var": "SHT_rv",
                                        "f_intent": "OUT",
                                        "f_type": "logical"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "47 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "isInitialized",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "result"
                                    },
                                    "params": [],
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                },
                                "decl": "bool isInitialized()",
                                "declgen": "bool isInitialized(void)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "AA_example_nested_is_initialized",
                                    "C_prototype": "void",
                                    "C_return_type": "bool",
                                    "F_C_arguments": "",
                                    "F_C_call": "c_is_initialized",
                                    "F_C_name": "c_is_initialized",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_C_var": "SHT_crv",
                                    "F_arguments": "",
                                    "F_name_function": "is_initialized",
                                    "F_name_generic": "is_initialized",
                                    "F_name_impl": "is_initialized",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "LUA_name": "isInitialized",
                                    "LUA_name_impl": "l_example_nested_is_initialized",
                                    "PY_name_impl": "PP_isInitialized",
                                    "cxx_rv_decl": "bool SHC_rv",
                                    "function_name": "isInitialized",
                                    "underscore_name": "is_initialized"
                                },
                                "zz_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "",
                                        "c_type": "bool",
                                        "c_var": "SHC_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHC_rv",
                                        "cxx_type": "bool",
                                        "cxx_var": "SHC_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_BOOL",
                                        "shadow_var": "SHadow_rv",
                                        "stmt0": "c_bool_scalar_result",
                                        "stmt1": "c_default"
                                    },
                                    "fmtf": {
                                        "F_C_var": "SHT_rv",
                                        "c_var": "SHT_rv",
                                        "cxx_type": "bool",
                                        "f_intent": "OUT",
                                        "f_kind": "C_BOOL",
                                        "f_type": "logical",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_BOOL",
                                        "stmt0": "f_bool_scalar_result",
                                        "stmt1": "f_bool_result",
                                        "stmtc0": "c_bool_scalar_result",
                                        "stmtc1": "c_default"
                                    },
                                    "fmtl": {
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_var": "SHCXX_rv",
                                        "push_arg": "SHCXX_rv",
                                        "push_expr": "lua_pushboolean(L, SHCXX_rv)",
                                        "stmt0": "lua_bool_scalar_result",
                                        "stmt1": "lua_bool_scalar_result"
                                    },
                                    "fmtpy": {
                                        "PyTypeObject": "PyBool_Type",
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "ctor_expr": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHCXX_rv",
                                        "cxx_type": "bool",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": "NPY_BOOL",
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_bool_scalar_result",
                                        "stmt1": "py_bool_result",
                                        "value_var": "SHValue_rv"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "48 ****************************************",
                                "C_generated_path": [
                                    "arg_to_buffer"
                                ],
                                "_PTR_F_C_index": "65",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "test_names",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "const": true,
                                            "declarator": {
                                                "name": "name",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "std::string"
                                            ],
                                            "typemap_name": "std::string"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void test_names(const std::string &name)",
                                "declgen": "void test_names(const std::string & name)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "name",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "shadow_var": "SHadow_name",
                                            "stmt0": "c_string_&_in",
                                            "stmt1": "c_string_&_in"
                                        },
                                        "fmtf": {
                                            "F_C_var": "name"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "name",
                                            "c_var_len": "Lname",
                                            "cxx_member": ".",
                                            "cxx_type": "std::string",
                                            "cxx_var": "name",
                                            "lua_var": "SH_Lua_name",
                                            "pop_expr": "lua_tostring(L, 1)",
                                            "stmt0": "lua_string_&_in",
                                            "stmt1": "lua_string_&_in"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SH_name",
                                            "data_var": "SHData_name",
                                            "numpy_type": null,
                                            "py_var": "SHPy_name",
                                            "size_var": "SHSize_name",
                                            "stmt0": "py_string_&_in",
                                            "stmt1": "py_string_&_in",
                                            "value_var": "SHValue_name"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "SHCXX_name",
                                    "C_name": "AA_example_nested_test_names",
                                    "C_prototype": "const char * name",
                                    "C_return_type": "void",
                                    "F_C_arguments": "name",
                                    "F_C_call": "c_test_names_bufferify",
                                    "F_C_name": "c_test_names",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)",
                                    "F_arguments": "name",
                                    "F_name_function": "test_names",
                                    "F_name_generic": "test_names",
                                    "F_name_impl": "test_names",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "test_names",
                                    "LUA_name_impl": "l_example_nested_test_names",
                                    "PY_name_impl": "PP_test_names",
                                    "function_name": "test_names",
                                    "function_suffix": "",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "test_names"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "65 ****************************************",
                                "_PTR_C_CXX_index": "48",
                                "_generated": "arg_to_buffer",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "test_names",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "len_trim": "Lname"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "name",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "std::string"
                                            ],
                                            "stmts_suffix": "buf",
                                            "typemap_name": "std::string"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void test_names(const std::string &name)",
                                "declgen": "void test_names(const std::string & name +len_trim)",
                                "generated_suffix": "buf",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true
                                },
                                "zz_fmtargs": {
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "name",
                                            "c_var_trim": "Lname",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "shadow_var": "SHadow_name",
                                            "stmt0": "c_string_&_in_buf",
                                            "stmt1": "c_string_&_in_buf"
                                        },
                                        "fmtf": {
                                            "F_C_var": "name",
                                            "F_pointer": "SHPTR_name",
                                            "c_var": "name",
                                            "c_var_trim": "Lname",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_var": "name",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt0": "f_string_&_in_buf",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_string_&_in_buf",
                                            "stmtc1": "c_string_&_in_buf"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "SHCXX_name",
                                    "C_name": "AA_example_nested_test_names_bufferify",
                                    "C_prototype": "const char * name,\t int Lname",
                                    "C_return_type": "void",
                                    "F_C_arguments": "name,\t Lname",
                                    "F_C_name": "c_test_names_bufferify",
                                    "F_C_subprogram": "subroutine",
                                    "function_name": "test_names",
                                    "function_suffix": "_bufferify",
                                    "stmt0": "c",
                                    "stmt1": "c_default",
                                    "underscore_name": "test_names"
                                }
                            },
                            {
                                "<FUNCTION>": "49 ****************************************",
                                "C_generated_path": [
                                    "arg_to_buffer"
                                ],
                                "_PTR_F_C_index": "66",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "test_names",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "const": true,
                                            "declarator": {
                                                "name": "name",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "std::string"
                                            ],
                                            "typemap_name": "std::string"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "flag",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void test_names(const std::string &name, int flag)",
                                "declgen": "void test_names(const std::string & name, int flag +value)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "flag": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "flag",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&flag",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_flag",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "flag"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "flag",
                                            "c_var_len": "Lflag",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "lua_var": "SH_Lua_flag",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "flag",
                                            "ctor_expr": "flag",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&flag",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "data_var": "SHData_flag",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_flag",
                                            "size_var": "SHSize_flag",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_flag"
                                        }
                                    },
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "name",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "shadow_var": "SHadow_name",
                                            "stmt0": "c_string_&_in",
                                            "stmt1": "c_string_&_in"
                                        },
                                        "fmtf": {
                                            "F_C_var": "name"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "name",
                                            "c_var_len": "Lname",
                                            "cxx_member": ".",
                                            "cxx_type": "std::string",
                                            "cxx_var": "name",
                                            "lua_var": "SH_Lua_name",
                                            "pop_expr": "lua_tostring(L, 1)",
                                            "stmt0": "lua_string_&_in",
                                            "stmt1": "lua_string_&_in"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "const ",
                                            "c_deref": "",
                                            "c_type": "char",
                                            "c_var": "name",
                                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SH_name",
                                            "data_var": "SHData_name",
                                            "numpy_type": null,
                                            "py_var": "SHPy_name",
                                            "size_var": "SHSize_name",
                                            "stmt0": "py_string_&_in",
                                            "stmt1": "py_string_&_in",
                                            "value_var": "SHValue_name"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "SHCXX_name,\t flag",
                                    "C_name": "AA_example_nested_test_names_flag",
                                    "C_prototype": "const char * name,\t int flag",
                                    "C_return_type": "void",
                                    "F_C_arguments": "name,\t flag",
                                    "F_C_call": "c_test_names_flag_bufferify",
                                    "F_C_name": "c_test_names_flag",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t flag",
                                    "F_arguments": "name,\t flag",
                                    "F_name_function": "test_names_flag",
                                    "F_name_generic": "test_names",
                                    "F_name_impl": "test_names_flag",
                                    "F_subprogram": "subroutine",
                                    "PY_name_impl": "PP_test_names_flag",
                                    "function_name": "test_names",
                                    "function_suffix": "_flag",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "test_names"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "66 ****************************************",
                                "_PTR_C_CXX_index": "49",
                                "_generated": "arg_to_buffer",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "test_names",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "len_trim": "Lname"
                                            },
                                            "const": true,
                                            "declarator": {
                                                "name": "name",
                                                "pointer": [
                                                    {
                                                        "ptr": "&"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "std::string"
                                            ],
                                            "stmts_suffix": "buf",
                                            "typemap_name": "std::string"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "flag",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void test_names(const std::string &name, int flag)",
                                "declgen": "void test_names(const std::string & name +len_trim, int flag +value)",
                                "generated_suffix": "buf",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true
                                },
                                "zz_fmtargs": {
                                    "flag": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "flag",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&flag",
                                            "cxx_type": "int",
                                            "cxx_var": "flag",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_flag",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "flag",
                                            "F_pointer": "SHPTR_flag",
                                            "c_var": "flag",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "flag",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        }
                                    },
                                    "name": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "const ",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "name",
                                            "c_var_trim": "Lname",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_name)",
                                            "cxx_type": "std::string",
                                            "cxx_var": "SHCXX_name",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "shadow_var": "SHadow_name",
                                            "stmt0": "c_string_&_in_buf",
                                            "stmt1": "c_string_&_in_buf"
                                        },
                                        "fmtf": {
                                            "F_C_var": "name",
                                            "F_pointer": "SHPTR_name",
                                            "c_var": "name",
                                            "c_var_trim": "Lname",
                                            "f_intent": "IN",
                                            "f_kind": "C_CHAR",
                                            "f_type": "character(*)",
                                            "f_var": "name",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt0": "f_string_&_in_buf",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_string_&_in_buf",
                                            "stmtc1": "c_string_&_in_buf"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "SHCXX_name,\t flag",
                                    "C_name": "AA_example_nested_test_names_flag_bufferify",
                                    "C_prototype": "const char * name,\t int Lname,\t int flag",
                                    "C_return_type": "void",
                                    "F_C_arguments": "name,\t Lname,\t flag",
                                    "F_C_name": "c_test_names_flag_bufferify",
                                    "F_C_subprogram": "subroutine",
                                    "function_name": "test_names",
                                    "function_suffix": "_flag_bufferify",
                                    "stmt0": "c",
                                    "stmt1": "c_default",
                                    "underscore_name": "test_names"
                                }
                            },
                            {
                                "<FUNCTION>": "62 ****************************************",
                                "C_generated_path": [
                                    "has_default_arg"
                                ],
                                "_generated": "has_default_arg",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testoptional",
                                        "pointer": []
                                    },
                                    "params": [],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testoptional(int i = 1, long j=2)",
                                "declgen": "void testoptional(void)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "AA_example_nested_testoptional_0",
                                    "C_prototype": "void",
                                    "C_return_type": "void",
                                    "F_C_arguments": "",
                                    "F_C_call": "c_testoptional_0",
                                    "F_C_name": "c_testoptional_0",
                                    "F_C_subprogram": "subroutine",
                                    "F_arguments": "",
                                    "F_name_function": "testoptional_0",
                                    "F_name_generic": "testoptional",
                                    "F_name_impl": "testoptional_0",
                                    "F_subprogram": "subroutine",
                                    "function_name": "testoptional",
                                    "function_suffix": "_0",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "testoptional"
                                }
                            },
                            {
                                "<FUNCTION>": "63 ****************************************",
                                "C_generated_path": [
                                    "has_default_arg"
                                ],
                                "_generated": "has_default_arg",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testoptional",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "i",
                                                "pointer": []
                                            },
                                            "init": 1,
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testoptional(int i = 1, long j=2)",
                                "declgen": "void testoptional(int i=1 +value)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true
                                },
                                "zz_fmtargs": {
                                    "i": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "i",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_i",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "i",
                                            "F_pointer": "SHPTR_i",
                                            "c_var": "i",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "i",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "i",
                                    "C_name": "AA_example_nested_testoptional_1",
                                    "C_prototype": "int i",
                                    "C_return_type": "void",
                                    "F_C_arguments": "i",
                                    "F_C_call": "c_testoptional_1",
                                    "F_C_name": "c_testoptional_1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "i",
                                    "F_arguments": "i",
                                    "F_name_function": "testoptional_1",
                                    "F_name_generic": "testoptional",
                                    "F_name_impl": "testoptional_1",
                                    "F_subprogram": "subroutine",
                                    "function_name": "testoptional",
                                    "function_suffix": "_1",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "testoptional"
                                }
                            },
                            {
                                "<FUNCTION>": "50 ****************************************",
                                "_default_funcs": [
                                    62,
                                    63
                                ],
                                "_has_default_arg": true,
                                "_nargs": [
                                    0,
                                    2
                                ],
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testoptional",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "i",
                                                "pointer": []
                                            },
                                            "init": 1,
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "j",
                                                "pointer": []
                                            },
                                            "init": 2,
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "long"
                                            ],
                                            "typemap_name": "long"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testoptional(int i = 1, long j=2)",
                                "declgen": "void testoptional(int i=1 +value, long j=2 +value)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "i": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "i",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_i",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "i",
                                            "F_pointer": "SHPTR_i",
                                            "c_var": "i",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "i",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "i",
                                            "c_var_len": "Li",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "lua_var": "SH_Lua_i",
                                            "pop_expr": "lua_tointeger(L, 1)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "i",
                                            "ctor_expr": "i",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&i",
                                            "cxx_type": "int",
                                            "cxx_var": "i",
                                            "data_var": "SHData_i",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_i",
                                            "size_var": "SHSize_i",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_i"
                                        }
                                    },
                                    "j": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "j",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&j",
                                            "cxx_type": "long",
                                            "cxx_var": "j",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_LONG",
                                            "shadow_var": "SHadow_j",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "j",
                                            "F_pointer": "SHPTR_j",
                                            "c_var": "j",
                                            "f_intent": "IN",
                                            "f_kind": "C_LONG",
                                            "f_type": "integer(C_LONG)",
                                            "f_var": "j",
                                            "sh_type": "SH_TYPE_LONG",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "j",
                                            "c_var_len": "Lj",
                                            "cxx_member": ".",
                                            "cxx_type": "long",
                                            "cxx_var": "j",
                                            "lua_var": "SH_Lua_j",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "long",
                                            "c_var": "j",
                                            "ctor_expr": "j",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&j",
                                            "cxx_type": "long",
                                            "cxx_var": "j",
                                            "data_var": "SHData_j",
                                            "numpy_type": "NPY_LONG",
                                            "py_var": "SHPy_j",
                                            "size_var": "SHSize_j",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_j"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "i,\t j",
                                    "C_name": "AA_example_nested_testoptional_2",
                                    "C_prototype": "int i,\t long j",
                                    "C_return_type": "void",
                                    "F_C_arguments": "i,\t j",
                                    "F_C_call": "c_testoptional_2",
                                    "F_C_name": "c_testoptional_2",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "i,\t j",
                                    "F_arguments": "i,\t j",
                                    "F_name_function": "testoptional_2",
                                    "F_name_generic": "testoptional",
                                    "F_name_impl": "testoptional_2",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "testoptional",
                                    "LUA_name_impl": "l_example_nested_testoptional",
                                    "PY_cleanup_decref": "Py_XDECREF",
                                    "PY_name_impl": "PP_testoptional_2",
                                    "function_name": "testoptional",
                                    "function_suffix": "_2",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "testoptional"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "51 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "test_size_t",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "result"
                                    },
                                    "params": [],
                                    "specifier": [
                                        "size_t"
                                    ],
                                    "typemap_name": "size_t"
                                },
                                "decl": "size_t test_size_t()",
                                "declgen": "size_t test_size_t(void)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "AA_example_nested_test_size_t",
                                    "C_prototype": "void",
                                    "C_return_type": "size_t",
                                    "F_C_arguments": "",
                                    "F_C_call": "c_test_size_t",
                                    "F_C_name": "test_size_t",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_C_var": "SHT_crv",
                                    "F_arguments": "",
                                    "F_name_function": "test_size_t",
                                    "F_name_generic": "test_size_t",
                                    "F_name_impl": "test_size_t",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "LUA_name": "test_size_t",
                                    "LUA_name_impl": "l_example_nested_test_size_t",
                                    "PY_name_impl": "PP_test_size_t",
                                    "cxx_rv_decl": "size_t SHC_rv",
                                    "function_name": "test_size_t",
                                    "underscore_name": "test_size_t"
                                },
                                "zz_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "",
                                        "c_type": "size_t",
                                        "c_var": "SHC_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHC_rv",
                                        "cxx_type": "size_t",
                                        "cxx_var": "SHC_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_SIZE_T",
                                        "shadow_var": "SHadow_rv",
                                        "stmt0": "c_native_scalar_result",
                                        "stmt1": "c_default"
                                    },
                                    "fmtf": {
                                        "F_C_var": "SHT_rv",
                                        "c_var": "SHT_rv",
                                        "cxx_type": "size_t",
                                        "f_intent": "OUT",
                                        "f_kind": "C_SIZE_T",
                                        "f_type": "integer(C_SIZE_T)",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_SIZE_T",
                                        "stmt0": "f_native_scalar_result",
                                        "stmt1": "f_default",
                                        "stmtc0": "c_native_scalar_result",
                                        "stmtc1": "c_default"
                                    },
                                    "fmtl": {
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_var": "SHCXX_rv",
                                        "push_arg": "SHCXX_rv",
                                        "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                        "stmt0": "lua_native_scalar_result",
                                        "stmt1": "lua_native_scalar_result"
                                    },
                                    "fmtpy": {
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "ctor_expr": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHCXX_rv",
                                        "cxx_type": "size_t",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": null,
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_native_scalar_result",
                                        "stmt1": "py_default",
                                        "value_var": "SHValue_rv"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "52 ****************************************",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testmpi",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "comm",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "MPI_Comm"
                                            ],
                                            "typemap_name": "MPI_Comm"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testmpi(MPI_Comm comm)",
                                "declgen": "void testmpi(MPI_Comm comm +value)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "comm": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "comm",
                                            "cxx_addr": "&",
                                            "cxx_decl": "MPI_Comm SHCXX_comm",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&SHCXX_comm",
                                            "cxx_type": "MPI_Comm",
                                            "cxx_val": "MPI_Comm_f2c(comm)",
                                            "cxx_var": "SHCXX_comm",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "shadow_var": "SHadow_comm",
                                            "stmt0": "c_unknown_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "comm",
                                            "F_pointer": "SHPTR_comm",
                                            "c_var": "comm",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer",
                                            "f_var": "comm",
                                            "sh_type": "SH_TYPE_OTHER",
                                            "stmt0": "f_unknown_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_unknown_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "POP",
                                            "c_var_len": "Lcomm",
                                            "cxx_member": ".",
                                            "cxx_type": "MPI_Comm",
                                            "cxx_var": "comm",
                                            "lua_var": "SH_Lua_comm",
                                            "pop_expr": "MPI_Comm_f2c(POP)",
                                            "stmt0": "lua_unknown_scalar_in",
                                            "stmt1": "lua_default"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "MPI_Fint",
                                            "c_var": "comm",
                                            "ctor_expr": "comm",
                                            "cxx_addr": "&",
                                            "cxx_decl": "MPI_Comm SH_comm",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&comm",
                                            "cxx_type": "MPI_Comm",
                                            "cxx_val": "MPI_Comm_f2c(comm)",
                                            "cxx_var": "SH_comm",
                                            "data_var": "SHData_comm",
                                            "numpy_type": null,
                                            "py_var": "SHPy_comm",
                                            "size_var": "SHSize_comm",
                                            "stmt0": "py_unknown_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_comm"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "SHCXX_comm",
                                    "C_name": "AA_example_nested_testmpi_mpi",
                                    "C_prototype": "MPI_Fint comm",
                                    "C_return_type": "void",
                                    "F_C_arguments": "comm",
                                    "F_C_call": "c_testmpi_mpi",
                                    "F_C_name": "c_testmpi_mpi",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "comm",
                                    "F_arguments": "comm",
                                    "F_name_function": "testmpi_mpi",
                                    "F_name_generic": "testmpi",
                                    "F_name_impl": "testmpi_mpi",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "testmpi",
                                    "LUA_name_impl": "l_example_nested_testmpi",
                                    "PY_name_impl": "PP_testmpi_mpi",
                                    "function_name": "testmpi",
                                    "function_suffix": "_mpi",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "testmpi"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "53 ****************************************",
                                "_overloaded": true,
                                "ast": {
                                    "declarator": {
                                        "name": "testmpi",
                                        "pointer": []
                                    },
                                    "params": [],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void testmpi()",
                                "declgen": "void testmpi(void)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtdict": {
                                    "C_name": "AA_example_nested_testmpi_serial",
                                    "C_prototype": "void",
                                    "C_return_type": "void",
                                    "F_C_arguments": "",
                                    "F_C_call": "c_testmpi_serial",
                                    "F_C_name": "c_testmpi_serial",
                                    "F_C_subprogram": "subroutine",
                                    "F_arguments": "",
                                    "F_name_function": "testmpi_serial",
                                    "F_name_generic": "testmpi",
                                    "F_name_impl": "testmpi_serial",
                                    "F_subprogram": "subroutine",
                                    "PY_name_impl": "PP_testmpi_serial",
                                    "function_name": "testmpi",
                                    "function_suffix": "_serial",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "testmpi"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "54 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr1",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "func": {
                                                    "name": "get",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ]
                                                },
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr1(void (*get)());",
                                "declgen": "void FuncPtr1(void ( * get)(void) +value)",
                                "doxygen": {
                                    "brief": "subroutine"
                                },
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_CPTR",
                                            "shadow_var": "SHadow_get",
                                            "stmt0": "c_void_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "get",
                                            "F_pointer": "SHPTR_get",
                                            "c_var": "get",
                                            "f_intent": "IN",
                                            "f_type": "type(C_PTR)",
                                            "f_var": "get",
                                            "sh_type": "SH_TYPE_CPTR"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": ".",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "POP",
                                            "stmt0": "lua_void_scalar_in",
                                            "stmt1": "lua_default"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "ctor_expr": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": null,
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "get",
                                    "C_name": "AA_example_nested_func_ptr1",
                                    "C_prototype": "void ( * get)(\tvoid)",
                                    "C_return_type": "void",
                                    "F_C_arguments": "get",
                                    "F_C_call": "c_func_ptr1",
                                    "F_C_name": "func_ptr1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "get",
                                    "F_arguments": "get",
                                    "F_name_function": "func_ptr1",
                                    "F_name_generic": "func_ptr1",
                                    "F_name_impl": "func_ptr1",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "FuncPtr1",
                                    "LUA_name_impl": "l_example_nested_func_ptr1",
                                    "PY_name_impl": "PP_FuncPtr1",
                                    "function_name": "FuncPtr1",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "func_ptr1"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "55 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr2",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "declarator": {
                                                "func": {
                                                    "name": "get",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ]
                                                },
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "params": [],
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr2(double * (*get)());",
                                "declgen": "void FuncPtr2(double * ( * get)(void))",
                                "doxygen": {
                                    "brief": "return a pointer"
                                },
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "get",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "shadow_var": "SHadow_get",
                                            "stmt0": "c_native_*_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "get",
                                            "F_pointer": "SHPTR_get",
                                            "c_var": "get",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_var": "get",
                                            "sh_type": "SH_TYPE_DOUBLE"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": "->",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "lua_tonumber(L, 1)",
                                            "stmt0": "lua_native_*_in",
                                            "stmt1": "lua_default"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "ctor_expr": "*get",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "get",
                                    "C_name": "AA_example_nested_func_ptr2",
                                    "C_prototype": "double * ( * get)(\tvoid)",
                                    "C_return_type": "void",
                                    "F_C_arguments": "get",
                                    "F_C_call": "c_func_ptr2",
                                    "F_C_name": "func_ptr2",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "get",
                                    "F_arguments": "get",
                                    "F_name_function": "func_ptr2",
                                    "F_name_generic": "func_ptr2",
                                    "F_name_impl": "func_ptr2",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "FuncPtr2",
                                    "LUA_name_impl": "l_example_nested_func_ptr2",
                                    "PY_name_impl": "PP_FuncPtr2",
                                    "function_name": "FuncPtr2",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "func_ptr2"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "56 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr3",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "func": {
                                                    "name": "get",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ]
                                                },
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "i",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr3(double (*get)(int i, int));",
                                "declgen": "void FuncPtr3(double ( * get)(int i +value, int +value) +value)",
                                "doxygen": {
                                    "brief": "abstract argument"
                                },
                                "options": {
                                    "F_force_wrapper": true
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "shadow_var": "SHadow_get",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "get",
                                            "F_pointer": "SHPTR_get",
                                            "c_var": "get",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_var": "get",
                                            "sh_type": "SH_TYPE_DOUBLE"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": ".",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "lua_tonumber(L, 1)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "double",
                                            "c_var": "get",
                                            "ctor_expr": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "get",
                                    "C_name": "AA_example_nested_func_ptr3",
                                    "C_prototype": "double ( * get)(\tint i,\t int)",
                                    "C_return_type": "void",
                                    "F_C_arguments": "get",
                                    "F_C_call": "c_func_ptr3",
                                    "F_C_name": "c_func_ptr3",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "get",
                                    "F_arguments": "get",
                                    "F_name_function": "func_ptr3",
                                    "F_name_generic": "func_ptr3",
                                    "F_name_impl": "func_ptr3",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "FuncPtr3",
                                    "LUA_name_impl": "l_example_nested_func_ptr3",
                                    "PY_name_impl": "PP_FuncPtr3",
                                    "function_name": "FuncPtr3",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "func_ptr3"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "57 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr4",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "func": {
                                                    "name": "get",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ]
                                                },
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "specifier": [
                                                        "double"
                                                    ],
                                                    "typemap_name": "double"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr4(double (*get)(double, int));",
                                "declgen": "void FuncPtr4(double ( * get)(double +value, int +value) +value)",
                                "doxygen": {
                                    "brief": "abstract argument"
                                },
                                "options": {
                                    "F_abstract_interface_argument_template": "XX{index}arg",
                                    "F_abstract_interface_subprogram_template": "custom_funptr",
                                    "F_force_wrapper": true,
                                    "wrap_lua": false,
                                    "wrap_python": false
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true
                                },
                                "zz_fmtargs": {
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "double",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "shadow_var": "SHadow_get",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "get",
                                            "F_pointer": "SHPTR_get",
                                            "c_var": "get",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_var": "get",
                                            "sh_type": "SH_TYPE_DOUBLE"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "get",
                                    "C_name": "AA_example_nested_func_ptr4",
                                    "C_prototype": "double ( * get)(\tdouble,\t int)",
                                    "C_return_type": "void",
                                    "F_C_arguments": "get",
                                    "F_C_call": "c_func_ptr4",
                                    "F_C_name": "c_func_ptr4",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "get",
                                    "F_arguments": "get",
                                    "F_name_function": "func_ptr4",
                                    "F_name_generic": "func_ptr4",
                                    "F_name_impl": "func_ptr4",
                                    "F_subprogram": "subroutine",
                                    "function_name": "FuncPtr4",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "func_ptr4"
                                }
                            },
                            {
                                "<FUNCTION>": "58 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "FuncPtr5",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "func": {
                                                    "name": "get",
                                                    "pointer": [
                                                        {
                                                            "ptr": "*"
                                                        }
                                                    ]
                                                },
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "params": [
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname1",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname2",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname3",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname4",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname5",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname6",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname7",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname8",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname9",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                },
                                                {
                                                    "attrs": {
                                                        "value": true
                                                    },
                                                    "declarator": {
                                                        "name": "verylongname10",
                                                        "pointer": []
                                                    },
                                                    "specifier": [
                                                        "int"
                                                    ],
                                                    "typemap_name": "int"
                                                }
                                            ],
                                            "specifier": [
                                                "void"
                                            ],
                                            "typemap_name": "void"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void FuncPtr5(void (*get)(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10))",
                                "declgen": "void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +value)",
                                "options": {},
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "get": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_CPTR",
                                            "shadow_var": "SHadow_get",
                                            "stmt0": "c_void_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "get",
                                            "F_pointer": "SHPTR_get",
                                            "c_var": "get",
                                            "f_intent": "IN",
                                            "f_type": "type(C_PTR)",
                                            "f_var": "get",
                                            "sh_type": "SH_TYPE_CPTR"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "get",
                                            "c_var_len": "Lget",
                                            "cxx_member": ".",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "lua_var": "SH_Lua_get",
                                            "pop_expr": "POP",
                                            "stmt0": "lua_void_scalar_in",
                                            "stmt1": "lua_default"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "void",
                                            "c_var": "get",
                                            "ctor_expr": "get",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&get",
                                            "cxx_type": "void",
                                            "cxx_var": "get",
                                            "data_var": "SHData_get",
                                            "numpy_type": null,
                                            "py_var": "SHPy_get",
                                            "size_var": "SHSize_get",
                                            "value_var": "SHValue_get"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "get",
                                    "C_name": "AA_example_nested_func_ptr5",
                                    "C_prototype": "void ( * get)(\tint verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10)",
                                    "C_return_type": "void",
                                    "F_C_arguments": "get",
                                    "F_C_call": "c_func_ptr5",
                                    "F_C_name": "func_ptr5",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "get",
                                    "F_arguments": "get",
                                    "F_name_function": "func_ptr5",
                                    "F_name_generic": "func_ptr5",
                                    "F_name_impl": "func_ptr5",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "FuncPtr5",
                                    "LUA_name_impl": "l_example_nested_func_ptr5",
                                    "PY_name_impl": "PP_FuncPtr5",
                                    "function_name": "FuncPtr5",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "func_ptr5"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "59 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "verylongfunctionname1",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname1",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname2",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname3",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname4",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname5",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname6",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname7",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname8",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname9",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "intent": "inout"
                                            },
                                            "declarator": {
                                                "name": "verylongname10",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "inout"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void verylongfunctionname1(int *verylongname1 +intent(inout), int *verylongname2 +intent(inout), int *verylongname3 +intent(inout), int *verylongname4 +intent(inout), int *verylongname5 +intent(inout), int *verylongname6 +intent(inout), int *verylongname7 +intent(inout), int *verylongname8 +intent(inout), int *verylongname9 +intent(inout), int *verylongname10 +intent(inout))",
                                "declgen": "void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))",
                                "options": {
                                    "F_force_wrapper": true
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "verylongname1": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname1",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname1",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname1",
                                            "F_pointer": "SHPTR_verylongname1",
                                            "c_var": "verylongname1",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname1",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname1",
                                            "c_var_len": "Lverylongname1",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "lua_var": "SH_Lua_verylongname1",
                                            "pop_expr": "lua_tointeger(L, 1)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "ctor_expr": "verylongname1",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "data_var": "SHData_verylongname1",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname1",
                                            "size_var": "SHSize_verylongname1",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname1"
                                        }
                                    },
                                    "verylongname10": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname10",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname10",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname10",
                                            "F_pointer": "SHPTR_verylongname10",
                                            "c_var": "verylongname10",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname10",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 10,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname10",
                                            "c_var_len": "Lverylongname10",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "lua_var": "SH_Lua_verylongname10",
                                            "pop_expr": "lua_tointeger(L, 10)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "ctor_expr": "verylongname10",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "data_var": "SHData_verylongname10",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname10",
                                            "size_var": "SHSize_verylongname10",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname10"
                                        }
                                    },
                                    "verylongname2": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname2",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname2",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname2",
                                            "F_pointer": "SHPTR_verylongname2",
                                            "c_var": "verylongname2",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname2",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname2",
                                            "c_var_len": "Lverylongname2",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "lua_var": "SH_Lua_verylongname2",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "ctor_expr": "verylongname2",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "data_var": "SHData_verylongname2",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname2",
                                            "size_var": "SHSize_verylongname2",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname2"
                                        }
                                    },
                                    "verylongname3": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname3",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname3",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname3",
                                            "F_pointer": "SHPTR_verylongname3",
                                            "c_var": "verylongname3",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname3",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 3,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname3",
                                            "c_var_len": "Lverylongname3",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "lua_var": "SH_Lua_verylongname3",
                                            "pop_expr": "lua_tointeger(L, 3)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "ctor_expr": "verylongname3",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "data_var": "SHData_verylongname3",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname3",
                                            "size_var": "SHSize_verylongname3",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname3"
                                        }
                                    },
                                    "verylongname4": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname4",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname4",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname4",
                                            "F_pointer": "SHPTR_verylongname4",
                                            "c_var": "verylongname4",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname4",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 4,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname4",
                                            "c_var_len": "Lverylongname4",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "lua_var": "SH_Lua_verylongname4",
                                            "pop_expr": "lua_tointeger(L, 4)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "ctor_expr": "verylongname4",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "data_var": "SHData_verylongname4",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname4",
                                            "size_var": "SHSize_verylongname4",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname4"
                                        }
                                    },
                                    "verylongname5": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname5",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname5",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname5",
                                            "F_pointer": "SHPTR_verylongname5",
                                            "c_var": "verylongname5",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname5",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 5,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname5",
                                            "c_var_len": "Lverylongname5",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "lua_var": "SH_Lua_verylongname5",
                                            "pop_expr": "lua_tointeger(L, 5)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "ctor_expr": "verylongname5",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "data_var": "SHData_verylongname5",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname5",
                                            "size_var": "SHSize_verylongname5",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname5"
                                        }
                                    },
                                    "verylongname6": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname6",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname6",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname6",
                                            "F_pointer": "SHPTR_verylongname6",
                                            "c_var": "verylongname6",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname6",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 6,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname6",
                                            "c_var_len": "Lverylongname6",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "lua_var": "SH_Lua_verylongname6",
                                            "pop_expr": "lua_tointeger(L, 6)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "ctor_expr": "verylongname6",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "data_var": "SHData_verylongname6",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname6",
                                            "size_var": "SHSize_verylongname6",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname6"
                                        }
                                    },
                                    "verylongname7": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname7",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname7",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname7",
                                            "F_pointer": "SHPTR_verylongname7",
                                            "c_var": "verylongname7",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname7",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 7,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname7",
                                            "c_var_len": "Lverylongname7",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "lua_var": "SH_Lua_verylongname7",
                                            "pop_expr": "lua_tointeger(L, 7)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "ctor_expr": "verylongname7",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "data_var": "SHData_verylongname7",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname7",
                                            "size_var": "SHSize_verylongname7",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname7"
                                        }
                                    },
                                    "verylongname8": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname8",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname8",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname8",
                                            "F_pointer": "SHPTR_verylongname8",
                                            "c_var": "verylongname8",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname8",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 8,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname8",
                                            "c_var_len": "Lverylongname8",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "lua_var": "SH_Lua_verylongname8",
                                            "pop_expr": "lua_tointeger(L, 8)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "ctor_expr": "verylongname8",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "data_var": "SHData_verylongname8",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname8",
                                            "size_var": "SHSize_verylongname8",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname8"
                                        }
                                    },
                                    "verylongname9": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "verylongname9",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname9",
                                            "stmt0": "c_native_*_inout",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname9",
                                            "F_pointer": "SHPTR_verylongname9",
                                            "c_var": "verylongname9",
                                            "f_intent": "INOUT",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname9",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_*_inout",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_inout",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 9,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "verylongname9",
                                            "c_var_len": "Lverylongname9",
                                            "cxx_member": "->",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "lua_var": "SH_Lua_verylongname9",
                                            "pop_expr": "lua_tointeger(L, 9)",
                                            "stmt0": "lua_native_*_inout",
                                            "stmt1": "lua_native_*_inout"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "ctor_expr": "verylongname9",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "data_var": "SHData_verylongname9",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname9",
                                            "size_var": "SHSize_verylongname9",
                                            "stmt0": "py_native_*_inout",
                                            "stmt1": "py_native_*_inout",
                                            "value_var": "SHValue_verylongname9"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "C_name": "AA_example_nested_verylongfunctionname1",
                                    "C_prototype": "int * verylongname1,\t int * verylongname2,\t int * verylongname3,\t int * verylongname4,\t int * verylongname5,\t int * verylongname6,\t int * verylongname7,\t int * verylongname8,\t int * verylongname9,\t int * verylongname10",
                                    "C_return_type": "void",
                                    "F_C_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "F_C_call": "c_verylongfunctionname1",
                                    "F_C_name": "c_verylongfunctionname1",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "F_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "F_name_function": "verylongfunctionname1",
                                    "F_name_generic": "verylongfunctionname1",
                                    "F_name_impl": "verylongfunctionname1",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "verylongfunctionname1",
                                    "LUA_name_impl": "l_example_nested_verylongfunctionname1",
                                    "PY_name_impl": "PP_verylongfunctionname1",
                                    "function_name": "verylongfunctionname1",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "verylongfunctionname1"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "60 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "verylongfunctionname2",
                                        "pointer": []
                                    },
                                    "metaattrs": {
                                        "intent": "result"
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname1",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname2",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname3",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname4",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname5",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname6",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname7",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname8",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname9",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        },
                                        {
                                            "attrs": {
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "verylongname10",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                },
                                "decl": "int verylongfunctionname2(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10)",
                                "declgen": "int verylongfunctionname2(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value)",
                                "options": {
                                    "C_line_length": 0,
                                    "F_force_wrapper": true,
                                    "F_line_length": 0
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "verylongname1": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname1",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname1",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname1",
                                            "F_pointer": "SHPTR_verylongname1",
                                            "c_var": "verylongname1",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname1",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname1",
                                            "c_var_len": "Lverylongname1",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "lua_var": "SH_Lua_verylongname1",
                                            "pop_expr": "lua_tointeger(L, 1)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname1",
                                            "ctor_expr": "verylongname1",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname1",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname1",
                                            "data_var": "SHData_verylongname1",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname1",
                                            "size_var": "SHSize_verylongname1",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname1"
                                        }
                                    },
                                    "verylongname10": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname10",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname10",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname10",
                                            "F_pointer": "SHPTR_verylongname10",
                                            "c_var": "verylongname10",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname10",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 10,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname10",
                                            "c_var_len": "Lverylongname10",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "lua_var": "SH_Lua_verylongname10",
                                            "pop_expr": "lua_tointeger(L, 10)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname10",
                                            "ctor_expr": "verylongname10",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname10",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname10",
                                            "data_var": "SHData_verylongname10",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname10",
                                            "size_var": "SHSize_verylongname10",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname10"
                                        }
                                    },
                                    "verylongname2": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname2",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname2",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname2",
                                            "F_pointer": "SHPTR_verylongname2",
                                            "c_var": "verylongname2",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname2",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname2",
                                            "c_var_len": "Lverylongname2",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "lua_var": "SH_Lua_verylongname2",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname2",
                                            "ctor_expr": "verylongname2",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname2",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname2",
                                            "data_var": "SHData_verylongname2",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname2",
                                            "size_var": "SHSize_verylongname2",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname2"
                                        }
                                    },
                                    "verylongname3": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname3",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname3",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname3",
                                            "F_pointer": "SHPTR_verylongname3",
                                            "c_var": "verylongname3",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname3",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 3,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname3",
                                            "c_var_len": "Lverylongname3",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "lua_var": "SH_Lua_verylongname3",
                                            "pop_expr": "lua_tointeger(L, 3)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname3",
                                            "ctor_expr": "verylongname3",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname3",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname3",
                                            "data_var": "SHData_verylongname3",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname3",
                                            "size_var": "SHSize_verylongname3",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname3"
                                        }
                                    },
                                    "verylongname4": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname4",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname4",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname4",
                                            "F_pointer": "SHPTR_verylongname4",
                                            "c_var": "verylongname4",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname4",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 4,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname4",
                                            "c_var_len": "Lverylongname4",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "lua_var": "SH_Lua_verylongname4",
                                            "pop_expr": "lua_tointeger(L, 4)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname4",
                                            "ctor_expr": "verylongname4",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname4",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname4",
                                            "data_var": "SHData_verylongname4",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname4",
                                            "size_var": "SHSize_verylongname4",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname4"
                                        }
                                    },
                                    "verylongname5": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname5",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname5",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname5",
                                            "F_pointer": "SHPTR_verylongname5",
                                            "c_var": "verylongname5",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname5",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 5,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname5",
                                            "c_var_len": "Lverylongname5",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "lua_var": "SH_Lua_verylongname5",
                                            "pop_expr": "lua_tointeger(L, 5)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname5",
                                            "ctor_expr": "verylongname5",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname5",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname5",
                                            "data_var": "SHData_verylongname5",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname5",
                                            "size_var": "SHSize_verylongname5",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname5"
                                        }
                                    },
                                    "verylongname6": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname6",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname6",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname6",
                                            "F_pointer": "SHPTR_verylongname6",
                                            "c_var": "verylongname6",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname6",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 6,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname6",
                                            "c_var_len": "Lverylongname6",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "lua_var": "SH_Lua_verylongname6",
                                            "pop_expr": "lua_tointeger(L, 6)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname6",
                                            "ctor_expr": "verylongname6",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname6",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname6",
                                            "data_var": "SHData_verylongname6",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname6",
                                            "size_var": "SHSize_verylongname6",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname6"
                                        }
                                    },
                                    "verylongname7": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname7",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname7",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname7",
                                            "F_pointer": "SHPTR_verylongname7",
                                            "c_var": "verylongname7",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname7",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 7,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname7",
                                            "c_var_len": "Lverylongname7",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "lua_var": "SH_Lua_verylongname7",
                                            "pop_expr": "lua_tointeger(L, 7)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname7",
                                            "ctor_expr": "verylongname7",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname7",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname7",
                                            "data_var": "SHData_verylongname7",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname7",
                                            "size_var": "SHSize_verylongname7",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname7"
                                        }
                                    },
                                    "verylongname8": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname8",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname8",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname8",
                                            "F_pointer": "SHPTR_verylongname8",
                                            "c_var": "verylongname8",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname8",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 8,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname8",
                                            "c_var_len": "Lverylongname8",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "lua_var": "SH_Lua_verylongname8",
                                            "pop_expr": "lua_tointeger(L, 8)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname8",
                                            "ctor_expr": "verylongname8",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname8",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname8",
                                            "data_var": "SHData_verylongname8",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname8",
                                            "size_var": "SHSize_verylongname8",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname8"
                                        }
                                    },
                                    "verylongname9": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname9",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_verylongname9",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "verylongname9",
                                            "F_pointer": "SHPTR_verylongname9",
                                            "c_var": "verylongname9",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "verylongname9",
                                            "sh_type": "SH_TYPE_INT",
                                            "stmt0": "f_native_scalar_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_scalar_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 9,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "verylongname9",
                                            "c_var_len": "Lverylongname9",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "lua_var": "SH_Lua_verylongname9",
                                            "pop_expr": "lua_tointeger(L, 9)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "verylongname9",
                                            "ctor_expr": "verylongname9",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&verylongname9",
                                            "cxx_type": "int",
                                            "cxx_var": "verylongname9",
                                            "data_var": "SHData_verylongname9",
                                            "numpy_type": "NPY_INT",
                                            "py_var": "SHPy_verylongname9",
                                            "size_var": "SHSize_verylongname9",
                                            "stmt0": "py_native_scalar_in",
                                            "stmt1": "py_default",
                                            "value_var": "SHValue_verylongname9"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "C_name": "AA_example_nested_verylongfunctionname2",
                                    "C_prototype": "int verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10",
                                    "C_return_type": "int",
                                    "F_C_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "F_C_call": "c_verylongfunctionname2",
                                    "F_C_name": "c_verylongfunctionname2",
                                    "F_C_result_clause": "\fresult(SHT_rv)",
                                    "F_C_subprogram": "function",
                                    "F_C_var": "SHT_crv",
                                    "F_arg_c_call": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "F_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10",
                                    "F_name_function": "verylongfunctionname2",
                                    "F_name_generic": "verylongfunctionname2",
                                    "F_name_impl": "verylongfunctionname2",
                                    "F_result_clause": "\fresult(SHT_rv)",
                                    "F_subprogram": "function",
                                    "LUA_name": "verylongfunctionname2",
                                    "LUA_name_impl": "l_example_nested_verylongfunctionname2",
                                    "PY_name_impl": "PP_verylongfunctionname2",
                                    "cxx_rv_decl": "int SHC_rv",
                                    "function_name": "verylongfunctionname2",
                                    "underscore_name": "verylongfunctionname2"
                                },
                                "zz_fmtresult": {
                                    "fmtc": {
                                        "c_const": "",
                                        "c_get_value": "",
                                        "c_type": "int",
                                        "c_var": "SHC_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHC_rv",
                                        "cxx_type": "int",
                                        "cxx_var": "SHC_rv",
                                        "idtor": "0",
                                        "sh_type": "SH_TYPE_INT",
                                        "shadow_var": "SHadow_rv",
                                        "stmt0": "c_native_scalar_result",
                                        "stmt1": "c_default"
                                    },
                                    "fmtf": {
                                        "F_C_var": "SHT_rv",
                                        "c_var": "SHT_rv",
                                        "cxx_type": "int",
                                        "f_intent": "OUT",
                                        "f_kind": "C_INT",
                                        "f_type": "integer(C_INT)",
                                        "f_var": "SHT_rv",
                                        "sh_type": "SH_TYPE_INT",
                                        "stmt0": "f_native_scalar_result",
                                        "stmt1": "f_default",
                                        "stmtc0": "c_native_scalar_result",
                                        "stmtc1": "c_default"
                                    },
                                    "fmtl": {
                                        "c_var": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_var": "SHCXX_rv",
                                        "push_arg": "SHCXX_rv",
                                        "push_expr": "lua_pushinteger(L, SHCXX_rv)",
                                        "stmt0": "lua_native_scalar_result",
                                        "stmt1": "lua_native_scalar_result"
                                    },
                                    "fmtpy": {
                                        "c_deref": "",
                                        "c_var": "SHCXX_rv",
                                        "ctor_expr": "SHCXX_rv",
                                        "cxx_addr": "&",
                                        "cxx_member": ".",
                                        "cxx_nonconst_ptr": "&SHCXX_rv",
                                        "cxx_type": "int",
                                        "cxx_var": "SHCXX_rv",
                                        "data_var": "SHData_rv",
                                        "numpy_type": "NPY_INT",
                                        "py_var": "SHTPy_rv",
                                        "size_var": "SHSize_rv",
                                        "stmt0": "py_native_scalar_result",
                                        "stmt1": "py_default",
                                        "value_var": "SHValue_rv"
                                    }
                                }
                            },
                            {
                                "<FUNCTION>": "61 ****************************************",
                                "ast": {
                                    "declarator": {
                                        "name": "cos_doubles",
                                        "pointer": []
                                    },
                                    "params": [
                                        {
                                            "attrs": {
                                                "intent": "in",
                                                "rank": 2
                                            },
                                            "declarator": {
                                                "name": "in",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        },
                                        {
                                            "attrs": {
                                                "deref": "allocatable",
                                                "dimension": "shape(in)",
                                                "intent": "out"
                                            },
                                            "declarator": {
                                                "name": "out",
                                                "pointer": [
                                                    {
                                                        "ptr": "*"
                                                    }
                                                ]
                                            },
                                            "metaattrs": {
                                                "deref": "allocatable",
                                                "dimension": [
                                                    {
                                                        "args": [
                                                            {
                                                                "name": "in"
                                                            }
                                                        ],
                                                        "name": "shape"
                                                    }
                                                ],
                                                "intent": "out"
                                            },
                                            "specifier": [
                                                "double"
                                            ],
                                            "typemap_name": "double"
                                        },
                                        {
                                            "attrs": {
                                                "implied": "size(in)",
                                                "value": true
                                            },
                                            "declarator": {
                                                "name": "sizein",
                                                "pointer": []
                                            },
                                            "metaattrs": {
                                                "intent": "in"
                                            },
                                            "specifier": [
                                                "int"
                                            ],
                                            "typemap_name": "int"
                                        }
                                    ],
                                    "specifier": [
                                        "void"
                                    ],
                                    "typemap_name": "void"
                                },
                                "decl": "void cos_doubles( double * in   +intent(in)  +rank(2), double * out  +intent(out) +deref(allocatable)+dimension(shape(in)), int      sizein +implied(size(in)))",
                                "declgen": "void cos_doubles(double * in +intent(in)+rank(2), double * out +deref(allocatable)+dimension(shape(in))+intent(out), int sizein +implied(size(in))+value)",
                                "doxygen": {
                                    "brief": "Test multidimensional arrays with allocatable"
                                },
                                "options": {
                                    "F_standard": 2008
                                },
                                "wrap": {
                                    "c": true,
                                    "f_c": true,
                                    "fortran": true,
                                    "lua": true,
                                    "python": true
                                },
                                "zz_fmtargs": {
                                    "in": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "in",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "in",
                                            "cxx_type": "double",
                                            "cxx_var": "in",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "shadow_var": "SHadow_in",
                                            "stmt0": "c_native_*_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "in",
                                            "F_pointer": "SHPTR_in",
                                            "c_var": "in",
                                            "f_assumed_shape": "(:,:)",
                                            "f_c_dimension": "(*)",
                                            "f_intent": "IN",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_var": "in",
                                            "rank": "2",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "size": "size(in)",
                                            "stmt0": "f_native_*_in",
                                            "stmt1": "f_default",
                                            "stmtc0": "c_native_*_in",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 1,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "in",
                                            "c_var_len": "Lin",
                                            "cxx_member": "->",
                                            "cxx_type": "double",
                                            "cxx_var": "in",
                                            "lua_var": "SH_Lua_in",
                                            "pop_expr": "lua_tonumber(L, 1)",
                                            "stmt0": "lua_native_*_in",
                                            "stmt1": "lua_default"
                                        },
                                        "fmtpy": {
                                            "array_size": "1",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "double",
                                            "c_var": "in",
                                            "ctor_expr": "*in",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "in",
                                            "cxx_type": "double",
                                            "cxx_var": "in",
                                            "data_var": "SHData_in",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_in",
                                            "pytmp_var": "SHTPy_in",
                                            "size_var": "SHSize_in",
                                            "stmt0": "py_native_*_in_pointer_numpy",
                                            "stmt1": "py_native_*_in_pointer_numpy",
                                            "value_var": "SHValue_in"
                                        }
                                    },
                                    "out": {
                                        "fmtc": {
                                            "c_addr": "",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_member": "->",
                                            "c_var": "out",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "out",
                                            "cxx_type": "double",
                                            "cxx_var": "out",
                                            "idtor": "0",
                                            "rank": "1",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "shadow_var": "SHadow_out",
                                            "stmt0": "c_native_*_out",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "out",
                                            "F_pointer": "SHPTR_out",
                                            "c_var": "out",
                                            "f_array_allocate": "(shape(in))",
                                            "f_assumed_shape": "(:)",
                                            "f_intent": "OUT",
                                            "f_kind": "C_DOUBLE",
                                            "f_type": "real(C_DOUBLE)",
                                            "f_var": "out",
                                            "rank": "1",
                                            "sh_type": "SH_TYPE_DOUBLE",
                                            "stmt0": "f_native_*_out_allocatable",
                                            "stmt1": "f_native_*_out_allocatable",
                                            "stmtc0": "c_native_*_out_allocatable",
                                            "stmtc1": "c_default"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": " *",
                                            "c_member": "->",
                                            "c_var": "out",
                                            "c_var_len": "Lout",
                                            "cxx_member": "->",
                                            "cxx_type": "double",
                                            "cxx_var": "out",
                                            "lua_var": "SH_Lua_out",
                                            "stmt0": "lua_native_*_out",
                                            "stmt1": "lua_default"
                                        },
                                        "fmtpy": {
                                            "array_size": "shape(in)",
                                            "c_const": "",
                                            "c_deref": "*",
                                            "c_type": "double",
                                            "c_var": "out",
                                            "ctor_expr": "*out",
                                            "cxx_addr": "",
                                            "cxx_member": "->",
                                            "cxx_nonconst_ptr": "out",
                                            "cxx_type": "double",
                                            "cxx_var": "out",
                                            "data_var": "SHData_out",
                                            "npy_dims_var": "SHD_out",
                                            "npy_intp_asgn": "SHD_out[0] = shape(in);\n",
                                            "npy_intp_decl": "npy_intp SHD_out[1];\n",
                                            "npy_rank": "1",
                                            "numpy_type": "NPY_DOUBLE",
                                            "py_var": "SHPy_out",
                                            "rank": "1",
                                            "size_var": "SHSize_out",
                                            "stmt0": "py_native_*_out_allocatable_numpy",
                                            "stmt1": "py_native_*_out_allocatable_numpy",
                                            "value_var": "SHValue_out"
                                        }
                                    },
                                    "sizein": {
                                        "fmtc": {
                                            "c_addr": "&",
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "sizein",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&sizein",
                                            "cxx_type": "int",
                                            "cxx_var": "sizein",
                                            "idtor": "0",
                                            "sh_type": "SH_TYPE_INT",
                                            "shadow_var": "SHadow_sizein",
                                            "stmt0": "c_native_scalar_in",
                                            "stmt1": "c_default"
                                        },
                                        "fmtf": {
                                            "F_C_var": "sizein",
                                            "F_pointer": "SHPTR_sizein",
                                            "c_var": "SH_sizein",
                                            "f_intent": "IN",
                                            "f_kind": "C_INT",
                                            "f_type": "integer(C_INT)",
                                            "f_var": "sizein",
                                            "pre_call_intent": "size(in,kind=C_INT)",
                                            "sh_type": "SH_TYPE_INT"
                                        },
                                        "fmtl": {
                                            "LUA_index": 2,
                                            "c_deref": "",
                                            "c_member": ".",
                                            "c_var": "sizein",
                                            "c_var_len": "Lsizein",
                                            "cxx_member": ".",
                                            "cxx_type": "int",
                                            "cxx_var": "sizein",
                                            "lua_var": "SH_Lua_sizein",
                                            "pop_expr": "lua_tointeger(L, 2)",
                                            "stmt0": "lua_native_scalar_in",
                                            "stmt1": "lua_native_scalar_in"
                                        },
                                        "fmtpy": {
                                            "c_const": "",
                                            "c_deref": "",
                                            "c_type": "int",
                                            "c_var": "sizein",
                                            "ctor_expr": "sizein",
                                            "cxx_addr": "&",
                                            "cxx_member": ".",
                                            "cxx_nonconst_ptr": "&sizein",
                                            "cxx_type": "int",
                                            "cxx_var": "sizein",
                                            "data_var": "SHData_sizein",
                                            "numpy_type": "NPY_INT",
                                            "pre_call_intent": "PyArray_SIZE(SHPy_in)",
                                            "py_var": "SHPy_sizein",
                                            "size_var": "SHSize_sizein",
                                            "value_var": "SHValue_sizein"
                                        }
                                    }
                                },
                                "zz_fmtdict": {
                                    "C_call_list": "in,\t out,\t sizein",
                                    "C_name": "AA_example_nested_cos_doubles",
                                    "C_prototype": "double * in,\t double * out,\t int sizein",
                                    "C_return_type": "void",
                                    "F_C_arguments": "in,\t out,\t sizein",
                                    "F_C_call": "c_cos_doubles",
                                    "F_C_name": "c_cos_doubles",
                                    "F_C_subprogram": "subroutine",
                                    "F_arg_c_call": "in,\t out,\t SH_sizein",
                                    "F_arguments": "in,\t out",
                                    "F_name_function": "cos_doubles",
                                    "F_name_generic": "cos_doubles",
                                    "F_name_impl": "cos_doubles",
                                    "F_subprogram": "subroutine",
                                    "LUA_name": "cos_doubles",
                                    "LUA_name_impl": "l_example_nested_cos_doubles",
                                    "PY_name_impl": "PP_cos_doubles",
                                    "function_name": "cos_doubles",
                                    "stmt0": "f_subroutine",
                                    "stmt1": "f_default",
                                    "stmtc0": "c",
                                    "stmtc1": "c_default",
                                    "underscore_name": "cos_doubles"
                                },
                                "zz_fmtresult": {
                                    "fmtl": {
                                        "stmt0": "lua_subroutine",
                                        "stmt1": "lua_subroutine"
                                    }
                                }
                            }
                        ],
                        "name": "nested",
                        "options": {},
                        "scope": "example::nested::",
                        "scope_file": [
                            "UserLibrary",
                            "example",
                            "nested"
                        ],
                        "wrap": {
                            "c": true,
                            "fortran": true,
                            "lua": true,
                            "python": true
                        },
                        "zz_fmtdict": {
                            "CXX_this_call": "example::nested::",
                            "C_header_filename": "wrapUserLibrary_example_nested.h",
                            "C_impl_filename": "wrapUserLibrary_example_nested.cpp",
                            "C_name_scope": "example_nested_",
                            "F_impl_filename": "wrapfUserLibrary_example_nested.f",
                            "F_module_name": "userlibrary_example_nested_mod",
                            "LUA_this_call": "example::nested::",
                            "PY_library_doc": "library documentation",
                            "PY_module_filename": "pyUserLibrary_example_nestedmodule.cpp",
                            "PY_module_init": "userlibrary_example_nested",
                            "PY_module_name": "nested",
                            "PY_module_scope": "userlibrary.example.nested",
                            "PY_this_call": "example::nested::",
                            "file_scope": "UserLibrary_example_nested",
                            "namespace_scope": "example::nested::"
                        }
                    }
                ],
                "options": {},
                "scope": "example::",
                "scope_file": [
                    "UserLibrary",
                    "example"
                ],
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "CXX_this_call": "example::",
                    "C_header_filename": "wrapUserLibrary_example.h",
                    "C_impl_filename": "wrapUserLibrary_example.cpp",
                    "C_name_scope": "example_",
                    "F_impl_filename": "wrapfUserLibrary_example.f",
                    "F_module_name": "userlibrary_example_mod",
                    "LUA_this_call": "example::",
                    "PY_library_doc": "library documentation",
                    "PY_module_filename": "pyUserLibrary_examplemodule.cpp",
                    "PY_module_init": "userlibrary_example",
                    "PY_module_name": "example",
                    "PY_module_scope": "userlibrary.example",
                    "PY_this_call": "example::",
                    "file_scope": "UserLibrary_example",
                    "namespace_scope": "example::"
                }
            }
        ],
        "scope_file": [
            "UserLibrary"
        ],
        "typedefs": [
            {
                "<TYPEDEF>": "****************************************",
                "ast": {
                    "declarator": {
                        "name": "SidreLength",
                        "pointer": []
                    },
                    "specifier": [
                        "long"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "long"
                },
                "name": "SidreLength",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {}
            },
            {
                "<TYPEDEF>": "****************************************",
                "ast": {
                    "declarator": {
                        "name": "TypeID",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "int"
                },
                "name": "TypeID",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "lua": true,
                    "python": true
                },
                "zz_fmtdict": {}
            }
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "lua": true,
            "python": true
        }
    }
}