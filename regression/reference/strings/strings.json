{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "strings.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passChar",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "status",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passChar(char status)",
                "declgen": "void passChar(char status +value)",
                "doxygen": {
                    "brief": "pass a single char argument as a scalar."
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_scalar",
                            "stmt1": "c_in_char_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "status",
                            "F_pointer": "SHPTR_status",
                            "c_var": "status",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "status",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_char_scalar",
                            "stmt1": "f_in_char_scalar",
                            "stmtc0": "c_in_char_scalar",
                            "stmtc1": "c_in_char_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "ctor_expr": "status",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "data_var": "SHData_status",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_status",
                            "pytmp_var": "SHTPy_status",
                            "size_var": "SHSize_status",
                            "stmt0": "py_in_char_scalar",
                            "stmt1": "py_in_char_scalar",
                            "value_var": "SHValue_status"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "status",
                    "C_name": "STR_pass_char",
                    "C_prototype": "char status",
                    "C_return_type": "void",
                    "F_C_arguments": "status",
                    "F_C_call": "c_pass_char",
                    "F_C_name": "pass_char",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "status",
                    "F_arguments": "status",
                    "F_name_function": "pass_char",
                    "F_name_generic": "pass_char",
                    "F_name_impl": "pass_char",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passChar",
                    "function_name": "passChar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "pass_char"
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "passCharForce",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "status",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharForce(char status)",
                "declgen": "void passCharForce(char status +value)",
                "doxygen": {
                    "description": "By default no Fortran wrapper is created.\nForce one so it can be tested.\n"
                },
                "options": {
                    "F_force_wrapper": true,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_scalar",
                            "stmt1": "c_in_char_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "status",
                            "F_pointer": "SHPTR_status",
                            "c_var": "status",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "status",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_char_scalar",
                            "stmt1": "f_in_char_scalar",
                            "stmtc0": "c_in_char_scalar",
                            "stmtc1": "c_in_char_scalar"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "status",
                    "C_name": "STR_pass_char_force",
                    "C_prototype": "char status",
                    "C_return_type": "void",
                    "F_C_arguments": "status",
                    "F_C_call": "c_pass_char_force",
                    "F_C_name": "c_pass_char_force",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "status",
                    "F_arguments": "status",
                    "F_name_function": "pass_char_force",
                    "F_name_generic": "pass_char_force",
                    "F_name_impl": "pass_char_force",
                    "F_subprogram": "subroutine",
                    "function_name": "passCharForce",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "pass_char_force"
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnChar",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char returnChar()",
                "declgen": "char returnChar(void)",
                "doxygen": {
                    "brief": "return a char argument (non-pointer)"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_return_char",
                    "C_prototype": "void",
                    "C_return_type": "char",
                    "F_C_arguments": "",
                    "F_C_call": "c_return_char",
                    "F_C_name": "return_char",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_function": "return_char",
                    "F_name_generic": "return_char",
                    "F_name_impl": "return_char",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_returnChar",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "returnChar",
                    "underscore_name": "return_char"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_scalar",
                        "stmt1": "c_function_char_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "char",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_char_scalar",
                        "stmt1": "f_default",
                        "stmtc0": "c_function_char_scalar",
                        "stmtc1": "c_function_char_scalar"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_char_scalar",
                        "stmt1": "py_function_char_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "3 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "39",
                "ast": {
                    "declarator": {
                        "name": "passCharPtr",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "40",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtr(char * dest+intent(out)+charlen(40), const char *src)",
                "declgen": "void passCharPtr(char * dest +charlen(40)+intent(out), const char * src)",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nIn Python, src must not be over 40 characters, defined by charlen.\n"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "dest",
                            "c_var": "dest"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "dest",
                            "charlen": "40",
                            "ctor_expr": "dest",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "data_var": "SHData_dest",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_dest",
                            "size_var": "SHSize_dest",
                            "stmt0": "py_out_char_*_charlen",
                            "stmt1": "py_out_char_*_charlen",
                            "value_var": "SHValue_dest"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "src",
                            "c_var": "src"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "src",
                            "ctor_expr": "*src",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "data_var": "SHData_src",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_src",
                            "size_var": "SHSize_src",
                            "stmt0": "py_in_char_*",
                            "stmt1": "py_in_char_*",
                            "value_var": "SHValue_src"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "STR_pass_char_ptr",
                    "C_prototype": "char * dest,\t const char * src",
                    "C_return_type": "void",
                    "F_C_arguments": "dest,\t src",
                    "F_C_call": "c_pass_char_ptr_bufferify",
                    "F_C_name": "c_pass_char_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t trim(src)//C_NULL_CHAR",
                    "F_arguments": "dest,\t src",
                    "F_name_function": "pass_char_ptr",
                    "F_name_generic": "pass_char_ptr",
                    "F_name_impl": "pass_char_ptr",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passCharPtr",
                    "function_name": "passCharPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "pass_char_ptr"
                }
            },
            {
                "<FUNCTION>": "39 ****************************************",
                "_PTR_C_CXX_index": "3",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passCharPtr",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "charlen": "40",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtr(char * dest+intent(out)+charlen(40), const char *src)",
                "declgen": "void passCharPtr(char * dest +charlen(40)+intent(out), const char * src)",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nIn Python, src must not be over 40 characters, defined by charlen.\n"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*_buf",
                            "stmt1": "c_out_char_*_buf",
                            "temp0": "dest_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "dest",
                            "F_pointer": "SHPTR_dest",
                            "c_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "dest",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_char_*_buf",
                            "stmt1": "f_out_char_*_buf",
                            "stmtc0": "c_out_char_*_buf",
                            "stmtc1": "c_out_char_*_buf",
                            "temp0": "dest_temp0"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "src",
                            "F_pointer": "SHPTR_src",
                            "c_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "src",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "STR_pass_char_ptr_bufferify",
                    "C_prototype": "char *dest,\t int dest_temp0,\t const char * src",
                    "C_return_type": "void",
                    "F_C_arguments": "dest,\t dest_temp0,\t src",
                    "F_C_name": "c_pass_char_ptr_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "passCharPtr",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "pass_char_ptr"
                }
            },
            {
                "<FUNCTION>": "4 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "40",
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout))",
                "doxygen": {
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "s",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "s",
                            "c_var": "s"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "s",
                            "ctor_expr": "s",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "s",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "data_var": "SHData_s",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_s",
                            "size_var": "SHSize_s",
                            "stmt0": "py_inout_char_*",
                            "stmt1": "py_inout_char_*",
                            "value_var": "SHValue_s"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "s",
                    "C_name": "STR_pass_char_ptr_in_out",
                    "C_prototype": "char * s",
                    "C_return_type": "void",
                    "F_C_arguments": "s",
                    "F_C_call": "c_pass_char_ptr_in_out_bufferify",
                    "F_C_name": "c_pass_char_ptr_in_out",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "s,\t len(s, kind=C_INT)",
                    "F_arguments": "s",
                    "F_name_function": "pass_char_ptr_in_out",
                    "F_name_generic": "pass_char_ptr_in_out",
                    "F_name_impl": "pass_char_ptr_in_out",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passCharPtrInOut",
                    "function_name": "passCharPtrInOut",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "pass_char_ptr_in_out"
                }
            },
            {
                "<FUNCTION>": "40 ****************************************",
                "_PTR_C_CXX_index": "4",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout))",
                "doxygen": {
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "s",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_s",
                            "cxx_type": "char",
                            "cxx_var": "SHCXX_s",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_char_*_buf",
                            "stmt1": "c_inout_char_*_buf",
                            "temp0": "s_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "s",
                            "F_pointer": "SHPTR_s",
                            "c_var": "s",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "s",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_inout_char_*_buf",
                            "stmt1": "f_inout_char_*_buf",
                            "stmtc0": "c_inout_char_*_buf",
                            "stmtc1": "c_inout_char_*_buf",
                            "temp0": "s_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_s",
                    "C_name": "STR_pass_char_ptr_in_out_bufferify",
                    "C_prototype": "char *s,\t int s_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "s,\t s_temp0",
                    "F_C_name": "c_pass_char_ptr_in_out_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "passCharPtrInOut",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "pass_char_ptr_in_out"
                }
            },
            {
                "<FUNCTION>": "5 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "41",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr1",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr1()",
                "declgen": "const char * getCharPtr1(void)",
                "doxygen": {
                    "brief": "return a 'const char *' as character(*)"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_char_ptr1",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_char_ptr1_bufferify",
                    "F_C_name": "c_get_char_ptr1",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_char_ptr1",
                    "F_name_generic": "get_char_ptr1",
                    "F_name_impl": "get_char_ptr1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getCharPtr1",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr1",
                    "underscore_name": "get_char_ptr1"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_*_allocatable",
                        "stmt1": "c_function_char_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "char",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_char_*_buf_allocatable",
                        "stmt1": "f_function_char_*_buf_allocatable",
                        "stmtc0": "c_function_char_*_buf_allocatable",
                        "stmtc1": "c_function_char_*_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_char_*",
                        "stmt1": "py_function_char_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "41 ****************************************",
                "_PTR_C_CXX_index": "5",
                "_generated": "arg_to_buffer",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr1",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr1()",
                "declgen": "const char * getCharPtr1(void)",
                "doxygen": {
                    "brief": "return a 'const char *' as character(*)"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_char_ptr1_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_char_ptr1_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr1",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr1"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_*_buf_allocatable",
                        "stmt1": "c_function_char_*_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "6 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "42",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr2() +len(30)",
                "declgen": "const char * getCharPtr2(void) +len(30)",
                "doxygen": {
                    "brief": "return 'const char *' with fixed size (len=30)"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_char_ptr2",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_char_ptr2_bufferify",
                    "F_C_name": "c_get_char_ptr2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_char_ptr2",
                    "F_name_generic": "get_char_ptr2",
                    "F_name_impl": "get_char_ptr2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getCharPtr2",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr2",
                    "underscore_name": "get_char_ptr2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_*_copy",
                        "stmt1": "c_function_char_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_len": "30",
                        "cxx_type": "char",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_char_*_buf_copy",
                        "stmt1": "f_function_char_*_buf",
                        "stmtc0": "c_function_char_*_buf_copy",
                        "stmtc1": "c_function_char_*_buf"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_char_*",
                        "stmt1": "py_function_char_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "42 ****************************************",
                "_PTR_C_CXX_index": "6",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr2() +len(30)",
                "declgen": "const char * getCharPtr2(void) +len(30)",
                "doxygen": {
                    "brief": "return 'const char *' with fixed size (len=30)"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_char_ptr2_bufferify",
                    "C_prototype": "char *SHC_rv,\t int SHC_rv_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv,\t SHT_rv_temp0",
                    "F_C_name": "c_get_char_ptr2_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const char * SHCXX_rv",
                    "function_name": "getCharPtr2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr2"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": "30",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_*_buf_copy",
                        "stmt1": "c_function_char_*_buf",
                        "temp0": "SHC_rv_temp0"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)",
                        "temp0": "SHT_rv_temp0"
                    }
                }
            },
            {
                "<FUNCTION>": "7 ****************************************",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "const char * getCharPtr3(void)",
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_char_ptr3",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_name": "c_get_char_ptr3",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getCharPtr3",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr3",
                    "underscore_name": "get_char_ptr3"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_*",
                        "stmt1": "c_function_char_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHCXX_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_char_*",
                        "stmt1": "py_function_char_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "43 ****************************************",
                "_PTR_C_CXX_index": "7",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "result",
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "void getCharPtr3(char * output)",
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "output",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHC_rv",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_function_char_*_buf_result",
                            "stmt1": "c_function_char_*_buf",
                            "temp0": "output_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "output",
                            "F_pointer": "SHPTR_output",
                            "c_var": "output",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "output",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_function_char_*_buf_result",
                            "stmt1": "f_function_char_*_buf",
                            "stmtc0": "c_function_char_*_buf_result",
                            "stmtc1": "c_function_char_*_buf",
                            "temp0": "output_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_char_ptr3_bufferify",
                    "C_prototype": "char *output,\t int output_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "output,\t output_temp0",
                    "F_C_name": "c_get_char_ptr3_bufferify",
                    "F_C_subprogram": "subroutine",
                    "F_string_result_as_arg": "output",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr3",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr3"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_subroutine_void_scalar_buf",
                        "stmt1": "c_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "44 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer",
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "7",
                "_PTR_F_C_index": "43",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "result",
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "void getCharPtr3(char * output)",
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_get_char_ptr3_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_name_function": "get_char_ptr3",
                    "F_name_generic": "get_char_ptr3",
                    "F_name_impl": "get_char_ptr3",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "function_name": "getCharPtr3",
                    "function_suffix": "",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "get_char_ptr3"
                }
            },
            {
                "<FUNCTION>": "8 ****************************************",
                "ast": {
                    "attrs": {
                        "deref": "raw"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr4",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "raw",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr4() +deref(raw)",
                "declgen": "const char * getCharPtr4(void) +deref(raw)",
                "doxygen": {
                    "brief": "return a 'const char *' as type(C_PTR)"
                },
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_char_ptr4",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_char_ptr4",
                    "F_C_name": "get_char_ptr4",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_function": "get_char_ptr4",
                    "F_name_generic": "get_char_ptr4",
                    "F_name_impl": "get_char_ptr4",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr4",
                    "underscore_name": "get_char_ptr4"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<char *>\t(SHC_rv)",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_*_raw",
                        "stmt1": "c_function_char_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "char",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_char_*_raw",
                        "stmt1": "f_function_char_*_raw",
                        "stmtc0": "c_function_char_*_raw",
                        "stmtc1": "c_function_char_*"
                    }
                }
            },
            {
                "<FUNCTION>": "9 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "45",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringResult",
                        "pointer": []
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringResult()",
                "declgen": "const string getConstStringResult(void)",
                "doxygen": {
                    "brief": "return an ALLOCATABLE CHARACTER from std::string"
                },
                "options": {},
                "wrap": {
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_get_const_string_result_bufferify",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_result",
                    "F_name_generic": "get_const_string_result",
                    "F_name_impl": "get_const_string_result",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringResult",
                    "function_name": "getConstStringResult",
                    "underscore_name": "get_const_string_result"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_scalar_buf_allocatable",
                        "stmt1": "f_function_string_scalar_buf_allocatable",
                        "stmtc0": "c_function_string_scalar_buf_allocatable",
                        "stmtc1": "c_function_string_scalar_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_scalar",
                        "stmt1": "py_function_string_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "45 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "_PTR_C_CXX_index": "9",
                "_generated": "arg_to_buffer",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringResult",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringResult()",
                "declgen": "const string getConstStringResult(void)",
                "doxygen": {
                    "brief": "return an ALLOCATABLE CHARACTER from std::string"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_result_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_result_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getConstStringResult",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_result"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "1",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_scalar_buf_allocatable",
                        "stmt1": "c_function_string_scalar_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "10 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "46",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringLen",
                        "pointer": []
                    },
                    "metaattrs": {
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringLen() +len=30",
                "declgen": "const string getConstStringLen(void) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "options": {},
                "wrap": {
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_get_const_string_len_bufferify",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_len",
                    "F_name_generic": "get_const_string_len",
                    "F_name_impl": "get_const_string_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringLen",
                    "function_name": "getConstStringLen",
                    "underscore_name": "get_const_string_len"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_scalar_buf_copy",
                        "stmt1": "f_function_string_scalar_buf",
                        "stmtc0": "c_function_string_scalar_buf_copy",
                        "stmtc1": "c_function_string_scalar_buf"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_scalar",
                        "stmt1": "py_function_string_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "46 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "_PTR_C_CXX_index": "10",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringLen",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringLen() +len=30",
                "declgen": "const string getConstStringLen(void) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_len_bufferify",
                    "C_prototype": "char *SHC_rv,\t int SHC_rv_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv,\t SHT_rv_temp0",
                    "F_C_name": "c_get_const_string_len_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string SHCXX_rv",
                    "function_name": "getConstStringLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_len"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_scalar_buf_copy",
                        "stmt1": "c_function_string_scalar_buf",
                        "temp0": "SHC_rv_temp0"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)",
                        "temp0": "SHT_rv_temp0"
                    }
                }
            },
            {
                "<FUNCTION>": "11 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "const string getConstStringAsArg(void)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "options": {},
                "wrap": {
                    "python": true
                },
                "zz_fmtdict": {
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringAsArg",
                    "function_name": "getConstStringAsArg",
                    "underscore_name": "get_const_string_as_arg"
                },
                "zz_fmtresult": {
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_scalar",
                        "stmt1": "py_function_string_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "47 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "_PTR_C_CXX_index": "11",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "result",
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "void getConstStringAsArg(string * output)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "output",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_function_string_scalar_buf_result",
                            "stmt1": "c_function_string_scalar_buf",
                            "temp0": "output_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "output",
                            "F_pointer": "SHPTR_output",
                            "c_var": "output",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "output",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_function_string_*_buf_result",
                            "stmt1": "f_function_string_*_buf",
                            "stmtc0": "c_function_string_*_buf_result",
                            "stmtc1": "c_function_string_*_buf",
                            "temp0": "output_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_as_arg_bufferify",
                    "C_prototype": "char *output,\t int output_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "output,\t output_temp0",
                    "F_C_name": "c_get_const_string_as_arg_bufferify",
                    "F_C_subprogram": "subroutine",
                    "F_string_result_as_arg": "output",
                    "cxx_rv_decl": "const std::string SHCXX_rv",
                    "function_name": "getConstStringAsArg",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_as_arg"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_subroutine_void_scalar_buf",
                        "stmt1": "c_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "48 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "C_generated_path": [
                    "arg_to_buffer",
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "11",
                "_PTR_F_C_index": "47",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "result",
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "void getConstStringAsArg(string * output)",
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                },
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_get_const_string_as_arg_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_name_function": "get_const_string_as_arg",
                    "F_name_generic": "get_const_string_as_arg",
                    "F_name_impl": "get_const_string_as_arg",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "function_name": "getConstStringAsArg",
                    "function_suffix": "",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "get_const_string_as_arg"
                }
            },
            {
                "<FUNCTION>": "12 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "49",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAlloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string getConstStringAlloc()",
                "declgen": "const std::string getConstStringAlloc(void)",
                "options": {},
                "wrap": {
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_get_const_string_alloc_bufferify",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_alloc",
                    "F_name_generic": "get_const_string_alloc",
                    "F_name_impl": "get_const_string_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringAlloc",
                    "function_name": "getConstStringAlloc",
                    "underscore_name": "get_const_string_alloc"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_scalar_buf_allocatable",
                        "stmt1": "f_function_string_scalar_buf_allocatable",
                        "stmtc0": "c_function_string_scalar_buf_allocatable",
                        "stmtc1": "c_function_string_scalar_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_scalar",
                        "stmt1": "py_function_string_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "49 ****************************************",
                "_PTR_C_CXX_index": "12",
                "_generated": "arg_to_buffer",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAlloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string getConstStringAlloc()",
                "declgen": "const std::string getConstStringAlloc(void)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_alloc_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getConstStringAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "1",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_scalar_buf_allocatable",
                        "stmt1": "c_function_string_scalar_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "13 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "50",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefPure",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefPure()",
                "declgen": "const string & getConstStringRefPure(void)",
                "doxygen": {
                    "brief": "return a 'const string&' as ALLOCATABLE character"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_pure",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ref_pure_bufferify",
                    "F_C_name": "c_get_const_string_ref_pure",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_pure",
                    "F_name_generic": "get_const_string_ref_pure",
                    "F_name_impl": "get_const_string_ref_pure",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefPure",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefPure",
                    "underscore_name": "get_const_string_ref_pure"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_allocatable",
                        "stmt1": "c_function_string_&"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_&_buf_allocatable",
                        "stmt1": "f_function_string_&_buf_allocatable",
                        "stmtc0": "c_function_string_&_buf_allocatable",
                        "stmtc1": "c_function_string_&_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_&",
                        "stmt1": "py_function_string_&",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "50 ****************************************",
                "_PTR_C_CXX_index": "13",
                "_generated": "arg_to_buffer",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefPure",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefPure()",
                "declgen": "const string & getConstStringRefPure(void)",
                "doxygen": {
                    "brief": "return a 'const string&' as ALLOCATABLE character"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_pure_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_ref_pure_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefPure",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_pure"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_buf_allocatable",
                        "stmt1": "c_function_string_&_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "14 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "51",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLen",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLen() +len=30",
                "declgen": "const string & getConstStringRefLen(void) +len(30)",
                "doxygen": {
                    "brief": "return 'const string&' with fixed size (len=30)",
                    "description": "Since +len(30) is provided, the result of the function\nwill be copied directly into memory provided by Fortran.\nThe function will not be ALLOCATABLE.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_len",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ref_len_bufferify",
                    "F_C_name": "c_get_const_string_ref_len",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_len",
                    "F_name_generic": "get_const_string_ref_len",
                    "F_name_impl": "get_const_string_ref_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefLen",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLen",
                    "underscore_name": "get_const_string_ref_len"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_copy",
                        "stmt1": "c_function_string_&"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_&_buf_copy",
                        "stmt1": "f_function_string_&_buf",
                        "stmtc0": "c_function_string_&_buf_copy",
                        "stmtc1": "c_function_string_&_buf"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_&",
                        "stmt1": "py_function_string_&",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "51 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "_PTR_C_CXX_index": "14",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLen",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLen() +len=30",
                "declgen": "const string & getConstStringRefLen(void) +len(30)",
                "doxygen": {
                    "brief": "return 'const string&' with fixed size (len=30)",
                    "description": "Since +len(30) is provided, the result of the function\nwill be copied directly into memory provided by Fortran.\nThe function will not be ALLOCATABLE.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_len_bufferify",
                    "C_prototype": "char *SHC_rv,\t int SHC_rv_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv,\t SHT_rv_temp0",
                    "F_C_name": "c_get_const_string_ref_len_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_len"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_buf_copy",
                        "stmt1": "c_function_string_&_buf",
                        "temp0": "SHC_rv_temp0"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)",
                        "temp0": "SHT_rv_temp0"
                    }
                }
            },
            {
                "<FUNCTION>": "15 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "const string & getConstStringRefAsArg(void)",
                "doxygen": {
                    "brief": "return a 'const string&' as argument",
                    "description": "Pass an additional argument which will be used as the return value.\nThe length of the output variable is declared by the caller.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_as_arg",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_name": "c_get_const_string_ref_as_arg",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringRefAsArg",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAsArg",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&",
                        "stmt1": "c_function_string_&"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_&",
                        "stmt1": "py_function_string_&",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "52 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "_PTR_C_CXX_index": "15",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "result",
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "void getConstStringRefAsArg(string & output)",
                "doxygen": {
                    "brief": "return a 'const string&' as argument",
                    "description": "Pass an additional argument which will be used as the return value.\nThe length of the output variable is declared by the caller.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "output",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_rv",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_function_string_&_buf_result",
                            "stmt1": "c_function_string_&_buf",
                            "temp0": "output_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "output",
                            "F_pointer": "SHPTR_output",
                            "c_var": "output",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "output",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_function_string_&_buf_result",
                            "stmt1": "f_function_string_&_buf",
                            "stmtc0": "c_function_string_&_buf_result",
                            "stmtc1": "c_function_string_&_buf",
                            "temp0": "output_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_as_arg_bufferify",
                    "C_prototype": "char *output,\t int output_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "output,\t output_temp0",
                    "F_C_name": "c_get_const_string_ref_as_arg_bufferify",
                    "F_C_subprogram": "subroutine",
                    "F_string_result_as_arg": "output",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAsArg",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_CPTR",
                        "stmt0": "c_subroutine_void_scalar_buf",
                        "stmt1": "c_subroutine"
                    }
                }
            },
            {
                "<FUNCTION>": "53 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "C_generated_path": [
                    "arg_to_buffer",
                    "arg_to_buffer"
                ],
                "_PTR_C_CXX_index": "15",
                "_PTR_F_C_index": "52",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "buf",
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "deref": "result",
                                "intent": "out",
                                "is_result": true
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "void getConstStringRefAsArg(string & output)",
                "doxygen": {
                    "brief": "return a 'const string&' as argument",
                    "description": "Pass an additional argument which will be used as the return value.\nThe length of the output variable is declared by the caller.\n"
                },
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_get_const_string_ref_as_arg_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_name_function": "get_const_string_ref_as_arg",
                    "F_name_generic": "get_const_string_ref_as_arg",
                    "F_name_impl": "get_const_string_ref_as_arg",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "function_name": "getConstStringRefAsArg",
                    "function_suffix": "",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "get_const_string_ref_as_arg"
                }
            },
            {
                "<FUNCTION>": "16 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "54",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLenEmpty",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLenEmpty() +len=30",
                "declgen": "const string & getConstStringRefLenEmpty(void) +len(30)",
                "doxygen": {
                    "brief": "Test returning empty string reference"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_len_empty",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ref_len_empty_bufferify",
                    "F_C_name": "c_get_const_string_ref_len_empty",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_len_empty",
                    "F_name_generic": "get_const_string_ref_len_empty",
                    "F_name_impl": "get_const_string_ref_len_empty",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefLenEmpty",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLenEmpty",
                    "underscore_name": "get_const_string_ref_len_empty"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_copy",
                        "stmt1": "c_function_string_&"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_&_buf_copy",
                        "stmt1": "f_function_string_&_buf",
                        "stmtc0": "c_function_string_&_buf_copy",
                        "stmtc1": "c_function_string_&_buf"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_&",
                        "stmt1": "py_function_string_&",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "54 ****************************************",
                "C_error_pattern": "C_invalid_name",
                "_PTR_C_CXX_index": "16",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLenEmpty",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLenEmpty() +len=30",
                "declgen": "const string & getConstStringRefLenEmpty(void) +len(30)",
                "doxygen": {
                    "brief": "Test returning empty string reference"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_len_empty_bufferify",
                    "C_prototype": "char *SHC_rv,\t int SHC_rv_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv,\t SHT_rv_temp0",
                    "F_C_name": "c_get_const_string_ref_len_empty_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLenEmpty",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_len_empty"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_buf_copy",
                        "stmt1": "c_function_string_&_buf",
                        "temp0": "SHC_rv_temp0"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)",
                        "temp0": "SHT_rv_temp0"
                    }
                }
            },
            {
                "<FUNCTION>": "17 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "55",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAlloc",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getConstStringRefAlloc()",
                "declgen": "const std::string & getConstStringRefAlloc(void)",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_alloc",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ref_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ref_alloc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ref_alloc",
                    "F_name_generic": "get_const_string_ref_alloc",
                    "F_name_impl": "get_const_string_ref_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefAlloc",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAlloc",
                    "underscore_name": "get_const_string_ref_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_allocatable",
                        "stmt1": "c_function_string_&"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_&_buf_allocatable",
                        "stmt1": "f_function_string_&_buf_allocatable",
                        "stmtc0": "c_function_string_&_buf_allocatable",
                        "stmtc1": "c_function_string_&_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv.data(),\t SHCXX_rv.size()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_&",
                        "stmt1": "py_function_string_&",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "55 ****************************************",
                "_PTR_C_CXX_index": "17",
                "_generated": "arg_to_buffer",
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAlloc",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getConstStringRefAlloc()",
                "declgen": "const std::string & getConstStringRefAlloc(void)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ref_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_ref_alloc_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_&_buf_allocatable",
                        "stmt1": "c_function_string_&_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "18 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "56",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrLen",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string * getConstStringPtrLen() +len=30",
                "declgen": "const string * getConstStringPtrLen(void) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string *' as character(30)",
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished with C_finalize_buf which is possible\nbecause +len(30) so the contents are copied before returning.\n"
                },
                "fstatements": {
                    "c_buf": {
                        "final": [
                            "delete {cxx_var};"
                        ]
                    }
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_len",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ptr_len_bufferify",
                    "F_C_name": "c_get_const_string_ptr_len",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_len",
                    "F_name_generic": "get_const_string_ptr_len",
                    "F_name_impl": "get_const_string_ptr_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrLen",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrLen",
                    "underscore_name": "get_const_string_ptr_len"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_copy",
                        "stmt1": "c_function_string_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_len": 30,
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_*_buf_copy",
                        "stmt1": "f_function_string_*_buf",
                        "stmtc0": "c_function_string_*_buf_copy",
                        "stmtc1": "c_function_string_*_buf"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_*",
                        "stmt1": "py_function_string_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "56 ****************************************",
                "_PTR_C_CXX_index": "18",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrLen",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "copy",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string * getConstStringPtrLen() +len=30",
                "declgen": "const string * getConstStringPtrLen(void) +len(30)",
                "doxygen": {
                    "brief": "return a 'const string *' as character(30)",
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished with C_finalize_buf which is possible\nbecause +len(30) so the contents are copied before returning.\n"
                },
                "fstatements": {
                    "c_buf": {
                        "final": [
                            "delete {cxx_var};"
                        ]
                    }
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_len_bufferify",
                    "C_prototype": "char *SHC_rv,\t int SHC_rv_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv,\t SHT_rv_temp0",
                    "F_C_name": "c_get_const_string_ptr_len_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_len"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_len": 30,
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_buf_copy",
                        "stmt1": "c_function_string_*_buf",
                        "temp0": "SHC_rv_temp0"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "character(*)",
                        "temp0": "SHT_rv_temp0"
                    }
                }
            },
            {
                "<FUNCTION>": "19 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "57",
                "ast": {
                    "attrs": {
                        "owner": "library"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc(void) +owner(library)",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_alloc",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ptr_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ptr_alloc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_alloc",
                    "F_name_generic": "get_const_string_ptr_alloc",
                    "F_name_impl": "get_const_string_ptr_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrAlloc",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc",
                    "underscore_name": "get_const_string_ptr_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_allocatable",
                        "stmt1": "c_function_string_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_*_buf_allocatable_library",
                        "stmt1": "f_function_string_*_buf_allocatable",
                        "stmtc0": "c_function_string_*_buf_allocatable",
                        "stmtc1": "c_function_string_*_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_*",
                        "stmt1": "py_function_string_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "57 ****************************************",
                "_PTR_C_CXX_index": "19",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "owner": "library"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc(void) +owner(library)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_ptr_alloc_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_buf_allocatable",
                        "stmt1": "c_function_string_*_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "20 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "58",
                "ast": {
                    "attrs": {
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAlloc(void) +owner(caller)",
                "doxygen": {
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished +owner(caller) which sets idtor.\nThe contents are copied by Fortran so they must outlast\nthe return from the C wrapper.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ptr_owns_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_owns_alloc",
                    "F_name_generic": "get_const_string_ptr_owns_alloc",
                    "F_name_impl": "get_const_string_ptr_owns_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAlloc",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAlloc",
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "2",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_allocatable",
                        "stmt1": "c_function_string_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_*_buf_allocatable_caller",
                        "stmt1": "f_function_string_*_buf_allocatable",
                        "stmtc0": "c_function_string_*_buf_allocatable",
                        "stmtc1": "c_function_string_*_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_*",
                        "stmt1": "py_function_string_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "58 ****************************************",
                "_PTR_C_CXX_index": "20",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAlloc(void) +owner(caller)",
                "doxygen": {
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished +owner(caller) which sets idtor.\nThe contents are copied by Fortran so they must outlast\nthe return from the C wrapper.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "2",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_buf_allocatable",
                        "stmt1": "c_function_string_*_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "21 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "59",
                "ast": {
                    "attrs": {
                        "free_pattern": "C_string_free",
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAllocPattern",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAllocPattern() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAllocPattern(void) +free_pattern(C_string_free)+owner(caller)",
                "doxygen": {
                    "description": "Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc_pattern",
                    "C_prototype": "void",
                    "C_return_type": "const char *",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "SHT_rv_temp0",
                    "F_arguments": "",
                    "F_name_function": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_generic": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_impl": "get_const_string_ptr_owns_alloc_pattern",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAllocPattern",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAllocPattern",
                    "underscore_name": "get_const_string_ptr_owns_alloc_pattern"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "3",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_allocatable",
                        "stmt1": "c_function_string_*"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "std::string",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "STR_SHROUD_copy_string_and_free",
                        "hnamefunc1": "array_context",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_string_*_buf_allocatable_caller",
                        "stmt1": "f_function_string_*_buf_allocatable",
                        "stmtc0": "c_function_string_*_buf_allocatable",
                        "stmtc1": "c_function_string_*_buf_allocatable",
                        "temp0": "SHT_rv_temp0"
                    },
                    "fmtpy": {
                        "array_size": "1",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv->data(),\t SHCXX_rv->size()",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_string_*",
                        "stmt1": "py_function_string_*",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "59 ****************************************",
                "_PTR_C_CXX_index": "21",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "free_pattern": "C_string_free",
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAllocPattern",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "metaattrs": {
                        "api": "buf",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAllocPattern() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAllocPattern(void) +free_pattern(C_string_free)+owner(caller)",
                "doxygen": {
                    "description": "Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtdict": {
                    "C_name": "STR_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "C_prototype": "STR_SHROUD_array *SHT_rv_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAllocPattern",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_owns_alloc_pattern"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "const ",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "const_cast<std::string *>\t(SHCXX_rv)",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "3",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_string_*_buf_allocatable",
                        "stmt1": "c_function_string_*_buf_allocatable"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": "character(*)"
                    }
                }
            },
            {
                "<FUNCTION>": "22 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "60",
                "ast": {
                    "declarator": {
                        "name": "acceptStringConstReference",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringConstReference(const std::string & arg1)",
                "declgen": "void acceptStringConstReference(const std::string & arg1)",
                "doxygen": {
                    "brief": "Accept a const string reference",
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_string_&",
                            "stmt1": "c_in_string_&"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_in_string_&",
                            "stmt1": "py_in_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_const_reference",
                    "C_prototype": "const char * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_string_const_reference_bufferify",
                    "F_C_name": "c_accept_string_const_reference",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_const_reference",
                    "F_name_generic": "accept_string_const_reference",
                    "F_name_impl": "accept_string_const_reference",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringConstReference",
                    "function_name": "acceptStringConstReference",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_string_const_reference"
                }
            },
            {
                "<FUNCTION>": "60 ****************************************",
                "_PTR_C_CXX_index": "22",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringConstReference",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringConstReference(const std::string & arg1)",
                "declgen": "void acceptStringConstReference(const std::string & arg1)",
                "doxygen": {
                    "brief": "Accept a const string reference",
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_string_&_buf",
                            "stmt1": "c_in_string_&_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_string_&_buf",
                            "stmt1": "f_in_string_&_buf",
                            "stmtc0": "c_in_string_&_buf",
                            "stmtc1": "c_in_string_&_buf",
                            "temp0": "arg1_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_const_reference_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0",
                    "F_C_name": "c_accept_string_const_reference_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "acceptStringConstReference",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "accept_string_const_reference"
                }
            },
            {
                "<FUNCTION>": "23 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "61",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReferenceOut",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))",
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out))",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_string_&",
                            "stmt1": "c_out_string_&"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_out_string_&",
                            "stmt1": "py_out_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference_out",
                    "C_prototype": "char * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_string_reference_out_bufferify",
                    "F_C_name": "c_accept_string_reference_out",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_reference_out",
                    "F_name_generic": "accept_string_reference_out",
                    "F_name_impl": "accept_string_reference_out",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringReferenceOut",
                    "function_name": "acceptStringReferenceOut",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_string_reference_out"
                }
            },
            {
                "<FUNCTION>": "61 ****************************************",
                "_PTR_C_CXX_index": "23",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReferenceOut",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))",
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out))",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_string_&_buf",
                            "stmt1": "c_out_string_&_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_string_&_buf",
                            "stmt1": "f_out_string_&_buf",
                            "stmtc0": "c_out_string_&_buf",
                            "stmtc1": "c_out_string_&_buf",
                            "temp0": "arg1_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference_out_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0",
                    "F_C_name": "c_accept_string_reference_out_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "acceptStringReferenceOut",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "accept_string_reference_out"
                }
            },
            {
                "<FUNCTION>": "24 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "62",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReference",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReference(std::string & arg1)",
                "declgen": "void acceptStringReference(std::string & arg1)",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_&",
                            "stmt1": "c_inout_string_&"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_inout_string_&",
                            "stmt1": "py_inout_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference",
                    "C_prototype": "char * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_string_reference_bufferify",
                    "F_C_name": "c_accept_string_reference",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_reference",
                    "F_name_generic": "accept_string_reference",
                    "F_name_impl": "accept_string_reference",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringReference",
                    "function_name": "acceptStringReference",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_string_reference"
                }
            },
            {
                "<FUNCTION>": "62 ****************************************",
                "_PTR_C_CXX_index": "24",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReference",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReference(std::string & arg1)",
                "declgen": "void acceptStringReference(std::string & arg1)",
                "doxygen": {
                    "brief": "Accept a string reference",
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                },
                "options": {
                    "literalinclude": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_&_buf",
                            "stmt1": "c_inout_string_&_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_inout_string_&_buf",
                            "stmt1": "f_inout_string_&_buf",
                            "stmtc0": "c_inout_string_&_buf",
                            "stmtc1": "c_inout_string_&_buf",
                            "temp0": "arg1_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_reference_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0",
                    "F_C_name": "c_accept_string_reference_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "acceptStringReference",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "accept_string_reference"
                }
            },
            {
                "<FUNCTION>": "25 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "63",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointerConst",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointerConst(const std::string * arg1)",
                "declgen": "void acceptStringPointerConst(const std::string * arg1)",
                "doxygen": {
                    "brief": "Accept a const string pointer - intent(in)"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_string_*",
                            "stmt1": "c_in_string_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_in_string_*",
                            "stmt1": "py_in_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_accept_string_pointer_const",
                    "C_prototype": "const char * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_string_pointer_const_bufferify",
                    "F_C_name": "c_accept_string_pointer_const",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_pointer_const",
                    "F_name_generic": "accept_string_pointer_const",
                    "F_name_impl": "accept_string_pointer_const",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringPointerConst",
                    "function_name": "acceptStringPointerConst",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_string_pointer_const"
                }
            },
            {
                "<FUNCTION>": "63 ****************************************",
                "_PTR_C_CXX_index": "25",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointerConst",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointerConst(const std::string * arg1)",
                "declgen": "void acceptStringPointerConst(const std::string * arg1)",
                "doxygen": {
                    "brief": "Accept a const string pointer - intent(in)"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg1)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_string_*_buf",
                            "stmt1": "c_in_string_*_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_string_*_buf",
                            "stmt1": "f_in_string_*_buf",
                            "stmtc0": "c_in_string_*_buf",
                            "stmtc1": "c_in_string_*_buf",
                            "temp0": "arg1_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_accept_string_pointer_const_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0",
                    "F_C_name": "c_accept_string_pointer_const_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "acceptStringPointerConst",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "accept_string_pointer_const"
                }
            },
            {
                "<FUNCTION>": "26 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "64",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointer",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointer(std::string * arg1)",
                "declgen": "void acceptStringPointer(std::string * arg1)",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(inout)"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_*",
                            "stmt1": "c_inout_string_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_inout_string_*",
                            "stmt1": "py_inout_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_accept_string_pointer",
                    "C_prototype": "char * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_string_pointer_bufferify",
                    "F_C_name": "c_accept_string_pointer",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_pointer",
                    "F_name_generic": "accept_string_pointer",
                    "F_name_impl": "accept_string_pointer",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringPointer",
                    "function_name": "acceptStringPointer",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_string_pointer"
                }
            },
            {
                "<FUNCTION>": "64 ****************************************",
                "_PTR_C_CXX_index": "26",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointer",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointer(std::string * arg1)",
                "declgen": "void acceptStringPointer(std::string * arg1)",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(inout)"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_*_buf",
                            "stmt1": "c_inout_string_*_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_inout_string_*_buf",
                            "stmt1": "f_inout_string_*_buf",
                            "stmtc0": "c_inout_string_*_buf",
                            "stmtc1": "c_inout_string_*_buf",
                            "temp0": "arg1_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_accept_string_pointer_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0",
                    "F_C_name": "c_accept_string_pointer_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "acceptStringPointer",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "accept_string_pointer"
                }
            },
            {
                "<FUNCTION>": "27 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "65",
                "ast": {
                    "declarator": {
                        "name": "fetchStringPointer",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchStringPointer(std::string * arg1 +intent(out))",
                "declgen": "void fetchStringPointer(std::string * arg1 +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(out)",
                    "description": "Return global_str.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_string_*",
                            "stmt1": "c_out_string_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_out_string_*",
                            "stmt1": "py_out_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_fetch_string_pointer",
                    "C_prototype": "char * arg1",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_fetch_string_pointer_bufferify",
                    "F_C_name": "c_fetch_string_pointer",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "fetch_string_pointer",
                    "F_name_generic": "fetch_string_pointer",
                    "F_name_impl": "fetch_string_pointer",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_fetchStringPointer",
                    "function_name": "fetchStringPointer",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "fetch_string_pointer"
                }
            },
            {
                "<FUNCTION>": "65 ****************************************",
                "_PTR_C_CXX_index": "27",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "fetchStringPointer",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchStringPointer(std::string * arg1 +intent(out))",
                "declgen": "void fetchStringPointer(std::string * arg1 +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(out)",
                    "description": "Return global_str.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_string_*_buf",
                            "stmt1": "c_out_string_*_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_string_*_buf",
                            "stmt1": "f_out_string_*_buf",
                            "stmtc0": "c_out_string_*_buf",
                            "stmtc1": "c_out_string_*_buf",
                            "temp0": "arg1_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1",
                    "C_name": "STR_fetch_string_pointer_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0",
                    "F_C_name": "c_fetch_string_pointer_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "fetchStringPointer",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "fetch_string_pointer"
                }
            },
            {
                "<FUNCTION>": "28 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "66",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointerLen",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nlen",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointerLen(std::string * arg1, int *nlen+intent(out))",
                "declgen": "void acceptStringPointerLen(std::string * arg1, int * nlen +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(inout)",
                    "description": "Test return tuple with two arguments.\nMust rename argument to nlen to avoid conflict with intrinsic len.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_*",
                            "stmt1": "c_inout_string_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_inout_string_*",
                            "stmt1": "py_inout_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "nlen": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nlen",
                            "c_var": "nlen"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "nlen",
                            "ctor_expr": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "data_var": "SHData_nlen",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nlen",
                            "size_var": "SHSize_nlen",
                            "stmt0": "py_out_native_*",
                            "stmt1": "py_out_native_*",
                            "value_var": "SHValue_nlen"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1,\t nlen",
                    "C_name": "STR_accept_string_pointer_len",
                    "C_prototype": "char * arg1,\t int * nlen",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t nlen",
                    "F_C_call": "c_accept_string_pointer_len_bufferify",
                    "F_C_name": "c_accept_string_pointer_len",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT),\t nlen",
                    "F_arguments": "arg1,\t nlen",
                    "F_name_function": "accept_string_pointer_len",
                    "F_name_generic": "accept_string_pointer_len",
                    "F_name_impl": "accept_string_pointer_len",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringPointerLen",
                    "function_name": "acceptStringPointerLen",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "accept_string_pointer_len"
                }
            },
            {
                "<FUNCTION>": "66 ****************************************",
                "_PTR_C_CXX_index": "28",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointerLen",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nlen",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointerLen(std::string * arg1, int *nlen+intent(out))",
                "declgen": "void acceptStringPointerLen(std::string * arg1, int * nlen +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(inout)",
                    "description": "Test return tuple with two arguments.\nMust rename argument to nlen to avoid conflict with intrinsic len.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_*_buf",
                            "stmt1": "c_inout_string_*_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_inout_string_*_buf",
                            "stmt1": "f_inout_string_*_buf",
                            "stmtc0": "c_inout_string_*_buf",
                            "stmtc1": "c_inout_string_*_buf",
                            "temp0": "arg1_temp0"
                        }
                    },
                    "nlen": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nlen",
                            "F_pointer": "SHPTR_nlen",
                            "c_var": "nlen",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nlen",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_out_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_out_native_*",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1,\t nlen",
                    "C_name": "STR_accept_string_pointer_len_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0,\t int * nlen",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0,\t nlen",
                    "F_C_name": "c_accept_string_pointer_len_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "acceptStringPointerLen",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "accept_string_pointer_len"
                }
            },
            {
                "<FUNCTION>": "29 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "67",
                "ast": {
                    "declarator": {
                        "name": "fetchStringPointerLen",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nlen",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchStringPointerLen(std::string * arg1 +intent(out), int *nlen+intent(out))",
                "declgen": "void fetchStringPointerLen(std::string * arg1 +intent(out), int * nlen +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(out)",
                    "description": "Return global_str.\nTest return tuple with two arguments.\nMust rename argument to nlen to avoid conflict with intrinsic len.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_string_*",
                            "stmt1": "c_out_string_*"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_out_string_*",
                            "stmt1": "py_out_string_*",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "nlen": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nlen",
                            "c_var": "nlen"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "nlen",
                            "ctor_expr": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "data_var": "SHData_nlen",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_nlen",
                            "size_var": "SHSize_nlen",
                            "stmt0": "py_out_native_*",
                            "stmt1": "py_out_native_*",
                            "value_var": "SHValue_nlen"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1,\t nlen",
                    "C_name": "STR_fetch_string_pointer_len",
                    "C_prototype": "char * arg1,\t int * nlen",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t nlen",
                    "F_C_call": "c_fetch_string_pointer_len_bufferify",
                    "F_C_name": "c_fetch_string_pointer_len",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT),\t nlen",
                    "F_arguments": "arg1,\t nlen",
                    "F_name_function": "fetch_string_pointer_len",
                    "F_name_generic": "fetch_string_pointer_len",
                    "F_name_impl": "fetch_string_pointer_len",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_fetchStringPointerLen",
                    "function_name": "fetchStringPointerLen",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "fetch_string_pointer_len"
                }
            },
            {
                "<FUNCTION>": "67 ****************************************",
                "_PTR_C_CXX_index": "29",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "fetchStringPointerLen",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "nlen",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void fetchStringPointerLen(std::string * arg1 +intent(out), int *nlen+intent(out))",
                "declgen": "void fetchStringPointerLen(std::string * arg1 +intent(out), int * nlen +intent(out))",
                "doxygen": {
                    "brief": "Accept a string pointer - intent(out)",
                    "description": "Return global_str.\nTest return tuple with two arguments.\nMust rename argument to nlen to avoid conflict with intrinsic len.\n"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_string_*_buf",
                            "stmt1": "c_out_string_*_buf",
                            "temp0": "arg1_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_string_*_buf",
                            "stmt1": "f_out_string_*_buf",
                            "stmtc0": "c_out_string_*_buf",
                            "stmtc1": "c_out_string_*_buf",
                            "temp0": "arg1_temp0"
                        }
                    },
                    "nlen": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "nlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "nlen",
                            "cxx_type": "int",
                            "cxx_var": "nlen",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nlen",
                            "F_pointer": "SHPTR_nlen",
                            "c_var": "nlen",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "nlen",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_out_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_out_native_*",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "&SHCXX_arg1,\t nlen",
                    "C_name": "STR_fetch_string_pointer_len_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0,\t int * nlen",
                    "C_return_type": "void",
                    "F_C_arguments": "arg1,\t arg1_temp0,\t nlen",
                    "F_C_name": "c_fetch_string_pointer_len_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "fetchStringPointerLen",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "fetch_string_pointer_len"
                }
            },
            {
                "<FUNCTION>": "30 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "68",
                "ast": {
                    "declarator": {
                        "name": "acceptStringInstance",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptStringInstance(std::string arg1)",
                "declgen": "int acceptStringInstance(std::string arg1 +value)",
                "doxygen": {
                    "brief": "Accept a string instance"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_string_scalar",
                            "stmt1": "c_in_string_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "c_var": "arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_in_string_scalar",
                            "stmt1": "py_in_string_scalar",
                            "value_var": "SHValue_arg1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg1",
                    "C_name": "STR_accept_string_instance",
                    "C_prototype": "char *arg1",
                    "C_return_type": "int",
                    "F_C_arguments": "arg1",
                    "F_C_call": "c_accept_string_instance_bufferify",
                    "F_C_name": "c_accept_string_instance",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_name_function": "accept_string_instance",
                    "F_name_generic": "accept_string_instance",
                    "F_name_impl": "accept_string_instance",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_acceptStringInstance",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "acceptStringInstance",
                    "underscore_name": "accept_string_instance"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_default",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_default"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "68 ****************************************",
                "_PTR_C_CXX_index": "30",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringInstance",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int acceptStringInstance(std::string arg1)",
                "declgen": "int acceptStringInstance(std::string arg1 +value)",
                "doxygen": {
                    "brief": "Accept a string instance"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_string_scalar_buf",
                            "stmt1": "c_in_string_scalar_buf",
                            "temp0": "arg1_temp0",
                            "temp1": "arg1_temp1"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_string_scalar_buf",
                            "stmt1": "f_in_string_scalar_buf",
                            "stmtc0": "c_in_string_scalar_buf",
                            "stmtc1": "c_in_string_scalar_buf",
                            "temp0": "arg1_temp0",
                            "temp1": "arg1_temp1"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg1",
                    "C_name": "STR_accept_string_instance_bufferify",
                    "C_prototype": "char *arg1,\t int arg1_temp0",
                    "C_return_type": "int",
                    "F_C_arguments": "arg1,\t arg1_temp0",
                    "F_C_name": "c_accept_string_instance_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "acceptStringInstance",
                    "function_suffix": "_bufferify",
                    "underscore_name": "accept_string_instance"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "integer(C_INT)"
                    }
                }
            },
            {
                "<FUNCTION>": "31 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnStrings",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "declgen": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "doxygen": {
                    "brief": "Test Python returning multiple std::string arguments."
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false
                },
                "wrap": {
                    "python": true
                },
                "zz_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "ctor_expr": "SH_arg1.data(),\t SH_arg1.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1",
                            "stmt0": "py_out_string_&",
                            "stmt1": "py_out_string_&",
                            "value_var": "SHValue_arg1"
                        }
                    },
                    "arg2": {
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "ctor_expr": "SH_arg2.data(),\t SH_arg2.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2",
                            "stmt0": "py_out_string_&",
                            "stmt1": "py_out_string_&",
                            "value_var": "SHValue_arg2"
                        }
                    }
                },
                "zz_fmtdict": {
                    "PY_name_impl": "PY_returnStrings",
                    "function_name": "returnStrings",
                    "underscore_name": "return_strings"
                }
            },
            {
                "<FUNCTION>": "32 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "returnMany",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char returnMany(int *arg1 +intent(out))",
                "declgen": "char returnMany(int * arg1 +intent(out))",
                "doxygen": {
                    "description": "Test Py_BuildValue with multiple values.\n"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "function_name": "returnMany",
                    "underscore_name": "return_many"
                }
            },
            {
                "<FUNCTION>": "33 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "explicit1",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "AAlen"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))",
                "declgen": "void explicit1(char * name +intent(in)+len_trim(AAlen))",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_trim": "AAlen",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_trim": "AAlen",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "*name",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "data_var": "SHData_name",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_in_char_*",
                            "stmt1": "py_in_char_*",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_bufferify_suffix": "_BUFFER",
                    "C_call_list": "name",
                    "C_name": "STR_explicit1",
                    "C_prototype": "char * name",
                    "C_return_type": "void",
                    "F_C_arguments": "name",
                    "F_C_call": "c_explicit1",
                    "F_C_name": "c_explicit1",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "trim(name)//C_NULL_CHAR",
                    "F_arguments": "name",
                    "F_name_function": "explicit1",
                    "F_name_generic": "explicit1",
                    "F_name_impl": "explicit1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_explicit1",
                    "function_name": "explicit1",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "explicit1"
                }
            },
            {
                "<FUNCTION>": "34 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "69",
                "ast": {
                    "declarator": {
                        "name": "explicit2",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "AAtrim"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))",
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "AAtrim",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "c_var": "name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "name",
                    "C_name": "STR_explicit2",
                    "C_prototype": "char * name",
                    "C_return_type": "void",
                    "F_C_arguments": "name",
                    "F_C_call": "c_explicit2_bufferify",
                    "F_C_name": "c_explicit2",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "name,\t len(name, kind=C_INT)",
                    "F_arguments": "name",
                    "F_name_function": "explicit2",
                    "F_name_generic": "explicit2",
                    "F_name_impl": "explicit2",
                    "F_subprogram": "subroutine",
                    "function_name": "explicit2",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "explicit2"
                }
            },
            {
                "<FUNCTION>": "69 ****************************************",
                "_PTR_C_CXX_index": "34",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "explicit2",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "AAtrim"
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))",
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "c_var_len": "AAtrim",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "name",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*_buf",
                            "stmt1": "c_out_char_*_buf",
                            "temp0": "name_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "c_var_len": "AAtrim",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_char_*_buf",
                            "stmt1": "f_out_char_*_buf",
                            "stmtc0": "c_out_char_*_buf",
                            "stmtc1": "c_out_char_*_buf",
                            "temp0": "name_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "name",
                    "C_name": "STR_explicit2_bufferify",
                    "C_prototype": "char *name,\t int name_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "name,\t name_temp0",
                    "F_C_name": "c_explicit2_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "explicit2",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "explicit2"
                }
            },
            {
                "<FUNCTION>": "35 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CpassChar",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "status",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassChar(char status)",
                "declgen": "void CpassChar(char status +value)",
                "doxygen": {
                    "brief": "pass a single char argument as a scalar, extern \"C\""
                },
                "options": {
                    "C_extern_C": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "char",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_scalar",
                            "stmt1": "c_in_char_scalar"
                        },
                        "fmtf": {
                            "F_C_var": "status",
                            "F_pointer": "SHPTR_status",
                            "c_var": "status",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "status",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_in_char_scalar",
                            "stmt1": "f_in_char_scalar",
                            "stmtc0": "c_in_char_scalar",
                            "stmtc1": "c_in_char_scalar"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "ctor_expr": "status",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&status",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "data_var": "SHData_status",
                            "numpy_type": "NPY_INTP",
                            "py_var": "SHPy_status",
                            "pytmp_var": "SHTPy_status",
                            "size_var": "SHSize_status",
                            "stmt0": "py_in_char_scalar",
                            "stmt1": "py_in_char_scalar",
                            "value_var": "SHValue_status"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "status",
                    "C_name": "CpassChar",
                    "C_prototype": "char status",
                    "C_return_type": "void",
                    "F_C_arguments": "status",
                    "F_C_call": "c_cpass_char",
                    "F_C_name": "cpass_char",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "status",
                    "F_arguments": "status",
                    "F_name_function": "cpass_char",
                    "F_name_generic": "cpass_char",
                    "F_name_impl": "cpass_char",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_CpassChar",
                    "function_name": "CpassChar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "cpass_char"
                }
            },
            {
                "<FUNCTION>": "36 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "CreturnChar",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char CreturnChar()",
                "declgen": "char CreturnChar(void)",
                "doxygen": {
                    "brief": "return a char argument (non-pointer), extern \"C\""
                },
                "options": {
                    "C_extern_C": true
                },
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_name": "CreturnChar",
                    "C_prototype": "void",
                    "C_return_type": "char",
                    "F_C_arguments": "",
                    "F_C_call": "c_creturn_char",
                    "F_C_name": "creturn_char",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arguments": "",
                    "F_name_function": "creturn_char",
                    "F_name_generic": "creturn_char",
                    "F_name_impl": "creturn_char",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_CreturnChar",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "CreturnChar",
                    "underscore_name": "creturn_char"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "char",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_char_scalar",
                        "stmt1": "c_function_char_scalar"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "char",
                        "f_intent": "OUT",
                        "f_kind": "C_CHAR",
                        "f_type": "character(*)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "f_function_char_scalar",
                        "stmt1": "f_default",
                        "stmtc0": "c_function_char_scalar",
                        "stmtc1": "c_function_char_scalar"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "char",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INTP",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_char_scalar",
                        "stmt1": "py_function_char_scalar",
                        "value_var": "SHValue_rv"
                    }
                }
            },
            {
                "<FUNCTION>": "37 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "70",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtr",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void CpassCharPtr(char * dest +intent(out), const char * src)",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                },
                "options": {
                    "C_extern_C": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                },
                "zz_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "dest",
                            "c_var": "dest"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "src",
                            "c_var": "src"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "CpassCharPtr",
                    "C_prototype": "char * dest,\t const char * src",
                    "C_return_type": "void",
                    "F_C_arguments": "dest,\t src",
                    "F_C_call": "c_cpass_char_ptr_bufferify",
                    "F_C_name": "c_cpass_char_ptr",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t trim(src)//C_NULL_CHAR",
                    "F_arguments": "dest,\t src",
                    "F_name_function": "cpass_char_ptr",
                    "F_name_generic": "cpass_char_ptr",
                    "F_name_impl": "cpass_char_ptr",
                    "F_subprogram": "subroutine",
                    "function_name": "CpassCharPtr",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "cpass_char_ptr"
                }
            },
            {
                "<FUNCTION>": "70 ****************************************",
                "_PTR_C_CXX_index": "37",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtr",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "out"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "ftrim_char_in": true,
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void CpassCharPtr(char * dest +intent(out), const char * src)",
                "doxygen": {
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                },
                "options": {
                    "C_extern_C": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "dest",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "dest",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_out_char_*_buf",
                            "stmt1": "c_out_char_*_buf",
                            "temp0": "dest_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "dest",
                            "F_pointer": "SHPTR_dest",
                            "c_var": "dest",
                            "f_intent": "OUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "dest",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_out_char_*_buf",
                            "stmt1": "f_out_char_*_buf",
                            "stmtc0": "c_out_char_*_buf",
                            "stmtc1": "c_out_char_*_buf",
                            "temp0": "dest_temp0"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "src",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "const_cast<char *>\t(src)",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_char_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "src",
                            "F_pointer": "SHPTR_src",
                            "c_var": "src",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "src",
                            "sh_type": "SH_TYPE_OTHER"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "dest,\t src",
                    "C_name": "STR_cpass_char_ptr_bufferify",
                    "C_prototype": "char *dest,\t int dest_temp0,\t const char * src",
                    "C_return_type": "void",
                    "F_C_arguments": "dest,\t dest_temp0,\t src",
                    "F_C_name": "c_cpass_char_ptr_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "CpassCharPtr",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "cpass_char_ptr"
                }
            },
            {
                "<FUNCTION>": "38 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "71",
                "ast": {
                    "declarator": {
                        "name": "PostDeclare",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "count",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void PostDeclare(int *count +rank(1)+intent(in), std::string &name)",
                "declgen": "void PostDeclare(int * count +intent(in)+rank(1), std::string & name)",
                "doxygen": {
                    "description": "Test post_declare.\nThe std::string in py_string_inout must be declared before the\ngoto added by py_native_*_in_pointer_list to avoid\n\"jump to label 'fail' crosses initialization of\" error.\n"
                },
                "options": {
                    "PY_array_arg": "list"
                },
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "count",
                            "c_var": "count"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_type": "int",
                            "c_var": "count",
                            "ctor_expr": "*count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "data_var": "SHData_count",
                            "hnamefunc0": "SHROUD_get_from_object_int_list",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_count",
                            "pytmp_var": "SHTPy_count",
                            "size_var": "SHSize_count",
                            "stmt0": "py_in_native_*_pointer_list",
                            "stmt1": "py_in_native_*_pointer_list",
                            "value_var": "SHValue_count"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_name",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_&",
                            "stmt1": "c_inout_string_&"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "c_var": "name"
                        },
                        "fmtpy": {
                            "array_size": "1",
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "ctor_expr": "SH_name.data(),\t SH_name.size()",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&name",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name",
                            "stmt0": "py_inout_string_&",
                            "stmt1": "py_inout_string_&",
                            "value_var": "SHValue_name"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count,\t SHCXX_name",
                    "C_name": "STR_post_declare",
                    "C_prototype": "int * count,\t char * name",
                    "C_return_type": "void",
                    "F_C_arguments": "count,\t name",
                    "F_C_call": "c_post_declare_bufferify",
                    "F_C_name": "c_post_declare",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "count,\t name,\t len(name, kind=C_INT)",
                    "F_arguments": "count,\t name",
                    "F_name_function": "post_declare",
                    "F_name_generic": "post_declare",
                    "F_name_impl": "post_declare",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_PostDeclare",
                    "function_name": "PostDeclare",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "post_declare"
                }
            },
            {
                "<FUNCTION>": "71 ****************************************",
                "_PTR_C_CXX_index": "38",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "PostDeclare",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "count",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void PostDeclare(int *count +rank(1)+intent(in), std::string &name)",
                "declgen": "void PostDeclare(int * count +intent(in)+rank(1), std::string & name)",
                "doxygen": {
                    "description": "Test post_declare.\nThe std::string in py_string_inout must be declared before the\ngoto added by py_native_*_in_pointer_list to avoid\n\"jump to label 'fail' crosses initialization of\" error.\n"
                },
                "options": {
                    "PY_array_arg": "list"
                },
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "count": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "count",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "count",
                            "cxx_type": "int",
                            "cxx_var": "count",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_*",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "count",
                            "F_pointer": "SHPTR_count",
                            "c_var": "count",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "count",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(count)",
                            "stmt0": "f_in_native_*",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_*",
                            "stmtc1": "c_default"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&SHCXX_name",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_inout_string_&_buf",
                            "stmt1": "c_inout_string_&_buf",
                            "temp0": "name_temp0"
                        },
                        "fmtf": {
                            "F_C_var": "name",
                            "F_pointer": "SHPTR_name",
                            "c_var": "name",
                            "f_intent": "INOUT",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "name",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "f_inout_string_&_buf",
                            "stmt1": "f_inout_string_&_buf",
                            "stmtc0": "c_inout_string_&_buf",
                            "stmtc1": "c_inout_string_&_buf",
                            "temp0": "name_temp0"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "count,\t SHCXX_name",
                    "C_name": "STR_post_declare_bufferify",
                    "C_prototype": "int * count,\t char *name,\t int name_temp0",
                    "C_return_type": "void",
                    "F_C_arguments": "count,\t name,\t name_temp0",
                    "F_C_name": "c_post_declare_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "PostDeclare",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "post_declare"
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "strings"
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    }
}