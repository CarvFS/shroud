{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "copyright": [
            "#######################################################################",
            "Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC.",
            "",
            "Produced at the Lawrence Livermore National Laboratory",
            "",
            "LLNL-CODE-738041.",
            "",
            "All rights reserved.",
            "",
            "This file is part of Shroud.",
            "",
            "For details about use and distribution, please read LICENSE.",
            "",
            "#######################################################################"
        ],
        "cxx_header": "strings.hpp",
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_argument": "SH_",
            "C_array_type": "STR_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_capsule_data_type": "STR_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrapstrings.h",
            "C_header_filename_suffix": "h",
            "C_header_helper": "typesstrings.h",
            "C_impl_filename": "wrapstrings.cpp",
            "C_impl_filename_suffix": "cpp",
            "C_local": "SHC_",
            "C_memory_dtor_function": "STR_SHROUD_memory_destructor",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "STR_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapfstrings.f",
            "F_module_name": "strings_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename_suffix": "hpp",
            "LUA_impl_filename_suffix": "cpp",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "PY_PyObject": "PyObject",
            "PY_extern_C_begin": "extern \"C\" ",
            "PY_header_filename": "pystringsmodule.hpp",
            "PY_header_filename_suffix": "hpp",
            "PY_helper_filename": "pystringshelper.cpp",
            "PY_impl_filename_suffix": "cpp",
            "PY_library_doc": "library documentation",
            "PY_module_filename": "pystringsmodule.cpp",
            "PY_module_name": "strings",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_numpy_array_dtor_context": "PY_array_destructor_context",
            "PY_numpy_array_dtor_function": "PY_array_destructor_function",
            "PY_obj": "obj",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "YAML_type_filename": "strings_types.yaml",
            "c_temp": "SHT_",
            "class_prefix": "",
            "class_scope": "",
            "cxx_class": "",
            "function_suffix": "",
            "library": "strings",
            "library_lower": "strings",
            "library_upper": "STRINGS",
            "namespace_scope": "",
            "stdlib": "std::",
            "template_suffix": ""
        },
        "functions": [
            {
                "_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&status)",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "status",
                            "f_var": "status"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char status",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_decl": "char status",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "numpy_type": null,
                            "py_var": "SHPy_status"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "status",
                                "pointer": []
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passChar(char status)",
                "declgen": "void passChar(char status +intent(in)+value)",
                "doxygen": {
                    "__line__": 30,
                    "brief": "pass a single char argument as a scalar."
                },
                "fmtdict": {
                    "C_call_code": "passChar(\tstatus);",
                    "C_call_list": "status",
                    "C_name": "STR_pass_char",
                    "C_prototype": "char status",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_char",
                    "F_C_name": "pass_char",
                    "F_arg_c_call": "status",
                    "F_arguments": "status",
                    "F_call_code": "call c_pass_char(status)",
                    "F_name_function": "pass_char",
                    "F_name_generic": "pass_char",
                    "F_name_impl": "pass_char",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passChar",
                    "c_const": "",
                    "function_name": "passChar",
                    "underscore_name": "pass_char"
                },
                "linenumber": 29,
                "options": {}
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnChar",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char_scalar"
                },
                "decl": "char returnChar()",
                "declgen": "char returnChar()",
                "doxygen": {
                    "__line__": 34,
                    "brief": "return a char argument (non-pointer)"
                },
                "fmtdict": {
                    "C_call_code": "char SHC_rv =\t returnChar(\t);",
                    "C_call_list": "",
                    "C_name": "STR_return_char",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "char",
                    "F_C_call": "c_return_char_bufferify",
                    "F_C_name": "c_return_char",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_return_char_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "return_char",
                    "F_name_generic": "return_char",
                    "F_name_impl": "return_char",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_returnChar",
                    "c_const": "",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "returnChar",
                    "underscore_name": "return_char"
                },
                "linenumber": 33,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHC_rv)",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "returnChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "char returnChar()",
                "declgen": "void returnChar(char * SHF_rv +intent(out)+len(NSHF_rv))",
                "doxygen": {
                    "__line__": 34,
                    "brief": "return a char argument (non-pointer)"
                },
                "fmtdict": {
                    "C_call_code": "char SHC_rv =\t returnChar(\t);",
                    "C_call_list": "",
                    "C_name": "STR_return_char_bufferify",
                    "C_post_call": "std::memset(SHF_rv, ' ', NSHF_rv);\nSHF_rv[0] = SHC_rv;",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_return_char_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "returnChar",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_char"
                },
                "linenumber": 33,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(dest)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<char *>\t(src))",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void passCharPtr(char * dest +intent(out), const char * src +intent(in))",
                "doxygen": {
                    "__line__": 41,
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\n"
                },
                "fmtdict": {
                    "C_call_code": "passCharPtr(\tdest,\t src);",
                    "C_call_list": "dest,\t src",
                    "C_name": "STR_pass_char_ptr",
                    "C_prototype": "char * dest,\t const char * src",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_char_ptr_bufferify",
                    "F_C_name": "c_pass_char_ptr",
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT)",
                    "F_arguments": "dest,\t src",
                    "F_call_code": "call c_pass_char_ptr_bufferify(dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT))",
                    "F_name_function": "pass_char_ptr",
                    "F_name_generic": "pass_char_ptr",
                    "F_name_impl": "pass_char_ptr",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "passCharPtr",
                    "underscore_name": "pass_char_ptr"
                },
                "linenumber": 40,
                "options": {
                    "__line__": 46,
                    "wrap_Lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "c_var_len": "Ndest",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_dest)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SH_dest",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "dest",
                            "f_var": "dest"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "c_var_trim": "Lsrc",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<char *>\t(SH_src))",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SH_src",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "src",
                            "f_var": "src"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "out",
                                "len": "Ndest",
                                "value": false
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "in",
                                "len_trim": "Lsrc",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void passCharPtr(char * dest +intent(out)+len(Ndest), const char * src +intent(in)+len_trim(Lsrc))",
                "doxygen": {
                    "__line__": 41,
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\n"
                },
                "fmtdict": {
                    "C_call_code": "passCharPtr(\tSH_dest,\t SH_src);",
                    "C_call_list": "SH_dest,\t SH_src",
                    "C_name": "STR_pass_char_ptr_bufferify",
                    "C_post_call": "ShroudStrCopy(dest, Ndest,\t SH_dest,\t std::strlen(SH_dest));\nfree(SH_dest);\nfree(SH_src);",
                    "C_pre_call": "char * SH_dest = (char *) std::malloc(Ndest + 1);\nchar * SH_src = (char *) malloc(Lsrc + 1);\nstd::memcpy(SH_src, src, Lsrc);\nSH_src[Lsrc] = '\\0';",
                    "C_prototype": "char * dest,\t int Ndest,\t const char * src,\t int Lsrc",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_pass_char_ptr_bufferify",
                    "c_const": "",
                    "function_name": "passCharPtr",
                    "function_suffix": "_bufferify",
                    "underscore_name": "pass_char_ptr"
                },
                "linenumber": 40,
                "options": {
                    "__line__": 46,
                    "wrap_Lua": false,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(s)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char * s",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "s",
                            "cxx_addr": "",
                            "cxx_decl": "char * s",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "s",
                            "numpy_type": null,
                            "py_var": "SHPy_s"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout))",
                "doxygen": {
                    "__line__": 53,
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "fmtdict": {
                    "C_call_code": "passCharPtrInOut(\ts);",
                    "C_call_list": "s",
                    "C_name": "STR_pass_char_ptr_in_out",
                    "C_prototype": "char * s",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_char_ptr_in_out_bufferify",
                    "F_C_name": "c_pass_char_ptr_in_out",
                    "F_arg_c_call": "s,\t len_trim(s, kind=C_INT),\t len(s, kind=C_INT)",
                    "F_arguments": "s",
                    "F_call_code": "call c_pass_char_ptr_in_out_bufferify(s,\t len_trim(s, kind=C_INT),\t len(s, kind=C_INT))",
                    "F_name_function": "pass_char_ptr_in_out",
                    "F_name_generic": "pass_char_ptr_in_out",
                    "F_name_impl": "pass_char_ptr_in_out",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passCharPtrInOut",
                    "c_const": "",
                    "function_name": "passCharPtrInOut",
                    "underscore_name": "pass_char_ptr_in_out"
                },
                "linenumber": 52,
                "options": {}
            },
            {
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "s",
                            "c_var_len": "Ns",
                            "c_var_trim": "Ls",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_s)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SH_s",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "s",
                            "f_var": "s"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "passCharPtrInOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "inout",
                                "len": "Ns",
                                "len_trim": "Ls",
                                "value": false
                            },
                            "declarator": {
                                "name": "s",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passCharPtrInOut(char * s+intent(inout))",
                "declgen": "void passCharPtrInOut(char * s +intent(inout)+len(Ns)+len_trim(Ls))",
                "doxygen": {
                    "__line__": 53,
                    "brief": "toupper",
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                },
                "fmtdict": {
                    "C_call_code": "passCharPtrInOut(\tSH_s);",
                    "C_call_list": "SH_s",
                    "C_name": "STR_pass_char_ptr_in_out_bufferify",
                    "C_post_call": "ShroudStrCopy(s, Ns,\t SH_s,\t std::strlen(SH_s));\nfree(SH_s);",
                    "C_pre_call": "char * SH_s = (char *) malloc(Ns + 1);\nstd::memcpy(SH_s, s, Ls);\nSH_s[Ls] = '\\0';",
                    "C_prototype": "char * s,\t int Ls,\t int Ns",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_pass_char_ptr_in_out_bufferify",
                    "c_const": "",
                    "function_name": "passCharPtrInOut",
                    "function_suffix": "_bufferify",
                    "underscore_name": "pass_char_ptr_in_out"
                },
                "linenumber": 52,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHC_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr1",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr1()",
                "declgen": "const char * getCharPtr1() +deref(allocatable)",
                "doxygen": {
                    "__line__": 63,
                    "brief": "return a 'const char *' as character(*)"
                },
                "fmtdict": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr1(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_char_ptr1",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_char_ptr1_bufferify",
                    "F_C_name": "c_get_char_ptr1",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_char_ptr1_bufferify(DSHF_rv)",
                    "F_name_function": "get_char_ptr1",
                    "F_name_generic": "get_char_ptr1",
                    "F_name_impl": "get_char_ptr1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getCharPtr1",
                    "c_const": "const ",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr1",
                    "underscore_name": "get_char_ptr1"
                },
                "linenumber": 61,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<char *>\t(SHC_rv))",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "charout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr1()",
                "declgen": "void getCharPtr1(const char * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "__line__": 63,
                    "brief": "return a 'const char *' as character(*)"
                },
                "fmtdict": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr1(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_char_ptr1_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<char *>\t(SHC_rv));\nDSHF_rv->cxx.idtor = 0;\nDSHF_rv->addr.ccharp = SHC_rv;\nDSHF_rv->len = SHC_rv == NULL ? 0 : strlen(SHC_rv);\nDSHF_rv->size = 1;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_char_ptr1_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr1",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr1"
                },
                "linenumber": 61,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHC_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr2() +len(30)",
                "declgen": "const char * getCharPtr2() +deref(result_as_arg)+len(30)",
                "doxygen": {
                    "__line__": 68,
                    "brief": "return 'const char *' with fixed size (len=30)"
                },
                "fmtdict": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr2(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_char_ptr2",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_char_ptr2_bufferify",
                    "F_C_name": "c_get_char_ptr2",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_get_char_ptr2_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "get_char_ptr2",
                    "F_name_generic": "get_char_ptr2",
                    "F_name_impl": "get_char_ptr2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getCharPtr2",
                    "c_const": "const ",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr2",
                    "underscore_name": "get_char_ptr2"
                },
                "linenumber": 66,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SHC_rv)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "declarator": {
                        "name": "getCharPtr2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr2() +len(30)",
                "declgen": "void getCharPtr2(char * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "__line__": 68,
                    "brief": "return 'const char *' with fixed size (len=30)"
                },
                "fmtdict": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr2(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_char_ptr2_bufferify",
                    "C_post_call": "if (SHC_rv == NULL) {+\nstd::memset(SHF_rv, ' ', NSHF_rv);\n-} else {+\nShroudStrCopy(SHF_rv, NSHF_rv,\t SHC_rv,\t std::strlen(SHC_rv));\n-}",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_char_ptr2_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr2"
                },
                "linenumber": 66,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHC_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "const char * getCharPtr3() +deref(result_as_arg)",
                "doxygen": {
                    "__line__": 73,
                    "brief": "return a 'const char *' as argument"
                },
                "fmtdict": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr3(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_char_ptr3",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_name": "c_get_char_ptr3",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getCharPtr3",
                    "__line__": 75,
                    "c_const": "const ",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr3",
                    "underscore_name": "get_char_ptr3"
                },
                "linenumber": 71,
                "options": {
                    "wrap_fortran": false
                }
            },
            {
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SHC_rv)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "output",
                            "f_var": "output"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "void getCharPtr3(char * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "__line__": 73,
                    "brief": "return a 'const char *' as argument"
                },
                "fmtdict": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr3(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_char_ptr3_bufferify",
                    "C_post_call": "if (SHC_rv == NULL) {+\nstd::memset(output, ' ', Noutput);\n-} else {+\nShroudStrCopy(output, Noutput,\t SHC_rv,\t std::strlen(SHC_rv));\n-}",
                    "C_prototype": "char * output,\t int Noutput",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_char_ptr3_bufferify",
                    "F_string_result_as_arg": "output",
                    "__line__": 75,
                    "c_const": "",
                    "cxx_rv_decl": "const char * SHC_rv",
                    "function_name": "getCharPtr3",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_char_ptr3"
                },
                "linenumber": 71,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getCharPtr3",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const char * getCharPtr3()",
                "declgen": "void getCharPtr3(char * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "__line__": 73,
                    "brief": "return a 'const char *' as argument"
                },
                "fmtdict": {
                    "F_C_call": "c_get_char_ptr3_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_call_code": "call c_get_char_ptr3_bufferify(output,\t len(output, kind=C_INT))",
                    "F_name_function": "get_char_ptr3",
                    "F_name_generic": "get_char_ptr3",
                    "F_name_impl": "get_char_ptr3",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "__line__": 75,
                    "function_name": "getCharPtr3",
                    "function_suffix": "",
                    "underscore_name": "get_char_ptr3"
                },
                "linenumber": 71,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringResult",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringResult()",
                "declgen": "const string getConstStringResult() +deref(allocatable)",
                "doxygen": {
                    "__line__": 83,
                    "brief": "return an ALLOCATABLE CHARACTER from std::string"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_result_bufferify",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_result_bufferify(DSHF_rv)",
                    "F_name_function": "get_const_string_result",
                    "F_name_generic": "get_const_string_result",
                    "F_name_impl": "get_const_string_result",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringResult",
                    "function_name": "getConstStringResult",
                    "underscore_name": "get_const_string_result"
                },
                "linenumber": 81,
                "options": {
                    "wrap_c": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv))",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "1"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringResult",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "stringout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringResult()",
                "declgen": "void getConstStringResult(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "__line__": 83,
                    "brief": "return an ALLOCATABLE CHARACTER from std::string"
                },
                "fmtdict": {
                    "C_call_code": "*SHCXX_rv =\t getConstStringResult(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_result_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv));\nDSHF_rv->cxx.idtor = 1;\nif (SHCXX_rv->empty()) {+\nDSHF_rv->addr.ccharp = NULL;\nDSHF_rv->len = 0;\n-} else {+\nDSHF_rv->addr.ccharp = SHCXX_rv->data();\nDSHF_rv->len = SHCXX_rv->size();\n-}\nDSHF_rv->size = 1;",
                    "C_pre_call": "std::string * SHCXX_rv = new std::string;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_result_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getConstStringResult",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_result"
                },
                "linenumber": 81,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringLen",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringLen() +len=30",
                "declgen": "const string getConstStringLen() +deref(result_as_arg)+len(30)",
                "doxygen": {
                    "__line__": 88,
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_len_bufferify",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_len_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "get_const_string_len",
                    "F_name_generic": "get_const_string_len",
                    "F_name_impl": "get_const_string_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringLen",
                    "function_name": "getConstStringLen",
                    "underscore_name": "get_const_string_len"
                },
                "linenumber": 86,
                "options": {
                    "wrap_c": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringLen() +len=30",
                "declgen": "void getConstStringLen(string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "__line__": 88,
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "C_call_code": "const std::string SHCXX_rv =\t getConstStringLen(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_len_bufferify",
                    "C_post_call": "if (SHCXX_rv.empty()) {+\nstd::memset(SHF_rv, ' ', NSHF_rv);\n-} else {+\nShroudStrCopy(SHF_rv, NSHF_rv,\t SHCXX_rv.data(),\t SHCXX_rv.size());\n-}",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_len_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string SHCXX_rv",
                    "function_name": "getConstStringLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_len"
                },
                "linenumber": 86,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "const string getConstStringAsArg() +deref(result_as_arg)",
                "doxygen": {
                    "__line__": 93,
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringAsArg",
                    "__line__": 95,
                    "function_name": "getConstStringAsArg",
                    "underscore_name": "get_const_string_as_arg"
                },
                "linenumber": 91,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "output",
                            "f_var": "output"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "void getConstStringAsArg(string * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "__line__": 93,
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "C_call_code": "const std::string SHCXX_rv =\t getConstStringAsArg(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_as_arg_bufferify",
                    "C_post_call": "if (SHCXX_rv.empty()) {+\nstd::memset(output, ' ', Noutput);\n-} else {+\nShroudStrCopy(output, Noutput,\t SHCXX_rv.data(),\t SHCXX_rv.size());\n-}",
                    "C_prototype": "char * output,\t int Noutput",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_as_arg_bufferify",
                    "F_string_result_as_arg": "output",
                    "__line__": 95,
                    "c_const": "",
                    "cxx_rv_decl": "const std::string SHCXX_rv",
                    "function_name": "getConstStringAsArg",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_as_arg"
                },
                "linenumber": 91,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string getConstStringAsArg()",
                "declgen": "void getConstStringAsArg(string * output +intent(out)+len(Noutput))",
                "doxygen": {
                    "__line__": 93,
                    "brief": "return a 'const string' as argument"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_as_arg_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_call_code": "call c_get_const_string_as_arg_bufferify(output,\t len(output, kind=C_INT))",
                    "F_name_function": "get_const_string_as_arg",
                    "F_name_generic": "get_const_string_as_arg",
                    "F_name_impl": "get_const_string_as_arg",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "__line__": 95,
                    "function_name": "getConstStringAsArg",
                    "function_suffix": "",
                    "underscore_name": "get_const_string_as_arg"
                },
                "linenumber": 91,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringAlloc",
                        "pointer": []
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string getConstStringAlloc()",
                "declgen": "const std::string getConstStringAlloc() +deref(allocatable)",
                "fmtdict": {
                    "F_C_call": "c_get_const_string_alloc_bufferify",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_alloc_bufferify(DSHF_rv)",
                    "F_name_function": "get_const_string_alloc",
                    "F_name_generic": "get_const_string_alloc",
                    "F_name_impl": "get_const_string_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringAlloc",
                    "function_name": "getConstStringAlloc",
                    "underscore_name": "get_const_string_alloc"
                },
                "linenumber": 98,
                "options": {
                    "wrap_c": false
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv))",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "1"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "stringout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string getConstStringAlloc()",
                "declgen": "void getConstStringAlloc(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "fmtdict": {
                    "C_call_code": "*SHCXX_rv =\t getConstStringAlloc(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_alloc_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv));\nDSHF_rv->cxx.idtor = 1;\nif (SHCXX_rv->empty()) {+\nDSHF_rv->addr.ccharp = NULL;\nDSHF_rv->len = 0;\n-} else {+\nDSHF_rv->addr.ccharp = SHCXX_rv->data();\nDSHF_rv->len = SHCXX_rv->size();\n-}\nDSHF_rv->size = 1;",
                    "C_pre_call": "std::string * SHCXX_rv = new std::string;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_alloc_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getConstStringAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_alloc"
                },
                "linenumber": 98,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefPure",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefPure()",
                "declgen": "const string & getConstStringRefPure() +deref(allocatable)",
                "doxygen": {
                    "__line__": 105,
                    "brief": "return a 'const string&' as ALLOCATABLE character"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefPure(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_pure",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv.c_str();",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_pure_bufferify",
                    "F_C_name": "c_get_const_string_ref_pure",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ref_pure_bufferify(DSHF_rv)",
                    "F_name_function": "get_const_string_ref_pure",
                    "F_name_generic": "get_const_string_ref_pure",
                    "F_name_impl": "get_const_string_ref_pure",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefPure",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefPure",
                    "underscore_name": "get_const_string_ref_pure"
                },
                "linenumber": 103,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_rv))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefPure",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "stringout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefPure()",
                "declgen": "void getConstStringRefPure(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "__line__": 105,
                    "brief": "return a 'const string&' as ALLOCATABLE character"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefPure(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_pure_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_rv));\nDSHF_rv->cxx.idtor = 0;\nif (SHCXX_rv.empty()) {+\nDSHF_rv->addr.ccharp = NULL;\nDSHF_rv->len = 0;\n-} else {+\nDSHF_rv->addr.ccharp = SHCXX_rv.data();\nDSHF_rv->len = SHCXX_rv.size();\n-}\nDSHF_rv->size = 1;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_pure_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefPure",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_pure"
                },
                "linenumber": 103,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLen",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLen() +len=30",
                "declgen": "const string & getConstStringRefLen() +deref(result_as_arg)+len(30)",
                "doxygen": {
                    "__line__": 110,
                    "brief": "return 'const string&' with fixed size (len=30)"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLen(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_len",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv.c_str();",
                    "C_post_call_pattern": "// C_error_pattern\nif (SHCXX_rv.empty()) {\n    return NULL;\n}\n",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_len_bufferify",
                    "F_C_name": "c_get_const_string_ref_len",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ref_len_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "get_const_string_ref_len",
                    "F_name_generic": "get_const_string_ref_len",
                    "F_name_impl": "get_const_string_ref_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefLen",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLen",
                    "underscore_name": "get_const_string_ref_len"
                },
                "linenumber": 108,
                "options": {}
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringRefLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefLen() +len=30",
                "declgen": "void getConstStringRefLen(string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "__line__": 110,
                    "brief": "return 'const string&' with fixed size (len=30)"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLen(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_len_bufferify",
                    "C_post_call": "if (SHCXX_rv.empty()) {+\nstd::memset(SHF_rv, ' ', NSHF_rv);\n-} else {+\nShroudStrCopy(SHF_rv, NSHF_rv,\t SHCXX_rv.data(),\t SHCXX_rv.size());\n-}",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_len_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_len"
                },
                "linenumber": 108,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "const string & getConstStringRefAsArg() +deref(result_as_arg)",
                "doxygen": {
                    "__line__": 115,
                    "brief": "return a 'const string&' as argument"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAsArg(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_as_arg",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv.c_str();",
                    "C_post_call_pattern": "// C_error_pattern\nif (SHCXX_rv.empty()) {\n    return NULL;\n}\n",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_name": "c_get_const_string_ref_as_arg",
                    "F_string_result_as_arg": "output",
                    "PY_name_impl": "PY_getConstStringRefAsArg",
                    "__line__": 117,
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAsArg",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "linenumber": 113,
                "options": {
                    "wrap_fortran": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "output",
                            "c_var_len": "Noutput",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "output",
                            "f_var": "output"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "void getConstStringRefAsArg(string & output +intent(out)+len(Noutput))",
                "doxygen": {
                    "__line__": 115,
                    "brief": "return a 'const string&' as argument"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAsArg(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_as_arg_bufferify",
                    "C_post_call": "if (SHCXX_rv.empty()) {+\nstd::memset(output, ' ', Noutput);\n-} else {+\nShroudStrCopy(output, Noutput,\t SHCXX_rv.data(),\t SHCXX_rv.size());\n-}",
                    "C_prototype": "char * output,\t int Noutput",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_as_arg_bufferify",
                    "F_string_result_as_arg": "output",
                    "__line__": 117,
                    "c_const": "",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAsArg",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "linenumber": 113,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAsArg",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "Noutput"
                            },
                            "declarator": {
                                "name": "output",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefAsArg()",
                "declgen": "void getConstStringRefAsArg(string & output +intent(out)+len(Noutput))",
                "doxygen": {
                    "__line__": 115,
                    "brief": "return a 'const string&' as argument"
                },
                "fmtdict": {
                    "F_C_call": "c_get_const_string_ref_as_arg_bufferify",
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)",
                    "F_arguments": "output",
                    "F_call_code": "call c_get_const_string_ref_as_arg_bufferify(output,\t len(output, kind=C_INT))",
                    "F_name_function": "get_const_string_ref_as_arg",
                    "F_name_generic": "get_const_string_ref_as_arg",
                    "F_name_impl": "get_const_string_ref_as_arg",
                    "F_string_result_as_arg": "output",
                    "F_subprogram": "subroutine",
                    "__line__": 117,
                    "function_name": "getConstStringRefAsArg",
                    "function_suffix": "",
                    "underscore_name": "get_const_string_ref_as_arg"
                },
                "linenumber": 113,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefLenEmpty",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string& getConstStringRefLenEmpty() +len=30",
                "declgen": "const string & getConstStringRefLenEmpty() +deref(result_as_arg)+len(30)",
                "doxygen": {
                    "__line__": 122,
                    "brief": "Test returning empty string reference"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLenEmpty(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_len_empty",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv.c_str();",
                    "C_post_call_pattern": "// C_error_pattern\nif (SHCXX_rv.empty()) {\n    return NULL;\n}\n",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_len_empty_bufferify",
                    "F_C_name": "c_get_const_string_ref_len_empty",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ref_len_empty_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "get_const_string_ref_len_empty",
                    "F_name_generic": "get_const_string_ref_len_empty",
                    "F_name_impl": "get_const_string_ref_len_empty",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefLenEmpty",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLenEmpty",
                    "underscore_name": "get_const_string_ref_len_empty"
                },
                "linenumber": 120,
                "options": {}
            },
            {
                "C_error_pattern": "C_invalid_name",
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringRefLenEmpty",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string& getConstStringRefLenEmpty() +len=30",
                "declgen": "void getConstStringRefLenEmpty(string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "__line__": 122,
                    "brief": "Test returning empty string reference"
                },
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLenEmpty(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_len_empty_bufferify",
                    "C_post_call": "if (SHCXX_rv.empty()) {+\nstd::memset(SHF_rv, ' ', NSHF_rv);\n-} else {+\nShroudStrCopy(SHF_rv, NSHF_rv,\t SHCXX_rv.data(),\t SHCXX_rv.size());\n-}",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_len_empty_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefLenEmpty",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_len_empty"
                },
                "linenumber": 120,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringRefAlloc",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& getConstStringRefAlloc()",
                "declgen": "const std::string & getConstStringRefAlloc() +deref(allocatable)",
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAlloc(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_alloc",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv.c_str();",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ref_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ref_alloc",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ref_alloc_bufferify(DSHF_rv)",
                    "F_name_function": "get_const_string_ref_alloc",
                    "F_name_generic": "get_const_string_ref_alloc",
                    "F_name_impl": "get_const_string_ref_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringRefAlloc",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAlloc",
                    "underscore_name": "get_const_string_ref_alloc"
                },
                "linenumber": 125,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_rv))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringRefAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "stringout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string& getConstStringRefAlloc()",
                "declgen": "void getConstStringRefAlloc(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAlloc(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ref_alloc_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_rv));\nDSHF_rv->cxx.idtor = 0;\nif (SHCXX_rv.empty()) {+\nDSHF_rv->addr.ccharp = NULL;\nDSHF_rv->len = 0;\n-} else {+\nDSHF_rv->addr.ccharp = SHCXX_rv.data();\nDSHF_rv->len = SHCXX_rv.size();\n-}\nDSHF_rv->size = 1;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ref_alloc_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "getConstStringRefAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ref_alloc"
                },
                "linenumber": 125,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": 30
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrLen",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const string * getConstStringPtrLen() +len=30",
                "declgen": "const string * getConstStringPtrLen() +deref(result_as_arg)+len(30)",
                "doxygen": {
                    "__line__": 132,
                    "brief": "return a 'const string *' as character(30)",
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished with C_finalize_buf which is possible\nbecause +len(30) so the contents are copied before returning.\n"
                },
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrLen(\t);",
                    "C_call_list": "",
                    "C_finalize_buf": "delete {cxx_var};",
                    "C_name": "STR_get_const_string_ptr_len",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv->c_str();",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_len_bufferify",
                    "F_C_name": "c_get_const_string_ptr_len",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ptr_len_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "get_const_string_ptr_len",
                    "F_name_generic": "get_const_string_ptr_len",
                    "F_name_impl": "get_const_string_ptr_len",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrLen",
                    "__line__": 139,
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrLen",
                    "underscore_name": "get_const_string_ptr_len"
                },
                "linenumber": 130,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": 30
                    },
                    "declarator": {
                        "name": "getConstStringPtrLen",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const string * getConstStringPtrLen() +len=30",
                "declgen": "void getConstStringPtrLen(string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "doxygen": {
                    "__line__": 132,
                    "brief": "return a 'const string *' as character(30)",
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished with C_finalize_buf which is possible\nbecause +len(30) so the contents are copied before returning.\n"
                },
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrLen(\t);",
                    "C_call_list": "",
                    "C_finalize_buf": "delete {cxx_var};",
                    "C_name": "STR_get_const_string_ptr_len_bufferify",
                    "C_post_call": "if (SHCXX_rv->empty()) {+\nstd::memset(SHF_rv, ' ', NSHF_rv);\n-} else {+\nShroudStrCopy(SHF_rv, NSHF_rv,\t SHCXX_rv->data(),\t SHCXX_rv->size());\n-}\n{\n    // C_finalize\n    delete SHCXX_rv;\n}",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_len_bufferify",
                    "__line__": 139,
                    "c_const": "",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrLen",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_len"
                },
                "linenumber": 130,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable",
                        "owner": "library"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "const std::string * getConstStringPtrAlloc() +deref(allocatable)+owner(library)",
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrAlloc(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ptr_alloc",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv->c_str();",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ptr_alloc",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ptr_alloc_bufferify(DSHF_rv)",
                    "F_name_function": "get_const_string_ptr_alloc",
                    "F_name_generic": "get_const_string_ptr_alloc",
                    "F_name_impl": "get_const_string_ptr_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrAlloc",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc",
                    "underscore_name": "get_const_string_ptr_alloc"
                },
                "linenumber": 142,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv))",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringPtrAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out",
                                "owner": "library"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "stringout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string * getConstStringPtrAlloc() +owner(library)",
                "declgen": "void getConstStringPtrAlloc(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)+owner(library))",
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrAlloc(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ptr_alloc_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv));\nDSHF_rv->cxx.idtor = 0;\nif (SHCXX_rv->empty()) {+\nDSHF_rv->addr.ccharp = NULL;\nDSHF_rv->len = 0;\n-} else {+\nDSHF_rv->addr.ccharp = SHCXX_rv->data();\nDSHF_rv->len = SHCXX_rv->size();\n-}\nDSHF_rv->size = 1;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_alloc_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_alloc"
                },
                "linenumber": 142,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "2"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable",
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAlloc() +deref(allocatable)+owner(caller)",
                "doxygen": {
                    "__line__": 145,
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished +owner(caller) which sets idtor.\nThe contents are copied by Fortran so they must outlast\nthe return from the C wrapper.\n"
                },
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrOwnsAlloc(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ptr_owns_alloc",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv->c_str();",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_owns_alloc_bufferify",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ptr_owns_alloc_bufferify(DSHF_rv)",
                    "F_name_function": "get_const_string_ptr_owns_alloc",
                    "F_name_generic": "get_const_string_ptr_owns_alloc",
                    "F_name_impl": "get_const_string_ptr_owns_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAlloc",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAlloc",
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                },
                "linenumber": 144,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv))",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "2"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out",
                                "owner": "caller"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "stringout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +owner(caller)",
                "declgen": "void getConstStringPtrOwnsAlloc(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)+owner(caller))",
                "doxygen": {
                    "__line__": 145,
                    "description": "It is the caller's responsibility to release the string\ncreated by the C++ library.\nThis is accomplished +owner(caller) which sets idtor.\nThe contents are copied by Fortran so they must outlast\nthe return from the C wrapper.\n"
                },
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrOwnsAlloc(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ptr_owns_alloc_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv));\nDSHF_rv->cxx.idtor = 2;\nif (SHCXX_rv->empty()) {+\nDSHF_rv->addr.ccharp = NULL;\nDSHF_rv->len = 0;\n-} else {+\nDSHF_rv->addr.ccharp = SHCXX_rv->data();\nDSHF_rv->len = SHCXX_rv->size();\n-}\nDSHF_rv->size = 1;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                },
                "linenumber": 144,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_val": "SHCXX_rv->c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "3"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_var": "SHCXX_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "__line__": 157,
                        "deref": "allocatable",
                        "free_pattern": "C_string_free",
                        "owner": "caller"
                    },
                    "const": true,
                    "declarator": {
                        "name": "getConstStringPtrOwnsAllocPattern",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string * getConstStringPtrOwnsAllocPattern() +owner(caller)",
                "declgen": "const std::string * getConstStringPtrOwnsAllocPattern() +deref(allocatable)+free_pattern(C_string_free)+owner(caller)",
                "doxygen": {
                    "__line__": 154,
                    "description": "Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.\n"
                },
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrOwnsAllocPattern(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ptr_owns_alloc_pattern",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv->c_str();",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern",
                    "F_arg_c_call": "DSHF_rv",
                    "F_arguments": "",
                    "F_call_code": "call c_get_const_string_ptr_owns_alloc_pattern_bufferify(DSHF_rv)",
                    "F_name_function": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_generic": "get_const_string_ptr_owns_alloc_pattern",
                    "F_name_impl": "get_const_string_ptr_owns_alloc_pattern",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getConstStringPtrOwnsAllocPattern",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAllocPattern",
                    "underscore_name": "get_const_string_ptr_owns_alloc_pattern"
                },
                "linenumber": 153,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv))",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "3"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "__line__": 157
                    },
                    "declarator": {
                        "name": "getConstStringPtrOwnsAllocPattern",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "free_pattern": "C_string_free",
                                "intent": "out",
                                "owner": "caller"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "stringout"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string * getConstStringPtrOwnsAllocPattern() +owner(caller)",
                "declgen": "void getConstStringPtrOwnsAllocPattern(const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+free_pattern(C_string_free)+intent(out)+owner(caller))",
                "doxygen": {
                    "__line__": 154,
                    "description": "Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.\n"
                },
                "fmtdict": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrOwnsAllocPattern(\t);",
                    "C_call_list": "",
                    "C_name": "STR_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "C_post_call": "DSHF_rv->cxx.addr = static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv));\nDSHF_rv->cxx.idtor = 3;\nif (SHCXX_rv->empty()) {+\nDSHF_rv->addr.ccharp = NULL;\nDSHF_rv->len = 0;\n-} else {+\nDSHF_rv->addr.ccharp = SHCXX_rv->data();\nDSHF_rv->len = SHCXX_rv->size();\n-}\nDSHF_rv->size = 1;",
                    "C_prototype": "STR_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_pattern_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string * SHCXX_rv",
                    "function_name": "getConstStringPtrOwnsAllocPattern",
                    "function_suffix": "_bufferify",
                    "underscore_name": "get_const_string_ptr_owns_alloc_pattern"
                },
                "linenumber": 153,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SH_arg1))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * arg1",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "const std::string & arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringConstReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringConstReference(const std::string & arg1)",
                "declgen": "void acceptStringConstReference(const std::string & arg1 +intent(in))",
                "doxygen": {
                    "__line__": 164,
                    "brief": "Accept a const string reference",
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringConstReference(\tSH_arg1);",
                    "C_call_list": "SH_arg1",
                    "C_name": "STR_accept_string_const_reference",
                    "C_pre_call": "const std::string SH_arg1(arg1);",
                    "C_prototype": "const char * arg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_const_reference_bufferify",
                    "F_C_name": "c_accept_string_const_reference",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_call_code": "call c_accept_string_const_reference_bufferify(arg1,\t len_trim(arg1, kind=C_INT))",
                    "F_name_function": "accept_string_const_reference",
                    "F_name_generic": "accept_string_const_reference",
                    "F_name_impl": "accept_string_const_reference",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringConstReference",
                    "c_const": "",
                    "function_name": "acceptStringConstReference",
                    "underscore_name": "accept_string_const_reference"
                },
                "linenumber": 163,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_trim": "Larg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SH_arg1))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringConstReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "in",
                                "len_trim": "Larg1",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringConstReference(const std::string & arg1)",
                "declgen": "void acceptStringConstReference(const std::string & arg1 +intent(in)+len_trim(Larg1))",
                "doxygen": {
                    "__line__": 164,
                    "brief": "Accept a const string reference",
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringConstReference(\tSH_arg1);",
                    "C_call_list": "SH_arg1",
                    "C_name": "STR_accept_string_const_reference_bufferify",
                    "C_pre_call": "const std::string SH_arg1(arg1, Larg1);",
                    "C_prototype": "const char * arg1,\t int Larg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_const_reference_bufferify",
                    "c_const": "",
                    "function_name": "acceptStringConstReference",
                    "function_suffix": "_bufferify",
                    "underscore_name": "accept_string_const_reference"
                },
                "linenumber": 163,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_arg1)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char * arg1",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "std::string & arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringReferenceOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))",
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out))",
                "doxygen": {
                    "__line__": 172,
                    "brief": "Accept a string reference",
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringReferenceOut(\tSH_arg1);",
                    "C_call_list": "SH_arg1",
                    "C_name": "STR_accept_string_reference_out",
                    "C_post_call": "strcpy(arg1, SH_arg1.c_str());",
                    "C_pre_call": "std::string SH_arg1;",
                    "C_prototype": "char * arg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_reference_out_bufferify",
                    "F_C_name": "c_accept_string_reference_out",
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_call_code": "call c_accept_string_reference_out_bufferify(arg1,\t len(arg1, kind=C_INT))",
                    "F_name_function": "accept_string_reference_out",
                    "F_name_generic": "accept_string_reference_out",
                    "F_name_impl": "accept_string_reference_out",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringReferenceOut",
                    "c_const": "",
                    "function_name": "acceptStringReferenceOut",
                    "underscore_name": "accept_string_reference_out"
                },
                "linenumber": 171,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_arg1)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReferenceOut",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "out",
                                "len": "Narg1",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))",
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out)+len(Narg1))",
                "doxygen": {
                    "__line__": 172,
                    "brief": "Accept a string reference",
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringReferenceOut(\tSH_arg1);",
                    "C_call_list": "SH_arg1",
                    "C_name": "STR_accept_string_reference_out_bufferify",
                    "C_post_call": "ShroudStrCopy(arg1, Narg1,\t SH_arg1.data(),\t SH_arg1.size());",
                    "C_pre_call": "std::string SH_arg1;",
                    "C_prototype": "char * arg1,\t int Narg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_reference_out_bufferify",
                    "c_const": "",
                    "function_name": "acceptStringReferenceOut",
                    "function_suffix": "_bufferify",
                    "underscore_name": "accept_string_reference_out"
                },
                "linenumber": 171,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_arg1)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char * arg1",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "std::string & arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReference(std::string & arg1)",
                "declgen": "void acceptStringReference(std::string & arg1 +intent(inout))",
                "doxygen": {
                    "__line__": 180,
                    "brief": "Accept a string reference",
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringReference(\tSH_arg1);",
                    "C_call_list": "SH_arg1",
                    "C_name": "STR_accept_string_reference",
                    "C_post_call": "strcpy(arg1, SH_arg1.c_str());",
                    "C_pre_call": "std::string SH_arg1(arg1);",
                    "C_prototype": "char * arg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_reference_bufferify",
                    "F_C_name": "c_accept_string_reference",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_call_code": "call c_accept_string_reference_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT))",
                    "F_name_function": "accept_string_reference",
                    "F_name_generic": "accept_string_reference",
                    "F_name_impl": "accept_string_reference",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringReference",
                    "c_const": "",
                    "function_name": "acceptStringReference",
                    "underscore_name": "accept_string_reference"
                },
                "linenumber": 179,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "c_var_trim": "Larg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_arg1)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringReference",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "inout",
                                "len": "Narg1",
                                "len_trim": "Larg1",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringReference(std::string & arg1)",
                "declgen": "void acceptStringReference(std::string & arg1 +intent(inout)+len(Narg1)+len_trim(Larg1))",
                "doxygen": {
                    "__line__": 180,
                    "brief": "Accept a string reference",
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringReference(\tSH_arg1);",
                    "C_call_list": "SH_arg1",
                    "C_name": "STR_accept_string_reference_bufferify",
                    "C_post_call": "ShroudStrCopy(arg1, Narg1,\t SH_arg1.data(),\t SH_arg1.size());",
                    "C_pre_call": "std::string SH_arg1(arg1, Larg1);",
                    "C_prototype": "char * arg1,\t int Larg1,\t int Narg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_reference_bufferify",
                    "c_const": "",
                    "function_name": "acceptStringReference",
                    "function_suffix": "_bufferify",
                    "underscore_name": "accept_string_reference"
                },
                "linenumber": 179,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_arg1)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char * arg1",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "",
                            "cxx_decl": "std::string * arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointer(std::string * arg1)",
                "declgen": "void acceptStringPointer(std::string * arg1 +intent(inout))",
                "doxygen": {
                    "__line__": 188,
                    "brief": "Accept a string pointer"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringPointer(\t&SH_arg1);",
                    "C_call_list": "&SH_arg1",
                    "C_name": "STR_accept_string_pointer",
                    "C_post_call": "strcpy(arg1, SH_arg1.c_str());",
                    "C_pre_call": "std::string SH_arg1(arg1);",
                    "C_prototype": "char * arg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_accept_string_pointer_bufferify",
                    "F_C_name": "c_accept_string_pointer",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT)",
                    "F_arguments": "arg1",
                    "F_call_code": "call c_accept_string_pointer_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT))",
                    "F_name_function": "accept_string_pointer",
                    "F_name_generic": "accept_string_pointer",
                    "F_name_impl": "accept_string_pointer",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_acceptStringPointer",
                    "c_const": "",
                    "function_name": "acceptStringPointer",
                    "underscore_name": "accept_string_pointer"
                },
                "linenumber": 187,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_len": "Narg1",
                            "c_var_trim": "Larg1",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_arg1)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "acceptStringPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "inout",
                                "len": "Narg1",
                                "len_trim": "Larg1",
                                "value": false
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void acceptStringPointer(std::string * arg1)",
                "declgen": "void acceptStringPointer(std::string * arg1 +intent(inout)+len(Narg1)+len_trim(Larg1))",
                "doxygen": {
                    "__line__": 188,
                    "brief": "Accept a string pointer"
                },
                "fmtdict": {
                    "C_call_code": "acceptStringPointer(\t&SH_arg1);",
                    "C_call_list": "&SH_arg1",
                    "C_name": "STR_accept_string_pointer_bufferify",
                    "C_post_call": "ShroudStrCopy(arg1, Narg1,\t SH_arg1.data(),\t SH_arg1.size());",
                    "C_pre_call": "std::string SH_arg1(arg1, Larg1);",
                    "C_prototype": "char * arg1,\t int Larg1,\t int Narg1",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_accept_string_pointer_bufferify",
                    "c_const": "",
                    "function_name": "acceptStringPointer",
                    "function_suffix": "_bufferify",
                    "underscore_name": "accept_string_pointer"
                },
                "linenumber": 187,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char * arg1",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "std::string & arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1"
                        }
                    },
                    "arg2": {
                        "fmtpy": {
                            "PyObject": "PyObject",
                            "PyTypeObject": null,
                            "c_const": "",
                            "c_decl": "char * arg2",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "std::string & arg2",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "returnStrings",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "declgen": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))",
                "doxygen": {
                    "__line__": 197,
                    "brief": "Test Python returning multiple std::string arguments."
                },
                "fmtdict": {
                    "PY_name_impl": "PY_returnStrings",
                    "function_name": "returnStrings",
                    "underscore_name": "return_strings"
                },
                "linenumber": 195,
                "options": {
                    "__line__": 199,
                    "wrap_c": false,
                    "wrap_fortran": false
                }
            },
            {
                "ast": {
                    "declarator": {
                        "name": "returnMany",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char"
                },
                "decl": "char returnMany(int *arg1 +intent(out))",
                "declgen": "char returnMany(int * arg1 +intent(out))",
                "doxygen": {
                    "__line__": 204,
                    "description": "Test Py_BuildValue with multiple values.\n"
                },
                "fmtdict": {
                    "function_name": "returnMany",
                    "underscore_name": "return_many"
                },
                "linenumber": 203,
                "options": {
                    "__line__": 207,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(name)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char * name",
                            "c_deref": "*",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_decl": "char * name",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "numpy_type": null,
                            "py_var": "SHPy_name"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "explicit1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "AAlen",
                                "value": false
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))",
                "declgen": "void explicit1(char * name +intent(in)+len_trim(AAlen))",
                "fmtdict": {
                    "C_bufferify_suffix": "_BUFFER",
                    "C_call_code": "explicit1(\tname);",
                    "C_call_list": "name",
                    "C_name": "STR_explicit1",
                    "C_prototype": "char * name",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_explicit1_buffer",
                    "F_C_name": "c_explicit1",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)",
                    "F_arguments": "name",
                    "F_call_code": "call c_explicit1_buffer(name,\t len_trim(name, kind=C_INT))",
                    "F_name_function": "explicit1",
                    "F_name_generic": "explicit1",
                    "F_name_impl": "explicit1",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_explicit1",
                    "__line__": 218,
                    "c_const": "",
                    "function_name": "explicit1",
                    "underscore_name": "explicit1"
                },
                "linenumber": 217,
                "options": {}
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "AAlen",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_name)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SH_name",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_var": "name"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "explicit1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "in",
                                "len_trim": "AAlen",
                                "value": false
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))",
                "declgen": "void explicit1(char * name +intent(in)+len_trim(AAlen))",
                "fmtdict": {
                    "C_bufferify_suffix": "_BUFFER",
                    "C_call_code": "explicit1(\tSH_name);",
                    "C_call_list": "SH_name",
                    "C_name": "STR_explicit1_BUFFER",
                    "C_post_call": "free(SH_name);",
                    "C_pre_call": "char * SH_name = (char *) malloc(AAlen + 1);\nstd::memcpy(SH_name, name, AAlen);\nSH_name[AAlen] = '\\0';",
                    "C_prototype": "char * name,\t int AAlen",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_explicit1_buffer",
                    "__line__": 218,
                    "c_const": "",
                    "function_name": "explicit1",
                    "function_suffix": "_BUFFER",
                    "underscore_name": "explicit1"
                },
                "linenumber": 217,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(name)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "name",
                            "idtor": "0"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "explicit2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "len": "AAtrim",
                                "value": false
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))",
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))",
                "fmtdict": {
                    "C_call_code": "explicit2(\tname);",
                    "C_call_list": "name",
                    "C_name": "STR_explicit2",
                    "C_prototype": "char * name",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_explicit2_bufferify",
                    "F_C_name": "c_explicit2",
                    "F_arg_c_call": "name,\t len(name, kind=C_INT)",
                    "F_arguments": "name",
                    "F_call_code": "call c_explicit2_bufferify(name,\t len(name, kind=C_INT))",
                    "F_name_function": "explicit2",
                    "F_name_generic": "explicit2",
                    "F_name_impl": "explicit2",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "explicit2",
                    "underscore_name": "explicit2"
                },
                "linenumber": 222,
                "options": {
                    "__line__": 224,
                    "wrap_Lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_len": "AAtrim",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_name)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SH_name",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_var": "name"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "explicit2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "out",
                                "len": "AAtrim",
                                "value": false
                            },
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))",
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))",
                "fmtdict": {
                    "C_call_code": "explicit2(\tSH_name);",
                    "C_call_list": "SH_name",
                    "C_name": "STR_explicit2_bufferify",
                    "C_post_call": "ShroudStrCopy(name, AAtrim,\t SH_name,\t std::strlen(SH_name));\nfree(SH_name);",
                    "C_pre_call": "char * SH_name = (char *) std::malloc(AAtrim + 1);",
                    "C_prototype": "char * name,\t int AAtrim",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_explicit2_bufferify",
                    "c_const": "",
                    "function_name": "explicit2",
                    "function_suffix": "_bufferify",
                    "underscore_name": "explicit2"
                },
                "linenumber": 222,
                "options": {
                    "__line__": 224,
                    "wrap_Lua": false,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&status)",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "status",
                            "f_var": "status"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "char status",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "status",
                            "cxx_addr": "&",
                            "cxx_decl": "char status",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "status",
                            "numpy_type": null,
                            "py_var": "SHPy_status"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "CpassChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "status",
                                "pointer": []
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassChar(char status)",
                "declgen": "void CpassChar(char status +intent(in)+value)",
                "doxygen": {
                    "__line__": 237,
                    "brief": "pass a single char argument as a scalar, extern \"C\""
                },
                "fmtdict": {
                    "C_call_code": "CpassChar(\tstatus);",
                    "C_call_list": "status",
                    "C_name": "CpassChar",
                    "C_prototype": "char status",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_cpass_char",
                    "F_C_name": "cpass_char",
                    "F_arg_c_call": "status",
                    "F_arguments": "status",
                    "F_call_code": "call c_cpass_char(status)",
                    "F_name_function": "cpass_char",
                    "F_name_generic": "cpass_char",
                    "F_name_impl": "cpass_char",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_CpassChar",
                    "c_const": "",
                    "function_name": "CpassChar",
                    "underscore_name": "cpass_char"
                },
                "linenumber": 236,
                "options": {
                    "C_extern_C": true,
                    "__line__": 239
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "char",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "char",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PyObject",
                        "PyTypeObject": null,
                        "c_deref": "",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHC_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "CreturnChar",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "char"
                    ],
                    "typemap_name": "char_scalar"
                },
                "decl": "char CreturnChar()",
                "declgen": "char CreturnChar()",
                "doxygen": {
                    "__line__": 243,
                    "brief": "return a char argument (non-pointer), extern \"C\""
                },
                "fmtdict": {
                    "C_call_code": "char SHC_rv =\t CreturnChar(\t);",
                    "C_call_list": "",
                    "C_name": "CreturnChar",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "char",
                    "F_C_call": "c_creturn_char_bufferify",
                    "F_C_name": "c_creturn_char",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_creturn_char_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "creturn_char",
                    "F_name_generic": "creturn_char",
                    "F_name_impl": "creturn_char",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_CreturnChar",
                    "c_const": "",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "CreturnChar",
                    "underscore_name": "creturn_char"
                },
                "linenumber": 242,
                "options": {
                    "C_extern_C": true,
                    "__line__": 245
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHC_rv)",
                            "cxx_member": ".",
                            "cxx_type": "char",
                            "cxx_var": "SHC_rv",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "CreturnChar",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char_scalar"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "char CreturnChar()",
                "declgen": "void CreturnChar(char * SHF_rv +intent(out)+len(NSHF_rv))",
                "doxygen": {
                    "__line__": 243,
                    "brief": "return a char argument (non-pointer), extern \"C\""
                },
                "fmtdict": {
                    "C_call_code": "char SHC_rv =\t CreturnChar(\t);",
                    "C_call_list": "",
                    "C_name": "STR_creturn_char_bufferify",
                    "C_post_call": "std::memset(SHF_rv, ' ', NSHF_rv);\nSHF_rv[0] = SHC_rv;",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_creturn_char_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "char SHC_rv",
                    "function_name": "CreturnChar",
                    "function_suffix": "_bufferify",
                    "underscore_name": "creturn_char"
                },
                "linenumber": 242,
                "options": {
                    "C_extern_C": true,
                    "__line__": 245,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(dest)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "dest",
                            "idtor": "0"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<char *>\t(src))",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "src",
                            "idtor": "0"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void CpassCharPtr(char * dest +intent(out), const char * src +intent(in))",
                "doxygen": {
                    "__line__": 258,
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                },
                "fmtdict": {
                    "C_call_code": "CpassCharPtr(\tdest,\t src);",
                    "C_call_list": "dest,\t src",
                    "C_name": "CpassCharPtr",
                    "C_prototype": "char * dest,\t const char * src",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_cpass_char_ptr_bufferify",
                    "F_C_name": "c_cpass_char_ptr",
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT)",
                    "F_arguments": "dest,\t src",
                    "F_call_code": "call c_cpass_char_ptr_bufferify(dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT))",
                    "F_name_function": "cpass_char_ptr",
                    "F_name_generic": "cpass_char_ptr",
                    "F_name_impl": "cpass_char_ptr",
                    "F_subprogram": "subroutine",
                    "c_const": "",
                    "function_name": "CpassCharPtr",
                    "underscore_name": "cpass_char_ptr"
                },
                "linenumber": 251,
                "options": {
                    "C_extern_C": true,
                    "__line__": 252,
                    "wrap_Lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "dest",
                            "c_var_len": "Ndest",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SH_dest)",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SH_dest",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "dest",
                            "f_var": "dest"
                        }
                    },
                    "src": {
                        "fmtc": {
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "src",
                            "c_var_trim": "Lsrc",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<char *>\t(SH_src))",
                            "cxx_member": "->",
                            "cxx_type": "char",
                            "cxx_var": "SH_src",
                            "idtor": "0"
                        },
                        "fmtf": {
                            "c_var": "src",
                            "f_var": "src"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "CpassCharPtr",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "out",
                                "len": "Ndest",
                                "value": false
                            },
                            "declarator": {
                                "name": "dest",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        },
                        {
                            "attrs": {
                                "_generated_suffix": "_buf",
                                "intent": "in",
                                "len_trim": "Lsrc",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "src",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "char"
                            ],
                            "typemap_name": "char"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)",
                "declgen": "void CpassCharPtr(char * dest +intent(out)+len(Ndest), const char * src +intent(in)+len_trim(Lsrc))",
                "doxygen": {
                    "__line__": 258,
                    "brief": "strcpy like behavior",
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                },
                "fmtdict": {
                    "C_call_code": "CpassCharPtr(\tSH_dest,\t SH_src);",
                    "C_call_list": "SH_dest,\t SH_src",
                    "C_name": "STR_cpass_char_ptr_bufferify",
                    "C_post_call": "ShroudStrCopy(dest, Ndest,\t SH_dest,\t std::strlen(SH_dest));\nfree(SH_dest);\nfree(SH_src);",
                    "C_pre_call": "char * SH_dest = (char *) std::malloc(Ndest + 1);\nchar * SH_src = (char *) malloc(Lsrc + 1);\nstd::memcpy(SH_src, src, Lsrc);\nSH_src[Lsrc] = '\\0';",
                    "C_prototype": "char * dest,\t int Ndest,\t const char * src,\t int Lsrc",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_cpass_char_ptr_bufferify",
                    "c_const": "",
                    "function_name": "CpassCharPtr",
                    "function_suffix": "_bufferify",
                    "underscore_name": "cpass_char_ptr"
                },
                "linenumber": 251,
                "options": {
                    "C_extern_C": true,
                    "__line__": 252,
                    "wrap_Lua": false,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "c++",
        "options": {
            "C_enum_member_template": "{enum_member_name}",
            "C_enum_template": "{C_prefix}{class_prefix}{enum_name}",
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_helper_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{class_lower}_capsule",
            "F_enum_member_template": "{class_prefix}{enum_lower}_{enum_member_lower}",
            "F_force_wrapper": false,
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}",
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_class_template": "{class_lower}_mod",
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_per_class": true,
            "F_name_function_template": "{underscore_name}{function_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context",
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 23,
            "class_prefix_template": "{class_lower}_",
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": false,
            "wrap_python": true
        }
    },
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h",
            "c_to_cxx": "MPI_Comm_f2c({c_var})",
            "c_type": "MPI_Fint",
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})",
            "cxx_type": "MPI_Comm",
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_c_type": "integer(C_INT)",
            "f_kind": "C_INT",
            "f_type": "integer",
            "flat_name": "MPI_Comm"
        },
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TBOOLEAN",
            "PYN_typenum": "NPY_BOOL",
            "PY_PyTypeObject": "PyBool_Type",
            "c_type": "bool",
            "cxx_type": "bool",
            "f_c_type": "logical(C_BOOL)",
            "f_kind": "C_BOOL",
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            },
            "f_statements": {
                "intent_in": {
                    "c_local_var": true,
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_inout": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ],
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                },
                "intent_out": {
                    "c_local_var": true,
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                },
                "result": {
                    "need_wrapper": true
                }
            },
            "f_type": "logical",
            "flat_name": "bool",
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_deref}{c_var});"
                    ],
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                },
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        },
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_ctor": "PyString_FromString({c_var})",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "c_header": "<stdlib.h> <string.h>",
                    "cxx_header": "<stdlib.h> <cstring>",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "free({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);",
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});",
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_header": "<stdlib.h> <string.h>",
                    "c_helper": "ShroudStrCopy",
                    "cxx_header": "<stdlib.h> <cstring>",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t {stdlib}strlen({cxx_var}));",
                        "free({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);",
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});",
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_header": "<stdlib.h> <string.h>",
                    "c_helper": "ShroudStrCopy",
                    "cxx_header": "<cstdlib> <cstring>",
                    "cxx_local_var": "pointer",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t {stdlib}strlen({cxx_var}));",
                        "free({cxx_var});"
                    ],
                    "pre_call": [
                        "char * {cxx_var} = (char *) {stdlib}malloc({c_var_len} + 1);"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_header": "<string.h>",
                    "c_helper": "ShroudStrCopy",
                    "cxx_header": "<cstring>",
                    "post_call": [
                        "if ({cxx_var} == NULL) {{+",
                        "{stdlib}memset({c_var}, ' ', {c_var_len});",
                        "-}} else {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t {stdlib}strlen({cxx_var}));",
                        "-}}"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "char"
        },
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "(int) {cxx_var}",
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)",
            "PY_format": "c",
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_header": "<string.h>",
                    "cxx_header": "<cstring>",
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});",
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_type": "character",
            "flat_name": "char"
        },
        "charout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.ccharp = {cxx_var};",
                        "{c_var_context}->len = {cxx_var} == NULL ? 0 : strlen({cxx_var});",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "char",
            "cxx_type": "char",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "char"
        },
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_DOUBLE",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "d",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "double",
            "cxx_type": "double",
            "f_cast": "real({f_var}, C_DOUBLE)",
            "f_kind": "C_DOUBLE",
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            },
            "f_type": "real(C_DOUBLE)",
            "flat_name": "double"
        },
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_FLOAT",
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})",
            "PY_format": "f",
            "PY_get": "PyFloat_AsDouble({py_var})",
            "c_type": "float",
            "cxx_type": "float",
            "f_cast": "real({f_var}, C_FLOAT)",
            "f_kind": "C_FLOAT",
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            },
            "f_type": "real(C_FLOAT)",
            "flat_name": "float"
        },
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "int",
            "cxx_type": "int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "int"
        },
        "int16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int16_t",
            "cxx_type": "int16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "int16_t"
        },
        "int32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int32_t",
            "cxx_type": "int32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "int32_t"
        },
        "int64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int64_t",
            "cxx_type": "int64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "int64_t"
        },
        "int8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "int8_t",
            "cxx_type": "int8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "int8_t"
        },
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "long",
            "cxx_type": "long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "long"
        },
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "long long",
            "cxx_type": "long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "long_long"
        },
        "short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "short",
            "cxx_type": "short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "short"
        },
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})",
            "c_header": "<stddef.h>",
            "c_type": "size_t",
            "cxx_type": "size_t",
            "f_cast": "int({f_var}, C_SIZE_T)",
            "f_kind": "C_SIZE_T",
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            },
            "f_type": "integer(C_SIZE_T)",
            "flat_name": "size_t"
        },
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TSTRING",
            "PY_build_arg": "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()",
            "PY_build_format": "s#",
            "PY_ctor": "PyString_FromStringAndSize(\t{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size())",
            "PY_format": "s",
            "base": "string",
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim"
                    ],
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_inout": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "len_trim",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                },
                "intent_out": {
                    "cxx_header": "<cstring>",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ],
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
                    ],
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "arg",
                        "len"
                    ],
                    "c_helper": "ShroudStrCopy",
                    "cxx_header": "<cstring>",
                    "post_call": [
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "{stdlib}memset({c_var}, ' ', {c_var_len});",
                        "-}} else {{+",
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());",
                        "-}}"
                    ]
                }
            },
            "c_type": "char",
            "cxx_header": "<string>",
            "cxx_to_c": "{cxx_var}{cxx_member}c_str()",
            "cxx_type": "std::string",
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            },
            "f_c_type": "character(kind=C_CHAR)",
            "f_kind": "C_CHAR",
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ],
                    "f_helper": "fstr_ptr",
                    "need_wrapper": true
                }
            },
            "f_type": "character(*)",
            "flat_name": "std_string",
            "idtor": "2",
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_inout": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                },
                "intent_out": {
                    "cxx_local_var": "scalar",
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        },
        "std::vector": {
            "base": "vector",
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg",
                        "size"
                    ],
                    "cxx_local_var": "scalar",
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                },
                "intent_inout_buf": {
                    "buf_args": [
                        "arg",
                        "size",
                        "context"
                    ],
                    "cxx_local_var": "pointer",
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);",
                        "delete cxx_ptr;"
                    ],
                    "destructor_name": "std_vector_{cxx_T}",
                    "post_call": [
                        "{c_var_context}->cxx.addr  = static_cast<void *>({cxx_var});",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.cvoidp = {cxx_var}->empty() ? NULL : &{cxx_var}->front();",
                        "{c_var_context}->len = sizeof({cxx_T});",
                        "{c_var_context}->size = {cxx_var}->size();"
                    ],
                    "pre_call": [
                        "std::vector<{cxx_T}> *{cxx_var} = \tnew std::vector<{cxx_T}>\t(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                },
                "intent_out_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "capsule_data_helper copy_array",
                    "cxx_local_var": "pointer",
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);",
                        "delete cxx_ptr;"
                    ],
                    "destructor_name": "std_vector_{cxx_T}",
                    "post_call": [
                        "{c_var_context}->cxx.addr  = static_cast<void *>({cxx_var});",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "{c_var_context}->addr.cvoidp = {cxx_var}->empty() ? NULL : &{cxx_var}->front();",
                        "{c_var_context}->len = sizeof({cxx_T});",
                        "{c_var_context}->size = {cxx_var}->size();"
                    ],
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;"
                    ]
                }
            },
            "c_templates": {
                "std::string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "arg",
                            "size",
                            "len"
                        ],
                        "c_helper": "ShroudLenTrim",
                        "cxx_local_var": "scalar",
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};",
                            "{{+",
                            "{c_const}char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "-for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "{cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ]
                    },
                    "intent_inout_buf": {
                        "buf_args": [
                            "arg",
                            "size",
                            "len"
                        ],
                        "cxx_local_var": "scalar",
                        "post_call": [
                            "{{+",
                            "char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "-{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);",
                            "for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ],
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};",
                            "{{+",
                            "{c_const}char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "-for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "{cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ]
                    },
                    "intent_out_buf": {
                        "buf_args": [
                            "arg",
                            "size",
                            "len"
                        ],
                        "c_helper": "ShroudLenTrim",
                        "cxx_local_var": "scalar",
                        "post_call": [
                            "{{+",
                            "char * BBB = {c_var};",
                            "std::vector<{cxx_T}>::size_type",
                            "+{c_temp}i = 0,",
                            "{c_temp}n = {c_var_size};",
                            "{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);",
                            "-for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+",
                            "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());",
                            "BBB += {c_var_len};",
                            "-}}",
                            "-}}"
                        ],
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            },
            "cxx_header": "<vector>",
            "cxx_type": "std::vector<{cxx_T}>",
            "f_statements": {
                "intent_inout": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                },
                "intent_inout_allocatable": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "if (allocated({f_var})) deallocate({f_var})",
                        "allocate({f_var}({c_var_context}%size))",
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                },
                "intent_out": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                },
                "intent_out_allocatable": {
                    "f_helper": "copy_array_{cxx_T}",
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    },
                    "post_call": [
                        "allocate({f_var}({c_var_context}%size))",
                        "call SHROUD_copy_array_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                }
            },
            "flat_name": "std_vector_{cxx_T}"
        },
        "stringout": {
            "base": "string",
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg",
                        "lenout"
                    ],
                    "c_helper": "copy_string",
                    "cxx_local_var": "scalar",
                    "post_call": [
                        " post_call intent_out_buf"
                    ],
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                },
                "result_buf": {
                    "buf_args": [
                        "context"
                    ],
                    "c_helper": "copy_string",
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};",
                        "{c_var_context}->cxx.idtor = {idtor};",
                        "if ({cxx_var}{cxx_member}empty()) {{+",
                        "{c_var_context}->addr.ccharp = NULL;",
                        "{c_var_context}->len = 0;",
                        "-}} else {{+",
                        "{c_var_context}->addr.ccharp = {cxx_var}{cxx_member}data();",
                        "{c_var_context}->len = {cxx_var}{cxx_member}size();",
                        "-}}",
                        "{c_var_context}->size = 1;"
                    ]
                }
            },
            "c_type": "void",
            "cxx_header": "<string>",
            "cxx_to_c": "static_cast<void *>({cxx_var})",
            "cxx_type": "std::string",
            "f_statements": {
                "result": {
                    "f_helper": "copy_string",
                    "need_wrapper": true,
                    "post_call": [
                        "allocate(character(len={c_var_context}%len):: {f_var})",
                        "call SHROUD_copy_string_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            },
            "f_type": "type(C_PTR)YY",
            "flat_name": "std_string",
            "idtor": "2"
        },
        "uint16_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT16",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint16_t",
            "cxx_type": "uint16_t",
            "f_cast": "int({f_var}, C_INT16_t)",
            "f_kind": "C_INT16_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT16_T"
                ]
            },
            "f_type": "integer(C_INT16_T)",
            "flat_name": "uint16_t"
        },
        "uint32_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT32",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint32_t",
            "cxx_type": "uint32_t",
            "f_cast": "int({f_var}, C_INT32_t)",
            "f_kind": "C_INT32_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT32_T"
                ]
            },
            "f_type": "integer(C_INT32_T)",
            "flat_name": "uint32_t"
        },
        "uint64_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT64",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint64_t",
            "cxx_type": "uint64_t",
            "f_cast": "int({f_var}, C_INT64_t)",
            "f_kind": "C_INT64_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT64_T"
                ]
            },
            "f_type": "integer(C_INT64_T)",
            "flat_name": "uint64_t"
        },
        "uint8_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_UINT8",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_header": "<stdint.h>",
            "c_type": "uint8_t",
            "cxx_type": "uint8_t",
            "f_cast": "int({f_var}, C_INT8_t)",
            "f_kind": "C_INT8_T",
            "f_module": {
                "iso_c_binding": [
                    "C_INT8_T"
                ]
            },
            "f_type": "integer(C_INT8_T)",
            "flat_name": "uint8_t"
        },
        "unsigned_int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned int",
            "cxx_type": "unsigned int",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "C_INT",
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            },
            "f_type": "integer(C_INT)",
            "flat_name": "unsigned_int"
        },
        "unsigned_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONG",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "l",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned long",
            "cxx_type": "unsigned long",
            "f_cast": "int({f_var}, C_LONG)",
            "f_kind": "C_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            },
            "f_type": "integer(C_LONG)",
            "flat_name": "unsigned_long"
        },
        "unsigned_long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_LONGLONG",
            "PY_format": "L",
            "c_type": "unsigned long long",
            "cxx_type": "unsigned long long",
            "f_cast": "int({f_var}, C_LONG_LONG)",
            "f_kind": "C_LONG_LONG",
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            },
            "f_type": "integer(C_LONG_LONG)",
            "flat_name": "unsigned_long_long"
        },
        "unsigned_short": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_SHORT",
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})",
            "PY_format": "h",
            "PY_get": "PyInt_AsLong({py_var})",
            "c_type": "unsigned short",
            "cxx_type": "unsigned short",
            "f_cast": "int({f_var}, C_SHORT)",
            "f_kind": "C_SHORT",
            "f_module": {
                "iso_c_binding": [
                    "C_SHORT"
                ]
            },
            "f_type": "integer(C_SHORT)",
            "flat_name": "unsigned_short"
        },
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)",
            "c_type": "void",
            "cxx_type": "void",
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            },
            "f_type": "type(C_PTR)",
            "flat_name": "void"
        }
    }
}