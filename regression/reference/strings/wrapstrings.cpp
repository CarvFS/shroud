// wrapstrings.cpp
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//

// cxx_header
#include "strings.hpp"
#include "shroud/features.h"
// typemap
#include <string>
// shroud
#include <cstring>
#include <cstddef>
#include <cstdlib>
#include "wrapstrings.h"

// splicer begin CXX_definitions
// splicer end CXX_definitions

extern "C" {


// helper ShroudLenTrim
// Returns the length of character string src with length nsrc,
// ignoring any trailing blanks.
static int ShroudLenTrim(const char *src, int nsrc) {
    int i;

    for (i = nsrc - 1; i >= 0; i--) {
        if (src[i] != ' ') {
            break;
        }
    }

    return i + 1;
}


// helper ShroudStrAlloc
// Copy src into new memory and null terminate.
// If ntrim is 0, return NULL pointer.
// If blanknull is 1, return NULL when string is blank.
static char *ShroudStrAlloc(const char *src, int nsrc, int blanknull)
{
   int ntrim = ShroudLenTrim(src, nsrc);
   if (ntrim == 0 && blanknull == 1) {
     return nullptr;
   }
   char *rv = (char *) std::malloc(nsrc + 1);
   if (ntrim > 0) {
     std::memcpy(rv, src, ntrim);
   }
   rv[ntrim] = '\0';
   return rv;
}

// helper ShroudStrBlankFill
// blank fill dest starting at trailing NULL.
static void ShroudStrBlankFill(char *dest, int ndest)
{
   int nm = std::strlen(dest);
   if(ndest > nm) std::memset(dest+nm,' ',ndest-nm);
}

// helper ShroudStrCopy
// Copy src into dest, blank fill to ndest characters
// Truncate if dest is too short.
// dest will not be NULL terminated.
static void ShroudStrCopy(char *dest, int ndest, const char *src, int nsrc)
{
   if (src == NULL) {
     std::memset(dest,' ',ndest); // convert NULL pointer to blank filled string
   } else {
     if (nsrc < 0) nsrc = std::strlen(src);
     int nm = nsrc < ndest ? nsrc : ndest;
     std::memcpy(dest,src,nm);
     if(ndest > nm) std::memset(dest+nm,' ',ndest-nm); // blank fill
   }
}

// helper ShroudStrFree
// Release memory allocated by ShroudStrAlloc
static void ShroudStrFree(char *src)
{
   if (src != NULL) {
     std::free(src);
   }
}

// start helper ShroudStrToArray
// helper ShroudStrToArray
// Save str metadata into array to allow Fortran to access values.
// CHARACTER(len=elem_size) src
static void ShroudStrToArray(STR_SHROUD_array *array, const std::string * src, int idtor)
{
    array->cxx.addr = const_cast<std::string *>(src);
    array->cxx.idtor = idtor;
    if (src->empty()) {
        array->addr.ccharp = NULL;
        array->elem_len = 0;
    } else {
        array->addr.ccharp = src->data();
        array->elem_len = src->length();
    }
    array->size = 1;
    array->rank = 0;  // scalar
}
// end helper ShroudStrToArray
// splicer begin C_definitions
// splicer end C_definitions

/**
 * \brief pass a single char argument as a scalar.
 *
 */
// ----------------------------------------
// Function:  void passChar
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char status +value
// Attrs:     +intent(in)
// Exact:     c_in_char_scalar
void STR_pass_char(char status)
{
    // splicer begin function.pass_char
    passChar(status);
    // splicer end function.pass_char
}

/**
 * By default no Fortran wrapper is created.
 * Force one so it can be tested.
 */
// ----------------------------------------
// Function:  void passCharForce
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char status +value
// Attrs:     +intent(in)
// Exact:     c_in_char_scalar
void STR_pass_char_force(char status)
{
    // splicer begin function.pass_char_force
    passCharForce(status);
    // splicer end function.pass_char_force
}

/**
 * \brief return a char argument (non-pointer)
 *
 */
// ----------------------------------------
// Function:  char returnChar
// Attrs:     +intent(function)
// Exact:     c_function_char_scalar
void STR_return_char(char *SHC_rv)
{
    // splicer begin function.return_char
    *SHC_rv = returnChar();
    // splicer end function.return_char
}

/**
 * \brief strcpy like behavior
 *
 * dest is marked intent(OUT) to override the intent(INOUT) default
 * This avoid a copy-in on dest.
 * In Python, src must not be over 40 characters, defined by charlen.
 */
// ----------------------------------------
// Function:  void passCharPtr
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * dest +charlen(40)+intent(out)
// Attrs:     +intent(out)
// Requested: c_out_char_*
// Match:     c_default
// ----------------------------------------
// Argument:  const char * src
// Attrs:     +intent(in)
// Requested: c_in_char_*
// Match:     c_default
// start STR_pass_char_ptr
void STR_pass_char_ptr(char * dest, const char * src)
{
    // splicer begin function.pass_char_ptr
    passCharPtr(dest, src);
    // splicer end function.pass_char_ptr
}
// end STR_pass_char_ptr

/**
 * \brief strcpy like behavior
 *
 * dest is marked intent(OUT) to override the intent(INOUT) default
 * This avoid a copy-in on dest.
 * In Python, src must not be over 40 characters, defined by charlen.
 */
// ----------------------------------------
// Function:  void passCharPtr
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * dest +charlen(40)+intent(out)
// Attrs:     +api(buf)+intent(out)
// Exact:     c_out_char_*_buf
// ----------------------------------------
// Argument:  const char * src
// Attrs:     +intent(in)
// Requested: c_in_char_*
// Match:     c_default
// start STR_pass_char_ptr_bufferify
void STR_pass_char_ptr_bufferify(char *dest, int SHT_dest_len,
    const char * src)
{
    // splicer begin function.pass_char_ptr_bufferify
    passCharPtr(dest, src);
    ShroudStrBlankFill(dest, SHT_dest_len);
    // splicer end function.pass_char_ptr_bufferify
}
// end STR_pass_char_ptr_bufferify

/**
 * \brief toupper
 *
 * Change a string in-place.
 * For Python, return a new string since strings are immutable.
 */
// ----------------------------------------
// Function:  void passCharPtrInOut
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * s +intent(inout)
// Attrs:     +intent(inout)
// Requested: c_inout_char_*
// Match:     c_default
void STR_pass_char_ptr_in_out(char * s)
{
    // splicer begin function.pass_char_ptr_in_out
    passCharPtrInOut(s);
    // splicer end function.pass_char_ptr_in_out
}

/**
 * \brief toupper
 *
 * Change a string in-place.
 * For Python, return a new string since strings are immutable.
 */
// ----------------------------------------
// Function:  void passCharPtrInOut
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * s +intent(inout)
// Attrs:     +api(buf)+intent(inout)
// Exact:     c_inout_char_*_buf
void STR_pass_char_ptr_in_out_bufferify(char *s, int SHT_s_len)
{
    // splicer begin function.pass_char_ptr_in_out_bufferify
    char * SHCXX_s = ShroudStrAlloc(s, SHT_s_len, 0);
    passCharPtrInOut(SHCXX_s);
    ShroudStrCopy(s, SHT_s_len, SHCXX_s, -1);
    ShroudStrFree(SHCXX_s);
    // splicer end function.pass_char_ptr_in_out_bufferify
}

/**
 * \brief return a 'const char *' as character(*)
 *
 */
// ----------------------------------------
// Function:  const char * getCharPtr1
// Attrs:     +deref(allocatable)+intent(function)
// Requested: c_function_char_*_allocatable
// Match:     c_function_char_*
// start STR_get_char_ptr1
const char * STR_get_char_ptr1(void)
{
    // splicer begin function.get_char_ptr1
    const char * SHC_rv = getCharPtr1();
    return SHC_rv;
    // splicer end function.get_char_ptr1
}
// end STR_get_char_ptr1

/**
 * \brief return a 'const char *' as character(*)
 *
 */
// ----------------------------------------
// Function:  const char * getCharPtr1
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Requested: c_function_char_*_cdesc_allocatable
// Match:     c_function_char_*_cdesc
// start STR_get_char_ptr1_bufferify
void STR_get_char_ptr1_bufferify(STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_char_ptr1_bufferify
    const char * SHC_rv = getCharPtr1();
    SHT_rv_cdesc->cxx.addr = const_cast<char *>(SHC_rv);
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.ccharp = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_OTHER;
    SHT_rv_cdesc->elem_len = SHC_rv == nullptr ? 0 : std::strlen(SHC_rv);
    SHT_rv_cdesc->size = 1;
    SHT_rv_cdesc->rank = 0;
    // splicer end function.get_char_ptr1_bufferify
}
// end STR_get_char_ptr1_bufferify

/**
 * \brief return 'const char *' with fixed size (len=30)
 *
 */
// ----------------------------------------
// Function:  const char * getCharPtr2 +len(30)
// Attrs:     +deref(copy)+intent(function)
// Requested: c_function_char_*_copy
// Match:     c_function_char_*
// start STR_get_char_ptr2
const char * STR_get_char_ptr2(void)
{
    // splicer begin function.get_char_ptr2
    const char * SHC_rv = getCharPtr2();
    return SHC_rv;
    // splicer end function.get_char_ptr2
}
// end STR_get_char_ptr2

/**
 * \brief return 'const char *' with fixed size (len=30)
 *
 */
// ----------------------------------------
// Function:  const char * getCharPtr2 +len(30)
// Attrs:     +api(buf)+deref(copy)+intent(function)
// Requested: c_function_char_*_buf_copy
// Match:     c_function_char_*_buf
// start STR_get_char_ptr2_bufferify
void STR_get_char_ptr2_bufferify(char *SHC_rv, int SHT_rv_len)
{
    // splicer begin function.get_char_ptr2_bufferify
    const char * SHCXX_rv = getCharPtr2();
    ShroudStrCopy(SHC_rv, SHT_rv_len, SHCXX_rv, -1);
    // splicer end function.get_char_ptr2_bufferify
}
// end STR_get_char_ptr2_bufferify

/**
 * \brief return a 'const char *' as argument
 *
 */
// ----------------------------------------
// Function:  const char * getCharPtr3
// Attrs:     +intent(function)
// Exact:     c_function_char_*
// start STR_get_char_ptr3
const char * STR_get_char_ptr3(void)
{
    // splicer begin function.get_char_ptr3
    const char * SHC_rv = getCharPtr3();
    return SHC_rv;
    // splicer end function.get_char_ptr3
}
// end STR_get_char_ptr3

/**
 * \brief return a 'const char *' as argument
 *
 */
// ----------------------------------------
// Function:  void getCharPtr3
// Attrs:     +intent(subroutine)
// Requested: c_subroutine_void_scalar
// Match:     c_subroutine
// ----------------------------------------
// Argument:  char * output
// Attrs:     +api(buf)+deref(result)+intent(out)+is_result
// Requested: c_function_char_*_buf_result
// Match:     c_function_char_*_buf
// start STR_get_char_ptr3_bufferify
void STR_get_char_ptr3_bufferify(char *output, int SHT_output_len)
{
    // splicer begin function.get_char_ptr3_bufferify
    const char * SHC_rv = getCharPtr3();
    ShroudStrCopy(output, SHT_output_len, SHC_rv, -1);
    // splicer end function.get_char_ptr3_bufferify
}
// end STR_get_char_ptr3_bufferify

/**
 * \brief return a 'const char *' as type(C_PTR)
 *
 */
// ----------------------------------------
// Function:  const char * getCharPtr4 +deref(raw)
// Attrs:     +deref(raw)+intent(function)
// Requested: c_function_char_*_raw
// Match:     c_function_char_*
const char * STR_get_char_ptr4(void)
{
    // splicer begin function.get_char_ptr4
    const char * SHC_rv = getCharPtr4();
    return SHC_rv;
    // splicer end function.get_char_ptr4
}

/**
 * \brief return a 'const char *' as character(:) pointer
 *
 */
#ifdef HAVE_CHARACTER_POINTER_FUNCTION
// ----------------------------------------
// Function:  const char * getCharPtr5 +deref(pointer)
// Attrs:     +deref(pointer)+intent(function)
// Requested: c_function_char_*_pointer
// Match:     c_function_char_*
const char * STR_get_char_ptr5(void)
{
    // splicer begin function.get_char_ptr5
    const char * SHC_rv = getCharPtr5();
    return SHC_rv;
    // splicer end function.get_char_ptr5
}
#endif  // ifdef HAVE_CHARACTER_POINTER_FUNCTION

/**
 * \brief return a 'const char *' as character(:) pointer
 *
 */
#ifdef HAVE_CHARACTER_POINTER_FUNCTION
// ----------------------------------------
// Function:  const char * getCharPtr5 +deref(pointer)
// Attrs:     +api(cdesc)+deref(pointer)+intent(function)
// Requested: c_function_char_*_cdesc_pointer
// Match:     c_function_char_*_cdesc
void STR_get_char_ptr5_bufferify(STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_char_ptr5_bufferify
    const char * SHC_rv = getCharPtr5();
    SHT_rv_cdesc->cxx.addr = const_cast<char *>(SHC_rv);
    SHT_rv_cdesc->cxx.idtor = 0;
    SHT_rv_cdesc->addr.ccharp = SHC_rv;
    SHT_rv_cdesc->type = SH_TYPE_OTHER;
    SHT_rv_cdesc->elem_len = SHC_rv == nullptr ? 0 : std::strlen(SHC_rv);
    SHT_rv_cdesc->size = 1;
    SHT_rv_cdesc->rank = 0;
    // splicer end function.get_char_ptr5_bufferify
}
#endif  // ifdef HAVE_CHARACTER_POINTER_FUNCTION

/**
 * \brief return an ALLOCATABLE CHARACTER from std::string
 *
 */
// ----------------------------------------
// Function:  const string getConstStringResult
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Exact:     c_function_string_scalar_cdesc_allocatable
void STR_get_const_string_result_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_result_bufferify
    std::string * SHCXX_rv = new std::string;
    *SHCXX_rv = getConstStringResult();
    // C_error_pattern
    // Some error code for buf

    ShroudStrToArray(SHT_rv_cdesc, SHCXX_rv, 1);
    // splicer end function.get_const_string_result_bufferify
}

/**
 * \brief return a 'const string' as argument
 *
 */
// ----------------------------------------
// Function:  const string getConstStringLen +len(30)
// Attrs:     +api(buf)+deref(copy)+intent(function)
// Requested: c_function_string_scalar_buf_copy
// Match:     c_function_string_scalar_buf
void STR_get_const_string_len_bufferify(char *SHC_rv, int SHT_rv_len)
{
    // splicer begin function.get_const_string_len_bufferify
    const std::string SHCXX_rv = getConstStringLen();
    // C_error_pattern
    // Some error code for buf

    if (SHCXX_rv.empty()) {
        ShroudStrCopy(SHC_rv, SHT_rv_len, nullptr, 0);
    } else {
        ShroudStrCopy(SHC_rv, SHT_rv_len, SHCXX_rv.data(),
            SHCXX_rv.size());
    }
    // splicer end function.get_const_string_len_bufferify
}

/**
 * \brief return a 'const string' as argument
 *
 */
// ----------------------------------------
// Function:  void getConstStringAsArg
// Attrs:     +intent(subroutine)
// Requested: c_subroutine_void_scalar
// Match:     c_subroutine
// ----------------------------------------
// Argument:  string * output
// Attrs:     +api(buf)+deref(result)+intent(out)+is_result
// Requested: c_function_string_scalar_buf_result
// Match:     c_function_string_scalar_buf
void STR_get_const_string_as_arg_bufferify(char *output,
    int SHT_output_len)
{
    // splicer begin function.get_const_string_as_arg_bufferify
    const std::string SHCXX_rv = getConstStringAsArg();
    // C_error_pattern
    // Some error code for buf

    if (SHCXX_rv.empty()) {
        ShroudStrCopy(output, SHT_output_len, nullptr, 0);
    } else {
        ShroudStrCopy(output, SHT_output_len, SHCXX_rv.data(),
            SHCXX_rv.size());
    }
    // splicer end function.get_const_string_as_arg_bufferify
}

// ----------------------------------------
// Function:  const std::string getConstStringAlloc
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Exact:     c_function_string_scalar_cdesc_allocatable
void STR_get_const_string_alloc_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_alloc_bufferify
    std::string * SHCXX_rv = new std::string;
    *SHCXX_rv = getConstStringAlloc();
    ShroudStrToArray(SHT_rv_cdesc, SHCXX_rv, 1);
    // splicer end function.get_const_string_alloc_bufferify
}

/**
 * \brief return a 'const string&' as ALLOCATABLE character
 *
 */
// ----------------------------------------
// Function:  const string & getConstStringRefPure
// Attrs:     +deref(allocatable)+intent(function)
// Requested: c_function_string_&_allocatable
// Match:     c_function_string_&
// start STR_get_const_string_ref_pure
const char * STR_get_const_string_ref_pure(void)
{
    // splicer begin function.get_const_string_ref_pure
    const std::string & SHCXX_rv = getConstStringRefPure();
    const char * SHC_rv = SHCXX_rv.c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ref_pure
}
// end STR_get_const_string_ref_pure

/**
 * \brief return a 'const string&' as ALLOCATABLE character
 *
 */
// ----------------------------------------
// Function:  const string & getConstStringRefPure
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Exact:     c_function_string_&_cdesc_allocatable
// start STR_get_const_string_ref_pure_bufferify
void STR_get_const_string_ref_pure_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_ref_pure_bufferify
    const std::string & SHCXX_rv = getConstStringRefPure();
    ShroudStrToArray(SHT_rv_cdesc, &SHCXX_rv, 0);
    // splicer end function.get_const_string_ref_pure_bufferify
}
// end STR_get_const_string_ref_pure_bufferify

/**
 * \brief return 'const string&' with fixed size (len=30)
 *
 * Since +len(30) is provided, the result of the function
 * will be copied directly into memory provided by Fortran.
 * The function will not be ALLOCATABLE.
 */
// ----------------------------------------
// Function:  const string & getConstStringRefLen +len(30)
// Attrs:     +deref(copy)+intent(function)
// Requested: c_function_string_&_copy
// Match:     c_function_string_&
const char * STR_get_const_string_ref_len(void)
{
    // splicer begin function.get_const_string_ref_len
    const std::string & SHCXX_rv = getConstStringRefLen();
    // C_error_pattern
    if (SHCXX_rv.empty()) {
        return NULL;
    }

    const char * SHC_rv = SHCXX_rv.c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ref_len
}

/**
 * \brief return 'const string&' with fixed size (len=30)
 *
 * Since +len(30) is provided, the result of the function
 * will be copied directly into memory provided by Fortran.
 * The function will not be ALLOCATABLE.
 */
// ----------------------------------------
// Function:  const string & getConstStringRefLen +len(30)
// Attrs:     +api(buf)+deref(copy)+intent(function)
// Requested: c_function_string_&_buf_copy
// Match:     c_function_string_&_buf
void STR_get_const_string_ref_len_bufferify(char *SHC_rv,
    int SHT_rv_len)
{
    // splicer begin function.get_const_string_ref_len_bufferify
    const std::string & SHCXX_rv = getConstStringRefLen();
    // C_error_pattern
    // Some error code for buf

    if (SHCXX_rv.empty()) {
        ShroudStrCopy(SHC_rv, SHT_rv_len, nullptr, 0);
    } else {
        ShroudStrCopy(SHC_rv, SHT_rv_len, SHCXX_rv.data(),
            SHCXX_rv.size());
    }
    // splicer end function.get_const_string_ref_len_bufferify
}

/**
 * \brief return a 'const string&' as argument
 *
 * Pass an additional argument which will be used as the return value.
 * The length of the output variable is declared by the caller.
 */
// ----------------------------------------
// Function:  const string & getConstStringRefAsArg
// Attrs:     +intent(function)
// Exact:     c_function_string_&
const char * STR_get_const_string_ref_as_arg(void)
{
    // splicer begin function.get_const_string_ref_as_arg
    const std::string & SHCXX_rv = getConstStringRefAsArg();
    // C_error_pattern
    if (SHCXX_rv.empty()) {
        return NULL;
    }

    const char * SHC_rv = SHCXX_rv.c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ref_as_arg
}

/**
 * \brief return a 'const string&' as argument
 *
 * Pass an additional argument which will be used as the return value.
 * The length of the output variable is declared by the caller.
 */
// ----------------------------------------
// Function:  void getConstStringRefAsArg
// Attrs:     +intent(subroutine)
// Requested: c_subroutine_void_scalar
// Match:     c_subroutine
// ----------------------------------------
// Argument:  string & output
// Attrs:     +api(buf)+deref(result)+intent(out)+is_result
// Requested: c_function_string_&_buf_result
// Match:     c_function_string_&_buf
void STR_get_const_string_ref_as_arg_bufferify(char *output,
    int SHT_output_len)
{
    // splicer begin function.get_const_string_ref_as_arg_bufferify
    const std::string & SHCXX_rv = getConstStringRefAsArg();
    // C_error_pattern
    // Some error code for buf

    if (SHCXX_rv.empty()) {
        ShroudStrCopy(output, SHT_output_len, nullptr, 0);
    } else {
        ShroudStrCopy(output, SHT_output_len, SHCXX_rv.data(),
            SHCXX_rv.size());
    }
    // splicer end function.get_const_string_ref_as_arg_bufferify
}

/**
 * \brief Test returning empty string reference
 *
 */
// ----------------------------------------
// Function:  const string & getConstStringRefLenEmpty +len(30)
// Attrs:     +deref(copy)+intent(function)
// Requested: c_function_string_&_copy
// Match:     c_function_string_&
const char * STR_get_const_string_ref_len_empty(void)
{
    // splicer begin function.get_const_string_ref_len_empty
    const std::string & SHCXX_rv = getConstStringRefLenEmpty();
    // C_error_pattern
    if (SHCXX_rv.empty()) {
        return NULL;
    }

    const char * SHC_rv = SHCXX_rv.c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ref_len_empty
}

/**
 * \brief Test returning empty string reference
 *
 */
// ----------------------------------------
// Function:  const string & getConstStringRefLenEmpty +len(30)
// Attrs:     +api(buf)+deref(copy)+intent(function)
// Requested: c_function_string_&_buf_copy
// Match:     c_function_string_&_buf
void STR_get_const_string_ref_len_empty_bufferify(char *SHC_rv,
    int SHT_rv_len)
{
    // splicer begin function.get_const_string_ref_len_empty_bufferify
    const std::string & SHCXX_rv = getConstStringRefLenEmpty();
    // C_error_pattern
    // Some error code for buf

    if (SHCXX_rv.empty()) {
        ShroudStrCopy(SHC_rv, SHT_rv_len, nullptr, 0);
    } else {
        ShroudStrCopy(SHC_rv, SHT_rv_len, SHCXX_rv.data(),
            SHCXX_rv.size());
    }
    // splicer end function.get_const_string_ref_len_empty_bufferify
}

// ----------------------------------------
// Function:  const std::string & getConstStringRefAlloc
// Attrs:     +deref(allocatable)+intent(function)
// Requested: c_function_string_&_allocatable
// Match:     c_function_string_&
const char * STR_get_const_string_ref_alloc(void)
{
    // splicer begin function.get_const_string_ref_alloc
    const std::string & SHCXX_rv = getConstStringRefAlloc();
    const char * SHC_rv = SHCXX_rv.c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ref_alloc
}

// ----------------------------------------
// Function:  const std::string & getConstStringRefAlloc
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Exact:     c_function_string_&_cdesc_allocatable
void STR_get_const_string_ref_alloc_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_ref_alloc_bufferify
    const std::string & SHCXX_rv = getConstStringRefAlloc();
    ShroudStrToArray(SHT_rv_cdesc, &SHCXX_rv, 0);
    // splicer end function.get_const_string_ref_alloc_bufferify
}

/**
 * \brief return a 'const string *' as character(30)
 *
 * It is the caller's responsibility to release the string
 * created by the C++ library.
 * This is accomplished with C_finalize_buf which is possible
 * because +len(30) so the contents are copied before returning.
 */
// ----------------------------------------
// Function:  const string * getConstStringPtrLen +len(30)
// Attrs:     +deref(copy)+intent(function)
// Requested: c_function_string_*_copy
// Match:     c_function_string_*
const char * STR_get_const_string_ptr_len(void)
{
    // splicer begin function.get_const_string_ptr_len
    const std::string * SHCXX_rv = getConstStringPtrLen();
    const char * SHC_rv = SHCXX_rv->c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ptr_len
}

/**
 * \brief return a 'const string *' as character(30)
 *
 * It is the caller's responsibility to release the string
 * created by the C++ library.
 * This is accomplished with C_finalize_buf which is possible
 * because +len(30) so the contents are copied before returning.
 */
// ----------------------------------------
// Function:  const string * getConstStringPtrLen +len(30)
// Attrs:     +api(buf)+deref(copy)+intent(function)
// Requested: c_function_string_*_buf_copy
// Match:     c_function_string_*_buf
void STR_get_const_string_ptr_len_bufferify(char *SHC_rv,
    int SHT_rv_len)
{
    // splicer begin function.get_const_string_ptr_len_bufferify
    const std::string * SHCXX_rv = getConstStringPtrLen();
    if (SHCXX_rv->empty()) {
        ShroudStrCopy(SHC_rv, SHT_rv_len, nullptr, 0);
    } else {
        ShroudStrCopy(SHC_rv, SHT_rv_len, SHCXX_rv->data(),
            SHCXX_rv->size());
    }
    {
        // final
        delete SHCXX_rv;
    }
    // splicer end function.get_const_string_ptr_len_bufferify
}

// ----------------------------------------
// Function:  const std::string * getConstStringPtrAlloc +owner(library)
// Attrs:     +deref(allocatable)+intent(function)
// Requested: c_function_string_*_allocatable
// Match:     c_function_string_*
const char * STR_get_const_string_ptr_alloc(void)
{
    // splicer begin function.get_const_string_ptr_alloc
    const std::string * SHCXX_rv = getConstStringPtrAlloc();
    const char * SHC_rv = SHCXX_rv->c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ptr_alloc
}

// ----------------------------------------
// Function:  const std::string * getConstStringPtrAlloc +owner(library)
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Exact:     c_function_string_*_cdesc_allocatable
void STR_get_const_string_ptr_alloc_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_ptr_alloc_bufferify
    const std::string * SHCXX_rv = getConstStringPtrAlloc();
    ShroudStrToArray(SHT_rv_cdesc, SHCXX_rv, 0);
    // splicer end function.get_const_string_ptr_alloc_bufferify
}

/**
 * It is the caller's responsibility to release the string
 * created by the C++ library.
 * This is accomplished +owner(caller) which sets idtor.
 * The contents are copied by Fortran so they must outlast
 * the return from the C wrapper.
 */
// ----------------------------------------
// Function:  const std::string * getConstStringPtrOwnsAlloc +owner(caller)
// Attrs:     +deref(allocatable)+intent(function)
// Requested: c_function_string_*_allocatable
// Match:     c_function_string_*
const char * STR_get_const_string_ptr_owns_alloc(void)
{
    // splicer begin function.get_const_string_ptr_owns_alloc
    const std::string * SHCXX_rv = getConstStringPtrOwnsAlloc();
    const char * SHC_rv = SHCXX_rv->c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ptr_owns_alloc
}

/**
 * It is the caller's responsibility to release the string
 * created by the C++ library.
 * This is accomplished +owner(caller) which sets idtor.
 * The contents are copied by Fortran so they must outlast
 * the return from the C wrapper.
 */
// ----------------------------------------
// Function:  const std::string * getConstStringPtrOwnsAlloc +owner(caller)
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Exact:     c_function_string_*_cdesc_allocatable
void STR_get_const_string_ptr_owns_alloc_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_ptr_owns_alloc_bufferify
    const std::string * SHCXX_rv = getConstStringPtrOwnsAlloc();
    ShroudStrToArray(SHT_rv_cdesc, SHCXX_rv, 2);
    // splicer end function.get_const_string_ptr_owns_alloc_bufferify
}

/**
 * Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.
 */
// ----------------------------------------
// Function:  const std::string * getConstStringPtrOwnsAllocPattern +free_pattern(C_string_free)+owner(caller)
// Attrs:     +deref(allocatable)+intent(function)
// Requested: c_function_string_*_allocatable
// Match:     c_function_string_*
const char * STR_get_const_string_ptr_owns_alloc_pattern(void)
{
    // splicer begin function.get_const_string_ptr_owns_alloc_pattern
    const std::string * SHCXX_rv = getConstStringPtrOwnsAllocPattern();
    const char * SHC_rv = SHCXX_rv->c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ptr_owns_alloc_pattern
}

/**
 * Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.
 */
// ----------------------------------------
// Function:  const std::string * getConstStringPtrOwnsAllocPattern +free_pattern(C_string_free)+owner(caller)
// Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
// Exact:     c_function_string_*_cdesc_allocatable
void STR_get_const_string_ptr_owns_alloc_pattern_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_ptr_owns_alloc_pattern_bufferify
    const std::string * SHCXX_rv = getConstStringPtrOwnsAllocPattern();
    ShroudStrToArray(SHT_rv_cdesc, SHCXX_rv, 3);
    // splicer end function.get_const_string_ptr_owns_alloc_pattern_bufferify
}

#ifdef HAVE_CHARACTER_POINTER_FUNCTION
// ----------------------------------------
// Function:  const std::string * getConstStringPtrPointer +deref(pointer)+owner(library)
// Attrs:     +deref(pointer)+intent(function)
// Requested: c_function_string_*_pointer
// Match:     c_function_string_*
const char * STR_get_const_string_ptr_pointer(void)
{
    // splicer begin function.get_const_string_ptr_pointer
    const std::string * SHCXX_rv = getConstStringPtrPointer();
    const char * SHC_rv = SHCXX_rv->c_str();
    return SHC_rv;
    // splicer end function.get_const_string_ptr_pointer
}
#endif  // ifdef HAVE_CHARACTER_POINTER_FUNCTION

#ifdef HAVE_CHARACTER_POINTER_FUNCTION
// ----------------------------------------
// Function:  const std::string * getConstStringPtrPointer +deref(pointer)+owner(library)
// Attrs:     +api(cdesc)+deref(pointer)+intent(function)
// Exact:     c_function_string_*_cdesc_pointer
void STR_get_const_string_ptr_pointer_bufferify(
    STR_SHROUD_array *SHT_rv_cdesc)
{
    // splicer begin function.get_const_string_ptr_pointer_bufferify
    const std::string * SHCXX_rv = getConstStringPtrPointer();
    ShroudStrToArray(SHT_rv_cdesc, SHCXX_rv, 0);
    // splicer end function.get_const_string_ptr_pointer_bufferify
}
#endif  // ifdef HAVE_CHARACTER_POINTER_FUNCTION

/**
 * \brief Accept a const string reference
 *
 * Save contents of arg1.
 * arg1 is assumed to be intent(IN) since it is const
 * Will copy in.
 */
// ----------------------------------------
// Function:  void acceptStringConstReference
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  const std::string & arg1
// Attrs:     +intent(in)
// Exact:     c_in_string_&
void STR_accept_string_const_reference(const char * arg1)
{
    // splicer begin function.accept_string_const_reference
    const std::string SHCXX_arg1(arg1);
    acceptStringConstReference(SHCXX_arg1);
    // splicer end function.accept_string_const_reference
}

/**
 * \brief Accept a const string reference
 *
 * Save contents of arg1.
 * arg1 is assumed to be intent(IN) since it is const
 * Will copy in.
 */
// ----------------------------------------
// Function:  void acceptStringConstReference
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  const std::string & arg1
// Attrs:     +api(buf)+intent(in)
// Exact:     c_in_string_&_buf
void STR_accept_string_const_reference_bufferify(char *arg1,
    int SHT_arg1_len)
{
    // splicer begin function.accept_string_const_reference_bufferify
    const std::string SHCXX_arg1(arg1,
        ShroudLenTrim(arg1, SHT_arg1_len));
    acceptStringConstReference(SHCXX_arg1);
    // splicer end function.accept_string_const_reference_bufferify
}

/**
 * \brief Accept a string reference
 *
 * Set out to a constant string.
 * arg1 is intent(OUT)
 * Must copy out.
 */
// ----------------------------------------
// Function:  void acceptStringReferenceOut
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string & arg1 +intent(out)
// Attrs:     +intent(out)
// Exact:     c_out_string_&
void STR_accept_string_reference_out(char * arg1)
{
    // splicer begin function.accept_string_reference_out
    std::string SHCXX_arg1;
    acceptStringReferenceOut(SHCXX_arg1);
    strcpy(arg1, SHCXX_arg1.c_str());
    // splicer end function.accept_string_reference_out
}

/**
 * \brief Accept a string reference
 *
 * Set out to a constant string.
 * arg1 is intent(OUT)
 * Must copy out.
 */
// ----------------------------------------
// Function:  void acceptStringReferenceOut
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string & arg1 +intent(out)
// Attrs:     +api(buf)+intent(out)
// Exact:     c_out_string_&_buf
void STR_accept_string_reference_out_bufferify(char *arg1,
    int SHT_arg1_len)
{
    // splicer begin function.accept_string_reference_out_bufferify
    std::string SHCXX_arg1;
    acceptStringReferenceOut(SHCXX_arg1);
    ShroudStrCopy(arg1, SHT_arg1_len, SHCXX_arg1.data(),
        SHCXX_arg1.size());
    // splicer end function.accept_string_reference_out_bufferify
}

/**
 * \brief Accept a string reference
 *
 * Append "dog" to the end of arg1.
 * arg1 is assumed to be intent(INOUT)
 * Must copy in and copy out.
 */
// ----------------------------------------
// Function:  void acceptStringReference
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string & arg1
// Attrs:     +intent(inout)
// Exact:     c_inout_string_&
// start STR_accept_string_reference
void STR_accept_string_reference(char * arg1)
{
    // splicer begin function.accept_string_reference
    std::string SHCXX_arg1(arg1);
    acceptStringReference(SHCXX_arg1);
    strcpy(arg1, SHCXX_arg1.c_str());
    // splicer end function.accept_string_reference
}
// end STR_accept_string_reference

/**
 * \brief Accept a string reference
 *
 * Append "dog" to the end of arg1.
 * arg1 is assumed to be intent(INOUT)
 * Must copy in and copy out.
 */
// ----------------------------------------
// Function:  void acceptStringReference
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string & arg1
// Attrs:     +api(buf)+intent(inout)
// Exact:     c_inout_string_&_buf
// start STR_accept_string_reference_bufferify
void STR_accept_string_reference_bufferify(char *arg1, int SHT_arg1_len)
{
    // splicer begin function.accept_string_reference_bufferify
    std::string SHCXX_arg1(arg1, ShroudLenTrim(arg1, SHT_arg1_len));
    acceptStringReference(SHCXX_arg1);
    ShroudStrCopy(arg1, SHT_arg1_len, SHCXX_arg1.data(),
        SHCXX_arg1.size());
    // splicer end function.accept_string_reference_bufferify
}
// end STR_accept_string_reference_bufferify

/**
 * \brief Accept a const string pointer - intent(in)
 *
 */
// ----------------------------------------
// Function:  void acceptStringPointerConst
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  const std::string * arg1
// Attrs:     +intent(in)
// Exact:     c_in_string_*
void STR_accept_string_pointer_const(const char * arg1)
{
    // splicer begin function.accept_string_pointer_const
    const std::string SHCXX_arg1(arg1);
    acceptStringPointerConst(&SHCXX_arg1);
    // splicer end function.accept_string_pointer_const
}

/**
 * \brief Accept a const string pointer - intent(in)
 *
 */
// ----------------------------------------
// Function:  void acceptStringPointerConst
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  const std::string * arg1
// Attrs:     +api(buf)+intent(in)
// Exact:     c_in_string_*_buf
void STR_accept_string_pointer_const_bufferify(char *arg1,
    int SHT_arg1_len)
{
    // splicer begin function.accept_string_pointer_const_bufferify
    const std::string SHCXX_arg1(arg1,
        ShroudLenTrim(arg1, SHT_arg1_len));
    acceptStringPointerConst(&SHCXX_arg1);
    // splicer end function.accept_string_pointer_const_bufferify
}

/**
 * \brief Accept a string pointer - intent(inout)
 *
 */
// ----------------------------------------
// Function:  void acceptStringPointer
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1
// Attrs:     +intent(inout)
// Exact:     c_inout_string_*
void STR_accept_string_pointer(char * arg1)
{
    // splicer begin function.accept_string_pointer
    std::string SHCXX_arg1(arg1);
    acceptStringPointer(&SHCXX_arg1);
    strcpy(arg1, SHCXX_arg1.c_str());
    // splicer end function.accept_string_pointer
}

/**
 * \brief Accept a string pointer - intent(inout)
 *
 */
// ----------------------------------------
// Function:  void acceptStringPointer
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1
// Attrs:     +api(buf)+intent(inout)
// Exact:     c_inout_string_*_buf
void STR_accept_string_pointer_bufferify(char *arg1, int SHT_arg1_len)
{
    // splicer begin function.accept_string_pointer_bufferify
    std::string SHCXX_arg1(arg1, ShroudLenTrim(arg1, SHT_arg1_len));
    acceptStringPointer(&SHCXX_arg1);
    ShroudStrCopy(arg1, SHT_arg1_len, SHCXX_arg1.data(),
        SHCXX_arg1.size());
    // splicer end function.accept_string_pointer_bufferify
}

/**
 * \brief Accept a string pointer - intent(out)
 *
 * Return global_str.
 */
// ----------------------------------------
// Function:  void fetchStringPointer
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1 +intent(out)
// Attrs:     +intent(out)
// Exact:     c_out_string_*
void STR_fetch_string_pointer(char * arg1)
{
    // splicer begin function.fetch_string_pointer
    std::string SHCXX_arg1;
    fetchStringPointer(&SHCXX_arg1);
    strcpy(arg1, SHCXX_arg1.c_str());
    // splicer end function.fetch_string_pointer
}

/**
 * \brief Accept a string pointer - intent(out)
 *
 * Return global_str.
 */
// ----------------------------------------
// Function:  void fetchStringPointer
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1 +intent(out)
// Attrs:     +api(buf)+intent(out)
// Exact:     c_out_string_*_buf
void STR_fetch_string_pointer_bufferify(char *arg1, int SHT_arg1_len)
{
    // splicer begin function.fetch_string_pointer_bufferify
    std::string SHCXX_arg1;
    fetchStringPointer(&SHCXX_arg1);
    ShroudStrCopy(arg1, SHT_arg1_len, SHCXX_arg1.data(),
        SHCXX_arg1.size());
    // splicer end function.fetch_string_pointer_bufferify
}

/**
 * \brief Accept a string pointer - intent(inout)
 *
 * Test return tuple with two arguments.
 * Must rename argument to nlen to avoid conflict with intrinsic len.
 */
// ----------------------------------------
// Function:  void acceptStringPointerLen
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1
// Attrs:     +intent(inout)
// Exact:     c_inout_string_*
// ----------------------------------------
// Argument:  int * nlen +intent(out)
// Attrs:     +intent(out)
// Requested: c_out_native_*
// Match:     c_default
void STR_accept_string_pointer_len(char * arg1, int * nlen)
{
    // splicer begin function.accept_string_pointer_len
    std::string SHCXX_arg1(arg1);
    acceptStringPointerLen(&SHCXX_arg1, nlen);
    strcpy(arg1, SHCXX_arg1.c_str());
    // splicer end function.accept_string_pointer_len
}

/**
 * \brief Accept a string pointer - intent(inout)
 *
 * Test return tuple with two arguments.
 * Must rename argument to nlen to avoid conflict with intrinsic len.
 */
// ----------------------------------------
// Function:  void acceptStringPointerLen
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1
// Attrs:     +api(buf)+intent(inout)
// Exact:     c_inout_string_*_buf
// ----------------------------------------
// Argument:  int * nlen +intent(out)
// Attrs:     +intent(out)
// Requested: c_out_native_*
// Match:     c_default
void STR_accept_string_pointer_len_bufferify(char *arg1,
    int SHT_arg1_len, int * nlen)
{
    // splicer begin function.accept_string_pointer_len_bufferify
    std::string SHCXX_arg1(arg1, ShroudLenTrim(arg1, SHT_arg1_len));
    acceptStringPointerLen(&SHCXX_arg1, nlen);
    ShroudStrCopy(arg1, SHT_arg1_len, SHCXX_arg1.data(),
        SHCXX_arg1.size());
    // splicer end function.accept_string_pointer_len_bufferify
}

/**
 * \brief Accept a string pointer - intent(out)
 *
 * Return global_str.
 * Test return tuple with two arguments.
 * Must rename argument to nlen to avoid conflict with intrinsic len.
 */
// ----------------------------------------
// Function:  void fetchStringPointerLen
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1 +intent(out)
// Attrs:     +intent(out)
// Exact:     c_out_string_*
// ----------------------------------------
// Argument:  int * nlen +intent(out)
// Attrs:     +intent(out)
// Requested: c_out_native_*
// Match:     c_default
void STR_fetch_string_pointer_len(char * arg1, int * nlen)
{
    // splicer begin function.fetch_string_pointer_len
    std::string SHCXX_arg1;
    fetchStringPointerLen(&SHCXX_arg1, nlen);
    strcpy(arg1, SHCXX_arg1.c_str());
    // splicer end function.fetch_string_pointer_len
}

/**
 * \brief Accept a string pointer - intent(out)
 *
 * Return global_str.
 * Test return tuple with two arguments.
 * Must rename argument to nlen to avoid conflict with intrinsic len.
 */
// ----------------------------------------
// Function:  void fetchStringPointerLen
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  std::string * arg1 +intent(out)
// Attrs:     +api(buf)+intent(out)
// Exact:     c_out_string_*_buf
// ----------------------------------------
// Argument:  int * nlen +intent(out)
// Attrs:     +intent(out)
// Requested: c_out_native_*
// Match:     c_default
void STR_fetch_string_pointer_len_bufferify(char *arg1,
    int SHT_arg1_len, int * nlen)
{
    // splicer begin function.fetch_string_pointer_len_bufferify
    std::string SHCXX_arg1;
    fetchStringPointerLen(&SHCXX_arg1, nlen);
    ShroudStrCopy(arg1, SHT_arg1_len, SHCXX_arg1.data(),
        SHCXX_arg1.size());
    // splicer end function.fetch_string_pointer_len_bufferify
}

/**
 * \brief Accept a string instance
 *
 */
// ----------------------------------------
// Function:  int acceptStringInstance
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
// ----------------------------------------
// Argument:  std::string arg1 +value
// Attrs:     +intent(in)
// Exact:     c_in_string_scalar
int STR_accept_string_instance(char *arg1)
{
    // splicer begin function.accept_string_instance
    int SHC_rv = acceptStringInstance(arg1);
    return SHC_rv;
    // splicer end function.accept_string_instance
}

/**
 * \brief Accept a string instance
 *
 */
// ----------------------------------------
// Function:  int acceptStringInstance
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
// ----------------------------------------
// Argument:  std::string arg1 +value
// Attrs:     +api(buf)+intent(in)
// Exact:     c_in_string_scalar_buf
int STR_accept_string_instance_bufferify(char *arg1, int SHT_arg1_len)
{
    // splicer begin function.accept_string_instance_bufferify
    int SHC_arg1_trim = ShroudLenTrim(arg1, SHT_arg1_len);
    std::string SHCXX_arg1(arg1, SHC_arg1_trim);
    int SHC_rv = acceptStringInstance(SHCXX_arg1);
    return SHC_rv;
    // splicer end function.accept_string_instance_bufferify
}

// ----------------------------------------
// Function:  void explicit1
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * name +intent(in)+len_trim(AAlen)
// Attrs:     +intent(in)
// Requested: c_in_char_*
// Match:     c_default
void STR_explicit1(char * name)
{
    // splicer begin function.explicit1
    explicit1(name);
    // splicer end function.explicit1
}

// ----------------------------------------
// Function:  void explicit2
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * name +intent(out)+len(AAtrim)
// Attrs:     +intent(out)
// Requested: c_out_char_*
// Match:     c_default
void STR_explicit2(char * name)
{
    // splicer begin function.explicit2
    explicit2(name);
    // splicer end function.explicit2
}

// ----------------------------------------
// Function:  void explicit2
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * name +intent(out)+len(AAtrim)
// Attrs:     +api(buf)+intent(out)
// Exact:     c_out_char_*_buf
void STR_explicit2_bufferify(char *name, int SHT_name_len)
{
    // splicer begin function.explicit2_bufferify
    explicit2(name);
    ShroudStrBlankFill(name, SHT_name_len);
    // splicer end function.explicit2_bufferify
}

/**
 * \brief return a char argument (non-pointer), extern "C"
 *
 */
// ----------------------------------------
// Function:  char CreturnChar
// Attrs:     +intent(function)
// Exact:     c_function_char_scalar
void STR_creturn_char(char *SHC_rv)
{
    // splicer begin function.creturn_char
    *SHC_rv = CreturnChar();
    // splicer end function.creturn_char
}

/**
 * \brief strcpy like behavior
 *
 * dest is marked intent(OUT) to override the intent(INOUT) default
 * This avoid a copy-in on dest.
 * extern "C"
 * If src is a blank string, pass a NULL pointer to C library function.
 */
// ----------------------------------------
// Function:  void CpassCharPtr
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * dest +intent(out)
// Attrs:     +api(buf)+intent(out)
// Exact:     c_out_char_*_buf
// ----------------------------------------
// Argument:  const char * src +blanknull
// Attrs:     +api(buf)+intent(in)
// Exact:     c_in_char_*_buf
void STR_cpass_char_ptr_bufferify(char *dest, int SHT_dest_len,
    char *src, int SHT_src_len)
{
    // splicer begin function.cpass_char_ptr_bufferify
    char * SHCXX_src = ShroudStrAlloc(src, SHT_src_len, 1);
    CpassCharPtr(dest, SHCXX_src);
    ShroudStrBlankFill(dest, SHT_dest_len);
    ShroudStrFree(SHCXX_src);
    // splicer end function.cpass_char_ptr_bufferify
}

/**
 * \brief Test F_blanknull option
 *
 */
// ----------------------------------------
// Function:  void CpassCharPtrBlank
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * dest +intent(out)
// Attrs:     +intent(out)
// Requested: c_out_char_*
// Match:     c_default
// ----------------------------------------
// Argument:  const char * src
// Attrs:     +intent(in)
// Requested: c_in_char_*
// Match:     c_default
void STR_cpass_char_ptr_blank(char * dest, const char * src)
{
    // splicer begin function.cpass_char_ptr_blank
    CpassCharPtrBlank(dest, src);
    // splicer end function.cpass_char_ptr_blank
}

/**
 * \brief Test F_blanknull option
 *
 */
// ----------------------------------------
// Function:  void CpassCharPtrBlank
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  char * dest +intent(out)
// Attrs:     +api(buf)+intent(out)
// Exact:     c_out_char_*_buf
// ----------------------------------------
// Argument:  const char * src
// Attrs:     +api(buf)+intent(in)
// Exact:     c_in_char_*_buf
void STR_cpass_char_ptr_blank_bufferify(char *dest, int SHT_dest_len,
    char *src, int SHT_src_len)
{
    // splicer begin function.cpass_char_ptr_blank_bufferify
    char * SHCXX_src = ShroudStrAlloc(src, SHT_src_len, 1);
    CpassCharPtrBlank(dest, SHCXX_src);
    ShroudStrBlankFill(dest, SHT_dest_len);
    ShroudStrFree(SHCXX_src);
    // splicer end function.cpass_char_ptr_blank_bufferify
}

/**
 * Test post_declare.
 * The std::string in py_string_inout must be declared before the
 * goto added by py_native_*_in_pointer_list to avoid
 * "jump to label 'fail' crosses initialization of" error.
 */
// ----------------------------------------
// Function:  void PostDeclare
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  int * count +intent(in)+rank(1)
// Attrs:     +intent(in)
// Requested: c_in_native_*
// Match:     c_default
// ----------------------------------------
// Argument:  std::string & name
// Attrs:     +intent(inout)
// Exact:     c_inout_string_&
void STR_post_declare(int * count, char * name)
{
    // splicer begin function.post_declare
    std::string SHCXX_name(name);
    PostDeclare(count, SHCXX_name);
    strcpy(name, SHCXX_name.c_str());
    // splicer end function.post_declare
}

/**
 * Test post_declare.
 * The std::string in py_string_inout must be declared before the
 * goto added by py_native_*_in_pointer_list to avoid
 * "jump to label 'fail' crosses initialization of" error.
 */
// ----------------------------------------
// Function:  void PostDeclare
// Attrs:     +intent(subroutine)
// Exact:     c_subroutine
// ----------------------------------------
// Argument:  int * count +intent(in)+rank(1)
// Attrs:     +intent(in)
// Requested: c_in_native_*
// Match:     c_default
// ----------------------------------------
// Argument:  std::string & name
// Attrs:     +api(buf)+intent(inout)
// Exact:     c_inout_string_&_buf
void STR_post_declare_bufferify(int * count, char *name,
    int SHT_name_len)
{
    // splicer begin function.post_declare_bufferify
    std::string SHCXX_name(name, ShroudLenTrim(name, SHT_name_len));
    PostDeclare(count, SHCXX_name);
    ShroudStrCopy(name, SHT_name_len, SHCXX_name.data(),
        SHCXX_name.size());
    // splicer end function.post_declare_bufferify
}

/**
 * \brief NULL terminate input string in C, not in Fortran.
 *
 */
// ----------------------------------------
// Function:  int CpassCharPtrNotrim
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
// ----------------------------------------
// Argument:  const char * src
// Attrs:     +intent(in)
// Requested: c_in_char_*
// Match:     c_default
int STR_cpass_char_ptr_notrim(const char * src)
{
    // splicer begin function.cpass_char_ptr_notrim
    int SHC_rv = CpassCharPtrNotrim(src);
    return SHC_rv;
    // splicer end function.cpass_char_ptr_notrim
}

/**
 * \brief NULL terminate input string in C, not in Fortran.
 *
 */
// ----------------------------------------
// Function:  int CpassCharPtrNotrim
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
// ----------------------------------------
// Argument:  const char * src
// Attrs:     +api(buf)+intent(in)
// Exact:     c_in_char_*_buf
int STR_cpass_char_ptr_notrim_bufferify(char *src, int SHT_src_len)
{
    // splicer begin function.cpass_char_ptr_notrim_bufferify
    char * SHCXX_src = ShroudStrAlloc(src, SHT_src_len, 0);
    int SHC_rv = CpassCharPtrNotrim(SHCXX_src);
    ShroudStrFree(SHCXX_src);
    return SHC_rv;
    // splicer end function.cpass_char_ptr_notrim_bufferify
}

/**
 * \brief Do not NULL terminate input string
 *
 * The C library function should get the same address
 * for addr and src.
 * Used when the C function needs the true address of the argument.
 * Skips null-termination. Useful to create an interface for
 * a function which is already callable by Fortran.
 * For example, the length is passed explicitly.
 * This example will not create a Fortran wrapper since C can be
 * called directly.
 */
// ----------------------------------------
// Function:  int CpassCharPtrCAPI
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
// ----------------------------------------
// Argument:  void * addr +value
// Attrs:     +intent(in)
// Requested: c_in_void_*
// Match:     c_default
// ----------------------------------------
// Argument:  const char * src +api(capi)
// Attrs:     +api(capi)+intent(in)
// Requested: c_in_char_*_capi
// Match:     c_default
int STR_cpass_char_ptr_capi(void * addr, const char * src)
{
    // splicer begin function.cpass_char_ptr_capi
    int SHC_rv = CpassCharPtrCAPI(addr, src);
    return SHC_rv;
    // splicer end function.cpass_char_ptr_capi
}

/**
 * \brief Mix api(buf) and api(capi)
 *
 */
// ----------------------------------------
// Function:  int CpassCharPtrCAPI2
// Attrs:     +intent(function)
// Requested: c_function_native_scalar
// Match:     c_function
// ----------------------------------------
// Argument:  const char * in
// Attrs:     +intent(in)
// Requested: c_in_char_*
// Match:     c_default
// ----------------------------------------
// Argument:  const char * src +api(capi)
// Attrs:     +api(capi)+intent(in)
// Requested: c_in_char_*_capi
// Match:     c_default
int STR_cpass_char_ptr_capi2(const char * in, const char * src)
{
    // splicer begin function.cpass_char_ptr_capi2
    int SHC_rv = CpassCharPtrCAPI2(in, src);
    return SHC_rv;
    // splicer end function.cpass_char_ptr_capi2
}

}  // extern "C"
