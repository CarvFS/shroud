! wrapfstrings.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfstrings.f
!! \brief Shroud generated wrapper for strings library
!<
! splicer begin file_top
! splicer end file_top
module strings_mod
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! ----------------------------------------
    ! Function:  void passChar
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char status +value
    ! Attrs:     +intent(in)
    ! Exact:     c_char_scalar_in
    interface
        subroutine pass_char(status) &
                bind(C, name="STR_pass_char")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), value, intent(IN) :: status
        end subroutine pass_char
    end interface

    ! ----------------------------------------
    ! Function:  void passCharForce
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char status +value
    ! Attrs:     +intent(in)
    ! Exact:     c_char_scalar_in
    interface
        subroutine c_pass_char_force(status) &
                bind(C, name="STR_pass_char_force")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), value, intent(IN) :: status
        end subroutine c_pass_char_force
    end interface

    ! ----------------------------------------
    ! Function:  char returnChar
    ! Attrs:     +intent(result)
    ! Exact:     c_char_scalar_result
    interface
        function c_return_char() &
                result(SHT_rv) &
                bind(C, name="STR_return_char")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR) :: SHT_rv
        end function c_return_char
    end interface

    ! ----------------------------------------
    ! Function:  void returnChar
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * SHF_rv
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_result_cfi
    interface
        subroutine c_return_char_cfi(SHF_rv) &
                bind(C, name="STR_return_char_CFI")
            implicit none
            character(len=*), intent(OUT) :: SHF_rv
        end subroutine c_return_char_cfi
    end interface

    ! ----------------------------------------
    ! Function:  void passCharPtr
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * dest +charlen(40)+intent(out)
    ! Attrs:     +intent(out)
    ! Requested: c_char_*_out
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const char * src
    ! Attrs:     +intent(in)
    ! Requested: c_char_*_in
    ! Match:     c_default
    ! start c_pass_char_ptr
    interface
        subroutine c_pass_char_ptr(dest, src) &
                bind(C, name="STR_pass_char_ptr")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(OUT) :: dest(*)
            character(kind=C_CHAR), intent(IN) :: src(*)
        end subroutine c_pass_char_ptr
    end interface
    ! end c_pass_char_ptr

    ! ----------------------------------------
    ! Function:  void passCharPtr
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * dest +charlen(40)+intent(out)+len(Ndest)+len_trim(Ldest)
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_out_cfi
    ! ----------------------------------------
    ! Argument:  const char * src +len(Nsrc)+len_trim(Lsrc)
    ! Attrs:     +intent(in)
    ! Exact:     c_char_*_in_cfi
    ! start pass_char_ptr
    interface
        subroutine pass_char_ptr(dest, src) &
                bind(C, name="STR_pass_char_ptr_CFI")
            implicit none
            character(len=*), intent(OUT) :: dest
            character(len=*), intent(IN) :: src
        end subroutine pass_char_ptr
    end interface
    ! end pass_char_ptr

    ! ----------------------------------------
    ! Function:  void passCharPtrInOut
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * s +intent(inout)
    ! Attrs:     +intent(inout)
    ! Requested: c_char_*_inout
    ! Match:     c_default
    interface
        subroutine c_pass_char_ptr_in_out(s) &
                bind(C, name="STR_pass_char_ptr_in_out")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(INOUT) :: s(*)
        end subroutine c_pass_char_ptr_in_out
    end interface

    ! ----------------------------------------
    ! Function:  void passCharPtrInOut
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * s +intent(inout)+len(Ns)+len_trim(Ls)
    ! Attrs:     +intent(inout)
    ! Exact:     c_char_*_inout_cfi
    interface
        subroutine pass_char_ptr_in_out(s) &
                bind(C, name="STR_pass_char_ptr_in_out_CFI")
            implicit none
            character(len=*), intent(INOUT) :: s
        end subroutine pass_char_ptr_in_out
    end interface

    ! ----------------------------------------
    ! Function:  const char * getCharPtr1 +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     c_char_*_result
    ! start c_get_char_ptr1
    interface
        function c_get_char_ptr1() &
                result(SHT_rv) &
                bind(C, name="STR_get_char_ptr1")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_char_ptr1
    end interface
    ! end c_get_char_ptr1

    ! ----------------------------------------
    ! Function:  void getCharPtr1
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const char * SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_char_*_result_cfi_allocatable
    ! start c_get_char_ptr1_cfi
    interface
        subroutine c_get_char_ptr1_cfi(SHF_rv) &
                bind(C, name="STR_get_char_ptr1_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_char_ptr1_cfi
    end interface
    ! end c_get_char_ptr1_cfi

    ! ----------------------------------------
    ! Function:  const char * getCharPtr2 +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Exact:     c_char_*_result
    ! start c_get_char_ptr2
    interface
        function c_get_char_ptr2() &
                result(SHT_rv) &
                bind(C, name="STR_get_char_ptr2")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_char_ptr2
    end interface
    ! end c_get_char_ptr2

    ! ----------------------------------------
    ! Function:  void getCharPtr2 +len(30)
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_result_cfi
    ! start c_get_char_ptr2_cfi
    interface
        subroutine c_get_char_ptr2_cfi(SHF_rv) &
                bind(C, name="STR_get_char_ptr2_CFI")
            implicit none
            character(len=*), intent(OUT) :: SHF_rv
        end subroutine c_get_char_ptr2_cfi
    end interface
    ! end c_get_char_ptr2_cfi

    ! ----------------------------------------
    ! Function:  const char * getCharPtr3 +deref(result-as-arg)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Exact:     c_char_*_result
    ! start c_get_char_ptr3
    interface
        function c_get_char_ptr3() &
                result(SHT_rv) &
                bind(C, name="STR_get_char_ptr3")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_char_ptr3
    end interface
    ! end c_get_char_ptr3

    ! ----------------------------------------
    ! Function:  void getCharPtr3
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * output
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_result_cfi
    ! start get_char_ptr3
    interface
        subroutine get_char_ptr3(output) &
                bind(C, name="STR_get_char_ptr3_CFI")
            implicit none
            character(len=*), intent(OUT) :: output
        end subroutine get_char_ptr3
    end interface
    ! end get_char_ptr3

    ! ----------------------------------------
    ! Function:  const char * getCharPtr4 +deref(raw)
    ! Attrs:     +deref(raw)+intent(result)
    ! Exact:     c_char_*_result
    interface
        function get_char_ptr4() &
                result(SHT_rv) &
                bind(C, name="STR_get_char_ptr4")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function get_char_ptr4
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringResult
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const string * SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    interface
        subroutine c_get_const_string_result_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_result_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_const_string_result_cfi
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringLen +len(30)
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  string * SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_result_cfi
    interface
        subroutine c_get_const_string_len_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_len_CFI")
            implicit none
            character(len=*), intent(OUT) :: SHF_rv
        end subroutine c_get_const_string_len_cfi
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringAsArg
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  string * output
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_result_cfi
    interface
        subroutine get_const_string_as_arg(output) &
                bind(C, name="STR_get_const_string_as_arg_CFI")
            implicit none
            character(len=*), intent(OUT) :: output
        end subroutine get_const_string_as_arg
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringAlloc
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    interface
        subroutine c_get_const_string_alloc_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_alloc_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_const_string_alloc_cfi
    end interface

    ! ----------------------------------------
    ! Function:  const string & getConstStringRefPure +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     c_string_&_result
    ! start c_get_const_string_ref_pure
    interface
        function c_get_const_string_ref_pure() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ref_pure")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ref_pure
    end interface
    ! end c_get_const_string_ref_pure

    ! ----------------------------------------
    ! Function:  void getConstStringRefPure
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const string & SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_&_result_cfi_allocatable
    ! start c_get_const_string_ref_pure_cfi
    interface
        subroutine c_get_const_string_ref_pure_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ref_pure_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_const_string_ref_pure_cfi
    end interface
    ! end c_get_const_string_ref_pure_cfi

    ! ----------------------------------------
    ! Function:  const string & getConstStringRefLen +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Exact:     c_string_&_result
    interface
        function c_get_const_string_ref_len() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ref_len")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ref_len
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringRefLen +len(30)
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  string & SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_&_result_cfi
    interface
        subroutine c_get_const_string_ref_len_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ref_len_CFI")
            implicit none
            character(len=*), intent(OUT) :: SHF_rv
        end subroutine c_get_const_string_ref_len_cfi
    end interface

    ! ----------------------------------------
    ! Function:  const string & getConstStringRefAsArg +deref(result-as-arg)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Exact:     c_string_&_result
    interface
        function c_get_const_string_ref_as_arg() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ref_as_arg")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ref_as_arg
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringRefAsArg
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  string & output
    ! Attrs:     +intent(out)
    ! Exact:     c_string_&_result_cfi
    interface
        subroutine get_const_string_ref_as_arg(output) &
                bind(C, name="STR_get_const_string_ref_as_arg_CFI")
            implicit none
            character(len=*), intent(OUT) :: output
        end subroutine get_const_string_ref_as_arg
    end interface

    ! ----------------------------------------
    ! Function:  const string & getConstStringRefLenEmpty +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Exact:     c_string_&_result
    interface
        function c_get_const_string_ref_len_empty() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ref_len_empty")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ref_len_empty
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringRefLenEmpty +len(30)
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  string & SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_&_result_cfi
    interface
        subroutine c_get_const_string_ref_len_empty_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ref_len_empty_CFI")
            implicit none
            character(len=*), intent(OUT) :: SHF_rv
        end subroutine c_get_const_string_ref_len_empty_cfi
    end interface

    ! ----------------------------------------
    ! Function:  const std::string & getConstStringRefAlloc +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     c_string_&_result
    interface
        function c_get_const_string_ref_alloc() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ref_alloc")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ref_alloc
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringRefAlloc
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string & SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_&_result_cfi_allocatable
    interface
        subroutine c_get_const_string_ref_alloc_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ref_alloc_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_const_string_ref_alloc_cfi
    end interface

    ! ----------------------------------------
    ! Function:  const string * getConstStringPtrLen +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Exact:     c_string_*_result
    interface
        function c_get_const_string_ptr_len() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ptr_len")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ptr_len
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringPtrLen +len(30)
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  string * SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_result_cfi
    interface
        subroutine c_get_const_string_ptr_len_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ptr_len_CFI")
            implicit none
            character(len=*), intent(OUT) :: SHF_rv
        end subroutine c_get_const_string_ptr_len_cfi
    end interface

    ! ----------------------------------------
    ! Function:  const std::string * getConstStringPtrAlloc +deref(allocatable)+owner(library)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     c_string_*_result
    interface
        function c_get_const_string_ptr_alloc() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ptr_alloc")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ptr_alloc
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringPtrAlloc
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)+owner(library)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    interface
        subroutine c_get_const_string_ptr_alloc_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ptr_alloc_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_const_string_ptr_alloc_cfi
    end interface

    ! ----------------------------------------
    ! Function:  const std::string * getConstStringPtrOwnsAlloc +deref(allocatable)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     c_string_*_result
    interface
        function c_get_const_string_ptr_owns_alloc() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ptr_owns_alloc")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ptr_owns_alloc
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringPtrOwnsAlloc
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    interface
        subroutine c_get_const_string_ptr_owns_alloc_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ptr_owns_alloc_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_const_string_ptr_owns_alloc_cfi
    end interface

    ! ----------------------------------------
    ! Function:  const std::string * getConstStringPtrOwnsAllocPattern +deref(allocatable)+free_pattern(C_string_free)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     c_string_*_result
    interface
        function c_get_const_string_ptr_owns_alloc_pattern() &
                result(SHT_rv) &
                bind(C, name="STR_get_const_string_ptr_owns_alloc_pattern")
            use iso_c_binding, only : C_PTR
            implicit none
            type(C_PTR) SHT_rv
        end function c_get_const_string_ptr_owns_alloc_pattern
    end interface

    ! ----------------------------------------
    ! Function:  void getConstStringPtrOwnsAllocPattern
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)+free_pattern(C_string_free)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    interface
        subroutine c_get_const_string_ptr_owns_alloc_pattern_cfi(SHF_rv) &
                bind(C, name="STR_get_const_string_ptr_owns_alloc_pattern_CFI")
            implicit none
            character(len=:), intent(OUT), allocatable :: SHF_rv
        end subroutine c_get_const_string_ptr_owns_alloc_pattern_cfi
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringConstReference
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string & arg1
    ! Attrs:     +intent(in)
    ! Exact:     c_string_&_in
    interface
        subroutine c_accept_string_const_reference(arg1) &
                bind(C, name="STR_accept_string_const_reference")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(IN) :: arg1(*)
        end subroutine c_accept_string_const_reference
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringConstReference
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string & arg1 +len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(in)
    ! Exact:     c_string_&_in_cfi
    interface
        subroutine accept_string_const_reference(arg1) &
                bind(C, name="STR_accept_string_const_reference_CFI")
            implicit none
            character(len=*), intent(IN) :: arg1
        end subroutine accept_string_const_reference
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringReferenceOut
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string & arg1 +intent(out)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_&_out
    interface
        subroutine c_accept_string_reference_out(arg1) &
                bind(C, name="STR_accept_string_reference_out")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(OUT) :: arg1(*)
        end subroutine c_accept_string_reference_out
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringReferenceOut
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string & arg1 +intent(out)+len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_&_out_cfi
    interface
        subroutine accept_string_reference_out(arg1) &
                bind(C, name="STR_accept_string_reference_out_CFI")
            implicit none
            character(len=*), intent(OUT) :: arg1
        end subroutine accept_string_reference_out
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringReference
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string & arg1
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_&_inout
    ! start c_accept_string_reference
    interface
        subroutine c_accept_string_reference(arg1) &
                bind(C, name="STR_accept_string_reference")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(INOUT) :: arg1(*)
        end subroutine c_accept_string_reference
    end interface
    ! end c_accept_string_reference

    ! ----------------------------------------
    ! Function:  void acceptStringReference
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string & arg1 +len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_&_inout_cfi
    ! start accept_string_reference
    interface
        subroutine accept_string_reference(arg1) &
                bind(C, name="STR_accept_string_reference_CFI")
            implicit none
            character(len=*), intent(INOUT) :: arg1
        end subroutine accept_string_reference
    end interface
    ! end accept_string_reference

    ! ----------------------------------------
    ! Function:  void acceptStringPointerConst
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string * arg1
    ! Attrs:     +intent(in)
    ! Exact:     c_string_*_in
    interface
        subroutine c_accept_string_pointer_const(arg1) &
                bind(C, name="STR_accept_string_pointer_const")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(IN) :: arg1(*)
        end subroutine c_accept_string_pointer_const
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringPointerConst
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const std::string * arg1 +len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(in)
    ! Exact:     c_string_*_in_cfi
    interface
        subroutine accept_string_pointer_const(arg1) &
                bind(C, name="STR_accept_string_pointer_const_CFI")
            implicit none
            character(len=*), intent(IN) :: arg1
        end subroutine accept_string_pointer_const
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringPointer
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_*_inout
    interface
        subroutine c_accept_string_pointer(arg1) &
                bind(C, name="STR_accept_string_pointer")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(INOUT) :: arg1(*)
        end subroutine c_accept_string_pointer
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringPointer
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1 +len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_*_inout_cfi
    interface
        subroutine accept_string_pointer(arg1) &
                bind(C, name="STR_accept_string_pointer_CFI")
            implicit none
            character(len=*), intent(INOUT) :: arg1
        end subroutine accept_string_pointer
    end interface

    ! ----------------------------------------
    ! Function:  void fetchStringPointer
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1 +intent(out)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_out
    interface
        subroutine c_fetch_string_pointer(arg1) &
                bind(C, name="STR_fetch_string_pointer")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(OUT) :: arg1(*)
        end subroutine c_fetch_string_pointer
    end interface

    ! ----------------------------------------
    ! Function:  void fetchStringPointer
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1 +intent(out)+len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_out_cfi
    interface
        subroutine fetch_string_pointer(arg1) &
                bind(C, name="STR_fetch_string_pointer_CFI")
            implicit none
            character(len=*), intent(OUT) :: arg1
        end subroutine fetch_string_pointer
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringPointerLen
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_*_inout
    ! ----------------------------------------
    ! Argument:  int * nlen +intent(out)
    ! Attrs:     +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    interface
        subroutine c_accept_string_pointer_len(arg1, nlen) &
                bind(C, name="STR_accept_string_pointer_len")
            use iso_c_binding, only : C_CHAR, C_INT
            implicit none
            character(kind=C_CHAR), intent(INOUT) :: arg1(*)
            integer(C_INT), intent(OUT) :: nlen
        end subroutine c_accept_string_pointer_len
    end interface

    ! ----------------------------------------
    ! Function:  void acceptStringPointerLen
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1 +len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_*_inout_cfi
    ! ----------------------------------------
    ! Argument:  int * nlen +intent(out)
    ! Attrs:     +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    interface
        subroutine accept_string_pointer_len(arg1, nlen) &
                bind(C, name="STR_accept_string_pointer_len_CFI")
            use iso_c_binding, only : C_INT
            implicit none
            character(len=*), intent(INOUT) :: arg1
            integer(C_INT), intent(OUT) :: nlen
        end subroutine accept_string_pointer_len
    end interface

    ! ----------------------------------------
    ! Function:  void fetchStringPointerLen
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1 +intent(out)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_out
    ! ----------------------------------------
    ! Argument:  int * nlen +intent(out)
    ! Attrs:     +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    interface
        subroutine c_fetch_string_pointer_len(arg1, nlen) &
                bind(C, name="STR_fetch_string_pointer_len")
            use iso_c_binding, only : C_CHAR, C_INT
            implicit none
            character(kind=C_CHAR), intent(OUT) :: arg1(*)
            integer(C_INT), intent(OUT) :: nlen
        end subroutine c_fetch_string_pointer_len
    end interface

    ! ----------------------------------------
    ! Function:  void fetchStringPointerLen
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string * arg1 +intent(out)+len(Narg1)+len_trim(Larg1)
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_out_cfi
    ! ----------------------------------------
    ! Argument:  int * nlen +intent(out)
    ! Attrs:     +intent(out)
    ! Requested: c_native_*_out
    ! Match:     c_default
    interface
        subroutine fetch_string_pointer_len(arg1, nlen) &
                bind(C, name="STR_fetch_string_pointer_len_CFI")
            use iso_c_binding, only : C_INT
            implicit none
            character(len=*), intent(OUT) :: arg1
            integer(C_INT), intent(OUT) :: nlen
        end subroutine fetch_string_pointer_len
    end interface

    ! ----------------------------------------
    ! Function:  int acceptStringInstance
    ! Attrs:     +intent(result)
    ! Requested: c_native_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string arg1 +value
    ! Attrs:     +intent(in)
    ! Exact:     c_string_scalar_in
    interface
        function c_accept_string_instance(arg1) &
                result(SHT_rv) &
                bind(C, name="STR_accept_string_instance")
            use iso_c_binding, only : C_CHAR, C_INT
            implicit none
            character(kind=C_CHAR), intent(IN) :: arg1(*)
            integer(C_INT) :: SHT_rv
        end function c_accept_string_instance
    end interface

    ! ----------------------------------------
    ! Function:  int acceptStringInstance
    ! Attrs:     +intent(result)
    ! Requested: c_native_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string arg1 +len(Narg1)+len_trim(Larg1)+value
    ! Attrs:     +intent(in)
    ! Exact:     c_string_scalar_in_cfi
    interface
        function c_accept_string_instance_cfi(arg1) &
                result(SHT_rv) &
                bind(C, name="STR_accept_string_instance_CFI")
            use iso_c_binding, only : C_INT
            implicit none
            character(len=*), intent(IN) :: arg1
            integer(C_INT) :: SHT_rv
        end function c_accept_string_instance_cfi
    end interface

    ! ----------------------------------------
    ! Function:  void explicit1
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * name +intent(in)+len_trim(AAlen)
    ! Attrs:     +intent(in)
    ! Requested: c_char_*_in
    ! Match:     c_default
    interface
        subroutine c_explicit1(name) &
                bind(C, name="STR_explicit1")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(IN) :: name(*)
        end subroutine c_explicit1
    end interface

    ! ----------------------------------------
    ! Function:  void explicit1
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * name +intent(in)+len(Nname)+len_trim(Lname)
    ! Attrs:     +intent(in)
    ! Exact:     c_char_*_in_cfi
    interface
        subroutine explicit1(name) &
                bind(C, name="STR_explicit1_CFI")
            implicit none
            character(len=*), intent(IN) :: name
        end subroutine explicit1
    end interface

    ! ----------------------------------------
    ! Function:  void explicit2
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * name +intent(out)+len(AAtrim)
    ! Attrs:     +intent(out)
    ! Requested: c_char_*_out
    ! Match:     c_default
    interface
        subroutine c_explicit2(name) &
                bind(C, name="STR_explicit2")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(OUT) :: name(*)
        end subroutine c_explicit2
    end interface

    ! ----------------------------------------
    ! Function:  void explicit2
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * name +intent(out)+len(Nname)+len_trim(Lname)
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_out_cfi
    interface
        subroutine explicit2(name) &
                bind(C, name="STR_explicit2_CFI")
            implicit none
            character(len=*), intent(OUT) :: name
        end subroutine explicit2
    end interface

    ! ----------------------------------------
    ! Function:  void CpassChar
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char status +value
    ! Attrs:     +intent(in)
    ! Exact:     c_char_scalar_in
    interface
        subroutine cpass_char(status) &
                bind(C, name="CpassChar")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), value, intent(IN) :: status
        end subroutine cpass_char
    end interface

    ! ----------------------------------------
    ! Function:  char CreturnChar
    ! Attrs:     +intent(result)
    ! Exact:     c_char_scalar_result
    interface
        function c_creturn_char() &
                result(SHT_rv) &
                bind(C, name="CreturnChar")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR) :: SHT_rv
        end function c_creturn_char
    end interface

    ! ----------------------------------------
    ! Function:  void CreturnChar
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * SHF_rv
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_result_cfi
    interface
        subroutine c_creturn_char_cfi(SHF_rv) &
                bind(C, name="STR_creturn_char_CFI")
            implicit none
            character(len=*), intent(OUT) :: SHF_rv
        end subroutine c_creturn_char_cfi
    end interface

    ! ----------------------------------------
    ! Function:  void CpassCharPtr
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * dest +intent(out)
    ! Attrs:     +intent(out)
    ! Requested: c_char_*_out
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  const char * src
    ! Attrs:     +intent(in)
    ! Requested: c_char_*_in
    ! Match:     c_default
    interface
        subroutine c_cpass_char_ptr(dest, src) &
                bind(C, name="CpassCharPtr")
            use iso_c_binding, only : C_CHAR
            implicit none
            character(kind=C_CHAR), intent(OUT) :: dest(*)
            character(kind=C_CHAR), intent(IN) :: src(*)
        end subroutine c_cpass_char_ptr
    end interface

    ! ----------------------------------------
    ! Function:  void CpassCharPtr
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char * dest +intent(out)+len(Ndest)+len_trim(Ldest)
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_out_cfi
    ! ----------------------------------------
    ! Argument:  const char * src +len(Nsrc)+len_trim(Lsrc)
    ! Attrs:     +intent(in)
    ! Exact:     c_char_*_in_cfi
    interface
        subroutine cpass_char_ptr(dest, src) &
                bind(C, name="STR_cpass_char_ptr_CFI")
            implicit none
            character(len=*), intent(OUT) :: dest
            character(len=*), intent(IN) :: src
        end subroutine cpass_char_ptr
    end interface

    ! ----------------------------------------
    ! Function:  void PostDeclare
    ! Requested: c_void_scalar_result
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * count +intent(in)+rank(1)
    ! Attrs:     +intent(in)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string & name
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_&_inout
    interface
        subroutine c_post_declare(count, name) &
                bind(C, name="STR_post_declare")
            use iso_c_binding, only : C_CHAR, C_INT
            implicit none
            integer(C_INT), intent(IN) :: count(*)
            character(kind=C_CHAR), intent(INOUT) :: name(*)
        end subroutine c_post_declare
    end interface

    ! ----------------------------------------
    ! Function:  void PostDeclare
    ! Requested: c_void_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  int * count +intent(in)+rank(1)
    ! Attrs:     +intent(in)
    ! Requested: c_native_*_in
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string & name +len(Nname)+len_trim(Lname)
    ! Attrs:     +intent(inout)
    ! Exact:     c_string_&_inout_cfi
    interface
        subroutine post_declare(count, name) &
                bind(C, name="STR_post_declare_CFI")
            use iso_c_binding, only : C_INT
            implicit none
            integer(C_INT), intent(IN) :: count(*)
            character(len=*), intent(INOUT) :: name
        end subroutine post_declare
    end interface

    interface
        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

contains

    ! ----------------------------------------
    ! Function:  void passCharForce
    ! void passCharForce
    ! Requested: f_subroutine
    ! Match:     f_default
    ! Requested: c
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  char status +value
    ! Attrs:     +intent(in)
    ! Exact:     f_char_scalar_in
    ! Attrs:     +intent(in)
    ! Exact:     c_char_scalar_in
    !>
    !! By default no Fortran wrapper is created.
    !! Force one so it can be tested.
    !<
    subroutine pass_char_force(status)
        character, value, intent(IN) :: status
        ! splicer begin function.pass_char_force
        call c_pass_char_force(status)
        ! splicer end function.pass_char_force
    end subroutine pass_char_force

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  char returnChar
    ! char returnChar
    ! Attrs:     +intent(result)
    ! Requested: f_char_scalar_result_cfi
    ! Match:     f_default
    ! Function:  void returnChar
    ! Exact:     c_char_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  char * SHF_rv
    ! Attrs:     +intent(out)
    ! Requested: f_char_*_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_result_cfi
    !>
    !! \brief return a char argument (non-pointer)
    !!
    !<
    function return_char() &
            result(SHT_rv)
        character :: SHT_rv
        ! splicer begin function.return_char
        call c_return_char_cfi(SHT_rv)
        ! splicer end function.return_char
    end function return_char

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const char * getCharPtr1 +deref(allocatable)
    ! const char * getCharPtr1 +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     f_char_scalar_result_cfi_allocatable
    ! Function:  void getCharPtr1
    ! Exact:     c_char_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const char * SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_char_*_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_char_*_result_cfi_allocatable
    !>
    !! \brief return a 'const char *' as character(*)
    !!
    !<
    ! start get_char_ptr1
    function get_char_ptr1() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_char_ptr1
        call c_get_char_ptr1_cfi(SHT_rv)
        ! splicer end function.get_char_ptr1
    end function get_char_ptr1
    ! end get_char_ptr1

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const char * getCharPtr2 +deref(result-as-arg)+len(30)
    ! const char * getCharPtr2 +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Requested: f_char_scalar_result_cfi_result-as-arg
    ! Match:     f_default
    ! Function:  void getCharPtr2 +len(30)
    ! Exact:     c_char_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  char * SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Requested: f_char_*_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_result_cfi
    !>
    !! \brief return 'const char *' with fixed size (len=30)
    !!
    !<
    ! start get_char_ptr2
    function get_char_ptr2() &
            result(SHT_rv)
        character(len=30) :: SHT_rv
        ! splicer begin function.get_char_ptr2
        call c_get_char_ptr2_cfi(SHT_rv)
        ! splicer end function.get_char_ptr2
    end function get_char_ptr2
    ! end get_char_ptr2

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const string getConstStringResult +deref(allocatable)
    ! const string getConstStringResult +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     f_string_scalar_result_cfi_allocatable
    ! Function:  void getConstStringResult
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const string * SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_string_*_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    !>
    !! \brief return an ALLOCATABLE CHARACTER from std::string
    !!
    !<
    function get_const_string_result() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_const_string_result
        call c_get_const_string_result_cfi(SHT_rv)
        ! splicer end function.get_const_string_result
    end function get_const_string_result

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const string getConstStringLen +deref(result-as-arg)+len(30)
    ! const string getConstStringLen +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Requested: f_string_scalar_result_cfi_result-as-arg
    ! Match:     f_default
    ! Function:  void getConstStringLen +len(30)
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  string * SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Requested: f_string_*_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_result_cfi
    !>
    !! \brief return a 'const string' as argument
    !!
    !<
    function get_const_string_len() &
            result(SHT_rv)
        character(len=30) :: SHT_rv
        ! splicer begin function.get_const_string_len
        call c_get_const_string_len_cfi(SHT_rv)
        ! splicer end function.get_const_string_len
    end function get_const_string_len

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const std::string getConstStringAlloc +deref(allocatable)
    ! const std::string getConstStringAlloc +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     f_string_scalar_result_cfi_allocatable
    ! Function:  void getConstStringAlloc
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_string_*_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    function get_const_string_alloc() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_const_string_alloc
        call c_get_const_string_alloc_cfi(SHT_rv)
        ! splicer end function.get_const_string_alloc
    end function get_const_string_alloc

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const string & getConstStringRefPure +deref(allocatable)
    ! const string & getConstStringRefPure +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     f_string_scalar_result_cfi_allocatable
    ! Function:  void getConstStringRefPure
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const string & SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_string_&_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_&_result_cfi_allocatable
    !>
    !! \brief return a 'const string&' as ALLOCATABLE character
    !!
    !<
    ! start get_const_string_ref_pure
    function get_const_string_ref_pure() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_const_string_ref_pure
        call c_get_const_string_ref_pure_cfi(SHT_rv)
        ! splicer end function.get_const_string_ref_pure
    end function get_const_string_ref_pure
    ! end get_const_string_ref_pure

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const string & getConstStringRefLen +deref(result-as-arg)+len(30)
    ! const string & getConstStringRefLen +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Requested: f_string_scalar_result_cfi_result-as-arg
    ! Match:     f_default
    ! Function:  void getConstStringRefLen +len(30)
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  string & SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Requested: f_string_&_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Exact:     c_string_&_result_cfi
    !>
    !! \brief return 'const string&' with fixed size (len=30)
    !!
    !! Since +len(30) is provided, the result of the function
    !! will be copied directly into memory provided by Fortran.
    !! The function will not be ALLOCATABLE.
    !<
    function get_const_string_ref_len() &
            result(SHT_rv)
        character(len=30) :: SHT_rv
        ! splicer begin function.get_const_string_ref_len
        call c_get_const_string_ref_len_cfi(SHT_rv)
        ! splicer end function.get_const_string_ref_len
    end function get_const_string_ref_len

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const string & getConstStringRefLenEmpty +deref(result-as-arg)+len(30)
    ! const string & getConstStringRefLenEmpty +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Requested: f_string_scalar_result_cfi_result-as-arg
    ! Match:     f_default
    ! Function:  void getConstStringRefLenEmpty +len(30)
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  string & SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Requested: f_string_&_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Exact:     c_string_&_result_cfi
    !>
    !! \brief Test returning empty string reference
    !!
    !<
    function get_const_string_ref_len_empty() &
            result(SHT_rv)
        character(len=30) :: SHT_rv
        ! splicer begin function.get_const_string_ref_len_empty
        call c_get_const_string_ref_len_empty_cfi(SHT_rv)
        ! splicer end function.get_const_string_ref_len_empty
    end function get_const_string_ref_len_empty

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const std::string & getConstStringRefAlloc +deref(allocatable)
    ! const std::string & getConstStringRefAlloc +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Exact:     f_string_scalar_result_cfi_allocatable
    ! Function:  void getConstStringRefAlloc
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const std::string & SHF_rv +deref(allocatable)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_string_&_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_&_result_cfi_allocatable
    function get_const_string_ref_alloc() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_const_string_ref_alloc
        call c_get_const_string_ref_alloc_cfi(SHT_rv)
        ! splicer end function.get_const_string_ref_alloc
    end function get_const_string_ref_alloc

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const string * getConstStringPtrLen +deref(result-as-arg)+len(30)
    ! const string * getConstStringPtrLen +deref(result-as-arg)+len(30)
    ! Attrs:     +deref(result-as-arg)+intent(result)
    ! Requested: f_string_scalar_result_cfi_result-as-arg
    ! Match:     f_default
    ! Function:  void getConstStringPtrLen +len(30)
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  string * SHF_rv +len(30)
    ! Attrs:     +intent(out)
    ! Requested: f_string_*_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Exact:     c_string_*_result_cfi
    !>
    !! \brief return a 'const string *' as character(30)
    !!
    !! It is the caller's responsibility to release the string
    !! created by the C++ library.
    !! This is accomplished with C_finalize_buf which is possible
    !! because +len(30) so the contents are copied before returning.
    !<
    function get_const_string_ptr_len() &
            result(SHT_rv)
        character(len=30) :: SHT_rv
        ! splicer begin function.get_const_string_ptr_len
        call c_get_const_string_ptr_len_cfi(SHT_rv)
        ! splicer end function.get_const_string_ptr_len
    end function get_const_string_ptr_len

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const std::string * getConstStringPtrAlloc +deref(allocatable)+owner(library)
    ! const std::string * getConstStringPtrAlloc +deref(allocatable)+owner(library)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Requested: f_string_scalar_result_cfi_allocatable_library
    ! Match:     f_string_scalar_result_cfi_allocatable
    ! Function:  void getConstStringPtrAlloc
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)+owner(library)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_string_*_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    function get_const_string_ptr_alloc() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_const_string_ptr_alloc
        call c_get_const_string_ptr_alloc_cfi(SHT_rv)
        ! splicer end function.get_const_string_ptr_alloc
    end function get_const_string_ptr_alloc

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const std::string * getConstStringPtrOwnsAlloc +deref(allocatable)+owner(caller)
    ! const std::string * getConstStringPtrOwnsAlloc +deref(allocatable)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Requested: f_string_scalar_result_cfi_allocatable_caller
    ! Match:     f_string_scalar_result_cfi_allocatable
    ! Function:  void getConstStringPtrOwnsAlloc
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_string_*_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    !>
    !! It is the caller's responsibility to release the string
    !! created by the C++ library.
    !! This is accomplished +owner(caller) which sets idtor.
    !! The contents are copied by Fortran so they must outlast
    !! the return from the C wrapper.
    !<
    function get_const_string_ptr_owns_alloc() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_const_string_ptr_owns_alloc
        call c_get_const_string_ptr_owns_alloc_cfi(SHT_rv)
        ! splicer end function.get_const_string_ptr_owns_alloc
    end function get_const_string_ptr_owns_alloc

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  const std::string * getConstStringPtrOwnsAllocPattern +deref(allocatable)+free_pattern(C_string_free)+owner(caller)
    ! const std::string * getConstStringPtrOwnsAllocPattern +deref(allocatable)+free_pattern(C_string_free)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(result)
    ! Requested: f_string_scalar_result_cfi_allocatable_caller
    ! Match:     f_string_scalar_result_cfi_allocatable
    ! Function:  void getConstStringPtrOwnsAllocPattern
    ! Exact:     c_string_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  const std::string * SHF_rv +deref(allocatable)+free_pattern(C_string_free)+owner(caller)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     f_string_*_result_cfi_allocatable
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Exact:     c_string_*_result_cfi_allocatable
    !>
    !! Similar to getConstStringPtrOwnsAlloc, but uses pattern to release memory.
    !<
    function get_const_string_ptr_owns_alloc_pattern() &
            result(SHT_rv)
        character(len=:), allocatable :: SHT_rv
        ! splicer begin function.get_const_string_ptr_owns_alloc_pattern
        call c_get_const_string_ptr_owns_alloc_pattern_cfi(SHT_rv)
        ! splicer end function.get_const_string_ptr_owns_alloc_pattern
    end function get_const_string_ptr_owns_alloc_pattern

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  int acceptStringInstance
    ! int acceptStringInstance
    ! Attrs:     +intent(result)
    ! Requested: f_native_scalar_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(result)
    ! Requested: c_native_scalar_result_cfi
    ! Match:     c_default
    ! ----------------------------------------
    ! Argument:  std::string arg1 +value
    ! Attrs:     +intent(in)
    ! Exact:     f_string_scalar_in
    ! Argument:  std::string arg1 +len(Narg1)+len_trim(Larg1)+value
    ! Attrs:     +intent(in)
    ! Exact:     c_string_scalar_in_cfi
    !>
    !! \brief Accept a string instance
    !!
    !<
    function accept_string_instance(arg1) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        character(len=*), intent(IN) :: arg1
        integer(C_INT) :: SHT_rv
        ! splicer begin function.accept_string_instance
        SHT_rv = c_accept_string_instance_cfi(arg1)
        ! splicer end function.accept_string_instance
    end function accept_string_instance

    ! Generated by arg_to_cfi
    ! ----------------------------------------
    ! Function:  char CreturnChar
    ! char CreturnChar
    ! Attrs:     +intent(result)
    ! Requested: f_char_scalar_result_cfi
    ! Match:     f_default
    ! Function:  void CreturnChar
    ! Exact:     c_char_scalar_result_cfi
    ! ----------------------------------------
    ! Argument:  char * SHF_rv
    ! Attrs:     +intent(out)
    ! Requested: f_char_*_result_cfi
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Exact:     c_char_*_result_cfi
    !>
    !! \brief return a char argument (non-pointer), extern "C"
    !!
    !<
    function creturn_char() &
            result(SHT_rv)
        character :: SHT_rv
        ! splicer begin function.creturn_char
        call c_creturn_char_cfi(SHT_rv)
        ! splicer end function.creturn_char
    end function creturn_char

    ! splicer begin additional_functions
    ! splicer end additional_functions

end module strings_mod
