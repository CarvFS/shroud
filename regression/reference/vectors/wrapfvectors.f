! wrapfvectors.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2022, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfvectors.f
!! \brief Shroud generated wrapper for vectors library
!<
! splicer begin file_top
! splicer end file_top
module vectors_mod
    use iso_c_binding, only : C_INT, C_LONG, C_NULL_PTR, C_PTR, C_SIZE_T
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! start helper capsule_data_helper
    ! helper capsule_data_helper
    type, bind(C) :: VEC_SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type VEC_SHROUD_capsule_data
    ! end helper capsule_data_helper

    ! start array_context
    ! helper array_context
    type, bind(C) :: VEC_SHROUD_array
        ! address of C++ memory
        type(VEC_SHROUD_capsule_data) :: cxx
        ! address of data in cxx
        type(C_PTR) :: base_addr = C_NULL_PTR
        ! type of element
        integer(C_INT) :: type
        ! bytes-per-item or character len of data in cxx
        integer(C_SIZE_T) :: elem_len = 0_C_SIZE_T
        ! size of data in cxx
        integer(C_SIZE_T) :: size = 0_C_SIZE_T
        ! number of dimensions
        integer(C_INT) :: rank = -1
        integer(C_LONG) :: shape(7) = 0
    end type VEC_SHROUD_array
    ! end array_context

    ! ----------------------------------------
    ! Function:  int vector_sum
    ! Attrs:     +intent(function)
    ! Requested: c_function_native_scalar
    ! Match:     c_function
    ! ----------------------------------------
    ! Argument:  const std::vector<int> & arg +rank(1)
    ! Attrs:     +api(buf)+intent(in)
    ! Requested: c_in_vector_&_buf_native_scalar
    ! Match:     c_in_vector_buf
    ! start c_vector_sum_bufferify
    interface
        function c_vector_sum_bufferify(arg, SHT_arg_size) &
                result(SHT_rv) &
                bind(C, name="VEC_vector_sum_bufferify")
            use iso_c_binding, only : C_INT, C_SIZE_T
            implicit none
            integer(C_INT), intent(IN) :: arg(*)
            integer(C_SIZE_T), intent(IN), value :: SHT_arg_size
            integer(C_INT) :: SHT_rv
        end function c_vector_sum_bufferify
    end interface
    ! end c_vector_sum_bufferify

    ! ----------------------------------------
    ! Function:  void vector_iota_out
    ! Attrs:     +intent(subroutine)
    ! Requested: c_subroutine_void_scalar
    ! Match:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +intent(out)+rank(1)
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native_scalar
    ! Match:     c_out_vector_cdesc
    ! start c_vector_iota_out_bufferify
    interface
        subroutine c_vector_iota_out_bufferify(SHT_arg_cdesc) &
                bind(C, name="VEC_vector_iota_out_bufferify")
            import :: VEC_SHROUD_array
            implicit none
            type(VEC_SHROUD_array), intent(OUT) :: SHT_arg_cdesc
        end subroutine c_vector_iota_out_bufferify
    end interface
    ! end c_vector_iota_out_bufferify

    ! ----------------------------------------
    ! Function:  void vector_iota_out_with_num
    ! Attrs:     +intent(subroutine)
    ! Requested: c_subroutine_void_scalar
    ! Match:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +intent(out)+rank(1)
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native_scalar
    ! Match:     c_out_vector_cdesc
    ! start c_vector_iota_out_with_num_bufferify
    interface
        function c_vector_iota_out_with_num_bufferify(SHT_arg_cdesc) &
                result(SHT_rv) &
                bind(C, name="VEC_vector_iota_out_with_num_bufferify")
            use iso_c_binding, only : C_LONG
            import :: VEC_SHROUD_array
            implicit none
            type(VEC_SHROUD_array), intent(OUT) :: SHT_arg_cdesc
            integer(C_LONG) SHT_rv
        end function c_vector_iota_out_with_num_bufferify
    end interface
    ! end c_vector_iota_out_with_num_bufferify

    ! ----------------------------------------
    ! Function:  void vector_iota_out_with_num2
    ! Attrs:     +intent(subroutine)
    ! Requested: c_subroutine_void_scalar
    ! Match:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +intent(out)+rank(1)
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native_scalar
    ! Match:     c_out_vector_cdesc
    ! start c_vector_iota_out_with_num2_bufferify
    interface
        subroutine c_vector_iota_out_with_num2_bufferify(SHT_arg_cdesc) &
                bind(C, name="VEC_vector_iota_out_with_num2_bufferify")
            import :: VEC_SHROUD_array
            implicit none
            type(VEC_SHROUD_array), intent(OUT) :: SHT_arg_cdesc
        end subroutine c_vector_iota_out_with_num2_bufferify
    end interface
    ! end c_vector_iota_out_with_num2_bufferify

    ! ----------------------------------------
    ! Function:  void vector_iota_out_alloc
    ! Attrs:     +intent(subroutine)
    ! Requested: c_subroutine_void_scalar
    ! Match:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +deref(allocatable)+intent(out)+rank(1)
    ! Attrs:     +api(cdesc)+deref(allocatable)+intent(out)
    ! Requested: c_out_vector_&_cdesc_allocatable_native_scalar
    ! Match:     c_out_vector_cdesc
    ! start c_vector_iota_out_alloc_bufferify
    interface
        subroutine c_vector_iota_out_alloc_bufferify(SHT_arg_cdesc) &
                bind(C, name="VEC_vector_iota_out_alloc_bufferify")
            import :: VEC_SHROUD_array
            implicit none
            type(VEC_SHROUD_array), intent(OUT) :: SHT_arg_cdesc
        end subroutine c_vector_iota_out_alloc_bufferify
    end interface
    ! end c_vector_iota_out_alloc_bufferify

    ! ----------------------------------------
    ! Function:  void vector_iota_inout_alloc
    ! Attrs:     +intent(subroutine)
    ! Requested: c_subroutine_void_scalar
    ! Match:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +deref(allocatable)+intent(inout)+rank(1)
    ! Attrs:     +api(cdesc)+deref(allocatable)+intent(inout)
    ! Requested: c_inout_vector_&_cdesc_allocatable_native_scalar
    ! Match:     c_inout_vector_cdesc
    ! start c_vector_iota_inout_alloc_bufferify
    interface
        subroutine c_vector_iota_inout_alloc_bufferify(arg, &
                SHT_arg_size, SHT_arg_cdesc) &
                bind(C, name="VEC_vector_iota_inout_alloc_bufferify")
            use iso_c_binding, only : C_INT, C_SIZE_T
            import :: VEC_SHROUD_array
            implicit none
            integer(C_INT), intent(IN) :: arg(*)
            integer(C_SIZE_T), intent(IN), value :: SHT_arg_size
            type(VEC_SHROUD_array), intent(OUT) :: SHT_arg_cdesc
        end subroutine c_vector_iota_inout_alloc_bufferify
    end interface
    ! end c_vector_iota_inout_alloc_bufferify

    ! ----------------------------------------
    ! Function:  void vector_increment
    ! Attrs:     +intent(subroutine)
    ! Requested: c_subroutine_void_scalar
    ! Match:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +rank(1)
    ! Attrs:     +api(cdesc)+intent(inout)
    ! Requested: c_inout_vector_&_cdesc_native_scalar
    ! Match:     c_inout_vector_cdesc
    interface
        subroutine c_vector_increment_bufferify(arg, SHT_arg_size, &
                SHT_arg_cdesc) &
                bind(C, name="VEC_vector_increment_bufferify")
            use iso_c_binding, only : C_INT, C_SIZE_T
            import :: VEC_SHROUD_array
            implicit none
            integer(C_INT), intent(IN) :: arg(*)
            integer(C_SIZE_T), intent(IN), value :: SHT_arg_size
            type(VEC_SHROUD_array), intent(OUT) :: SHT_arg_cdesc
        end subroutine c_vector_increment_bufferify
    end interface

    ! ----------------------------------------
    ! Function:  void vector_iota_out_d
    ! Attrs:     +intent(subroutine)
    ! Requested: c_subroutine_void_scalar
    ! Match:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<double> & arg +intent(out)+rank(1)
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native_scalar
    ! Match:     c_out_vector_cdesc
    interface
        subroutine c_vector_iota_out_d_bufferify(SHT_arg_cdesc) &
                bind(C, name="VEC_vector_iota_out_d_bufferify")
            import :: VEC_SHROUD_array
            implicit none
            type(VEC_SHROUD_array), intent(OUT) :: SHT_arg_cdesc
        end subroutine c_vector_iota_out_d_bufferify
    end interface

    ! ----------------------------------------
    ! Function:  int vector_string_count
    ! Attrs:     +intent(function)
    ! Requested: c_function_native_scalar
    ! Match:     c_function
    ! ----------------------------------------
    ! Argument:  const std::vector<std::string> & arg +rank(1)
    ! Attrs:     +api(buf)+intent(in)
    ! Requested: c_in_vector_&_buf_string_scalar
    ! Match:     c_in_vector_buf_string
    interface
        function c_vector_string_count_bufferify(arg, SHT_arg_size, &
                SHT_arg_len) &
                result(SHT_rv) &
                bind(C, name="VEC_vector_string_count_bufferify")
            use iso_c_binding, only : C_CHAR, C_INT, C_SIZE_T
            implicit none
            character(kind=C_CHAR), intent(IN) :: arg(*)
            integer(C_SIZE_T), intent(IN), value :: SHT_arg_size
            integer(C_INT), intent(IN), value :: SHT_arg_len
            integer(C_INT) :: SHT_rv
        end function c_vector_string_count_bufferify
    end interface

    ! ----------------------------------------
    ! Function:  std::vector<int> ReturnVectorAlloc +rank(1)
    ! Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
    ! Requested: c_function_vector_scalar_cdesc_allocatable
    ! Match:     c_function_vector_cdesc
    ! ----------------------------------------
    ! Argument:  int n +value
    ! Attrs:     +intent(in)
    ! Requested: c_in_native_scalar
    ! Match:     c_default
    interface
        subroutine c_return_vector_alloc_bufferify(n, SHT_rv) &
                bind(C, name="VEC_return_vector_alloc_bufferify")
            use iso_c_binding, only : C_INT
            import :: VEC_SHROUD_array
            implicit none
            integer(C_INT), value, intent(IN) :: n
            type(VEC_SHROUD_array), intent(OUT) :: SHT_rv
        end subroutine c_return_vector_alloc_bufferify
    end interface

    interface
        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

    interface
        ! helper copy_array_double
        ! Copy contents of context into c_var.
        subroutine VEC_SHROUD_copy_array_double(context, c_var, c_var_size) &
            bind(C, name="VEC_ShroudCopyArray")
            use iso_c_binding, only : C_DOUBLE, C_SIZE_T
            import VEC_SHROUD_array
            type(VEC_SHROUD_array), intent(IN) :: context
            real(C_DOUBLE), intent(OUT) :: c_var(*)
            integer(C_SIZE_T), value :: c_var_size
        end subroutine VEC_SHROUD_copy_array_double
    end interface

    interface
        ! helper copy_array_int
        ! Copy contents of context into c_var.
        subroutine VEC_SHROUD_copy_array_int(context, c_var, c_var_size) &
            bind(C, name="VEC_ShroudCopyArray")
            use iso_c_binding, only : C_INT, C_SIZE_T
            import VEC_SHROUD_array
            type(VEC_SHROUD_array), intent(IN) :: context
            integer(C_INT), intent(OUT) :: c_var(*)
            integer(C_SIZE_T), value :: c_var_size
        end subroutine VEC_SHROUD_copy_array_int
    end interface

contains

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  int vector_sum
    ! Attrs:     +intent(function)
    ! Requested: f_function_native_scalar
    ! Match:     f_function
    ! Attrs:     +intent(function)
    ! Requested: c_function_native_scalar
    ! Match:     c_function
    ! ----------------------------------------
    ! Argument:  const std::vector<int> & arg +rank(1)
    ! Attrs:     +intent(in)
    ! Requested: f_in_vector_&_buf_native
    ! Match:     f_in_vector_buf
    ! Attrs:     +api(buf)+intent(in)
    ! Requested: c_in_vector_&_buf_native
    ! Match:     c_in_vector_buf
    ! start vector_sum
    function vector_sum(arg) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_SIZE_T
        integer(C_INT), intent(IN) :: arg(:)
        integer(C_INT) :: SHT_rv
        ! splicer begin function.vector_sum
        SHT_rv = c_vector_sum_bufferify(arg, size(arg, kind=C_SIZE_T))
        ! splicer end function.vector_sum
    end function vector_sum
    ! end vector_sum

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void vector_iota_out
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +intent(out)+rank(1)
    ! Attrs:     +intent(out)
    ! Requested: f_out_vector_&_cdesc_native
    ! Match:     f_out_vector_cdesc
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native
    ! Match:     c_out_vector_cdesc
    !>
    !! \brief Copy vector into Fortran input array
    !!
    !<
    ! start vector_iota_out
    subroutine vector_iota_out(arg)
        use iso_c_binding, only : C_INT, C_SIZE_T
        integer(C_INT), intent(OUT) :: arg(:)
        ! splicer begin function.vector_iota_out
        type(VEC_SHROUD_array) :: SHT_arg_cdesc
        call c_vector_iota_out_bufferify(SHT_arg_cdesc)
        call VEC_SHROUD_copy_array_int(SHT_arg_cdesc, arg, &
            size(arg,kind=C_SIZE_T))
        ! splicer end function.vector_iota_out
    end subroutine vector_iota_out
    ! end vector_iota_out

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void vector_iota_out_with_num
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +intent(out)+rank(1)
    ! Attrs:     +intent(out)
    ! Requested: f_out_vector_&_cdesc_native
    ! Match:     f_out_vector_cdesc
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native
    ! Match:     c_out_vector_cdesc
    !>
    !! \brief Copy vector into Fortran input array
    !!
    !! Convert subroutine in to a function and
    !! return the number of items copied into argument
    !! by setting fstatements for both C and Fortran.
    !<
    ! start vector_iota_out_with_num
    function vector_iota_out_with_num(arg) &
            result(num)
        use iso_c_binding, only : C_INT, C_LONG, C_SIZE_T
        integer(C_INT), intent(OUT) :: arg(:)
        ! splicer begin function.vector_iota_out_with_num
        type(VEC_SHROUD_array) :: SHT_arg_cdesc
        integer(C_LONG) :: num
        num = c_vector_iota_out_with_num_bufferify(SHT_arg_cdesc)
        call VEC_SHROUD_copy_array_int(SHT_arg_cdesc, arg, &
            size(arg,kind=C_SIZE_T))
        ! splicer end function.vector_iota_out_with_num
    end function vector_iota_out_with_num
    ! end vector_iota_out_with_num

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void vector_iota_out_with_num2
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +intent(out)+rank(1)
    ! Attrs:     +intent(out)
    ! Requested: f_out_vector_&_cdesc_native
    ! Match:     f_out_vector_cdesc
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native
    ! Match:     c_out_vector_cdesc
    !>
    !! \brief Copy vector into Fortran input array
    !!
    !! Convert subroutine in to a function.
    !! Return the number of items copied into argument
    !! by setting fstatements for the Fortran wrapper only.
    !<
    ! start vector_iota_out_with_num2
    function vector_iota_out_with_num2(arg) &
            result(num)
        use iso_c_binding, only : C_INT, C_LONG, C_SIZE_T
        integer(C_INT), intent(OUT) :: arg(:)
        ! splicer begin function.vector_iota_out_with_num2
        type(VEC_SHROUD_array) :: SHT_arg_cdesc
        integer(C_LONG) :: num
        call c_vector_iota_out_with_num2_bufferify(SHT_arg_cdesc)
        call VEC_SHROUD_copy_array_int(SHT_arg_cdesc, arg, &
            size(arg,kind=C_SIZE_T))
        num = SHT_arg_cdesc%size
        ! splicer end function.vector_iota_out_with_num2
    end function vector_iota_out_with_num2
    ! end vector_iota_out_with_num2

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void vector_iota_out_alloc
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +deref(allocatable)+intent(out)+rank(1)
    ! Attrs:     +deref(allocatable)+intent(out)
    ! Requested: f_out_vector_&_cdesc_allocatable_native
    ! Match:     f_out_vector_cdesc_allocatable
    ! Attrs:     +api(cdesc)+deref(allocatable)+intent(out)
    ! Requested: c_out_vector_&_cdesc_allocatable_native
    ! Match:     c_out_vector_cdesc
    !>
    !! \brief Copy vector into Fortran allocatable array
    !!
    !<
    ! start vector_iota_out_alloc
    subroutine vector_iota_out_alloc(arg)
        use iso_c_binding, only : C_INT, C_SIZE_T
        integer(C_INT), intent(OUT), allocatable :: arg(:)
        ! splicer begin function.vector_iota_out_alloc
        type(VEC_SHROUD_array) :: SHT_arg_cdesc
        call c_vector_iota_out_alloc_bufferify(SHT_arg_cdesc)
        allocate(arg(SHT_arg_cdesc%size))
        call VEC_SHROUD_copy_array_int(SHT_arg_cdesc, arg, &
            size(arg,kind=C_SIZE_T))
        ! splicer end function.vector_iota_out_alloc
    end subroutine vector_iota_out_alloc
    ! end vector_iota_out_alloc

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void vector_iota_inout_alloc
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +deref(allocatable)+intent(inout)+rank(1)
    ! Attrs:     +deref(allocatable)+intent(inout)
    ! Requested: f_inout_vector_&_cdesc_allocatable_native
    ! Match:     f_inout_vector_cdesc_allocatable
    ! Attrs:     +api(cdesc)+deref(allocatable)+intent(inout)
    ! Requested: c_inout_vector_&_cdesc_allocatable_native
    ! Match:     c_inout_vector_cdesc
    !>
    !! \brief Copy vector into Fortran allocatable array
    !!
    !<
    ! start vector_iota_inout_alloc
    subroutine vector_iota_inout_alloc(arg)
        use iso_c_binding, only : C_INT, C_SIZE_T
        integer(C_INT), intent(INOUT), allocatable :: arg(:)
        ! splicer begin function.vector_iota_inout_alloc
        type(VEC_SHROUD_array) :: SHT_arg_cdesc
        call c_vector_iota_inout_alloc_bufferify(arg, &
            size(arg, kind=C_SIZE_T), SHT_arg_cdesc)
        if (allocated(arg)) deallocate(arg)
        allocate(arg(SHT_arg_cdesc%size))
        call VEC_SHROUD_copy_array_int(SHT_arg_cdesc, arg, &
            size(arg,kind=C_SIZE_T))
        ! splicer end function.vector_iota_inout_alloc
    end subroutine vector_iota_inout_alloc
    ! end vector_iota_inout_alloc

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void vector_increment
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<int> & arg +rank(1)
    ! Attrs:     +intent(inout)
    ! Requested: f_inout_vector_&_cdesc_native
    ! Match:     f_inout_vector_cdesc
    ! Attrs:     +api(cdesc)+intent(inout)
    ! Requested: c_inout_vector_&_cdesc_native
    ! Match:     c_inout_vector_cdesc
    subroutine vector_increment(arg)
        use iso_c_binding, only : C_INT, C_SIZE_T
        integer(C_INT), intent(INOUT) :: arg(:)
        ! splicer begin function.vector_increment
        type(VEC_SHROUD_array) :: SHT_arg_cdesc
        call c_vector_increment_bufferify(arg, size(arg, kind=C_SIZE_T), &
            SHT_arg_cdesc)
        call VEC_SHROUD_copy_array_int(SHT_arg_cdesc, arg, &
            size(arg,kind=C_SIZE_T))
        ! splicer end function.vector_increment
    end subroutine vector_increment

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void vector_iota_out_d
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  std::vector<double> & arg +intent(out)+rank(1)
    ! Attrs:     +intent(out)
    ! Requested: f_out_vector_&_cdesc_native
    ! Match:     f_out_vector_cdesc
    ! Attrs:     +api(cdesc)+intent(out)
    ! Requested: c_out_vector_&_cdesc_native
    ! Match:     c_out_vector_cdesc
    !>
    !! \brief Copy vector into Fortran input array
    !!
    !<
    subroutine vector_iota_out_d(arg)
        use iso_c_binding, only : C_DOUBLE, C_SIZE_T
        real(C_DOUBLE), intent(OUT) :: arg(:)
        ! splicer begin function.vector_iota_out_d
        type(VEC_SHROUD_array) :: SHT_arg_cdesc
        call c_vector_iota_out_d_bufferify(SHT_arg_cdesc)
        call VEC_SHROUD_copy_array_double(SHT_arg_cdesc, arg, &
            size(arg,kind=C_SIZE_T))
        ! splicer end function.vector_iota_out_d
    end subroutine vector_iota_out_d

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  int vector_string_count
    ! Attrs:     +intent(function)
    ! Requested: f_function_native_scalar
    ! Match:     f_function
    ! Attrs:     +intent(function)
    ! Requested: c_function_native_scalar
    ! Match:     c_function
    ! ----------------------------------------
    ! Argument:  const std::vector<std::string> & arg +rank(1)
    ! Attrs:     +intent(in)
    ! Requested: f_in_vector_&_buf_string
    ! Match:     f_in_vector_buf_string
    ! Attrs:     +api(buf)+intent(in)
    ! Requested: c_in_vector_&_buf_string
    ! Match:     c_in_vector_buf_string
    !>
    !! \brief count number of underscore in vector of strings
    !!
    !<
    function vector_string_count(arg) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_SIZE_T
        character(len=*), intent(IN) :: arg(:)
        integer(C_INT) :: SHT_rv
        ! splicer begin function.vector_string_count
        SHT_rv = c_vector_string_count_bufferify(arg, &
            size(arg, kind=C_SIZE_T), len(arg, kind=C_INT))
        ! splicer end function.vector_string_count
    end function vector_string_count

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  std::vector<int> ReturnVectorAlloc +rank(1)
    ! Attrs:     +deref(allocatable)+intent(function)
    ! Requested: f_function_vector_scalar_cdesc_allocatable
    ! Match:     f_function_vector_cdesc_allocatable
    ! Attrs:     +api(cdesc)+deref(allocatable)+intent(function)
    ! Requested: c_function_vector_scalar_cdesc_allocatable
    ! Match:     c_function_vector_cdesc
    ! ----------------------------------------
    ! Argument:  int n +value
    ! Attrs:     +intent(in)
    ! Requested: f_in_native_scalar
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_in_native_scalar
    ! Match:     c_default
    !>
    !! Implement iota function.
    !! Return a vector as an ALLOCATABLE array.
    !! Copy results into the new array.
    !<
    function return_vector_alloc(n) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT, C_SIZE_T
        integer(C_INT), value, intent(IN) :: n
        integer(C_INT), allocatable :: SHT_rv(:)
        ! splicer begin function.return_vector_alloc
        type(VEC_SHROUD_array) :: SHT_rv_cdesc
        call c_return_vector_alloc_bufferify(n, SHT_rv_cdesc)
        allocate(SHT_rv(SHT_rv_cdesc%size))
        call VEC_SHROUD_copy_array_int(SHT_rv_cdesc, SHT_rv, &
            size(SHT_rv,kind=C_SIZE_T))
        ! splicer end function.return_vector_alloc
    end function return_vector_alloc

    ! splicer begin additional_functions
    ! splicer end additional_functions

end module vectors_mod
