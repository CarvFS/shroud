{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "vectors.hpp"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "12",
                "ast": {
                    "declarator": {
                        "name": "vector_sum",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_sum(const std::vector<int> &arg)",
                "declgen": "int vector_sum(const std::vector<int> & arg +rank(1))",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_sum_bufferify",
                    "F_arg_c_call": "arg,\t size(arg, kind=C_SIZE_T)",
                    "F_arguments": "arg",
                    "F_name_function": "vector_sum",
                    "F_name_generic": "vector_sum",
                    "F_name_impl": "vector_sum",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "vector_sum",
                    "underscore_name": "vector_sum"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "12 ****************************************",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_sum",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_sum(const std::vector<int> &arg)",
                "declgen": "int vector_sum(const std::vector<int> & arg +rank(1))",
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<int *>\t(&SHCXX_arg)",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_vector_&_buf_native",
                            "stmt1": "c_in_vector_buf"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "int",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_in_vector_&_buf_native",
                            "stmt1": "f_in_vector_buf",
                            "stmtc0": "c_in_vector_&_buf_native",
                            "stmtc1": "c_in_vector_buf"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "VEC_vector_sum_bufferify",
                    "C_prototype": "int *arg,\t size_t SHT_arg_size",
                    "C_return_type": "int",
                    "F_C_arguments": "arg,\t SHT_arg_size",
                    "F_C_name": "c_vector_sum_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "vector_sum",
                    "function_suffix": "_bufferify",
                    "underscore_name": "vector_sum"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "integer(C_INT)"
                    }
                }
            },
            {
                "<FUNCTION>": "1 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "13",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_iota_out_bufferify",
                    "F_arg_c_call": "SHT_arg_cdesc",
                    "F_arguments": "arg",
                    "F_name_function": "vector_iota_out",
                    "F_name_generic": "vector_iota_out",
                    "F_name_impl": "vector_iota_out",
                    "F_subprogram": "subroutine",
                    "function_name": "vector_iota_out",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "vector_iota_out"
                }
            },
            {
                "<FUNCTION>": "13 ****************************************",
                "_PTR_C_CXX_index": "1",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "cdesc",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_vector_&_cdesc_native",
                            "stmt1": "c_out_vector_cdesc"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "hnamefunc0": "VEC_SHROUD_copy_array_int",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_out_vector_&_cdesc_native",
                            "stmt1": "f_out_vector_cdesc",
                            "stmtc0": "c_out_vector_&_cdesc_native",
                            "stmtc1": "c_out_vector_cdesc"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "VEC_vector_iota_out_bufferify",
                    "C_prototype": "VEC_SHROUD_array *SHT_arg_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_arg_cdesc",
                    "F_C_name": "c_vector_iota_out_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "vector_iota_out",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "vector_iota_out"
                }
            },
            {
                "<FUNCTION>": "2 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "14",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array",
                    "description": "Convert subroutine in to a function and\nreturn the number of items copied into argument\nby setting fstatements for both C and Fortran.\n"
                },
                "fstatements": {
                    "c": {
                        "ret": [
                            "return SHT_arg_cdesc->size;"
                        ],
                        "return_type": "long"
                    },
                    "c_buf": {
                        "ret": [
                            "return SHT_arg_cdesc->size;"
                        ],
                        "return_type": "long"
                    },
                    "f": {
                        "call": [
                            "{F_result} = {F_C_call}({F_arg_c_call})"
                        ],
                        "declare": [
                            "integer(C_LONG) :: {F_result}"
                        ],
                        "f_module": {
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "result": "num"
                    }
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_iota_out_with_num_bufferify",
                    "F_arg_c_call": "SHT_arg_cdesc",
                    "F_arguments": "arg",
                    "F_name_function": "vector_iota_out_with_num",
                    "F_name_generic": "vector_iota_out_with_num",
                    "F_name_impl": "vector_iota_out_with_num",
                    "F_result": "num",
                    "F_result_clause": "\fresult(num)",
                    "F_subprogram": "function",
                    "function_name": "vector_iota_out_with_num",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "vector_iota_out_with_num"
                }
            },
            {
                "<FUNCTION>": "14 ****************************************",
                "_PTR_C_CXX_index": "2",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "cdesc",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array",
                    "description": "Convert subroutine in to a function and\nreturn the number of items copied into argument\nby setting fstatements for both C and Fortran.\n"
                },
                "fstatements": {
                    "c": {
                        "ret": [
                            "return SHT_arg_cdesc->size;"
                        ],
                        "return_type": "long"
                    },
                    "c_buf": {
                        "ret": [
                            "return SHT_arg_cdesc->size;"
                        ],
                        "return_type": "long"
                    },
                    "f": {
                        "call": [
                            "{F_result} = {F_C_call}({F_arg_c_call})"
                        ],
                        "declare": [
                            "integer(C_LONG) :: {F_result}"
                        ],
                        "f_module": {
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "result": "num"
                    }
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_vector_&_cdesc_native",
                            "stmt1": "c_out_vector_cdesc"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "hnamefunc0": "VEC_SHROUD_copy_array_int",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_out_vector_&_cdesc_native",
                            "stmt1": "f_out_vector_cdesc",
                            "stmtc0": "c_out_vector_&_cdesc_native",
                            "stmtc1": "c_out_vector_cdesc"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "VEC_vector_iota_out_with_num_bufferify",
                    "C_prototype": "VEC_SHROUD_array *SHT_arg_cdesc",
                    "C_return_type": "long",
                    "F_C_arguments": "SHT_arg_cdesc",
                    "F_C_name": "c_vector_iota_out_with_num_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "function_name": "vector_iota_out_with_num",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "vector_iota_out_with_num"
                }
            },
            {
                "<FUNCTION>": "3 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "15",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num2",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num2(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num2(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array",
                    "description": "Convert subroutine in to a function.\nReturn the number of items copied into argument\nby setting fstatements for the Fortran wrapper only.\n"
                },
                "fstatements": {
                    "f": {
                        "declare": [
                            "integer(C_LONG) :: num"
                        ],
                        "f_module": {
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "post_call": [
                            "num = SHT_arg_cdesc%size"
                        ],
                        "result": "num"
                    }
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_iota_out_with_num2_bufferify",
                    "F_arg_c_call": "SHT_arg_cdesc",
                    "F_arguments": "arg",
                    "F_name_function": "vector_iota_out_with_num2",
                    "F_name_generic": "vector_iota_out_with_num2",
                    "F_name_impl": "vector_iota_out_with_num2",
                    "F_result": "num",
                    "F_result_clause": "\fresult(num)",
                    "F_subprogram": "function",
                    "function_name": "vector_iota_out_with_num2",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "vector_iota_out_with_num2"
                }
            },
            {
                "<FUNCTION>": "15 ****************************************",
                "_PTR_C_CXX_index": "3",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_with_num2",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "cdesc",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_with_num2(std::vector<int> &arg+intent(out))",
                "declgen": "void vector_iota_out_with_num2(std::vector<int> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array",
                    "description": "Convert subroutine in to a function.\nReturn the number of items copied into argument\nby setting fstatements for the Fortran wrapper only.\n"
                },
                "fstatements": {
                    "f": {
                        "declare": [
                            "integer(C_LONG) :: num"
                        ],
                        "f_module": {
                            "iso_c_binding": [
                                "C_LONG"
                            ]
                        },
                        "post_call": [
                            "num = SHT_arg_cdesc%size"
                        ],
                        "result": "num"
                    }
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_vector_&_cdesc_native",
                            "stmt1": "c_out_vector_cdesc"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "hnamefunc0": "VEC_SHROUD_copy_array_int",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_out_vector_&_cdesc_native",
                            "stmt1": "f_out_vector_cdesc",
                            "stmtc0": "c_out_vector_&_cdesc_native",
                            "stmtc1": "c_out_vector_cdesc"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "VEC_vector_iota_out_with_num2_bufferify",
                    "C_prototype": "VEC_SHROUD_array *SHT_arg_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_arg_cdesc",
                    "F_C_name": "c_vector_iota_out_with_num2_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "vector_iota_out_with_num2",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "vector_iota_out_with_num2"
                }
            },
            {
                "<FUNCTION>": "4 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "16",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_alloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))",
                "declgen": "void vector_iota_out_alloc(std::vector<int> & arg +deref(allocatable)+intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_iota_out_alloc_bufferify",
                    "F_arg_c_call": "SHT_arg_cdesc",
                    "F_arguments": "arg",
                    "F_name_function": "vector_iota_out_alloc",
                    "F_name_generic": "vector_iota_out_alloc",
                    "F_name_impl": "vector_iota_out_alloc",
                    "F_subprogram": "subroutine",
                    "function_name": "vector_iota_out_alloc",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "vector_iota_out_alloc"
                }
            },
            {
                "<FUNCTION>": "16 ****************************************",
                "_PTR_C_CXX_index": "4",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_alloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))",
                "declgen": "void vector_iota_out_alloc(std::vector<int> & arg +deref(allocatable)+intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_out_vector_&_cdesc_allocatable_native",
                            "stmt1": "c_out_vector_cdesc"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "int",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "OUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "hnamefunc0": "VEC_SHROUD_copy_array_int",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_out_vector_&_cdesc_allocatable_native",
                            "stmt1": "f_out_vector_cdesc_allocatable",
                            "stmtc0": "c_out_vector_&_cdesc_allocatable_native",
                            "stmtc1": "c_out_vector_cdesc"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "VEC_vector_iota_out_alloc_bufferify",
                    "C_prototype": "VEC_SHROUD_array *SHT_arg_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_arg_cdesc",
                    "F_C_name": "c_vector_iota_out_alloc_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "vector_iota_out_alloc",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "vector_iota_out_alloc"
                }
            },
            {
                "<FUNCTION>": "5 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "17",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_inout_alloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "intent": "inout",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "deref": "allocatable",
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_inout_alloc(std::vector<int> &arg+intent(inout)+deref(allocatable))",
                "declgen": "void vector_iota_inout_alloc(std::vector<int> & arg +deref(allocatable)+intent(inout)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_iota_inout_alloc_bufferify",
                    "F_arg_c_call": "arg,\t size(arg, kind=C_SIZE_T),\t SHT_arg_cdesc",
                    "F_arguments": "arg",
                    "F_name_function": "vector_iota_inout_alloc",
                    "F_name_generic": "vector_iota_inout_alloc",
                    "F_name_impl": "vector_iota_inout_alloc",
                    "F_subprogram": "subroutine",
                    "function_name": "vector_iota_inout_alloc",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "vector_iota_inout_alloc"
                }
            },
            {
                "<FUNCTION>": "17 ****************************************",
                "_PTR_C_CXX_index": "5",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_inout_alloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "allocatable",
                                "intent": "inout",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "cdesc",
                                "deref": "allocatable",
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_inout_alloc(std::vector<int> &arg+intent(inout)+deref(allocatable))",
                "declgen": "void vector_iota_inout_alloc(std::vector<int> & arg +deref(allocatable)+intent(inout)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran allocatable array"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_inout_vector_&_cdesc_allocatable_native",
                            "stmt1": "c_inout_vector_cdesc"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "int",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "hnamefunc0": "VEC_SHROUD_copy_array_int",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_inout_vector_&_cdesc_allocatable_native",
                            "stmt1": "f_inout_vector_cdesc_allocatable",
                            "stmtc0": "c_inout_vector_&_cdesc_allocatable_native",
                            "stmtc1": "c_inout_vector_cdesc"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "VEC_vector_iota_inout_alloc_bufferify",
                    "C_prototype": "int *arg,\t size_t SHT_arg_size,\t VEC_SHROUD_array *SHT_arg_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "arg,\t SHT_arg_size,\t SHT_arg_cdesc",
                    "F_C_name": "c_vector_iota_inout_alloc_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "vector_iota_inout_alloc",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "vector_iota_inout_alloc"
                }
            },
            {
                "<FUNCTION>": "6 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "18",
                "ast": {
                    "declarator": {
                        "name": "vector_increment",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_increment(std::vector<int> &arg)",
                "declgen": "void vector_increment(std::vector<int> & arg +rank(1))",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_increment_bufferify",
                    "F_arg_c_call": "arg,\t size(arg, kind=C_SIZE_T),\t SHT_arg_cdesc",
                    "F_arguments": "arg",
                    "F_name_function": "vector_increment",
                    "F_name_generic": "vector_increment",
                    "F_name_impl": "vector_increment",
                    "F_subprogram": "subroutine",
                    "function_name": "vector_increment",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "vector_increment"
                }
            },
            {
                "<FUNCTION>": "18 ****************************************",
                "_PTR_C_CXX_index": "6",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_increment",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "cdesc",
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_increment(std::vector<int> &arg)",
                "declgen": "void vector_increment(std::vector<int> & arg +rank(1))",
                "options": {
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "int",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "int",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "int",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "1",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_inout_vector_&_cdesc_native",
                            "stmt1": "c_inout_vector_cdesc"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "int",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "INOUT",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "arg",
                            "hnamefunc0": "VEC_SHROUD_copy_array_int",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(arg)",
                            "stmt0": "f_inout_vector_&_cdesc_native",
                            "stmt1": "f_inout_vector_cdesc",
                            "stmtc0": "c_inout_vector_&_cdesc_native",
                            "stmtc1": "c_inout_vector_cdesc"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "VEC_vector_increment_bufferify",
                    "C_prototype": "int *arg,\t size_t SHT_arg_size,\t VEC_SHROUD_array *SHT_arg_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "arg,\t SHT_arg_size,\t SHT_arg_cdesc",
                    "F_C_name": "c_vector_increment_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "vector_increment",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "vector_increment"
                }
            },
            {
                "<FUNCTION>": "7 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "19",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_d",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_d(std::vector<double> &arg+intent(out))",
                "declgen": "void vector_iota_out_d(std::vector<double> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array"
                },
                "options": {
                    "wrap_lua": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_iota_out_d_bufferify",
                    "F_arg_c_call": "SHT_arg_cdesc",
                    "F_arguments": "arg",
                    "F_name_function": "vector_iota_out_d",
                    "F_name_generic": "vector_iota_out_d",
                    "F_name_impl": "vector_iota_out_d",
                    "F_subprogram": "subroutine",
                    "function_name": "vector_iota_out_d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_subroutine",
                    "stmtc0": "c_subroutine",
                    "stmtc1": "c_subroutine",
                    "underscore_name": "vector_iota_out_d"
                }
            },
            {
                "<FUNCTION>": "19 ****************************************",
                "_PTR_C_CXX_index": "7",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_iota_out_d",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "cdesc",
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "double"
                                    ],
                                    "typemap_name": "double"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_iota_out_d(std::vector<double> &arg+intent(out))",
                "declgen": "void vector_iota_out_d(std::vector<double> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Copy vector into Fortran input array"
                },
                "options": {
                    "wrap_lua": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_type": "double",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "double",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "SHCXX_arg",
                            "cxx_type": "double",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "2",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "c_out_vector_&_cdesc_native",
                            "stmt1": "c_out_vector_cdesc"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "c_var_cdesc": "SHT_arg_cdesc",
                            "cxx_T": "double",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "OUT",
                            "f_kind": "C_DOUBLE",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "hnamefunc0": "VEC_SHROUD_copy_array_double",
                            "rank": "1",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "size": "size(arg)",
                            "stmt0": "f_out_vector_&_cdesc_native",
                            "stmt1": "f_out_vector_cdesc",
                            "stmtc0": "c_out_vector_&_cdesc_native",
                            "stmtc1": "c_out_vector_cdesc"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "VEC_vector_iota_out_d_bufferify",
                    "C_prototype": "VEC_SHROUD_array *SHT_arg_cdesc",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_arg_cdesc",
                    "F_C_name": "c_vector_iota_out_d_bufferify",
                    "F_C_subprogram": "subroutine",
                    "function_name": "vector_iota_out_d",
                    "function_suffix": "_bufferify",
                    "stmt0": "c_subroutine",
                    "stmt1": "c_subroutine",
                    "underscore_name": "vector_iota_out_d"
                }
            },
            {
                "<FUNCTION>": "8 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "20",
                "ast": {
                    "declarator": {
                        "name": "vector_string_count",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_string_count(const std::vector< std::string > &arg)",
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +rank(1))",
                "doxygen": {
                    "brief": "count number of underscore in vector of strings",
                    "decription": "The input will be copied in order to create the C++ argument\n"
                },
                "options": {
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_vector_string_count_bufferify",
                    "F_arg_c_call": "arg,\t size(arg, kind=C_SIZE_T),\t len(arg, kind=C_INT)",
                    "F_arguments": "arg",
                    "F_name_function": "vector_string_count",
                    "F_name_generic": "vector_string_count",
                    "F_name_impl": "vector_string_count",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "vector_string_count",
                    "underscore_name": "vector_string_count"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "cxx_type": "int",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    }
                }
            },
            {
                "<FUNCTION>": "20 ****************************************",
                "_PTR_C_CXX_index": "8",
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "vector_string_count",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "api": "buf",
                                "intent": "in"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int vector_string_count(const std::vector< std::string > &arg)",
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +rank(1))",
                "doxygen": {
                    "brief": "count number of underscore in vector of strings",
                    "decription": "The input will be copied in order to create the C++ argument\n"
                },
                "options": {
                    "wrap_python": false
                },
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_local_i": "SHC_arg_i",
                            "c_local_n": "SHC_arg_n",
                            "c_local_s": "SHC_arg_s",
                            "c_member": "->",
                            "c_type": "char",
                            "c_var": "arg",
                            "c_var_len": "SHT_arg_len",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "std::string",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "const_cast<std::string *>\t(&SHCXX_arg)",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_OTHER",
                            "stmt0": "c_in_vector_&_buf_string",
                            "stmt1": "c_in_vector_buf_string"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_local_i": "SHC_arg_i",
                            "c_local_n": "SHC_arg_n",
                            "c_local_s": "SHC_arg_s",
                            "c_var": "arg",
                            "c_var_len": "SHT_arg_len",
                            "c_var_size": "SHT_arg_size",
                            "cxx_T": "std::string",
                            "f_assumed_shape": "(:)",
                            "f_c_dimension": "(*)",
                            "f_intent": "IN",
                            "f_kind": "C_CHAR",
                            "f_type": "character(*)",
                            "f_var": "arg",
                            "rank": "1",
                            "sh_type": "SH_TYPE_OTHER",
                            "size": "size(arg)",
                            "stmt0": "f_in_vector_&_buf_string",
                            "stmt1": "f_in_vector_buf_string",
                            "stmtc0": "c_in_vector_&_buf_string",
                            "stmtc1": "c_in_vector_buf_string"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "SHCXX_arg",
                    "C_name": "VEC_vector_string_count_bufferify",
                    "C_prototype": "const char *arg,\t size_t SHT_arg_size,\t int SHT_arg_len",
                    "C_return_type": "int",
                    "F_C_arguments": "arg,\t SHT_arg_size,\t SHT_arg_len",
                    "F_C_name": "c_vector_string_count_bufferify",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "vector_string_count",
                    "function_suffix": "_bufferify",
                    "underscore_name": "vector_string_count"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "f_intent": "OUT",
                        "f_type": "integer(C_INT)"
                    }
                }
            },
            {
                "<FUNCTION>": "9 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "vector_string_fill",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "out"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))",
                "declgen": "void vector_string_fill(std::vector<std::string> & arg +intent(out)+rank(1))",
                "doxygen": {
                    "brief": "Fill in arg with some animal names",
                    "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "function_name": "vector_string_fill",
                    "underscore_name": "vector_string_fill"
                }
            },
            {
                "<FUNCTION>": "10 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "vector_string_append",
                        "pointer": []
                    },
                    "metaattrs": {
                        "intent": "subroutine"
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "inout",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "intent": "inout"
                            },
                            "specifier": [
                                "std::vector"
                            ],
                            "template_arguments": [
                                {
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                }
                            ],
                            "typemap_name": "std::vector"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))",
                "declgen": "void vector_string_append(std::vector<std::string> & arg +intent(inout)+rank(1))",
                "doxygen": {
                    "brief": "append '-like' to names."
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {},
                "zz_fmtdict": {
                    "function_name": "vector_string_append",
                    "underscore_name": "vector_string_append"
                }
            },
            {
                "<FUNCTION>": "11 ****************************************",
                "C_generated_path": [
                    "arg_to_buffer"
                ],
                "_PTR_F_C_index": "21",
                "ast": {
                    "attrs": {
                        "rank": 1
                    },
                    "declarator": {
                        "name": "ReturnVectorAlloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "n",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "std::vector"
                    ],
                    "template_arguments": [
                        {
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "typemap_name": "std::vector"
                },
                "decl": "std::vector<int> ReturnVectorAlloc(int n)",
                "declgen": "std::vector<int> ReturnVectorAlloc(int n +value) +rank(1)",
                "doxygen": {
                    "description": "Implement iota function.\nReturn a vector as an ALLOCATABLE array.\nCopy results into the new array.\n"
                },
                "options": {},
                "wrap": {
                    "fortran": true
                },
                "zz_fmtdict": {
                    "F_C_call": "c_return_vector_alloc_bufferify",
                    "F_arg_c_call": "SHT_rv_cdesc,\t n",
                    "F_arguments": "n",
                    "F_name_function": "return_vector_alloc",
                    "F_name_generic": "return_vector_alloc",
                    "F_name_impl": "return_vector_alloc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "ReturnVectorAlloc",
                    "underscore_name": "return_vector_alloc"
                },
                "zz_fmtresult": {
                    "fmtf": {
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_T": "int",
                        "cxx_type": "std::vector<{cxx_T}>",
                        "f_assumed_shape": "(:)",
                        "f_c_dimension": "(*)",
                        "f_intent": "OUT",
                        "f_kind": "C_INT",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "hnamefunc0": "VEC_SHROUD_copy_array_int",
                        "rank": "1",
                        "sh_type": "SH_TYPE_INT",
                        "size": "size(SHT_rv)",
                        "stmt0": "f_function_vector_scalar_cdesc_allocatable",
                        "stmt1": "f_function_vector_cdesc_allocatable",
                        "stmtc0": "c_function_vector_scalar_cdesc_allocatable",
                        "stmtc1": "c_function_vector_cdesc"
                    }
                }
            },
            {
                "<FUNCTION>": "21 ****************************************",
                "_PTR_C_CXX_index": "11",
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "rank": 1
                    },
                    "declarator": {
                        "name": "ReturnVectorAlloc",
                        "pointer": []
                    },
                    "metaattrs": {
                        "api": "cdesc",
                        "deref": "allocatable",
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "n",
                                "pointer": []
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "std::vector"
                    ],
                    "template_arguments": [
                        {
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "typemap_name": "std::vector"
                },
                "decl": "std::vector<int> ReturnVectorAlloc(int n)",
                "declgen": "std::vector<int> ReturnVectorAlloc(int n +value) +rank(1)",
                "doxygen": {
                    "description": "Implement iota function.\nReturn a vector as an ALLOCATABLE array.\nCopy results into the new array.\n"
                },
                "options": {},
                "splicer_group": "buf",
                "wrap": {
                    "c": true,
                    "f_c": true
                },
                "zz_fmtargs": {
                    "n": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "int",
                            "c_var": "n",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&n",
                            "cxx_type": "int",
                            "cxx_var": "n",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "n",
                            "c_var": "n",
                            "f_intent": "IN",
                            "f_kind": "C_INT",
                            "f_type": "integer(C_INT)",
                            "f_var": "n",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "n",
                    "C_name": "VEC_return_vector_alloc_bufferify",
                    "C_prototype": "VEC_SHROUD_array *SHT_rv_cdesc,\t int n",
                    "C_return_type": "void",
                    "F_C_arguments": "SHT_rv,\t n",
                    "F_C_name": "c_return_vector_alloc_bufferify",
                    "F_C_result_clause": "",
                    "F_C_subprogram": "subroutine",
                    "cxx_rv_decl": "*SHC_rv",
                    "function_name": "ReturnVectorAlloc",
                    "function_suffix": "_bufferify",
                    "underscore_name": "return_vector_alloc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_type": null,
                        "c_var": "SHC_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "cxx_T": "int",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_nonconst_ptr": "SHC_rv",
                        "cxx_type": "std::vector<{cxx_T}>",
                        "cxx_var": "SHC_rv",
                        "idtor": "1",
                        "sh_type": "SH_TYPE_OTHER",
                        "stmt0": "c_function_vector_scalar_cdesc_allocatable",
                        "stmt1": "c_function_vector_cdesc"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "c_var_cdesc": "SHT_rv_cdesc",
                        "f_intent": "OUT",
                        "f_type": null
                    }
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "vectors"
        ],
        "wrap": {
            "c": true,
            "fortran": true
        }
    }
}