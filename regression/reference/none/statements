***** Fortran/C
root
  c
    ctor -- c_ctor
    dtor -- c_dtor
    function
      char
        * -- c_function_char_*
          buf -- c_function_char_*_buf
            allocatable -- c_function_char_*_buf_allocatable
          cfi -- c_function_char_*_cfi
            allocatable -- c_function_char_*_cfi_allocatable
        scalar -- c_function_char_scalar
          buf -- c_function_char_scalar_buf
          cfi -- c_function_char_scalar_cfi
      native
        & -- c_function_native_*/&/**
        * -- c_function_native_*/&/**
          buf -- c_function_native_*_buf
          scalar -- c_function_native_*_scalar
        ** -- c_function_native_*/&/**
      shadow -- c_function_shadow
        scalar -- c_function_shadow_scalar
      string
        & -- c_function_string_scalar/*/&
          buf -- c_function_string_scalar/*/&_buf
            allocatable -- c_function_string_*/&_buf_allocatable
          cfi -- c_function_string_scalar/*/&_cfi
            allocatable -- c_function_string_*/&_cfi_allocatable
        * -- c_function_string_scalar/*/&
          buf -- c_function_string_scalar/*/&_buf
            allocatable -- c_function_string_*/&_buf_allocatable
          cfi -- c_function_string_scalar/*/&_cfi
            allocatable -- c_function_string_*/&_cfi_allocatable
        scalar -- c_function_string_scalar/*/&
          buf -- c_function_string_scalar/*/&_buf
            allocatable -- c_function_string_scalar_buf_allocatable
          cfi -- c_function_string_scalar/*/&_cfi
            allocatable -- c_function_string_scalar_cfi_allocatable
      struct -- c_function_struct
        * -- c_function_struct_*
      vector
        buf -- c_function_vector_buf
    getter -- c_getter
      native
        scalar -- c_getter_native_scalar
      string
        scalar
          buf -- c_getter_string_scalar_buf
    in
      char
        *
          buf -- c_in_char_*_buf
          cfi -- c_in_char_*_cfi
        ** -- c_in_char_**
          buf -- c_in_char_**_buf
        scalar -- c_in_char_scalar
      native
        *
          cdesc -- c_in/out/inout_native_*_cdesc
          cfi -- c_in_native_*_cfi
        ** -- c_in_native_**
      shadow -- c_in_shadow
        scalar -- c_in_shadow_scalar
      string
        & -- c_in_string_*/&
          buf -- c_in_string_*/&_buf
          cfi -- c_in_string_scalar/*/&_cfi
        * -- c_in_string_*/&
          buf -- c_in_string_*/&_buf
          cfi -- c_in_string_scalar/*/&_cfi
        scalar -- c_in_string_scalar
          buf -- c_in_string_scalar_buf
          cfi -- c_in_string_scalar/*/&_cfi
      struct -- c_in/out/inout_struct
      vector
        buf -- c_in_vector_buf
          string -- c_in_vector_buf_string
      void
        *
          cdesc -- c_in/out/inout_void_*_cdesc
        ** -- c_in_void_**
    inout
      char
        *
          buf -- c_inout_char_*_buf
          cfi -- c_inout_char_*_cfi
      native
        *
          cdesc -- c_in/out/inout_native_*_cdesc
      shadow -- c_inout_shadow
      string
        & -- c_inout_string_*/&
          buf -- c_inout_string_*/&_buf
          cfi -- c_inout_string_*/&_cfi
        * -- c_inout_string_*/&
          buf -- c_inout_string_*/&_buf
          cfi -- c_inout_string_*/&_cfi
      struct -- c_in/out/inout_struct
      vector
        buf -- c_inout_vector_buf
          string -- c_inout_vector_buf_string
      void
        *
          cdesc -- c_in/out/inout_void_*_cdesc
    mixin
      arg
        character
          cfi -- c_mixin_arg_character_cfi
      function
        buf -- c_mixin_function_buf
        character -- c_mixin_function_character
      in
        array
          buf -- c_mixin_in_array_buf
          string
            buf -- c_mixin_in_array_string_buf
        character
          buf -- c_mixin_in_character_buf
      inout
        array
          buf -- c_mixin_inout_array_buf
      out
        array
          buf -- c_mixin_out_array_buf
    out
      char
        *
          buf -- c_out_char_*_buf
          cfi -- c_out_char_*_cfi
      native
        *
          cdesc -- c_in/out/inout_native_*_cdesc
        *&
          buf -- c_out_native_*&_buf
        **
          buf -- c_out_native_**_buf
      string
        & -- c_out_string_*/&
          buf -- c_out_string_*/&_buf
          cfi -- c_out_string_*/&_cfi
        * -- c_out_string_*/&
          buf -- c_out_string_*/&_buf
          cfi -- c_out_string_*/&_cfi
      struct -- c_in/out/inout_struct
      vector
        buf -- c_out_vector_buf
          string -- c_out_vector_buf_string
      void
        *
          cdesc -- c_in/out/inout_void_*_cdesc
    setter -- c_setter
      native
        scalar -- c_setter_native_scalar
      string
        scalar
          buf -- c_setter_string_scalar_buf
    subroutine -- c_subroutine
  f
    ctor -- f_ctor
    function
      bool -- f_function_bool
      char
        *
          buf
            allocatable -- f_function_char_scalar/*_buf_allocatable
          cfi
            allocatable -- f_function_char_scalar/*_cfi_allocatable
          raw -- f_function_char_*_raw
        scalar
          buf
            allocatable -- f_function_char_scalar/*_buf_allocatable
          cfi
            allocatable -- f_function_char_scalar/*_cfi_allocatable
      native
        & -- f_function_native_&
          buf
            pointer -- f_function_native_&_buf_pointer
        *
          buf
            allocatable -- f_function_native_*_buf_allocatable
            pointer -- f_function_native_*_buf_pointer
              caller -- f_function_native_*_buf_pointer_caller
          pointer -- f_function_native_*_pointer
          raw -- f_function_native_*_raw
          scalar -- f_function_native_*_scalar
        ** -- f_function_native_**
      shadow -- f_function_shadow
      string
        &
          buf
            allocatable -- f_function_string_scalar/*/&_buf_allocatable
          cfi
            allocatable -- f_function_string_scalar/*/&_cfi_allocatable
        *
          buf
            allocatable -- f_function_string_scalar/*/&_buf_allocatable
          cfi
            allocatable -- f_function_string_scalar/*/&_cfi_allocatable
        scalar
          buf
            allocatable -- f_function_string_scalar/*/&_buf_allocatable
          cfi
            allocatable -- f_function_string_scalar/*/&_cfi_allocatable
      struct
        * -- f_function_struct_*
          buf
            pointer -- f_function_struct_*_buf_pointer
        scalar -- f_function_struct_scalar
      vector -- f_function_vector
        buf
          allocatable -- f_function_vector_buf_allocatable
      void
        * -- f_function_void_*
    getter -- f_getter
      string
        scalar
          buf
            allocatable -- f_getter_string_scalar_buf_allocatable
    in
      bool -- f_in_bool
      char
        scalar -- f_in_char_scalar
      native
        *
          cdesc -- f_in/out/inout_native_*_cdesc
      string
        scalar -- f_in_string_scalar
      vector
        buf -- f_in_vector_buf
          string -- f_in_vector_buf_string
      void
        * -- f_in_void_*
          cdesc -- f_in/out/inout_void_*_cdesc
        ** -- f_in_void_**
    inout
      bool -- f_inout_bool
      native
        *
          cdesc -- f_in/out/inout_native_*_cdesc
      vector -- f_inout_vector
        allocatable -- f_inout_vector_allocatable
      void
        *
          cdesc -- f_in/out/inout_void_*_cdesc
    mixin
      function
        buf -- f_mixin_function_buf
      in
        array
          buf -- f_mixin_in_array_buf
        character
          buf -- f_mixin_in_character_buf
        string
          array
            buf -- f_mixin_in_string_array_buf
      inout
        array
          buf -- f_mixin_inout_array_buf
      out
        array
          buf -- f_mixin_out_array_buf
    out
      bool -- f_out_bool
      native
        *
          allocatable -- f_out_native_*_allocatable
          cdesc -- f_in/out/inout_native_*_cdesc
        *&
          buf
            pointer -- f_out_native_**/*&_buf_pointer
        ** -- f_out_native_**
          buf
            pointer -- f_out_native_**/*&_buf_pointer
          raw -- f_out_native_**_raw
      vector -- f_out_vector
        allocatable -- f_out_vector_allocatable
      void
        *
          cdesc -- f_in/out/inout_void_*_cdesc
        ** -- f_out_void_**
    setter -- f_setter
      string
        scalar
          buf -- f_setter_string_scalar_buf
    subroutine -- f_subroutine
c_ctor:
  buf_extra:
  - shadow
  call:
  - "{cxx_type} *{cxx_var} =\t new {cxx_type}({C_call_list});"
  - "{shadow_var}->addr = static_cast<{c_const}void *>(\t{cxx_var});"
  - '{shadow_var}->idtor = {idtor};'
  cxx_local_var: pointer
  name: c_ctor
  owner: caller
  ret:
  - return {shadow_var};
  return_type: '{c_type} *'
c_dtor:
  call:
  - delete {CXX_this};
  - '{C_this}->addr = {nullptr};'
  impl_header:
  - <cstddef>
  name: c_dtor
  owner: library
  return_type: void
c_function_char_*:
  name: c_function_char_*
  owner: library
  return_cptr: true
c_function_char_*_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_function_char_*_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);"
c_function_char_*_buf_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  c_helper: ShroudTypeDefines
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {c_var}'
  f_import:
  - '{F_array_type}'
  name: c_function_char_*_buf_allocatable
  ntemps: 1
  owner: library
  post_call:
  - '{temp0}->cxx.addr = {cxx_nonconst_ptr};'
  - '{temp0}->cxx.idtor = {idtor};'
  - '{temp0}->addr.ccharp = {cxx_var};'
  - '{temp0}->type = {sh_type};'
  - '{temp0}->elem_len = {cxx_var} == {nullptr} ? 0 : {stdlib}strlen({cxx_var});'
  - '{temp0}->size = 1;'
  - '{temp0}->rank = 0;'
  return_type: void
c_function_char_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_function_char_*_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var},\t -1);"
c_function_char_*_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_function_char_*_cfi_allocatable
  owner: library
  post_call:
  - if ({cxx_var} != {nullptr}) {{+
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \tstrlen({cxx_var}));"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}, \t{cfi_prefix}{c_var}->elem_len);"
  - -}}
  - -}}
  return_type: void
c_function_char_scalar:
  f_module:
    iso_c_binding:
    - C_CHAR
  f_result_decl:
  - 'character(kind=C_CHAR) :: {c_var}'
  name: c_function_char_scalar
  owner: library
c_function_char_scalar_buf:
  buf_args:
  - arg
  - len
  impl_header:
  - <cstring>
  name: c_function_char_scalar_buf
  owner: library
  post_call:
  - '{stdlib}memset({c_var}, '' '', {c_var_len});'
  - '{c_var}[0] = {cxx_var};'
c_function_char_scalar_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  impl_header:
  - <cstring>
  name: c_function_char_scalar_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - '{stdlib}memset({c_var}, '' '', {cfi_prefix}{c_var}->elem_len);'
  - '{c_var}[0] = {cxx_var};'
c_function_native_&:
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_function_native_&
  owner: library
c_function_native_*:
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_function_native_*
  owner: library
c_function_native_**:
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_function_native_**
  owner: library
c_function_native_*_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  c_helper: ShroudTypeDefines array_context
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {c_var}'
  f_import:
  - '{F_array_type}'
  name: c_function_native_*_buf
  ntemps: 1
  owner: library
  post_call:
  - '{temp0}->cxx.addr  = {cxx_nonconst_ptr};'
  - '{temp0}->cxx.idtor = {idtor};'
  - '{temp0}->addr.base = {cxx_var};'
  - '{temp0}->type = {sh_type};'
  - '{temp0}->elem_len = sizeof({cxx_type});'
  - '{temp0}->rank = {rank};{c_array_shape}'
  - '{temp0}->size = {c_array_size};'
  return_cptr: true
  return_type: void
c_function_native_*_scalar:
  f_module_line: iso_c_binding:{f_kind}
  f_result_decl:
  - '{f_type} :: {c_var}'
  name: c_function_native_*_scalar
  owner: library
c_function_shadow:
  buf_extra:
  - shadow
  c_local_var: pointer
  name: c_function_shadow
  owner: library
  post_call:
  - '{shadow_var}->addr = {cxx_nonconst_ptr};'
  - '{shadow_var}->idtor = {idtor};'
  ret:
  - return {shadow_var};
  return_cptr: true
  return_type: '{c_type} *'
c_function_shadow_scalar:
  buf_extra:
  - shadow
  c_local_var: pointer
  cxx_local_var: pointer
  name: c_function_shadow_scalar
  owner: caller
  post_call:
  - '{shadow_var}->addr = {cxx_nonconst_ptr};'
  - '{shadow_var}->idtor = {idtor};'
  pre_call:
  - '{cxx_type} * {cxx_var} = new {cxx_type};'
  ret:
  - return {shadow_var};
  return_cptr: true
  return_type: '{c_type} *'
c_function_string_&:
  name: c_function_string_&
  owner: library
  ret:
  - return {c_var};
  return_cptr: true
c_function_string_&_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_function_string_&_buf
  owner: library
  post_call:
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  - -}}
c_function_string_&_buf_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  c_helper: ShroudStrToArray
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {c_var}'
  f_import:
  - '{F_array_type}'
  name: c_function_string_&_buf_allocatable
  ntemps: 1
  owner: library
  post_call:
  - "ShroudStrToArray(\t{temp0},\t {cxx_addr}{cxx_var},\t {idtor});"
  return_type: void
c_function_string_&_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_function_string_&_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  - -}}
c_function_string_&_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  impl_header:
  - <cstring>
  name: c_function_string_&_cfi_allocatable
  owner: library
  post_call:
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \t{cxx_var}{cxx_member}length());"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}{cxx_member}data(),\
    \ \t{cxx_var}{cxx_member}length());"
  - -}}
  return_type: void
c_function_string_*:
  name: c_function_string_*
  owner: library
  ret:
  - return {c_var};
  return_cptr: true
c_function_string_*_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_function_string_*_buf
  owner: library
  post_call:
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  - -}}
c_function_string_*_buf_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  c_helper: ShroudStrToArray
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {c_var}'
  f_import:
  - '{F_array_type}'
  name: c_function_string_*_buf_allocatable
  ntemps: 1
  owner: library
  post_call:
  - "ShroudStrToArray(\t{temp0},\t {cxx_addr}{cxx_var},\t {idtor});"
  return_type: void
c_function_string_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_function_string_*_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  - -}}
c_function_string_*_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  impl_header:
  - <cstring>
  name: c_function_string_*_cfi_allocatable
  owner: library
  post_call:
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \t{cxx_var}{cxx_member}length());"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}{cxx_member}data(),\
    \ \t{cxx_var}{cxx_member}length());"
  - -}}
  return_type: void
c_function_string_scalar:
  name: c_function_string_scalar
  owner: library
  ret:
  - return {c_var};
  return_cptr: true
c_function_string_scalar_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_function_string_scalar_buf
  owner: library
  post_call:
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  - -}}
c_function_string_scalar_buf_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  c_helper: ShroudStrToArray
  cxx_local_var: pointer
  destructor_name: new_string
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {c_var}'
  f_import:
  - '{F_array_type}'
  name: c_function_string_scalar_buf_allocatable
  ntemps: 1
  owner: library
  post_call:
  - ShroudStrToArray({temp0}, {cxx_var}, {idtor});
  pre_call:
  - std::string * {cxx_var} = new std::string;
  return_type: void
c_function_string_scalar_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_function_string_scalar_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  - -}}
c_function_string_scalar_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  destructor_name: new_string
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_function_string_scalar_cfi_allocatable
  owner: library
  post_call:
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \t{cxx_var}.length());"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}.data(), \t{cfi_prefix}{c_var}->elem_len);"
  - -}}
  return_type: void
c_function_struct:
  c_local_var: pointer
  name: c_function_struct
  owner: library
  post_call:
  - "{c_const}{c_type} * {c_var} = \tstatic_cast<{c_const}{c_type} *>(\tstatic_cast<{c_const}void\
    \ *>(\t{cxx_addr}{cxx_var}));"
c_function_struct_*:
  c_local_var: pointer
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_function_struct_*
  owner: library
  post_call:
  - "{c_const}{c_type} * {c_var} = \tstatic_cast<{c_const}{c_type} *>(\tstatic_cast<{c_const}void\
    \ *>(\t{cxx_addr}{cxx_var}));"
c_function_vector_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  c_helper: ShroudTypeDefines
  cxx_local_var: pointer
  destructor_name: std_vector_{cxx_T}
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {c_var}'
  f_import:
  - '{F_array_type}'
  name: c_function_vector_buf
  ntemps: 1
  owner: library
  post_call:
  - '{temp0}->cxx.addr  = {cxx_var};'
  - '{temp0}->cxx.idtor = {idtor};'
  - '{temp0}->addr.base = {cxx_var}->empty() ? {nullptr} : &{cxx_var}->front();'
  - '{temp0}->type = {sh_type};'
  - '{temp0}->elem_len = sizeof({cxx_T});'
  - '{temp0}->size = {cxx_var}->size();'
  - '{temp0}->rank = 1;'
  - '{temp0}->shape[0] = {temp0}->size;'
  pre_call:
  - "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;"
  return_type: void
c_getter:
  call:
  - // skip call c_getter
  name: c_getter
  owner: library
c_getter_native_scalar:
  call:
  - // skip call c_getter
  name: c_getter_native_scalar
  owner: library
  ret:
  - return {CXX_this}->{field_name};
c_getter_string_scalar_buf:
  buf_args:
  - context
  call:
  - // skip call c_getter
  name: c_getter_string_scalar_buf
  owner: library
  post_call:
  - '{c_var_context}->addr.base = {CXX_this}->{field_name}.data();'
  - '{c_var_context}->type = 0; // SH_CHAR;'
  - '{c_var_context}->elem_len = {CXX_this}->{field_name}.size();'
  - '{c_var_context}->rank = 0;'
  return_type: void
c_in_char_**:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char **{c_var}
  f_arg_decl:
  - 'type(C_PTR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_PTR
  name: c_in_char_**
  owner: library
c_in_char_**_buf:
  buf_args:
  - arg_decl
  - size
  - len
  c_arg_decl:
  - char *{c_var}
  c_helper: ShroudStrArrayAlloc ShroudStrArrayFree
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_in_char_**_buf
  owner: library
  post_call:
  - ShroudStrArrayFree({cxx_var}, {c_var_size});
  pre_call:
  - "char **{cxx_var} = ShroudStrArrayAlloc({c_var},\t {c_var_size},\t {c_var_len});"
c_in_char_*_buf:
  buf_args:
  - arg
  - len_trim
  c_helper: ShroudStrAlloc ShroudStrFree
  cxx_local_var: pointer
  name: c_in_char_*_buf
  owner: library
  post_call:
  - ShroudStrFree({cxx_var});
  pre_call:
  - "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_trim},\t {c_var_trim});"
c_in_char_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_in_char_*_cfi
  owner: library
  post_call:
  - ShroudStrFree({cxx_var});
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - "char *{cxx_var} = ShroudStrAlloc(\t{c_var},\t {cfi_prefix}{c_var}->elem_len,\t\
    \ -1);"
c_in_char_scalar:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char {c_var}
  f_arg_decl:
  - 'character(kind=C_CHAR), value, intent(IN) :: {c_var}'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_in_char_scalar
  owner: library
c_in_native_**:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{cxx_type} **{cxx_var}'
  f_arg_decl:
  - 'type(C_PTR), intent(IN), value :: {c_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: c_in_native_**
  owner: library
c_in_native_*_cdesc:
  buf_args:
  - context
  name: c_in_native_*_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_in_native_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{c_var}
  cxx_local_var: pointer
  f_arg_decl:
  - '{f_type}, intent({f_intent}) :: {c_var}{f_c_dimension}'
  f_module_line: iso_c_binding:{f_kind}
  iface_header:
  - ISO_Fortran_binding.h
  name: c_in_native_*_cfi
  owner: library
  pre_call:
  - '{cxx_type} *{cxx_var} = {cast_static}{cxx_type} *{cast1}{c_var}->base_addr{cast2};'
c_in_shadow:
  buf_args:
  - shadow
  cxx_local_var: pointer
  name: c_in_shadow
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} =\t {cast_static}{c_const}{cxx_type} *{cast1}{c_var}{c_member}addr{cast2};"
c_in_shadow_scalar:
  buf_args:
  - shadow
  cxx_local_var: pointer
  name: c_in_shadow_scalar
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} =\t {cast_static}{c_const}{cxx_type} *{cast1}{c_var}{c_member}addr{cast2};"
c_in_string_&:
  cxx_local_var: scalar
  name: c_in_string_&
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_in_string_&_buf:
  buf_args:
  - arg
  - len_trim
  cxx_local_var: scalar
  name: c_in_string_&_buf
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_in_string_&_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_in_string_&_cfi
  owner: library
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_in_string_*:
  cxx_local_var: scalar
  name: c_in_string_*
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_in_string_*_buf:
  buf_args:
  - arg
  - len_trim
  cxx_local_var: scalar
  name: c_in_string_*_buf
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_in_string_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_in_string_*_cfi
  owner: library
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_in_string_scalar:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char *{c_var}
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_in_string_scalar
  owner: library
c_in_string_scalar_buf:
  buf_args:
  - arg_decl
  - len_trim
  c_arg_decl:
  - char *{c_var}
  call:
  - '{cxx_var}'
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_in_string_scalar_buf
  owner: library
  pre_call:
  - std::string {cxx_var}({c_var}, {c_var_trim});
c_in_string_scalar_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_in_string_scalar_cfi
  owner: library
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_in_struct:
  cxx_local_var: pointer
  name: c_in_struct
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} = \tstatic_cast<{c_const}{cxx_type} *>\t(static_cast<{c_const}void\
    \ *>(\t{c_addr}{c_var}));"
c_in_vector_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{cxx_type} *{c_var}'
  - size_t {temp0}
  cxx_local_var: scalar
  f_arg_decl:
  - '{f_type}, intent(IN) :: {c_var}(*)'
  - 'integer(C_SIZE_T), intent(IN), value :: {temp0}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  f_module_line: iso_c_binding:{f_kind},C_SIZE_T
  name: c_in_vector_buf
  ntemps: 2
  owner: library
  pre_call:
  - '{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {temp0});'
c_in_vector_buf_string:
  buf_args:
  - arg_decl
  c_arg_decl:
  - const char *{c_var}
  - size_t {temp0}
  - int {temp1}
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  - 'integer(C_SIZE_T), intent(IN), value :: {temp0}'
  - 'integer(C_INT), intent(IN), value :: {temp1}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  - '{temp1}'
  f_module_line: iso_c_binding:C_CHAR,C_SIZE_T,C_INT
  name: c_in_vector_buf_string
  ntemps: 3
  owner: library
  pre_call:
  - std::vector<{cxx_T}> {cxx_var};
  - '{{+'
  - '{c_const}char * {temp2} = {c_var};'
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {temp0};'
  - -for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - '{cxx_var}.push_back(std::string({temp2},ShroudLenTrim({temp2}, {temp1})));'
  - '{temp2} += {temp1};'
  - -}}
  - -}}
c_in_void_**:
  buf_args:
  - arg_decl
  c_arg_decl:
  - void **{c_var}
  f_arg_decl:
  - 'type(C_PTR), intent(IN) :: {c_var}{f_c_dimension}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: c_in_void_**
  owner: library
c_in_void_*_cdesc:
  buf_args:
  - context
  name: c_in_void_*_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_inout_char_*_buf:
  buf_args:
  - arg
  - len_trim
  - len
  c_helper: ShroudStrAlloc ShroudStrCopy ShroudStrFree
  cxx_local_var: pointer
  name: c_inout_char_*_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);"
  - ShroudStrFree({cxx_var});
  pre_call:
  - "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_len},\t {c_var_trim});"
c_inout_char_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrAlloc ShroudStrCopy ShroudStrFree
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_inout_char_*_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var},\t -1);"
  - ShroudStrFree({cxx_var});
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - "char *{cxx_var} = ShroudStrAlloc(\t{c_var},\t {cfi_prefix}{c_var}->elem_len,\t\
    \ -1);"
c_inout_native_*_cdesc:
  buf_args:
  - context
  name: c_inout_native_*_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_inout_shadow:
  buf_args:
  - shadow
  cxx_local_var: pointer
  name: c_inout_shadow
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} =\t {cast_static}{c_const}{cxx_type} *{cast1}{c_var}{c_member}addr{cast2};"
c_inout_string_&:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_inout_string_&
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_inout_string_&_buf:
  buf_args:
  - arg
  - len_trim
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_inout_string_&_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var}({c_var}, {c_var_trim});
c_inout_string_&_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_inout_string_&_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_inout_string_*:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_inout_string_*
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_inout_string_*_buf:
  buf_args:
  - arg
  - len_trim
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_inout_string_*_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var}({c_var}, {c_var_trim});
c_inout_string_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_inout_string_*_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_inout_struct:
  cxx_local_var: pointer
  name: c_inout_struct
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} = \tstatic_cast<{c_const}{cxx_type} *>\t(static_cast<{c_const}void\
    \ *>(\t{c_addr}{c_var}));"
c_inout_vector_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{cxx_type} *{c_var}'
  - size_t {temp0}
  - '{C_array_type} *{temp1}'
  c_helper: ShroudTypeDefines
  cxx_local_var: pointer
  destructor_name: std_vector_{cxx_T}
  f_arg_decl:
  - '{f_type}, intent(IN) :: {c_var}(*)'
  - 'integer(C_SIZE_T), intent(IN), value :: {temp0}'
  - 'type({F_array_type}), intent(OUT) :: {temp1}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  - '{temp1}'
  f_import:
  - '{F_array_type}'
  f_module_line: iso_c_binding:{f_kind},C_SIZE_T
  name: c_inout_vector_buf
  ntemps: 2
  owner: library
  post_call:
  - '{temp1}->cxx.addr  = {cxx_var};'
  - '{temp1}->cxx.idtor = {idtor};'
  - '{temp1}->addr.base = {cxx_var}->empty() ? {nullptr} : &{cxx_var}->front();'
  - '{temp1}->type = {sh_type};'
  - '{temp1}->elem_len = sizeof({cxx_T});'
  - '{temp1}->size = {cxx_var}->size();'
  - '{temp1}->rank = 1;'
  - '{temp1}->shape[0] = {temp1}->size;'
  pre_call:
  - "std::vector<{cxx_T}> *{cxx_var} = \tnew std::vector<{cxx_T}>\t(\t{c_var}, {c_var}\
    \ + {temp0});"
c_inout_vector_buf_string:
  buf_args:
  - arg
  - size
  - len
  cxx_local_var: scalar
  name: c_inout_vector_buf_string
  owner: library
  post_call:
  - '{{+'
  - char * BBB = {c_var};
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {c_var_size};'
  - -{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);
  - for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());"
  - BBB += {c_var_len};
  - -}}
  - -}}
  pre_call:
  - std::vector<{cxx_T}> {cxx_var};
  - '{{+'
  - '{c_const}char * BBB = {c_var};'
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {c_var_size};'
  - -for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - '{cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));'
  - BBB += {c_var_len};
  - -}}
  - -}}
c_inout_void_*_cdesc:
  buf_args:
  - context
  name: c_inout_void_*_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_mixin_arg_character_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_mixin_arg_character_cfi
  owner: library
  pre_call:
  - char *{cxx_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_mixin_function_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {c_var}'
  f_import:
  - '{F_array_type}'
  name: c_mixin_function_buf
  ntemps: 1
  owner: library
  return_type: void
c_mixin_function_character:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_mixin_function_character
  owner: library
c_mixin_in_array_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{cxx_type} *{c_var}'
  - size_t {temp0}
  f_arg_decl:
  - '{f_type}, intent(IN) :: {c_var}(*)'
  - 'integer(C_SIZE_T), intent(IN), value :: {temp0}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  f_module_line: iso_c_binding:{f_kind},C_SIZE_T
  name: c_mixin_in_array_buf
  ntemps: 2
  owner: library
c_mixin_in_array_string_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - const char *{c_var}
  - size_t {temp0}
  - int {temp1}
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  - 'integer(C_SIZE_T), intent(IN), value :: {temp0}'
  - 'integer(C_INT), intent(IN), value :: {temp1}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  - '{temp1}'
  f_module_line: iso_c_binding:C_CHAR,C_SIZE_T,C_INT
  name: c_mixin_in_array_string_buf
  ntemps: 2
  owner: library
c_mixin_in_character_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char *{c_var}
  - int {temp0}
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  - 'integer(C_INT), value :: {temp0}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  f_module:
    iso_c_binding:
    - C_CHAR
    - C_INT
  name: c_mixin_in_character_buf
  ntemps: 1
  owner: library
c_mixin_inout_array_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{cxx_type} *{c_var}'
  - size_t {temp0}
  - '{C_array_type} *{temp1}'
  f_arg_decl:
  - '{f_type}, intent(IN) :: {c_var}(*)'
  - 'integer(C_SIZE_T), intent(IN), value :: {temp0}'
  - 'type({F_array_type}), intent(OUT) :: {temp1}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  - '{temp1}'
  f_import:
  - '{F_array_type}'
  f_module_line: iso_c_binding:{f_kind},C_SIZE_T
  name: c_mixin_inout_array_buf
  ntemps: 2
  owner: library
c_mixin_out_array_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {temp0}'
  f_c_arg_names:
  - '{temp0}'
  f_import:
  - '{F_array_type}'
  name: c_mixin_out_array_buf
  ntemps: 1
  owner: library
c_out_char_*_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrBlankFill
  name: c_out_char_*_buf
  owner: library
  post_call:
  - ShroudStrBlankFill({c_var}, {c_var_len});
c_out_char_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrBlankFill
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_out_char_*_cfi
  owner: library
  post_call:
  - ShroudStrBlankFill({cxx_var}, {cfi_prefix}{c_var}->elem_len);
  pre_call:
  - char *{cxx_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_out_native_*&_buf:
  arg_call:
  - '{cxx_var}'
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  name: c_out_native_*&_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_nonconst_ptr};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var};'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_type});'
  - '{c_var_context}->rank = {rank};{c_array_shape}'
  - '{c_var_context}->size = {c_array_size};'
  pre_call:
  - '{c_const}{cxx_type} *{cxx_var};'
c_out_native_**_buf:
  arg_call:
  - '&{cxx_var}'
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  name: c_out_native_**_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_nonconst_ptr};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var};'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_type});'
  - '{c_var_context}->rank = {rank};{c_array_shape}'
  - '{c_var_context}->size = {c_array_size};'
  pre_call:
  - '{c_const}{cxx_type} *{cxx_var};'
c_out_native_*_cdesc:
  buf_args:
  - context
  name: c_out_native_*_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_out_string_&:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_out_string_&
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var};'
c_out_string_&_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_out_string_&_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
c_out_string_&_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_out_string_&_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_out_string_*:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_out_string_*
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var};'
c_out_string_*_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_out_string_*_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
c_out_string_*_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_out_string_*_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_out_struct:
  cxx_local_var: pointer
  name: c_out_struct
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} = \tstatic_cast<{c_const}{cxx_type} *>\t(static_cast<{c_const}void\
    \ *>(\t{c_addr}{c_var}));"
c_out_vector_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{C_array_type} *{temp0}'
  c_helper: ShroudTypeDefines
  cxx_local_var: pointer
  destructor_name: std_vector_{cxx_T}
  f_arg_decl:
  - 'type({F_array_type}), intent(OUT) :: {temp0}'
  f_c_arg_names:
  - '{temp0}'
  f_import:
  - '{F_array_type}'
  name: c_out_vector_buf
  ntemps: 1
  owner: library
  post_call:
  - '{temp0}->cxx.addr  = {cxx_var};'
  - '{temp0}->cxx.idtor = {idtor};'
  - '{temp0}->addr.base = {cxx_var}->empty() ? {nullptr} : &{cxx_var}->front();'
  - '{temp0}->type = {sh_type};'
  - '{temp0}->elem_len = sizeof({cxx_T});'
  - '{temp0}->size = {cxx_var}->size();'
  - '{temp0}->rank = 1;'
  - '{temp0}->shape[0] = {temp0}->size;'
  pre_call:
  - "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;"
c_out_vector_buf_string:
  buf_args:
  - arg
  - size
  - len
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  name: c_out_vector_buf_string
  owner: library
  post_call:
  - '{{+'
  - char * BBB = {c_var};
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {c_var_size};'
  - '{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);'
  - -for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());"
  - BBB += {c_var_len};
  - -}}
  - -}}
  pre_call:
  - '{c_const}std::vector<{cxx_T}> {cxx_var};'
c_out_void_*_cdesc:
  buf_args:
  - context
  name: c_out_void_*_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_setter:
  call:
  - // skip call c_setter
  name: c_setter
  owner: library
c_setter_native_scalar:
  call:
  - // skip call c_setter
  name: c_setter_native_scalar
  owner: library
  post_call:
  - '{CXX_this}->{field_name} = val;'
c_setter_string_scalar_buf:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char *{c_var}
  - int {temp0}
  call:
  - // skip call c_setter
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  - 'integer(C_INT), value :: {temp0}'
  f_c_arg_names:
  - '{c_var}'
  - '{temp0}'
  f_module:
    iso_c_binding:
    - C_CHAR
    - C_INT
  name: c_setter_string_scalar_buf
  ntemps: 1
  owner: library
  post_call:
  - "{CXX_this}->{field_name} = std::string({c_var},\t {temp0});"
c_subroutine:
  name: c_subroutine
  owner: library
f_ctor:
  call:
  - '{F_result_ptr} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_result_ptr}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_ctor
  need_wrapper: true
f_function_bool:
  name: f_function_bool
  need_wrapper: true
f_function_char_*_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_string array_context
  name: f_function_char_*_buf_allocatable
  need_wrapper: true
  ntemps: 1
  post_call:
  - 'allocate(character(len={temp0}%elem_len):: {f_var})'
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t {temp0}%elem_len)"
f_function_char_*_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_function_char_*_cfi_allocatable
  need_wrapper: true
f_function_char_*_raw:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  name: f_function_char_*_raw
f_function_char_scalar_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_string array_context
  name: f_function_char_scalar_buf_allocatable
  need_wrapper: true
  ntemps: 1
  post_call:
  - 'allocate(character(len={temp0}%elem_len):: {f_var})'
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t {temp0}%elem_len)"
f_function_char_scalar_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_function_char_scalar_cfi_allocatable
  need_wrapper: true
f_function_native_&:
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_function_native_&
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_function_native_&_buf_pointer:
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_function_native_&_buf_pointer
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_function_native_**:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  name: f_function_native_**
f_function_native_*_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - '{f_type}, allocatable :: {f_var}{f_assumed_shape}'
  c_helper: copy_array
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_array_{cxx_type}
  name: f_function_native_*_buf_allocatable
  ntemps: 1
  post_call:
  - allocate({f_var}({f_array_allocate}))
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t size({f_var},\t kind=C_SIZE_T))"
f_function_native_*_buf_pointer:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_function_native_*_buf_pointer
  ntemps: 1
  post_call:
  - call c_f_pointer({temp0}%base_addr, {F_result}{f_array_shape})
f_function_native_*_buf_pointer_caller:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  - 'type({F_capsule_type}), intent(OUT) :: {c_var_capsule}'
  arg_name:
  - '{c_var_capsule}'
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: capsule_helper
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_function_native_*_buf_pointer_caller
  ntemps: 1
  post_call:
  - "call c_f_pointer(\t{temp0}%base_addr,\t {F_result}{f_array_shape})"
  - '{c_var_capsule}%mem = {temp0}%cxx'
f_function_native_*_pointer:
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_function_native_*_pointer
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_function_native_*_raw:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  name: f_function_native_*_raw
f_function_native_*_scalar:
  name: f_function_native_*_scalar
f_function_shadow:
  call:
  - '{F_result_ptr} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_result_ptr}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_function_shadow
  need_wrapper: true
f_function_string_&_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_string array_context
  name: f_function_string_&_buf_allocatable
  need_wrapper: true
  ntemps: 1
  post_call:
  - 'allocate(character(len={temp0}%elem_len):: {f_var})'
  - "call {hnamefunc0}({temp0},\t {f_var},\t {temp0}%elem_len)"
f_function_string_&_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_function_string_&_cfi_allocatable
  need_wrapper: true
f_function_string_*_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_string array_context
  name: f_function_string_*_buf_allocatable
  need_wrapper: true
  ntemps: 1
  post_call:
  - 'allocate(character(len={temp0}%elem_len):: {f_var})'
  - "call {hnamefunc0}({temp0},\t {f_var},\t {temp0}%elem_len)"
f_function_string_*_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_function_string_*_cfi_allocatable
  need_wrapper: true
f_function_string_scalar_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_string array_context
  name: f_function_string_scalar_buf_allocatable
  need_wrapper: true
  ntemps: 1
  post_call:
  - 'allocate(character(len={temp0}%elem_len):: {f_var})'
  - "call {hnamefunc0}({temp0},\t {f_var},\t {temp0}%elem_len)"
f_function_string_scalar_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_function_string_scalar_cfi_allocatable
  need_wrapper: true
f_function_struct_*:
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_function_struct_*
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_function_struct_*_buf_pointer:
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_function_struct_*_buf_pointer
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_function_struct_scalar:
  name: f_function_struct_scalar
f_function_vector:
  c_helper: copy_array
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_function_vector
  post_call:
  - "call {hnamefunc0}(\t{c_var_context},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_function_vector_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - '{f_type}, allocatable :: {f_var}{f_assumed_shape}'
  c_helper: copy_array
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_function_vector_buf_allocatable
  ntemps: 1
  post_call:
  - allocate({f_var}({temp0}%size))
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_function_void_*:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_function_void_*
f_getter:
  name: f_getter
f_getter_string_scalar_buf_allocatable:
  arg_c_call:
  - '{temp0}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_string array_context
  name: f_getter_string_scalar_buf_allocatable
  need_wrapper: true
  ntemps: 1
  post_call:
  - 'allocate(character(len={temp0}%elem_len):: {f_var})'
  - "call {hnamefunc0}({temp0},\t {f_var},\t {temp0}%elem_len)"
f_in_bool:
  c_local_var: true
  name: f_in_bool
  pre_call:
  - '{c_var} = {f_var}  ! coerce to C_BOOL'
f_in_char_scalar:
  arg_decl:
  - 'character, value, intent(IN) :: {f_var}'
  name: f_in_char_scalar
f_in_native_*_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_in_native_*_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_in_string_scalar:
  arg_decl:
  - 'character(len=*), intent(IN) :: {f_var}'
  name: f_in_string_scalar
  need_wrapper: true
f_in_vector_buf:
  arg_c_call:
  - '{f_var}'
  - size({f_var}, kind=C_SIZE_T)
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_in_vector_buf
  need_wrapper: true
f_in_vector_buf_string:
  arg_c_call:
  - '{f_var}'
  - size({f_var}, kind=C_SIZE_T)
  - len({f_var}, kind=C_INT)
  f_module:
    iso_c_binding:
    - C_SIZE_T
    - C_INT
  name: f_in_vector_buf_string
  need_wrapper: true
f_in_void_*:
  arg_decl:
  - 'type(C_PTR), intent(IN) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_in_void_*
f_in_void_**:
  arg_decl:
  - 'type(C_PTR), intent(IN) :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_in_void_**
f_in_void_*_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_in_void_*_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_inout_bool:
  c_local_var: true
  name: f_inout_bool
  post_call:
  - '{f_var} = {c_var}  ! coerce to logical'
  pre_call:
  - '{c_var} = {f_var}  ! coerce to C_BOOL'
f_inout_native_*_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_inout_native_*_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_inout_vector:
  arg_c_call:
  - '{f_var}'
  - size({f_var}, kind=C_SIZE_T)
  - '{temp0}'
  c_helper: copy_array
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_inout_vector
  ntemps: 1
  post_call:
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_inout_vector_allocatable:
  arg_c_call:
  - '{f_var}'
  - size({f_var}, kind=C_SIZE_T)
  - '{temp0}'
  c_helper: copy_array
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_inout_vector_allocatable
  ntemps: 1
  post_call:
  - if (allocated({f_var})) deallocate({f_var})
  - allocate({f_var}({temp0}%size))
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_inout_void_*_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_inout_void_*_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_mixin_function_buf:
  arg_c_call:
  - '{temp0}'
  declare:
  - 'type({F_array_type}) :: {temp0}'
  name: f_mixin_function_buf
  ntemps: 1
f_mixin_in_array_buf:
  arg_c_call:
  - '{f_var}'
  - size({f_var}, kind=C_SIZE_T)
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_mixin_in_array_buf
  need_wrapper: true
f_mixin_in_character_buf:
  arg_c_call:
  - '{f_var}'
  - len({f_var}, kind=C_INT)
  f_module:
    iso_c_binding:
    - C_INT
  name: f_mixin_in_character_buf
f_mixin_in_string_array_buf:
  arg_c_call:
  - '{f_var}'
  - size({f_var}, kind=C_SIZE_T)
  - len({f_var}, kind=C_INT)
  f_module:
    iso_c_binding:
    - C_SIZE_T
    - C_INT
  name: f_mixin_in_string_array_buf
  need_wrapper: true
f_mixin_inout_array_buf:
  arg_c_call:
  - '{f_var}'
  - size({f_var}, kind=C_SIZE_T)
  - '{temp0}'
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_mixin_inout_array_buf
  ntemps: 1
f_mixin_out_array_buf:
  arg_c_call:
  - '{temp0}'
  declare:
  - 'type({F_array_type}) :: {temp0}'
  name: f_mixin_out_array_buf
  ntemps: 1
f_out_bool:
  c_local_var: true
  name: f_out_bool
  post_call:
  - '{f_var} = {c_var}  ! coerce to logical'
f_out_native_*&_buf_pointer:
  arg_decl:
  - '{f_type}, intent({f_intent}), pointer :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_out_native_*&_buf_pointer
  post_call:
  - call c_f_pointer({c_var_context}%base_addr, {f_var}{f_array_shape})
f_out_native_**:
  arg_decl:
  - '{f_type}, intent({f_intent}), pointer :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_out_native_**
f_out_native_**_buf_pointer:
  arg_decl:
  - '{f_type}, intent({f_intent}), pointer :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_out_native_**_buf_pointer
  post_call:
  - call c_f_pointer({c_var_context}%base_addr, {f_var}{f_array_shape})
f_out_native_**_raw:
  arg_decl:
  - 'type(C_PTR), intent({f_intent}) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_out_native_**_raw
f_out_native_*_allocatable:
  arg_decl:
  - '{f_type}, intent({f_intent}), allocatable :: {f_var}{f_assumed_shape}'
  name: f_out_native_*_allocatable
  pre_call:
  - allocate({f_var}{f_array_allocate})
f_out_native_*_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_out_native_*_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_out_vector:
  arg_c_call:
  - '{temp0}'
  c_helper: copy_array
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_out_vector
  ntemps: 1
  post_call:
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_out_vector_allocatable:
  arg_c_call:
  - '{temp0}'
  c_helper: copy_array
  declare:
  - 'type({F_array_type}) :: {temp0}'
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_out_vector_allocatable
  ntemps: 1
  post_call:
  - allocate({f_var}({temp0}%size))
  - "call {hnamefunc0}(\t{temp0},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_out_void_**:
  arg_decl:
  - 'type(C_PTR), intent(OUT) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_out_void_**
f_out_void_*_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_out_void_*_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_setter:
  name: f_setter
f_setter_string_scalar_buf:
  arg_c_call:
  - '{f_var}'
  - len({f_var}, kind=C_INT)
  arg_decl:
  - 'character(len=*), intent(IN) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_INT
  name: f_setter_string_scalar_buf
f_subroutine:
  name: f_subroutine
***** Python
root
  base
    py
      ctor
        array -- base_py_ctor_array
          fill -- base_py_ctor_array_fill
  py
    ctor
      char
        * -- py_ctor_char_*
        ** -- py_ctor_char_**
        [] -- py_ctor_char_[]
      native -- py_ctor_native
        * -- py_ctor_native_*
        [] -- py_ctor_native_[]
    descr
      char
        * -- py_descr_char_*
        **
          list -- py_descr_char_**_list
        [] -- py_descr_char_[]
      native -- py_descr_native
        *
          list -- py_descr_native_*_list
          numpy -- py_descr_native_*_numpy
        []
          list -- py_descr_native_[]_list
          numpy -- py_descr_native_[]_numpy
    function
      bool -- py_function_bool
      char
        * -- py_function_char_*
        scalar -- py_function_char_scalar
      native
        &
          pointer
            numpy -- py_function_native_&_pointer_numpy
        *
          allocatable
            numpy -- py_function_native_*_allocatable_numpy
          pointer
            list -- py_function_native_*_pointer_list
            numpy -- py_function_native_*_pointer_numpy
      shadow
        & -- py_function_shadow_&
        * -- py_function_shadow_*
        scalar -- py_function_shadow_scalar
      string
        & -- py_function_string_&
        * -- py_function_string_*
        scalar -- py_function_string_scalar
      struct
        class -- py_function_struct_class
        numpy -- py_function_struct_numpy
      vector
        list -- py_function_vector_list
        numpy -- py_function_vector_numpy
      void
        * -- py_function_void_*
    in
      bool -- py_in_bool
      char
        * -- py_in_char_*
        ** -- py_in_char_**
        scalar -- py_in_char_scalar
      native
        & -- py_in_native_&
        * -- py_in_native_*
          pointer
            list -- py_in_native_*_pointer_list
            numpy -- py_in_native_*_pointer_numpy
      shadow
        & -- py_in_shadow_&
        * -- py_in_shadow_*
        scalar -- py_in_shadow_scalar
      string
        & -- py_in_string_&
        * -- py_in_string_*
        scalar -- py_in_string_scalar
      struct
        &
          class -- py_in_struct_&_class
          numpy -- py_in_struct_&_numpy
        *
          class -- py_in_struct_*_class
          list -- py_in_struct_*_list
          numpy -- py_in_struct_*_numpy
        list -- py_in_struct_list
        scalar
          class -- py_in_struct_scalar_class
          list -- py_in_struct_scalar_list
          numpy -- py_in_struct_scalar_numpy
      vector
        list -- py_in_vector_list
        numpy -- py_in_vector_numpy
      void
        * -- py_in_void_*
    inout
      bool -- py_inout_bool
        * -- py_inout_bool_*
      char
        * -- py_inout_char_*
      native
        & -- py_inout_native_&
        * -- py_inout_native_*
          pointer
            list -- py_inout_native_*_pointer_list
            numpy -- py_inout_native_*_pointer_numpy
      shadow
        * -- py_inout_shadow_*
      string
        & -- py_inout_string_&
        * -- py_inout_string_*
        scalar -- py_inout_string_scalar
      struct
        &
          class -- py_inout_struct_&_class
          numpy -- py_inout_struct_&_numpy
        *
          class -- py_inout_struct_*_class
          list -- py_inout_struct_*_list
          numpy -- py_inout_struct_*_numpy
        list -- py_inout_struct_list
    out
      bool -- py_out_bool
        * -- py_out_bool_*
      char
        *
          charlen -- py_out_char_*_charlen
      native
        & -- py_out_native_&
        * -- py_out_native_*
          allocatable
            list -- py_out_native_*_allocatable_list
            numpy -- py_out_native_*_allocatable_numpy
          pointer
            list -- py_out_native_*_pointer_list
            numpy -- py_out_native_*_pointer_numpy
        *&
          pointer
            numpy -- py_out_native_*&_pointer_numpy
        **
          pointer
            list -- py_out_native_**_pointer_list
            numpy -- py_out_native_**_pointer_numpy
          raw -- py_out_native_**_raw
      shadow
        * -- py_out_shadow_*
      string
        & -- py_out_string_&
        * -- py_out_string_*
        scalar -- py_out_string_scalar
      struct
        &
          class -- py_out_struct_&_class
          numpy -- py_out_struct_&_numpy
        *
          class -- py_out_struct_*_class
          list -- py_out_struct_*_list
          numpy -- py_out_struct_*_numpy
        list -- py_out_struct_list
      vector
        list -- py_out_vector_list
        numpy -- py_out_vector_numpy
      void
        *& -- py_out_void_*&
        ** -- py_out_void_**
base_py_ctor_array:
  declare:
  - '{PY_typedef_converter} {value_var} = {PY_value_init};'
  - '{value_var}.name = "{field_name}";'
  name: base_py_ctor_array
  parse_args:
  - '{hnamefunc0}'
  - '&{value_var}'
  parse_format: O&
  post_call:
  - SH_obj->{field_name} = {cast_static}{c_type} *{cast1}{value_var}.data{cast2};
  - self->{PY_member_object} = {value_var}.obj;  // steal reference
base_py_ctor_array_fill:
  declare:
  - PyObject *{py_var} = {nullptr};
  goto_fail: true
  name: base_py_ctor_array_fill
  parse_args:
  - '&{py_var}'
  parse_format: O
  post_call:
  - if ({py_var} != {nullptr}) {{+
  - "if ({hnamefunc0}(\t{py_var},\t \"{c_var}\",\t SH_obj->{field_name},\t {field_size})\
    \ == -1)"
  - +goto fail;-
  - self->{PY_member_object} = {nullptr};
  - -}}
py_ctor_char_*:
  c_helper: get_from_object_char
  declare:
  - '{PY_typedef_converter} {value_var} = {PY_value_init};'
  - '{value_var}.name = "{field_name}";'
  name: py_ctor_char_*
  parse_args:
  - '{hnamefunc0}'
  - '&{value_var}'
  parse_format: O&
  post_call:
  - SH_obj->{field_name} = {cast_static}{c_type} *{cast1}{value_var}.data{cast2};
  - self->{PY_member_object} = {value_var}.obj;  // steal reference
py_ctor_char_**:
  c_helper: get_from_object_charptr
  declare:
  - '{PY_typedef_converter} {value_var} = {PY_value_init};'
  - '{value_var}.name = "{field_name}";'
  name: py_ctor_char_**
  parse_args:
  - '{hnamefunc0}'
  - '&{value_var}'
  parse_format: O&
  post_call:
  - SH_obj->{field_name} = {cast_static}char **{cast1}{value_var}.data{cast2};
  - self->{PY_member_object} = {value_var}.obj;  // steal reference
py_ctor_char_[]:
  c_helper: fill_from_PyObject_char
  declare:
  - PyObject *{py_var} = {nullptr};
  goto_fail: true
  name: py_ctor_char_[]
  parse_args:
  - '&{py_var}'
  parse_format: O
  post_call:
  - if ({py_var} != {nullptr}) {{+
  - "if ({hnamefunc0}(\t{py_var},\t \"{c_var}\",\t SH_obj->{field_name},\t {field_size})\
    \ == -1)"
  - +goto fail;-
  - self->{PY_member_object} = {nullptr};
  - -}}
py_ctor_native:
  declare:
  - '{c_type} {c_var} = 0;'
  name: py_ctor_native
  post_call:
  - SH_obj->{field_name} = {field_name};
py_ctor_native_*:
  c_helper: get_from_object_{c_type}_{PY_array_arg}
  declare:
  - '{PY_typedef_converter} {value_var} = {PY_value_init};'
  - '{value_var}.name = "{field_name}";'
  name: py_ctor_native_*
  parse_args:
  - '{hnamefunc0}'
  - '&{value_var}'
  parse_format: O&
  post_call:
  - SH_obj->{field_name} = {cast_static}{c_type} *{cast1}{value_var}.data{cast2};
  - self->{PY_member_object} = {value_var}.obj;  // steal reference
py_ctor_native_[]:
  c_helper: fill_from_PyObject_{c_type}_{PY_array_arg}
  declare:
  - PyObject *{py_var} = {nullptr};
  goto_fail: true
  name: py_ctor_native_[]
  parse_args:
  - '&{py_var}'
  parse_format: O
  post_call:
  - if ({py_var} != {nullptr}) {{+
  - "if ({hnamefunc0}(\t{py_var},\t \"{c_var}\",\t SH_obj->{field_name},\t {field_size})\
    \ == -1)"
  - +goto fail;-
  - self->{PY_member_object} = {nullptr};
  - -}}
py_descr_char_*:
  getter:
  - if ({c_var} == {nullptr}) {{+
  - Py_RETURN_NONE;
  - -}}
  - PyObject * rv = {ctor};
  - return rv;
  name: py_descr_char_*
  setter:
  - '{PY_typedef_converter} cvalue;'
  - Py_XDECREF({c_var_data});
  - if ({hnamefunc0}({py_var}, &cvalue) == 0) {{+
  - '{c_var} = {nullptr};'
  - '{c_var_data} = {nullptr};'
  - return -1;
  - -}}
  - '{c_var} = {cast_static}{cast_type}{cast1}cvalue.data{cast2};'
  - '{c_var_data} = cvalue.dataobj;  // steal reference'
  setter_helper: get_from_object_{c_type}_list
py_descr_char_**_list:
  getter:
  - if ({c_var} == {nullptr}) {{+
  - Py_RETURN_NONE;
  - -}}
  - PyObject *rv = {hnamefunc0}({c_var}, {npy_intp_size});
  - return rv;
  getter_helper: to_PyList_char
  name: py_descr_char_**_list
  setter:
  - '{PY_typedef_converter} cvalue;'
  - Py_XDECREF({c_var_data});
  - if ({hnamefunc0}({py_var}, &cvalue) == 0) {{+
  - '{c_var} = {nullptr};'
  - '{c_var_data} = {nullptr};'
  - // XXXX set error
  - return -1;
  - -}}
  - '{c_var} = {cast_static}{cast_type}{cast1}cvalue.data{cast2};'
  - '{c_var_data} = cvalue.dataobj;  // steal reference'
  setter_helper: get_from_object_charptr
py_descr_char_[]:
  getter:
  - 'if ({c_var_obj} != {nullptr}) {{+

    Py_INCREF({c_var_obj});

    return {c_var_obj};

    -}}

    PyObject * rv = PyString_FromString({c_var});

    // XXX assumes is null terminated

    return rv;'
  name: py_descr_char_[]
  setter:
  - Py_XDECREF({c_var_obj});
  - '{c_var_obj} = {nullptr};'
  - "if ({hnamefunc0}(\t{py_var},\t \"{field_name}\",\t {c_var},\t {npy_intp_size})\
    \ == -1) {{+"
  - return -1;
  - -}}
  setter_helper: fill_from_PyObject_char
py_descr_native:
  getter:
  - PyObject * rv = {ctor};
  - return rv;
  name: py_descr_native
  setter:
  - '{cxx_decl} = {PY_get};'
  - if (PyErr_Occurred()) {{+
  - return -1;
  - -}}
  - '{c_var} = rv;'
py_descr_native_*_list:
  getter:
  - if ({c_var} == {nullptr}) {{+
  - Py_RETURN_NONE;
  - -}}
  - if ({c_var_obj} != {nullptr}) {{+
  - Py_INCREF({c_var_obj});
  - return {c_var_obj};
  - -}}
  - PyObject *rv = {hnamefunc0}({c_var}, {npy_intp_size});
  - return rv;
  getter_helper: to_PyList_{c_type}
  name: py_descr_native_*_list
  setter:
  - '{PY_typedef_converter} cvalue;'
  - Py_XDECREF({c_var_obj});
  - if ({hnamefunc0}({py_var}, &cvalue) == 0) {{+
  - '{c_var} = {nullptr};'
  - '{c_var_obj} = {nullptr};'
  - return -1;
  - -}}
  - '{c_var} = {cast_static}{cast_type}{cast1}cvalue.data{cast2};'
  - '{c_var_obj} = cvalue.obj;  // steal reference'
  setter_helper: get_from_object_{c_type}_list
py_descr_native_*_numpy:
  getter:
  - if ({c_var} == {nullptr}) {{+
  - Py_RETURN_NONE;
  - -}}
  - if ({c_var_obj} != {nullptr}) {{+
  - Py_INCREF({c_var_obj});
  - return {c_var_obj};
  - -}}
  - npy_intp {npy_dims_var}[{npy_rank}] = {{ {npy_intp_values} }};
  - "PyObject *rv = PyArray_SimpleNewFromData(\t{npy_rank},\t {npy_dims_var},\t {PYN_typenum},\t\
    \ {c_var_non_const});"
  - if (rv != {nullptr}) {{+
  - Py_INCREF(rv);
  - '{c_var_obj} = rv;'
  - -}}
  - return rv;
  name: py_descr_native_*_numpy
  need_numpy: true
  setter:
  - '{PY_typedef_converter} cvalue;'
  - Py_XDECREF({c_var_obj});
  - if ({hnamefunc0}({py_var}, &cvalue) == 0) {{+
  - '{c_var} = {nullptr};'
  - '{c_var_obj} = {nullptr};'
  - // XXXX set error
  - return -1;
  - -}}
  - '{c_var} = {cast_static}{cast_type}{cast1}cvalue.data{cast2};'
  - '{c_var_obj} = cvalue.obj;  // steal reference'
  setter_helper: get_from_object_{c_type}_numpy
py_descr_native_[]_list:
  getter:
  - PyObject *rv = {hnamefunc0}({c_var}, {npy_intp_size});
  - return rv;
  getter_helper: to_PyList_{c_type}
  name: py_descr_native_[]_list
  need_numpy: true
  setter:
  - Py_XDECREF({c_var_obj});
  - '{c_var_obj} = {nullptr};'
  - "if ({hnamefunc0}(\t{py_var},\t \"{field_name}\",\t {c_var},\t {npy_intp_size})\
    \ == -1) {{+"
  - return -1;
  - -}}
  setter_helper: fill_from_PyObject_{c_type}_{PY_array_arg}
py_descr_native_[]_numpy:
  getter:
  - if ({c_var_obj} == {nullptr}) {{+
  - // Create Numpy object which points to struct member.
  - npy_intp {npy_dims_var}[{rank}] = {{ {npy_intp_values} }};
  - "{c_var_obj} = PyArray_SimpleNewFromData(\t{npy_rank},\t {npy_dims_var},\t {PYN_typenum},\t\
    \ {c_var});"
  - -}}
  - Py_INCREF({c_var_obj});
  - return {c_var_obj};
  name: py_descr_native_[]_numpy
  need_numpy: true
  setter:
  - Py_XDECREF({c_var_obj});
  - '{c_var_obj} = {nullptr};'
  - "if ({hnamefunc0}(\t{py_var},\t \"{field_name}\",\t {c_var},\t {npy_intp_size})\
    \ == -1) {{+"
  - return -1;
  - -}}
  setter_helper: fill_from_PyObject_{c_type}_{PY_array_arg}
py_function_bool:
  declare:
  - '{PyObject} * {py_var} = {nullptr};'
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_function_bool
  object_created: true
  post_call:
  - '{py_var} = PyBool_FromLong({c_var});'
  - if ({py_var} == {nullptr}) goto fail;
py_function_char_*:
  fmtdict:
    ctor_expr: '{c_var}'
  name: py_function_char_*
py_function_char_scalar:
  declare:
  - '{PyObject} * {py_var} = {nullptr};'
  name: py_function_char_scalar
  object_created: true
  post_call:
  - '{py_var} = PyString_FromStringAndSize(&{cxx_var}, 1);'
py_function_native_&_pointer_numpy:
  declare:
  - '{npy_intp_decl}PyObject * {py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_function_native_&_pointer_numpy
  need_numpy: true
  object_created: true
  post_call:
  - "{npy_intp_asgn}{py_var} = PyArray_SimpleNewFromData({npy_rank},\t {npy_dims_var},\t\
    \ {numpy_type},\t {cxx_nonconst_ptr});"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_function_native_*_allocatable_numpy:
  declare:
  - '{npy_intp_decl}PyObject * {py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_function_native_*_allocatable_numpy
  need_numpy: true
  object_created: true
  post_call:
  - "{npy_intp_asgn}{py_var} = PyArray_SimpleNewFromData({npy_rank},\t {npy_dims_var},\t\
    \ {numpy_type},\t {cxx_nonconst_ptr});"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_function_native_*_pointer_list:
  c_helper: to_PyList_{cxx_type}
  declare:
  - PyObject *{py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_function_native_*_pointer_list
  object_created: true
  post_call:
  - "{py_var} = {hnamefunc0}\t({cxx_var},\t {array_size});"
  - if ({py_var} == {nullptr}) goto fail;
py_function_native_*_pointer_numpy:
  declare:
  - '{npy_intp_decl}PyObject * {py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_function_native_*_pointer_numpy
  need_numpy: true
  object_created: true
  post_call:
  - "{npy_intp_asgn}{py_var} = PyArray_SimpleNewFromData({npy_rank},\t {npy_dims_var},\t\
    \ {numpy_type},\t {cxx_nonconst_ptr});"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_function_shadow_&:
  name: py_function_shadow_&
  object_created: true
  post_call:
  - "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});"
  - '{py_var}->{PY_type_obj} = {cxx_addr}{cxx_var};'
py_function_shadow_*:
  name: py_function_shadow_*
  object_created: true
  post_call:
  - "{PyObject} * {py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});"
  - '{py_var}->{PY_type_obj} = {cxx_addr}{cxx_var};'
py_function_shadow_scalar:
  arg_declare:
  - '{cxx_type} *{cxx_var} = {nullptr};'
  cxx_local_var: pointer
  declare:
  - PyObject *{py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_function_shadow_scalar
  object_created: true
  post_call:
  - "{py_var} = {PY_to_object_idtor_func}({cxx_addr}{cxx_var},\t {capsule_order});"
  - if ({py_var} == {nullptr}) goto fail;
  pre_call:
  - '{cxx_var} = new {cxx_type};'
py_function_string_&:
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_function_string_&
py_function_string_*:
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_function_string_*
py_function_string_scalar:
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_function_string_scalar
py_function_struct_class:
  allocate_local_var: true
  cxx_local_var: pointer
  declare:
  - PyObject *{py_var} = {nullptr};  // struct_class
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_function_struct_class
  object_created: true
  post_call:
  - "{py_var} = {PY_to_object_idtor_func}({cxx_addr}{cxx_var},\t {capsule_order});"
  - if ({py_var} == {nullptr}) goto fail;
py_function_struct_numpy:
  allocate_local_var: true
  declare:
  - '{npy_intp_decl}PyObject * {py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_function_struct_numpy
  need_numpy: true
  object_created: true
  post_call:
  - '{npy_intp_asgn}Py_INCREF({PYN_descr});'
  - "{py_var} = PyArray_NewFromDescr(&PyArray_Type, \t{PYN_descr},\t {npy_rank}, {npy_dims_var},\
    \ \t{nullptr}, {cxx_var}, 0, {nullptr});"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_function_vector_list:
  declare:
  - PyObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_function_vector_list
  object_created: true
  post_call:
  - "{py_var} = SHROUD_to_PyList_vector_{cxx_T}\t({cxx_var});"
  - if ({py_var} == {nullptr}) goto fail;
py_function_vector_numpy:
  allocate_local_var: true
  declare:
  - '{npy_intp_decl}PyObject * {py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_function_vector_numpy
  need_numpy: true
  object_created: true
  post_call:
  - '{npy_dims_var}[0] = {cxx_var}->size();'
  - "{py_var} = PyArray_SimpleNewFromData({npy_rank},\t {npy_dims_var},\t {numpy_type},\t\
    \ {cxx_var}->data());"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_function_void_*:
  fmtdict:
    ctor_expr: '{cxx_var}'
  name: py_function_void_*
py_in_bool:
  name: py_in_bool
  pre_call:
  - '{cxx_var} = PyObject_IsTrue({py_var});'
py_in_char_*:
  arg_call:
  - '{c_var}'
  name: py_in_char_*
py_in_char_**:
  arg_call:
  - '{cxx_var}'
  arg_declare:
  - '{c_const}char ** {cxx_var} = {nullptr};'
  c_helper: get_from_object_charptr
  declare:
  - PyObject * {pytmp_var};
  - '{PY_typedef_converter} {value_var} = {PY_value_init};'
  - '{value_var}.name = "{c_var}";'
  - Py_ssize_t {size_var};
  fail:
  - Py_XDECREF({value_var}.dataobj);
  goto_fail: true
  name: py_in_char_**
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_call:
  - Py_XDECREF({value_var}.dataobj);
  pre_call:
  - "if ({hnamefunc0}\t({pytmp_var}, &{value_var}) == 0)"
  - +goto fail;-
  - '{cxx_var} = {cast_static}char **{cast1}{value_var}.data{cast2};'
py_in_char_scalar:
  arg_call:
  - '{c_var}[0]'
  arg_declare:
  - char *{c_var};
  name: py_in_char_scalar
  parse_args:
  - '&{c_var}'
  parse_format: s
py_in_native_&:
  arg_declare:
  - '{c_type} {c_var};'
  name: py_in_native_&
py_in_native_*:
  arg_call:
  - '&{c_var}'
  arg_declare:
  - '{c_type} {c_var};'
  name: py_in_native_*
py_in_native_*_pointer_list:
  arg_call:
  - '{cxx_var}'
  arg_declare:
  - '{cxx_type} * {cxx_var} = {nullptr};'
  c_helper: get_from_object_{cxx_type}_list
  cleanup:
  - Py_XDECREF({value_var}.dataobj);
  declare:
  - PyObject *{pytmp_var} = {nullptr};
  - '{PY_typedef_converter} {value_var} = {PY_value_init};'
  - '{value_var}.name = "{c_var}";'
  - Py_ssize_t {size_var};
  fail:
  - Py_XDECREF({value_var}.dataobj);
  goto_fail: true
  name: py_in_native_*_pointer_list
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - "if ({hnamefunc0}\t({pytmp_var}, &{value_var}) == 0)"
  - +goto fail;-
  - '{cxx_var} = {cast_static}{cxx_type} *{cast1}{value_var}.data{cast2};'
  - '{size_var} = {value_var}.size;'
py_in_native_*_pointer_numpy:
  arg_call:
  - '{c_var}'
  cleanup:
  - '{PY_cleanup_decref}({py_var});'
  declare:
  - PyObject * {pytmp_var};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_in_native_*_pointer_numpy
  need_numpy: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FROM_OTF(\t{pytmp_var},\t\
    \ {numpy_type},\t NPY_ARRAY_IN_ARRAY){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_in_shadow_&:
  arg_call:
  - '*{cxx_var}'
  cxx_local_var: pointer
  name: py_in_shadow_&
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_in_shadow_*:
  cxx_local_var: pointer
  name: py_in_shadow_*
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_in_shadow_scalar:
  arg_call:
  - '*{cxx_var}'
  cxx_local_var: pointer
  name: py_in_shadow_scalar
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_in_string_&:
  arg_declare:
  - char * {c_var};
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_in_string_&
  post_declare:
  - '{c_const}std::string {cxx_var}({c_var});'
py_in_string_*:
  arg_call:
  - '&{cxx_var}'
  arg_declare:
  - char * {c_var};
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_in_string_*
  post_declare:
  - '{c_const}std::string {cxx_var}({c_var});'
py_in_string_scalar:
  arg_declare:
  - char * {c_var};
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_in_string_scalar
  post_declare:
  - '{c_const}std::string {cxx_var}({c_var});'
py_in_struct_&_class:
  arg_call:
  - '*{cxx_var}'
  cxx_local_var: pointer
  name: py_in_struct_&_class
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_in_struct_&_numpy:
  arg_call:
  - '*{cxx_var}'
  arg_declare:
  - '{cxx_type} *{cxx_var};'
  cleanup:
  - '{PY_cleanup_decref}({py_var});'
  cxx_local_var: pointer
  declare:
  - PyObject * {pytmp_var} = {nullptr};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_in_struct_&_numpy
  need_numpy: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - Py_INCREF({PYN_descr});
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FromAny(\t{pytmp_var},\t\
    \ {PYN_descr},\t 0,\t 1,\t NPY_ARRAY_IN_ARRAY,\t {nullptr}){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_in_struct_*_class:
  cxx_local_var: pointer
  name: py_in_struct_*_class
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_in_struct_*_list:
  arg_call:
  - '&{cxx_var}'
  name: py_in_struct_*_list
py_in_struct_*_numpy:
  arg_declare:
  - '{cxx_type} *{cxx_var};'
  cleanup:
  - '{PY_cleanup_decref}({py_var});'
  cxx_local_var: pointer
  declare:
  - PyObject * {pytmp_var} = {nullptr};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_in_struct_*_numpy
  need_numpy: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - Py_INCREF({PYN_descr});
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FromAny(\t{pytmp_var},\t\
    \ {PYN_descr},\t 0,\t 1,\t NPY_ARRAY_IN_ARRAY,\t {nullptr}){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_in_struct_list:
  name: py_in_struct_list
py_in_struct_scalar_class:
  arg_call:
  - '*{cxx_var}'
  cxx_local_var: pointer
  name: py_in_struct_scalar_class
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_in_struct_scalar_list:
  name: py_in_struct_scalar_list
py_in_struct_scalar_numpy:
  arg_call:
  - '*{cxx_var}'
  arg_declare:
  - '{cxx_type} *{cxx_var};'
  cleanup:
  - '{PY_cleanup_decref}({py_var});'
  cxx_local_var: pointer
  declare:
  - PyObject * {pytmp_var} = {nullptr};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_in_struct_scalar_numpy
  need_numpy: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - Py_INCREF({PYN_descr});
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FromAny(\t{pytmp_var},\t\
    \ {PYN_descr},\t 0,\t 1,\t NPY_ARRAY_IN_ARRAY,\t {nullptr}){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_in_vector_list:
  c_helper: create_from_PyObject_vector_{cxx_T}
  cxx_local_var: scalar
  declare:
  - PyObject * {pytmp_var};
  goto_fail: true
  name: py_in_vector_list
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_declare:
  - std::vector<{cxx_T}> {cxx_var};
  pre_call:
  - "if ({hnamefunc0}\t({pytmp_var},\t \"{c_var}\",\t {cxx_var}) == -1)"
  - +goto fail;-
py_in_vector_numpy:
  cxx_local_var: scalar
  declare:
  - PyObject * {pytmp_var};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_in_vector_numpy
  need_numpy: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_declare:
  - std::vector<{cxx_T}> {cxx_var};
  - '{cxx_T} * {data_var};'
  post_parse:
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FROM_OTF(\t{pytmp_var},\t\
    \ {numpy_type},\t NPY_ARRAY_IN_ARRAY){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {cxx_T}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - '{data_var} = static_cast<{cxx_T} *>(PyArray_DATA({py_var}));'
  - "{cxx_var}.assign(\t{data_var},\t {data_var}+PyArray_SIZE({py_var}));"
py_in_void_*:
  arg_call:
  - '{c_var}'
  declare:
  - PyObject *{py_var};
  goto_fail: true
  name: py_in_void_*
  parse_args:
  - '&{py_var}'
  parse_format: O
  post_parse:
  - '{c_var} = PyCapsule_GetPointer({py_var}, NULL);'
  - if (PyErr_Occurred())
  - +goto fail;-
py_inout_bool:
  arg_declare:
  - bool {cxx_var};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_inout_bool
  object_created: true
  post_call:
  - '{py_var} = PyBool_FromLong({c_var});'
  - if ({py_var} == {nullptr}) goto fail;
  pre_call:
  - '{cxx_var} = PyObject_IsTrue({py_var});'
py_inout_bool_*:
  arg_call:
  - '&{cxx_var}'
  arg_declare:
  - bool {cxx_var};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_inout_bool_*
  object_created: true
  post_call:
  - '{py_var} = PyBool_FromLong({c_var});'
  - if ({py_var} == {nullptr}) goto fail;
  pre_call:
  - '{cxx_var} = PyObject_IsTrue({py_var});'
py_inout_char_*:
  arg_call:
  - '{c_var}'
  fmtdict:
    ctor_expr: '{c_var}'
  name: py_inout_char_*
py_inout_native_&:
  arg_declare:
  - '{c_type} {c_var};'
  name: py_inout_native_&
py_inout_native_*:
  arg_call:
  - '&{c_var}'
  arg_declare:
  - '{c_type} {c_var};'
  fmtdict:
    ctor_expr: '{c_var}'
  name: py_inout_native_*
py_inout_native_*_pointer_list:
  arg_call:
  - '{cxx_var}'
  arg_declare:
  - '{cxx_type} * {cxx_var} = {nullptr};'
  c_helper: get_from_object_{cxx_type}_list to_PyList_{cxx_type}
  cleanup:
  - Py_XDECREF({value_var}.dataobj);
  declare:
  - PyObject *{py_var};
  - PyObject *{pytmp_var} = {nullptr};
  - '{PY_typedef_converter} {value_var} = {PY_value_init};'
  - '{value_var}.name = "{c_var}";'
  - Py_ssize_t {size_var};
  fail:
  - Py_XDECREF({value_var}.dataobj);
  goto_fail: true
  name: py_inout_native_*_pointer_list
  object_created: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_call:
  - "{py_var} = {hnamefunc1}\t({cxx_var},\t {size_var});"
  - if ({py_var} == {nullptr}) goto fail;
  post_parse:
  - "if ({hnamefunc0}\t({pytmp_var}, &{value_var}) == 0)"
  - +goto fail;-
  - '{cxx_var} = {cast_static}{cxx_type} *{cast1}{value_var}.data{cast2};'
  - '{size_var} = {value_var}.size;'
py_inout_native_*_pointer_numpy:
  arg_call:
  - '{c_var}'
  declare:
  - PyObject * {pytmp_var};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_inout_native_*_pointer_numpy
  need_numpy: true
  object_created: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FROM_OTF(\t{pytmp_var},\t\
    \ {numpy_type},\t NPY_ARRAY_INOUT_ARRAY){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_inout_shadow_*:
  cxx_local_var: pointer
  name: py_inout_shadow_*
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_inout_string_&:
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_inout_string_&
  post_declare:
  - '{c_const}std::string {cxx_var}({c_var});'
py_inout_string_*:
  arg_call:
  - '&{cxx_var}'
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_inout_string_*
  post_declare:
  - '{c_const}std::string {cxx_var}({c_var});'
py_inout_string_scalar:
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_inout_string_scalar
  post_declare:
  - '{c_const}std::string {cxx_var}({c_var});'
py_inout_struct_&_class:
  arg_call:
  - '*{cxx_var}'
  cxx_local_var: pointer
  name: py_inout_struct_&_class
  object_created: true
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_inout_struct_&_numpy:
  arg_call:
  - '*{cxx_var}'
  arg_declare:
  - '{cxx_type} *{cxx_var};'
  declare:
  - PyObject * {pytmp_var} = {nullptr};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_inout_struct_&_numpy
  need_numpy: true
  object_created: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - Py_INCREF({PYN_descr});
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FromAny(\t{pytmp_var},\t\
    \ {PYN_descr},\t 0,\t 1,\t NPY_ARRAY_IN_ARRAY,\t {nullptr}){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_inout_struct_*_class:
  cxx_local_var: pointer
  name: py_inout_struct_*_class
  object_created: true
  post_declare:
  - "{c_const}{cxx_type} * {cxx_var} =\t {py_var} ? {py_var}->{PY_type_obj} : {nullptr};"
py_inout_struct_*_list:
  arg_call:
  - '&{cxx_var}'
  name: py_inout_struct_*_list
py_inout_struct_*_numpy:
  arg_declare:
  - '{cxx_type} *{cxx_var};'
  declare:
  - PyObject * {pytmp_var} = {nullptr};
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_inout_struct_*_numpy
  need_numpy: true
  object_created: true
  parse_args:
  - '&{pytmp_var}'
  parse_format: O
  post_parse:
  - Py_INCREF({PYN_descr});
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_FromAny(\t{pytmp_var},\t\
    \ {PYN_descr},\t 0,\t 1,\t NPY_ARRAY_IN_ARRAY,\t {nullptr}){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_inout_struct_list:
  name: py_inout_struct_list
py_out_bool:
  arg_declare:
  - bool {cxx_var};
  declare:
  - '{PyObject} * {py_var} = {nullptr};'
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_bool
  object_created: true
  post_call:
  - '{py_var} = PyBool_FromLong({c_var});'
  - if ({py_var} == {nullptr}) goto fail;
py_out_bool_*:
  arg_call:
  - '&{cxx_var}'
  arg_declare:
  - bool {cxx_var};
  declare:
  - '{PyObject} * {py_var} = {nullptr};'
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_bool_*
  object_created: true
  post_call:
  - '{py_var} = PyBool_FromLong({c_var});'
  - if ({py_var} == {nullptr}) goto fail;
py_out_char_*_charlen:
  arg_call:
  - '{c_var}'
  arg_declare:
  - '{c_const}char {c_var}[{charlen}];  // intent(out)'
  fmtdict:
    ctor_expr: '{c_var}'
  name: py_out_char_*_charlen
py_out_native_&:
  arg_declare:
  - '{c_const}{c_type} {c_var};'
  name: py_out_native_&
py_out_native_*:
  arg_call:
  - '&{c_var}'
  arg_declare:
  - '{c_type} {c_var};'
  fmtdict:
    ctor_expr: '{c_var}'
  name: py_out_native_*
py_out_native_*&_pointer_numpy:
  arg_call:
  - '{cxx_var}'
  arg_declare:
  - '{c_const}{c_type} *{c_var};'
  declare:
  - '{npy_intp_decl}PyObject *{py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_out_native_*&_pointer_numpy
  need_numpy: true
  object_created: true
  post_call:
  - "{npy_intp_asgn}{py_var} = PyArray_SimpleNewFromData({npy_rank},\t {npy_dims_var},\t\
    \ {numpy_type},\t {cxx_nonconst_ptr});"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_out_native_**_pointer_list:
  arg_call:
  - '&{cxx_var}'
  arg_declare:
  - '{c_const}{c_type} *{c_var};'
  c_helper: to_PyList_{cxx_type}
  declare:
  - PyObject *{py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_native_**_pointer_list
  object_created: true
  post_call:
  - "{py_var} = {hnamefunc0}\t({cxx_var},\t {array_size});"
  - if ({py_var} == {nullptr}) goto fail;
py_out_native_**_pointer_numpy:
  arg_call:
  - '&{cxx_var}'
  arg_declare:
  - '{c_const}{c_type} *{c_var};'
  declare:
  - '{npy_intp_decl}PyObject *{py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_out_native_**_pointer_numpy
  need_numpy: true
  object_created: true
  post_call:
  - "{npy_intp_asgn}{py_var} = PyArray_SimpleNewFromData({npy_rank},\t {npy_dims_var},\t\
    \ {numpy_type},\t {cxx_nonconst_ptr});"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_out_native_**_raw:
  arg_call:
  - '&{cxx_var}'
  arg_declare:
  - '{c_type} *{c_var};'
  declare:
  - PyObject *{py_var} = {nullptr};
  name: py_out_native_**_raw
  object_created: true
  post_call:
  - '{py_var} = PyCapsule_New({cxx_var}, NULL, NULL);'
py_out_native_*_allocatable_list:
  arg_call:
  - '{c_var}'
  arg_declare:
  - '{cxx_type} * {cxx_var} = {nullptr};'
  c_header:
  - <stdlib.h>
  c_helper: to_PyList_{cxx_type}
  cleanup:
  - '{stdlib}free({cxx_var});'
  - '{cxx_var} = {nullptr};'
  cxx_header:
  - <cstdlib>
  declare:
  - PyObject *{py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  - "if ({cxx_var} != {nullptr})\t {stdlib}free({cxx_var});"
  goto_fail: true
  name: py_out_native_*_allocatable_list
  object_created: true
  post_call:
  - "{py_var} = {hnamefunc0}\t({cxx_var},\t {array_size});"
  - if ({py_var} == {nullptr}) goto fail;
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(std::malloc(\tsizeof({cxx_type}) * ({array_size})));"
  - if ({cxx_var} == {nullptr}) {{+
  - PyErr_NoMemory();
  - goto fail;
  - -}}
py_out_native_*_allocatable_numpy:
  arg_call:
  - '{c_var}'
  declare:
  - '{npy_intp_decl}PyArrayObject * {py_var} = {nullptr};'
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_native_*_allocatable_numpy
  need_numpy: true
  object_created: true
  post_parse:
  - '{npy_intp_asgn}{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_SimpleNew({npy_rank},
    {npy_dims_var}, {numpy_type}){cast2};'
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_out_native_*_pointer_list:
  arg_call:
  - '{c_var}'
  arg_declare:
  - '{cxx_type} * {cxx_var} = {nullptr};'
  c_header:
  - <stdlib.h>
  c_helper: to_PyList_{cxx_type}
  cleanup:
  - '{stdlib}free({cxx_var});'
  - '{cxx_var} = {nullptr};'
  cxx_header:
  - <cstdlib>
  declare:
  - PyObject *{py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  - "if ({cxx_var} != {nullptr})\t {stdlib}free({cxx_var});"
  goto_fail: true
  name: py_out_native_*_pointer_list
  object_created: true
  post_call:
  - "{py_var} = {hnamefunc0}\t({cxx_var},\t {array_size});"
  - if ({py_var} == {nullptr}) goto fail;
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(std::malloc(\tsizeof({cxx_type}) * ({array_size})));"
  - if ({cxx_var} == {nullptr}) {{+
  - PyErr_NoMemory();
  - goto fail;
  - -}}
py_out_native_*_pointer_numpy:
  arg_call:
  - '{c_var}'
  declare:
  - '{npy_intp_decl}PyArrayObject * {py_var} = {nullptr};'
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_native_*_pointer_numpy
  need_numpy: true
  object_created: true
  post_parse:
  - '{npy_intp_asgn}{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_SimpleNew({npy_rank},
    {npy_dims_var}, {numpy_type}){cast2};'
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_out_shadow_*:
  declare:
  - '{PyObject} *{py_var} = {nullptr};'
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_shadow_*
  object_created: true
  post_call:
  - "{py_var} =\t PyObject_New({PyObject}, &{PyTypeObject});"
  - if ({py_var} == {nullptr}) goto fail;
  - '{py_var}->{PY_type_obj} = {cxx_addr}{cxx_var};'
py_out_string_&:
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_out_string_&
  post_declare:
  - '{c_const}std::string {cxx_var};'
py_out_string_*:
  arg_call:
  - '&{cxx_var}'
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_out_string_*
  post_declare:
  - '{c_const}std::string {cxx_var};'
py_out_string_scalar:
  cxx_local_var: scalar
  fmtdict:
    ctor_expr: "{cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size()"
  name: py_out_string_scalar
  post_declare:
  - '{c_const}std::string {cxx_var};'
py_out_struct_&_class:
  arg_call:
  - '*{cxx_var}'
  arg_declare:
  - '{cxx_type} *{cxx_var} = {nullptr};'
  cxx_local_var: pointer
  declare:
  - PyObject *{py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_struct_&_class
  object_created: true
  post_call:
  - "{py_var} = {PY_to_object_idtor_func}({cxx_var},\t {capsule_order});"
  - if ({py_var} == {nullptr}) goto fail;
  pre_call:
  - '{cxx_var} = new {cxx_type};'
py_out_struct_&_numpy:
  arg_call:
  - '*{cxx_var}'
  arg_declare:
  - '{cxx_type} *{cxx_var};'
  declare:
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_struct_&_numpy
  need_numpy: true
  object_created: true
  post_parse:
  - Py_INCREF({PYN_descr});
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_NewFromDescr(\t&PyArray_Type,\t\
    \ {PYN_descr},\t 0,\t {nullptr},\t {nullptr},\t {nullptr},\t 0,\t {nullptr}){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_out_struct_*_class:
  arg_declare:
  - '{cxx_type} *{cxx_var} = {nullptr};'
  cxx_local_var: pointer
  declare:
  - PyObject *{py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_struct_*_class
  object_created: true
  post_call:
  - "{py_var} = {PY_to_object_idtor_func}({cxx_addr}{cxx_var},\t {capsule_order});"
  - if ({py_var} == {nullptr}) goto fail;
  pre_call:
  - '{cxx_var} = new {cxx_type};'
py_out_struct_*_list:
  arg_call:
  - '&{cxx_var}'
  name: py_out_struct_*_list
  post_declare:
  - '{cxx_type} {cxx_var};'
py_out_struct_*_numpy:
  arg_declare:
  - '{cxx_type} *{cxx_var};'
  declare:
  - PyArrayObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_struct_*_numpy
  need_numpy: true
  object_created: true
  post_parse:
  - Py_INCREF({PYN_descr});
  - "{py_var} = {cast_reinterpret}PyArrayObject *{cast1}PyArray_NewFromDescr(\t&PyArray_Type,\t\
    \ {PYN_descr},\t 0,\t {nullptr},\t {nullptr},\t {nullptr},\t 0,\t {nullptr}){cast2};"
  - if ({py_var} == {nullptr}) {{+
  - "PyErr_SetString(PyExc_ValueError,\t \"{c_var} must be a 1-D array of {c_type}\"\
    );"
  - goto fail;
  - -}}
  pre_call:
  - "{cxx_var} = static_cast<{cxx_type} *>\t(PyArray_DATA({py_var}));"
py_out_struct_list:
  name: py_out_struct_list
  post_declare:
  - '{cxx_type} {cxx_var};'
py_out_vector_list:
  c_helper: to_PyList_vector_{cxx_T}
  cxx_local_var: scalar
  declare:
  - PyObject * {py_var} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  goto_fail: true
  name: py_out_vector_list
  object_created: true
  post_call:
  - "{py_var} = {hnamefunc0}\t({cxx_var});"
  - if ({py_var} == {nullptr}) goto fail;
  post_declare:
  - std::vector<{cxx_T}> {cxx_var};
py_out_vector_numpy:
  allocate_local_var: true
  arg_call:
  - '*{cxx_var}'
  cxx_local_var: pointer
  declare:
  - '{npy_intp_decl}PyObject * {py_var} = {nullptr};'
  declare_capsule:
  - PyObject *{py_capsule} = {nullptr};
  fail:
  - Py_XDECREF({py_var});
  fail_capsule:
  - Py_XDECREF({py_capsule});
  goto_fail: true
  name: py_out_vector_numpy
  need_numpy: true
  object_created: true
  post_call:
  - '{npy_dims_var}[0] = {cxx_var}->size();'
  - "{py_var} = PyArray_SimpleNewFromData({npy_rank},\t {npy_dims_var},\t {numpy_type},\t\
    \ {cxx_var}->data());"
  - if ({py_var} == {nullptr}) goto fail;
  post_call_capsule:
  - "{py_capsule} = PyCapsule_New({cxx_var}, \"{PY_numpy_array_capsule_name}\", \t\
    {PY_capsule_destructor_function});"
  - if ({py_capsule} == {nullptr}) goto fail;
  - "PyCapsule_SetContext({py_capsule},\t {PY_fetch_context_function}({capsule_order}));"
  - "if (PyArray_SetBaseObject(\t{cast_reinterpret}PyArrayObject *{cast1}{py_var}{cast2},\t\
    \ {py_capsule}) < 0)\t goto fail;"
py_out_void_*&:
  arg_call:
  - '{c_var}'
  arg_declare:
  - void *{c_var};
  fmtdict:
    ctor_expr: '{cxx_var}'
  name: py_out_void_*&
py_out_void_**:
  arg_call:
  - '&{c_var}'
  arg_declare:
  - void *{c_var};
  fmtdict:
    ctor_expr: '{cxx_var}'
  name: py_out_void_**
***** Lua
root
  lua
    ctor -- lua_ctor
    dtor -- lua_dtor
    function
      bool
        scalar -- lua_function_bool_scalar
      native
        scalar -- lua_function_native_scalar
      shadow
        * -- lua_function_shadow_*
      string
        & -- lua_function_string_&
        scalar -- lua_function_string_scalar
      void
        * -- lua_function_void_*
    in
      bool
        scalar -- lua_in_bool_scalar
      native
        scalar -- lua_in_native_scalar
      shadow
        * -- lua_in_shadow_*
      string
        & -- lua_in_string_&
        * -- lua_in_string_*
    inout
      native
        * -- lua_inout_native_*
    mixin
      callfunction -- lua_mixin_callfunction
      push -- lua_mixin_push
    subroutine -- lua_subroutine
lua_ctor:
  call:
  - "{LUA_userdata_type} * {LUA_userdata_var} =\t ({LUA_userdata_type} *) lua_newuserdata({LUA_state_var},\
    \ sizeof(*{LUA_userdata_var}));"
  - "{LUA_userdata_var}->{LUA_userdata_member} =\t new {namespace_scope}{cxx_class}({cxx_call_list});"
  - /* Add the metatable to the stack. */
  - luaL_getmetatable(L, "{LUA_metadata}");
  - /* Set the metatable on the userdata. */
  - lua_setmetatable(L, -2);
  name: lua_ctor
lua_dtor:
  call:
  - delete {LUA_userdata_var}->{LUA_userdata_member};
  - '{LUA_userdata_var}->{LUA_userdata_member} = NULL;'
  name: lua_dtor
lua_function_bool_scalar:
  call:
  - '{rv_asgn}{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_function_bool_scalar
  post_call:
  - '{push_expr};'
lua_function_native_scalar:
  call:
  - '{rv_asgn}{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_function_native_scalar
  post_call:
  - '{push_expr};'
lua_function_shadow_*:
  call:
  - '{rv_asgn}{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_function_shadow_*
  post_call:
  - '{push_expr};'
lua_function_string_&:
  call:
  - '{rv_asgn}{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_function_string_&
  post_call:
  - '{push_expr};'
lua_function_string_scalar:
  call:
  - '{rv_asgn}{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_function_string_scalar
  post_call:
  - '{push_expr};'
lua_function_void_*:
  call:
  - '{rv_asgn}{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_function_void_*
lua_in_bool_scalar:
  name: lua_in_bool_scalar
  pre_call:
  - bool {c_var} = {pop_expr};
lua_in_native_scalar:
  name: lua_in_native_scalar
  pre_call:
  - "{cxx_type} {cxx_var} =\t {pop_expr};"
lua_in_shadow_*:
  name: lua_in_shadow_*
  pre_call:
  - "{cxx_type} * {cxx_var} =\t {pop_expr};"
lua_in_string_&:
  name: lua_in_string_&
  pre_call:
  - "const char * {c_var} = \t{pop_expr};"
lua_in_string_*:
  name: lua_in_string_*
  pre_call:
  - "const char * {c_var} = \t{pop_expr};"
lua_inout_native_*:
  name: lua_inout_native_*
  pre_call:
  - // lua_native_*_inout;
lua_mixin_callfunction:
  call:
  - '{rv_asgn}{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_mixin_callfunction
lua_mixin_push:
  name: lua_mixin_push
  post_call:
  - '{push_expr};'
lua_subroutine:
  call:
  - '{LUA_this_call}{function_name}({cxx_call_list});'
  name: lua_subroutine
