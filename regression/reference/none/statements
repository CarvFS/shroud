root
  c
    char
      *
        in
          buf -- c_char_*_in_buf
          cfi -- c_char_*_in_cfi
        inout
          buf -- c_char_*_inout_buf
          cfi -- c_char_*_inout_cfi
        out
          buf -- c_char_*_out_buf
          cfi -- c_char_*_out_cfi
        result -- c_char_*_result
          buf -- c_char_*_result_buf
            allocatable -- c_char_*_result_buf_allocatable
          cfi -- c_char_*_result_cfi
            allocatable -- c_char_*_result_cfi_allocatable
      **
        in -- c_char_**_in
          buf -- c_char_**_in_buf
      scalar
        in -- c_char_scalar_in
        result -- c_char_scalar_result
          buf -- c_char_scalar_result_buf
          cfi -- c_char_scalar_result_cfi
    mixin
      cfi
        character
          arg -- c_mixin_cfi_character_arg
          result
            allocatable -- c_mixin_cfi_character_result_allocatable
    native
      &
        result -- c_native_*/&/**_result
      *
        in
          cdesc -- c_native_*_in/out/inout_cdesc
          cfi -- c_native_*_in_cfi
        inout
          cdesc -- c_native_*_in/out/inout_cdesc
        out
          cdesc -- c_native_*_in/out/inout_cdesc
        result -- c_native_*/&/**_result
          buf -- c_native_*_result_buf
          scalar -- c_native_*_result_scalar
      *&
        out
          buf -- c_native_*&_out_buf
      **
        in -- c_native_**_in
        out
          buf -- c_native_**_out_buf
        result -- c_native_*/&/**_result
    shadow
      ctor -- c_shadow_ctor
      dtor -- c_shadow_dtor
      in -- c_shadow_in
      inout -- c_shadow_inout
      result -- c_shadow_result
      scalar
        ctor -- c_shadow_scalar_ctor
        in -- c_shadow_scalar_in
        result -- c_shadow_scalar_result
    string
      &
        in -- c_string_*/&_in
          buf -- c_string_*/&_in_buf
          cfi -- c_string_scalar/*/&_in_cfi
        inout -- c_string_*/&_inout
          buf -- c_string_*/&_inout_buf
          cfi -- c_string_*/&_inout_cfi
        out -- c_string_*/&_out
          buf -- c_string_*/&_out_buf
          cfi -- c_string_*/&_out_cfi
        result -- c_string_scalar/*/&_result
          buf -- c_string_scalar/*/&_result_buf
            allocatable -- c_string_*/&_result_buf_allocatable
          cfi -- c_string_scalar/*/&_result_cfi
            allocatable -- c_string_*/&_result_cfi_allocatable
      *
        in -- c_string_*/&_in
          buf -- c_string_*/&_in_buf
          cfi -- c_string_scalar/*/&_in_cfi
        inout -- c_string_*/&_inout
          buf -- c_string_*/&_inout_buf
          cfi -- c_string_*/&_inout_cfi
        out -- c_string_*/&_out
          buf -- c_string_*/&_out_buf
          cfi -- c_string_*/&_out_cfi
        result -- c_string_scalar/*/&_result
          buf -- c_string_scalar/*/&_result_buf
            allocatable -- c_string_*/&_result_buf_allocatable
          cfi -- c_string_scalar/*/&_result_cfi
            allocatable -- c_string_*/&_result_cfi_allocatable
      scalar
        in -- c_string_scalar_in
          buf -- c_string_scalar_in_buf
          cfi -- c_string_scalar/*/&_in_cfi
        result -- c_string_scalar/*/&_result
          buf -- c_string_scalar/*/&_result_buf
            allocatable -- c_string_scalar_result_buf_allocatable
          cfi -- c_string_scalar/*/&_result_cfi
            allocatable -- c_string_scalar_result_cfi_allocatable
    struct -- c_struct
      *
        result -- c_struct_*_result
      result -- c_struct_result
    vector
      in
        buf -- c_vector_in_buf
          string -- c_vector_in_buf_string
      inout
        buf -- c_vector_inout_buf
          string -- c_vector_inout_buf_string
      out
        buf -- c_vector_out_buf
          string -- c_vector_out_buf_string
      result
        buf -- c_vector_result_buf
    void
      *
        cdesc -- c_void_*_cdesc
      **
        in -- c_void_**_in
  f
    bool
      in -- f_bool_in
      inout -- f_bool_inout
      out -- f_bool_out
      result -- f_bool_result
    char
      *
        result
          buf
            allocatable -- f_char_scalar/*_result_buf_allocatable
          cfi
            allocatable -- f_char_scalar/*_result_cfi_allocatable
          raw -- f_char_*_result_raw
      scalar
        in -- f_char_scalar_in
        result
          buf
            allocatable -- f_char_scalar/*_result_buf_allocatable
          cfi
            allocatable -- f_char_scalar/*_result_cfi_allocatable
    native
      &
        result -- f_native_&_result
          buf
            pointer -- f_native_&_result_buf_pointer
      *
        in
          cdesc -- f_native_*_in/out/inout_cdesc
          raw -- f_native_*_in_raw
        inout
          cdesc -- f_native_*_in/out/inout_cdesc
        out
          allocatable -- f_native_*_out_allocatable
          cdesc -- f_native_*_in/out/inout_cdesc
        result
          buf
            allocatable -- f_native_*_result_buf_allocatable
            pointer -- f_native_*_result_buf_pointer
              caller -- f_native_*_result_buf_pointer_caller
          pointer -- f_native_*_result_pointer
          raw -- f_native_*_result_raw
          scalar -- f_native_*_result_scalar
      *&
        out
          buf
            pointer -- f_native_**/*&_out_buf_pointer
      **
        out -- f_native_**_out
          buf
            pointer -- f_native_**/*&_out_buf_pointer
          raw -- f_native_**_out_raw
        result -- f_native_**_result
    shadow
      ctor -- f_shadow_ctor
      result -- f_shadow_result
    string
      &
        result
          buf
            allocatable -- f_string_scalar/*/&_result_buf_allocatable
          cfi
            allocatable -- f_string_scalar/*/&_result_cfi_allocatable
      *
        result
          buf
            allocatable -- f_string_scalar/*/&_result_buf_allocatable
          cfi
            allocatable -- f_string_scalar/*/&_result_cfi_allocatable
      scalar
        in -- f_string_scalar_in
        result
          buf
            allocatable -- f_string_scalar/*/&_result_buf_allocatable
          cfi
            allocatable -- f_string_scalar/*/&_result_cfi_allocatable
    struct
      *
        result -- f_struct_*_result
          buf
            pointer -- f_struct_*_result_buf_pointer
      scalar
        result -- f_struct_scalar_result
    vector
      inout -- f_vector_inout
        allocatable -- f_vector_inout_allocatable
      out -- f_vector_out
        allocatable -- f_vector_out_allocatable
      result -- f_vector_result
        allocatable -- f_vector_result_allocatable
    void
      *
        cdesc -- f_void_*_cdesc
        in -- f_void_*_in
        result -- f_void_*_result
      **
        in -- f_void_**_in
        out -- f_void_**_out
c_char_**_in:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char **{c_var}
  f_arg_decl:
  - 'type(C_PTR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_PTR
  name: c_char_**_in
  owner: library
c_char_**_in_buf:
  buf_args:
  - arg_decl
  - size
  - len
  c_arg_decl:
  - char *{c_var}
  c_helper: ShroudStrArrayAlloc ShroudStrArrayFree
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_char_**_in_buf
  owner: library
  post_call:
  - ShroudStrArrayFree({cxx_var}, {c_var_size});
  pre_call:
  - "char **{cxx_var} = ShroudStrArrayAlloc({c_var},\t {c_var_size},\t {c_var_len});"
c_char_*_in_buf:
  buf_args:
  - arg
  - len_trim
  c_helper: ShroudStrAlloc ShroudStrFree
  cxx_local_var: pointer
  name: c_char_*_in_buf
  owner: library
  post_call:
  - ShroudStrFree({cxx_var});
  pre_call:
  - "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_trim},\t {c_var_trim});"
c_char_*_in_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_char_*_in_cfi
  owner: library
  post_call:
  - ShroudStrFree({cxx_var});
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - "char *{cxx_var} = ShroudStrAlloc(\t{c_var},\t {cfi_prefix}{c_var}->elem_len,\t\
    \ -1);"
c_char_*_inout_buf:
  buf_args:
  - arg
  - len_trim
  - len
  c_helper: ShroudStrAlloc ShroudStrCopy ShroudStrFree
  cxx_local_var: pointer
  name: c_char_*_inout_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);"
  - ShroudStrFree({cxx_var});
  pre_call:
  - "char * {cxx_var} = ShroudStrAlloc(\t{c_var},\t {c_var_len},\t {c_var_trim});"
c_char_*_inout_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrAlloc ShroudStrCopy ShroudStrFree
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_char_*_inout_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var},\t -1);"
  - ShroudStrFree({cxx_var});
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - "char *{cxx_var} = ShroudStrAlloc(\t{c_var},\t {cfi_prefix}{c_var}->elem_len,\t\
    \ -1);"
c_char_*_out_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrBlankFill
  name: c_char_*_out_buf
  owner: library
  post_call:
  - ShroudStrBlankFill({c_var}, {c_var_len});
c_char_*_out_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrBlankFill
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_char_*_out_cfi
  owner: library
  post_call:
  - ShroudStrBlankFill({cxx_var}, {cfi_prefix}{c_var}->elem_len);
  pre_call:
  - char *{cxx_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_char_*_result:
  name: c_char_*_result
  owner: library
  return_cptr: true
c_char_*_result_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_char_*_result_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var},\t -1);"
c_char_*_result_buf_allocatable:
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  name: c_char_*_result_buf_allocatable
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr = {cxx_nonconst_ptr};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.ccharp = {cxx_var};'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = {cxx_var} == {nullptr} ? 0 : {stdlib}strlen({cxx_var});'
  - '{c_var_context}->size = 1;'
  - '{c_var_context}->rank = 0;'
c_char_*_result_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_char_*_result_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var},\t -1);"
c_char_*_result_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_char_*_result_cfi_allocatable
  owner: library
  post_call:
  - if ({cxx_var} != {nullptr}) {{+
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \tstrlen({cxx_var}));"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}, \t{cfi_prefix}{c_var}->elem_len);"
  - -}}
  - -}}
  return_type: void
c_char_scalar_in:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char {c_var}
  f_arg_decl:
  - 'character(kind=C_CHAR), value, intent(IN) :: {c_var}'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_char_scalar_in
  owner: library
c_char_scalar_result:
  f_module:
    iso_c_binding:
    - C_CHAR
  f_result_decl:
  - 'character(kind=C_CHAR) :: {c_var}'
  name: c_char_scalar_result
  owner: library
c_char_scalar_result_buf:
  buf_args:
  - arg
  - len
  impl_header:
  - <cstring>
  name: c_char_scalar_result_buf
  owner: library
  post_call:
  - '{stdlib}memset({c_var}, '' '', {c_var_len});'
  - '{c_var}[0] = {cxx_var};'
c_char_scalar_result_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  impl_header:
  - <cstring>
  name: c_char_scalar_result_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - '{stdlib}memset({c_var}, '' '', {cfi_prefix}{c_var}->elem_len);'
  - '{c_var}[0] = {cxx_var};'
c_mixin_cfi_character_arg:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  cxx_local_var: pointer
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_mixin_cfi_character_arg
  owner: library
  pre_call:
  - char *{cxx_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_mixin_cfi_character_result_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_mixin_cfi_character_result_allocatable
  owner: library
c_native_&_result:
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_native_&_result
  owner: library
c_native_*&_out_buf:
  arg_call:
  - '{cxx_var}'
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  name: c_native_*&_out_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_nonconst_ptr};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var};'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_type});'
  - '{c_var_context}->rank = {rank};{c_array_shape}'
  - '{c_var_context}->size = {c_array_size};'
  pre_call:
  - '{c_const}{cxx_type} *{cxx_var};'
c_native_**_in:
  buf_args:
  - arg_decl
  c_arg_decl:
  - '{cxx_type} **{cxx_var}'
  f_arg_decl:
  - 'type(C_PTR), intent(IN), value :: {c_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: c_native_**_in
  owner: library
c_native_**_out_buf:
  arg_call:
  - '&{cxx_var}'
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  name: c_native_**_out_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_nonconst_ptr};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var};'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_type});'
  - '{c_var_context}->rank = {rank};{c_array_shape}'
  - '{c_var_context}->size = {c_array_size};'
  pre_call:
  - '{c_const}{cxx_type} *{cxx_var};'
c_native_**_result:
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_native_**_result
  owner: library
c_native_*_in_cdesc:
  buf_args:
  - context
  name: c_native_*_in_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_native_*_in_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{c_var}
  cxx_local_var: pointer
  f_arg_decl:
  - '{f_type}, intent({f_intent}) :: {c_var}{f_c_dimension}'
  f_module_line: iso_c_binding:{f_kind}
  iface_header:
  - ISO_Fortran_binding.h
  name: c_native_*_in_cfi
  owner: library
  pre_call:
  - '{cxx_type} *{cxx_var} = {cast_static}{cxx_type} *{cast1}{c_var}->base_addr{cast2};'
c_native_*_inout_cdesc:
  buf_args:
  - context
  name: c_native_*_inout_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_native_*_out_cdesc:
  buf_args:
  - context
  name: c_native_*_out_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
c_native_*_result:
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_native_*_result
  owner: library
c_native_*_result_buf:
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  name: c_native_*_result_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_nonconst_ptr};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var};'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_type});'
  - '{c_var_context}->rank = {rank};{c_array_shape}'
  - '{c_var_context}->size = {c_array_size};'
  return_cptr: true
c_native_*_result_scalar:
  f_module_line: iso_c_binding:{f_kind}
  f_result_decl:
  - '{f_type} :: {c_var}'
  name: c_native_*_result_scalar
  owner: library
c_shadow_ctor:
  buf_extra:
  - shadow
  call:
  - "{cxx_type} *{cxx_var} =\t new {cxx_type}({C_call_list});"
  - "{shadow_var}->addr = static_cast<{c_const}void *>(\t{cxx_var});"
  - '{shadow_var}->idtor = {idtor};'
  cxx_local_var: pointer
  name: c_shadow_ctor
  owner: caller
  ret:
  - return {shadow_var};
  return_type: '{c_type} *'
c_shadow_dtor:
  call:
  - delete {CXX_this};
  - '{C_this}->addr = {nullptr};'
  impl_header:
  - <cstddef>
  name: c_shadow_dtor
  owner: library
  return_type: void
c_shadow_in:
  buf_args:
  - shadow
  cxx_local_var: pointer
  name: c_shadow_in
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} =\t {cast_static}{c_const}{cxx_type} *{cast1}{c_var}{c_member}addr{cast2};"
c_shadow_inout:
  buf_args:
  - shadow
  cxx_local_var: pointer
  name: c_shadow_inout
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} =\t {cast_static}{c_const}{cxx_type} *{cast1}{c_var}{c_member}addr{cast2};"
c_shadow_result:
  buf_extra:
  - shadow
  c_local_var: pointer
  name: c_shadow_result
  owner: library
  post_call:
  - '{shadow_var}->addr = {cxx_nonconst_ptr};'
  - '{shadow_var}->idtor = {idtor};'
  ret:
  - return {shadow_var};
  return_cptr: true
  return_type: '{c_type} *'
c_shadow_scalar_ctor:
  buf_extra:
  - shadow
  call:
  - "{cxx_type} *{cxx_var} =\t new {cxx_type}({C_call_list});"
  - "{shadow_var}->addr = static_cast<{c_const}void *>(\t{cxx_var});"
  - '{shadow_var}->idtor = {idtor};'
  cxx_local_var: pointer
  name: c_shadow_scalar_ctor
  owner: caller
  ret:
  - return {shadow_var};
  return_type: '{c_type} *'
c_shadow_scalar_in:
  buf_args:
  - shadow
  cxx_local_var: pointer
  name: c_shadow_scalar_in
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} =\t {cast_static}{c_const}{cxx_type} *{cast1}{c_var}{c_member}addr{cast2};"
c_shadow_scalar_result:
  buf_extra:
  - shadow
  c_local_var: pointer
  cxx_local_var: pointer
  name: c_shadow_scalar_result
  owner: caller
  post_call:
  - '{shadow_var}->addr = {cxx_nonconst_ptr};'
  - '{shadow_var}->idtor = {idtor};'
  pre_call:
  - '{cxx_type} * {cxx_var} = new {cxx_type};'
  ret:
  - return {shadow_var};
  return_cptr: true
  return_type: '{c_type} *'
c_string_&_in:
  cxx_local_var: scalar
  name: c_string_&_in
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_string_&_in_buf:
  buf_args:
  - arg
  - len_trim
  cxx_local_var: scalar
  name: c_string_&_in_buf
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_string_&_in_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_&_in_cfi
  owner: library
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_string_&_inout:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_string_&_inout
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_string_&_inout_buf:
  buf_args:
  - arg
  - len_trim
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_string_&_inout_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var}({c_var}, {c_var_trim});
c_string_&_inout_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_&_inout_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_string_&_out:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_string_&_out
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var};'
c_string_&_out_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_string_&_out_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
c_string_&_out_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_&_out_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_string_&_result:
  name: c_string_&_result
  owner: library
  ret:
  - return {c_var};
  return_cptr: true
c_string_&_result_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_string_&_result_buf
  owner: library
  post_call:
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  - -}}
c_string_&_result_buf_allocatable:
  buf_args:
  - context
  c_helper: ShroudStrToArray
  name: c_string_&_result_buf_allocatable
  owner: library
  post_call:
  - ShroudStrToArray({c_var_context}, {cxx_addr}{cxx_var}, {idtor});
c_string_&_result_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_&_result_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  - -}}
c_string_&_result_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  impl_header:
  - <cstring>
  name: c_string_&_result_cfi_allocatable
  owner: library
  post_call:
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \t{cxx_var}{cxx_member}length());"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}{cxx_member}data(),\
    \ \t{cxx_var}{cxx_member}length());"
  - -}}
  return_type: void
c_string_*_in:
  cxx_local_var: scalar
  name: c_string_*_in
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_string_*_in_buf:
  buf_args:
  - arg
  - len_trim
  cxx_local_var: scalar
  name: c_string_*_in_buf
  owner: library
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_string_*_in_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_*_in_cfi
  owner: library
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_string_*_inout:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_string_*_inout
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var}({c_var});'
c_string_*_inout_buf:
  buf_args:
  - arg
  - len_trim
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_string_*_inout_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var}({c_var}, {c_var_trim});
c_string_*_inout_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_*_inout_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_string_*_out:
  cxx_local_var: scalar
  impl_header:
  - <cstring>
  name: c_string_*_out
  owner: library
  post_call:
  - strcpy({c_var}, {cxx_var}{cxx_member}c_str());
  pre_call:
  - '{c_const}std::string {cxx_var};'
c_string_*_out_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  name: c_string_*_out_buf
  owner: library
  post_call:
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
c_string_*_out_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_*_out_cfi
  owner: library
  post_call:
  - "ShroudStrCopy({c_var},\t {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  pre_call:
  - std::string {cxx_var};
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
c_string_*_result:
  name: c_string_*_result
  owner: library
  ret:
  - return {c_var};
  return_cptr: true
c_string_*_result_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_string_*_result_buf
  owner: library
  post_call:
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  - -}}
c_string_*_result_buf_allocatable:
  buf_args:
  - context
  c_helper: ShroudStrToArray
  name: c_string_*_result_buf_allocatable
  owner: library
  post_call:
  - ShroudStrToArray({c_var_context}, {cxx_addr}{cxx_var}, {idtor});
c_string_*_result_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_*_result_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  - -}}
c_string_*_result_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  impl_header:
  - <cstring>
  name: c_string_*_result_cfi_allocatable
  owner: library
  post_call:
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \t{cxx_var}{cxx_member}length());"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}{cxx_member}data(),\
    \ \t{cxx_var}{cxx_member}length());"
  - -}}
  return_type: void
c_string_scalar_in:
  buf_args:
  - arg_decl
  c_arg_decl:
  - char *{c_var}
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_string_scalar_in
  owner: library
c_string_scalar_in_buf:
  buf_args:
  - arg_decl
  - len_trim
  c_arg_decl:
  - char *{c_var}
  call:
  - '{cxx_var}'
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(kind=C_CHAR), intent(IN) :: {c_var}(*)'
  f_module:
    iso_c_binding:
    - C_CHAR
  name: c_string_scalar_in_buf
  owner: library
  pre_call:
  - std::string {cxx_var}({c_var}, {c_var_trim});
c_string_scalar_in_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_scalar_in_cfi
  owner: library
  pre_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - size_t {c_var_trim} = ShroudLenTrim({c_var}, {cfi_prefix}{c_var}->elem_len);
  - '{c_const}std::string {cxx_var}({c_var}, {c_var_trim});'
c_string_scalar_result:
  name: c_string_scalar_result
  owner: library
  ret:
  - return {c_var};
  return_cptr: true
c_string_scalar_result_buf:
  buf_args:
  - arg
  - len
  c_helper: ShroudStrCopy
  name: c_string_scalar_result_buf
  owner: library
  post_call:
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}data(),\t {cxx_var}{cxx_member}size());"
  - -}}
c_string_scalar_result_buf_allocatable:
  buf_args:
  - context
  c_helper: ShroudStrToArray
  cxx_local_var: pointer
  destructor_name: new_string
  name: c_string_scalar_result_buf_allocatable
  owner: library
  post_call:
  - ShroudStrToArray({c_var_context}, {cxx_var}, {idtor});
  pre_call:
  - std::string * {cxx_var} = new std::string;
c_string_scalar_result_cfi:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  c_helper: ShroudStrCopy
  f_arg_decl:
  - 'character(len=*), intent({f_intent}) :: {c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_scalar_result_cfi
  owner: library
  post_call:
  - char *{c_var} = {cast_static}char *{cast1}{cfi_prefix}{c_var}->base_addr{cast2};
  - if ({cxx_var}{cxx_member}empty()) {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {nullptr},\t 0);"
  - -}} else {{+
  - "ShroudStrCopy({c_var}, {cfi_prefix}{c_var}->elem_len,\t {cxx_var}{cxx_member}data(),\t\
    \ {cxx_var}{cxx_member}size());"
  - -}}
c_string_scalar_result_cfi_allocatable:
  buf_args:
  - arg_decl
  c_arg_decl:
  - CFI_cdesc_t *{cfi_prefix}{c_var}
  destructor_name: new_string
  f_arg_decl:
  - 'character(len=:), intent({f_intent}), allocatable :: {c_var}'
  f_c_arg_names:
  - '{c_var}'
  iface_header:
  - ISO_Fortran_binding.h
  name: c_string_scalar_result_cfi_allocatable
  owner: library
  post_call:
  - "int SH_ret = CFI_allocate({cfi_prefix}{c_var}, \t(CFI_index_t *) 0, \t(CFI_index_t\
    \ *) 0, \t{cxx_var}.length());"
  - if (SH_ret == CFI_SUCCESS) {{+
  - "{stdlib}memcpy({cfi_prefix}{c_var}->base_addr, \t{cxx_var}.data(), \t{cfi_prefix}{c_var}->elem_len);"
  - -}}
  return_type: void
c_struct:
  cxx_local_var: pointer
  name: c_struct
  owner: library
  pre_call:
  - "{c_const}{cxx_type} * {cxx_var} = \tstatic_cast<{c_const}{cxx_type} *>\t(static_cast<{c_const}void\
    \ *>(\t{c_addr}{c_var}));"
c_struct_*_result:
  c_local_var: pointer
  f_module:
    iso_c_binding:
    - C_PTR
  f_result_decl:
  - type(C_PTR) {c_var}
  name: c_struct_*_result
  owner: library
  post_call:
  - "{c_const}{c_type} * {c_var} = \tstatic_cast<{c_const}{c_type} *>(\tstatic_cast<{c_const}void\
    \ *>(\t{cxx_addr}{cxx_var}));"
c_struct_result:
  c_local_var: pointer
  name: c_struct_result
  owner: library
  post_call:
  - "{c_const}{c_type} * {c_var} = \tstatic_cast<{c_const}{c_type} *>(\tstatic_cast<{c_const}void\
    \ *>(\t{cxx_addr}{cxx_var}));"
c_vector_in_buf:
  buf_args:
  - arg
  - size
  cxx_local_var: scalar
  name: c_vector_in_buf
  owner: library
  pre_call:
  - '{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});'
c_vector_in_buf_string:
  buf_args:
  - arg
  - size
  - len
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  name: c_vector_in_buf_string
  owner: library
  pre_call:
  - std::vector<{cxx_T}> {cxx_var};
  - '{{+'
  - '{c_const}char * BBB = {c_var};'
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {c_var_size};'
  - -for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - '{cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));'
  - BBB += {c_var_len};
  - -}}
  - -}}
c_vector_inout_buf:
  buf_args:
  - arg
  - size
  - context
  c_helper: ShroudTypeDefines
  cxx_local_var: pointer
  destructor_name: std_vector_{cxx_T}
  name: c_vector_inout_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_var};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var}->empty() ? {nullptr} : &{cxx_var}->front();'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_T});'
  - '{c_var_context}->size = {cxx_var}->size();'
  - '{c_var_context}->rank = 1;'
  - '{c_var_context}->shape[0] = {c_var_context}->size;'
  pre_call:
  - "std::vector<{cxx_T}> *{cxx_var} = \tnew std::vector<{cxx_T}>\t(\t{c_var}, {c_var}\
    \ + {c_var_size});"
c_vector_inout_buf_string:
  buf_args:
  - arg
  - size
  - len
  cxx_local_var: scalar
  name: c_vector_inout_buf_string
  owner: library
  post_call:
  - '{{+'
  - char * BBB = {c_var};
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {c_var_size};'
  - -{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);
  - for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());"
  - BBB += {c_var_len};
  - -}}
  - -}}
  pre_call:
  - std::vector<{cxx_T}> {cxx_var};
  - '{{+'
  - '{c_const}char * BBB = {c_var};'
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {c_var_size};'
  - -for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - '{cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));'
  - BBB += {c_var_len};
  - -}}
  - -}}
c_vector_out_buf:
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  cxx_local_var: pointer
  destructor_name: std_vector_{cxx_T}
  name: c_vector_out_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_var};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var}->empty() ? {nullptr} : &{cxx_var}->front();'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_T});'
  - '{c_var_context}->size = {cxx_var}->size();'
  - '{c_var_context}->rank = 1;'
  - '{c_var_context}->shape[0] = {c_var_context}->size;'
  pre_call:
  - "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;"
c_vector_out_buf_string:
  buf_args:
  - arg
  - size
  - len
  c_helper: ShroudLenTrim
  cxx_local_var: scalar
  name: c_vector_out_buf_string
  owner: library
  post_call:
  - '{{+'
  - char * BBB = {c_var};
  - std::vector<{cxx_T}>::size_type
  - +{c_temp}i = 0,
  - '{c_temp}n = {c_var_size};'
  - '{c_temp}n = std::min({cxx_var}.size(),{c_temp}n);'
  - -for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+
  - "ShroudStrCopy(BBB, {c_var_len},\t {cxx_var}[{c_temp}i].data(),\t {cxx_var}[{c_temp}i].size());"
  - BBB += {c_var_len};
  - -}}
  - -}}
  pre_call:
  - '{c_const}std::vector<{cxx_T}> {cxx_var};'
c_vector_result_buf:
  buf_args:
  - context
  c_helper: ShroudTypeDefines
  cxx_local_var: pointer
  destructor_name: std_vector_{cxx_T}
  name: c_vector_result_buf
  owner: library
  post_call:
  - '{c_var_context}->cxx.addr  = {cxx_var};'
  - '{c_var_context}->cxx.idtor = {idtor};'
  - '{c_var_context}->addr.base = {cxx_var}->empty() ? {nullptr} : &{cxx_var}->front();'
  - '{c_var_context}->type = {sh_type};'
  - '{c_var_context}->elem_len = sizeof({cxx_T});'
  - '{c_var_context}->size = {cxx_var}->size();'
  - '{c_var_context}->rank = 1;'
  - '{c_var_context}->shape[0] = {c_var_context}->size;'
  pre_call:
  - "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;"
c_void_**_in:
  buf_args:
  - arg_decl
  c_arg_decl:
  - void **{c_var}
  f_arg_decl:
  - 'type(C_PTR), intent(IN) :: {c_var}{f_c_dimension}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: c_void_**_in
  owner: library
c_void_*_cdesc:
  buf_args:
  - context
  name: c_void_*_cdesc
  owner: library
  pre_call:
  - "{cxx_type} * {c_var} = static_cast<{cxx_type} *>\t(const_cast<void *>({c_var_context}->addr.base));"
f_bool_in:
  c_local_var: true
  name: f_bool_in
  pre_call:
  - '{c_var} = {f_var}  ! coerce to C_BOOL'
f_bool_inout:
  c_local_var: true
  name: f_bool_inout
  post_call:
  - '{f_var} = {c_var}  ! coerce to logical'
  pre_call:
  - '{c_var} = {f_var}  ! coerce to C_BOOL'
f_bool_out:
  c_local_var: true
  name: f_bool_out
  post_call:
  - '{f_var} = {c_var}  ! coerce to logical'
f_bool_result:
  name: f_bool_result
  need_wrapper: true
f_char_*_result_buf_allocatable:
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  f_helper: copy_string
  name: f_char_*_result_buf_allocatable
  need_wrapper: true
  post_call:
  - 'allocate(character(len={c_var_context}%elem_len):: {f_var})'
  - call {hnamefunc0}({c_var_context}, {f_var}, {c_var_context}%elem_len)
f_char_*_result_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_char_*_result_cfi_allocatable
  need_wrapper: true
f_char_*_result_raw:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  name: f_char_*_result_raw
f_char_scalar_in:
  arg_decl:
  - 'character, value, intent(IN) :: {f_var}'
  name: f_char_scalar_in
f_char_scalar_result_buf_allocatable:
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  f_helper: copy_string
  name: f_char_scalar_result_buf_allocatable
  need_wrapper: true
  post_call:
  - 'allocate(character(len={c_var_context}%elem_len):: {f_var})'
  - call {hnamefunc0}({c_var_context}, {f_var}, {c_var_context}%elem_len)
f_char_scalar_result_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_char_scalar_result_cfi_allocatable
  need_wrapper: true
f_native_&_result:
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_native_&_result
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_native_&_result_buf_pointer:
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_native_&_result_buf_pointer
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_native_*&_out_buf_pointer:
  arg_decl:
  - '{f_type}, intent({f_intent}), pointer :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_native_*&_out_buf_pointer
  post_call:
  - call c_f_pointer({c_var_context}%base_addr, {f_var}{f_array_shape})
f_native_**_out:
  arg_decl:
  - '{f_type}, intent({f_intent}), pointer :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_native_**_out
f_native_**_out_buf_pointer:
  arg_decl:
  - '{f_type}, intent({f_intent}), pointer :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - c_f_pointer
  name: f_native_**_out_buf_pointer
  post_call:
  - call c_f_pointer({c_var_context}%base_addr, {f_var}{f_array_shape})
f_native_**_out_raw:
  arg_decl:
  - 'type(C_PTR), intent({f_intent}) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_native_**_out_raw
f_native_**_result:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  name: f_native_**_result
f_native_*_in_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_native_*_in_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_native_*_in_raw:
  arg_c_call:
  - C_LOC({f_var})
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_native_*_in_raw
f_native_*_inout_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_native_*_inout_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_native_*_out_allocatable:
  arg_decl:
  - '{f_type}, intent({f_intent}), allocatable :: {f_var}{f_assumed_shape}'
  name: f_native_*_out_allocatable
  pre_call:
  - allocate({f_var}{f_array_allocate})
f_native_*_out_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_native_*_out_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_native_*_result_buf_allocatable:
  arg_decl:
  - '{f_type}, allocatable :: {f_var}{f_assumed_shape}'
  c_helper: copy_array
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_helper: copy_array_{cxx_type}
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_native_*_result_buf_allocatable
  post_call:
  - allocate({f_var}({c_var_dimension}))
  - call {hnamefunc0}({c_var_context}, {f_var}, size({f_var}, kind=C_SIZE_T))
f_native_*_result_buf_pointer:
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_native_*_result_buf_pointer
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_native_*_result_buf_pointer_caller:
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  - 'type({F_capsule_type}), intent(OUT) :: {c_var_capsule}'
  arg_name:
  - '{c_var_capsule}'
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_helper: capsule_helper
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_native_*_result_buf_pointer_caller
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
  - '{c_var_capsule}%mem = {c_var_context}%cxx'
f_native_*_result_pointer:
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_native_*_result_pointer
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_native_*_result_raw:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  name: f_native_*_result_raw
f_native_*_result_scalar:
  name: f_native_*_result_scalar
f_shadow_ctor:
  call:
  - '{F_result_ptr} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_result_ptr}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_shadow_ctor
  need_wrapper: true
f_shadow_result:
  call:
  - '{F_result_ptr} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_result_ptr}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_shadow_result
  need_wrapper: true
f_string_&_result_buf_allocatable:
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  f_helper: copy_string
  name: f_string_&_result_buf_allocatable
  need_wrapper: true
  post_call:
  - 'allocate(character(len={c_var_context}%elem_len):: {f_var})'
  - call {hnamefunc0}({c_var_context}, {f_var}, {c_var_context}%elem_len)
f_string_&_result_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_string_&_result_cfi_allocatable
  need_wrapper: true
f_string_*_result_buf_allocatable:
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  f_helper: copy_string
  name: f_string_*_result_buf_allocatable
  need_wrapper: true
  post_call:
  - 'allocate(character(len={c_var_context}%elem_len):: {f_var})'
  - call {hnamefunc0}({c_var_context}, {f_var}, {c_var_context}%elem_len)
f_string_*_result_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_string_*_result_cfi_allocatable
  need_wrapper: true
f_string_scalar_in:
  arg_decl:
  - 'character(len=*), intent(IN) :: {f_var}'
  name: f_string_scalar_in
  need_wrapper: true
f_string_scalar_result_buf_allocatable:
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  c_helper: copy_string
  f_helper: copy_string
  name: f_string_scalar_result_buf_allocatable
  need_wrapper: true
  post_call:
  - 'allocate(character(len={c_var_context}%elem_len):: {f_var})'
  - call {hnamefunc0}({c_var_context}, {f_var}, {c_var_context}%elem_len)
f_string_scalar_result_cfi_allocatable:
  arg_c_call:
  - '{f_var}'
  arg_decl:
  - 'character(len=:), allocatable :: {f_var}'
  name: f_string_scalar_result_cfi_allocatable
  need_wrapper: true
f_struct_*_result:
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_struct_*_result
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_struct_*_result_buf_pointer:
  arg_decl:
  - '{f_type}, pointer :: {f_var}{f_assumed_shape}'
  call:
  - '{F_pointer} = {F_C_call}({F_arg_c_call})'
  declare:
  - 'type(C_PTR) :: {F_pointer}'
  f_module:
    iso_c_binding:
    - C_PTR
    - c_f_pointer
  name: f_struct_*_result_buf_pointer
  post_call:
  - call c_f_pointer({F_pointer}, {F_result}{f_array_shape})
f_struct_scalar_result:
  name: f_struct_scalar_result
f_vector_inout:
  c_helper: copy_array
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_vector_inout
  post_call:
  - "call {hnamefunc0}(\t{c_var_context},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_vector_inout_allocatable:
  c_helper: copy_array
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_vector_inout_allocatable
  post_call:
  - if (allocated({f_var})) deallocate({f_var})
  - allocate({f_var}({c_var_context}%size))
  - "call {hnamefunc0}(\t{c_var_context},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_vector_out:
  c_helper: copy_array
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_vector_out
  post_call:
  - "call {hnamefunc0}(\t{c_var_context},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_vector_out_allocatable:
  c_helper: copy_array
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_vector_out_allocatable
  post_call:
  - allocate({f_var}({c_var_context}%size))
  - "call {hnamefunc0}(\t{c_var_context},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_vector_result:
  c_helper: copy_array
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_vector_result
  post_call:
  - "call {hnamefunc0}(\t{c_var_context},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_vector_result_allocatable:
  arg_decl:
  - '{f_type}, allocatable :: {f_var}{f_assumed_shape}'
  c_helper: copy_array
  f_helper: copy_array_{cxx_T}
  f_module:
    iso_c_binding:
    - C_SIZE_T
  name: f_vector_result_allocatable
  post_call:
  - allocate({f_var}({c_var_context}%size))
  - "call {hnamefunc0}(\t{c_var_context},\t {f_var},\t size({f_var},kind=C_SIZE_T))"
f_void_**_in:
  arg_decl:
  - 'type(C_PTR), intent(IN) :: {f_var}{f_assumed_shape}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_void_**_in
f_void_**_out:
  arg_decl:
  - 'type(C_PTR), intent(OUT) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_void_**_out
f_void_*_cdesc:
  arg_decl:
  - '{f_type}, intent({f_intent}), target :: {f_var}{f_assumed_shape}'
  f_helper: ShroudTypeDefines
  f_module:
    iso_c_binding:
    - C_LOC
  name: f_void_*_cdesc
  pre_call:
  - '{c_var_context}%base_addr = C_LOC({f_var})'
  - '{c_var_context}%type = {sh_type}'
  - '! {c_var_context}%elem_len = C_SIZEOF()'
  - '{c_var_context}%size = {size}'
  - '{c_var_context}%rank = {rank}'
  - '{c_var_context}%shape(1:{rank}) = shape({f_var})'
f_void_*_in:
  arg_decl:
  - 'type(C_PTR), intent(IN) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_void_*_in
f_void_*_result:
  arg_decl:
  - 'type(C_PTR) :: {f_var}'
  f_module:
    iso_c_binding:
    - C_PTR
  name: f_void_*_result
