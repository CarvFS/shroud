{
    "__NOTICE__": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "generic.h",
            "helper.h"
        ],
        "functions": [
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "float",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_FLOAT",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_FLOAT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "UpdateAsFloat",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void UpdateAsFloat(float arg)",
                "declgen": "void UpdateAsFloat(float arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "UpdateAsFloat",
                    "C_prototype": "float arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_update_as_float",
                    "F_C_name": "c_update_as_float",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "update_as_float",
                    "F_name_generic": "update_real",
                    "F_name_impl": "update_as_float",
                    "F_subprogram": "subroutine",
                    "function_name": "UpdateAsFloat",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "update_as_float"
                },
                "options": {
                    "F_force_wrapper": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "UpdateAsDouble",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void UpdateAsDouble(double arg)",
                "declgen": "void UpdateAsDouble(double arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "UpdateAsDouble",
                    "C_prototype": "double arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_update_as_double",
                    "F_C_name": "c_update_as_double",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "update_as_double",
                    "F_name_generic": "update_real",
                    "F_name_impl": "update_as_double",
                    "F_subprogram": "subroutine",
                    "function_name": "UpdateAsDouble",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "update_as_double"
                },
                "options": {
                    "F_force_wrapper": true
                },
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_type": "real(C_DOUBLE)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_DOUBLE",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "GetGlobalDouble",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double GetGlobalDouble(void)",
                "declgen": "double GetGlobalDouble(void)",
                "fmtdict": {
                    "C_name": "GetGlobalDouble",
                    "C_prototype": "void",
                    "C_return_type": "double",
                    "F_C_arguments": "",
                    "F_C_call": "c_get_global_double",
                    "F_C_name": "get_global_double",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "F_arguments": "",
                    "F_name_function": "get_global_double",
                    "F_name_generic": "get_global_double",
                    "F_name_impl": "get_global_double",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "GetGlobalDouble",
                    "underscore_name": "get_global_double"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "shadow_var": "SHadow_arg",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "F_pointer": "SHPTR_arg",
                            "c_var": "arg",
                            "f_intent": "IN",
                            "f_type": "real(C_DOUBLE)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_DOUBLE",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(double arg +intent(in)+value)",
                "doxygen": {
                    "brief": "Single argument generic"
                },
                "fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "GenericReal",
                    "C_prototype": "double arg",
                    "C_return_type": "void",
                    "F_C_arguments": "arg",
                    "F_C_name": "c_generic_real",
                    "F_C_subprogram": "subroutine",
                    "function_name": "GenericReal",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "generic_real"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg",
                                    "pointer": []
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg",
                                    "pointer": []
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg)"
                    }
                ],
                "options": {
                    "literalinclude": true,
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(float arg +intent(in)+value)",
                "doxygen": {
                    "brief": "Single argument generic"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real",
                    "F_arg_c_call": "real(arg, C_DOUBLE)",
                    "F_arguments": "arg",
                    "F_name_function": "generic_real_float",
                    "F_name_generic": "generic_real",
                    "F_name_impl": "generic_real_float",
                    "F_subprogram": "subroutine",
                    "function_name": "GenericReal",
                    "function_suffix": "_float",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "generic_real"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GenericReal(double arg)",
                "declgen": "void GenericReal(double arg +intent(in)+value)",
                "doxygen": {
                    "brief": "Single argument generic"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "generic_real_double",
                    "F_name_generic": "generic_real",
                    "F_name_impl": "generic_real_double",
                    "F_subprogram": "subroutine",
                    "function_name": "GenericReal",
                    "function_suffix": "_double",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "generic_real"
                },
                "options": {
                    "literalinclude": true,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg1",
                            "cxx_type": "long",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "shadow_var": "SHadow_arg1",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg1",
                            "F_pointer": "SHPTR_arg1",
                            "c_var": "arg1",
                            "f_intent": "IN",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg1",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg2",
                            "cxx_type": "long",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_LONG",
                            "shadow_var": "SHadow_arg2",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg2",
                            "F_pointer": "SHPTR_arg2",
                            "c_var": "arg2",
                            "f_intent": "IN",
                            "f_type": "integer(C_LONG)",
                            "f_var": "arg2",
                            "sh_type": "SH_TYPE_LONG",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "long",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "long",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_LONG",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(long arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "fmtdict": {
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "GenericReal2",
                    "C_prototype": "long arg1,\t long arg2",
                    "C_return_type": "long",
                    "F_C_arguments": "arg1,\t arg2",
                    "F_C_name": "c_generic_real2",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "cxx_rv_decl": "long SHC_rv",
                    "function_name": "GenericReal2",
                    "underscore_name": "generic_real2"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_all_int",
                        "generic": "(int arg1, int arg2)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg1",
                                    "pointer": []
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "long"
                                ],
                                "typemap_name": "long"
                            }
                        ],
                        "function_suffix": "_all_long",
                        "generic": "(long arg1, long arg2)"
                    }
                ],
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "long",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(int arg1 +intent(in)+value, int arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real2",
                    "F_arg_c_call": "int(arg1, C_LONG),\t int(arg2, C_LONG)",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "generic_real2_all_int",
                    "F_name_generic": "generic_real2",
                    "F_name_impl": "generic_real2_all_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "GenericReal2",
                    "function_suffix": "_all_int",
                    "underscore_name": "generic_real2"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "long",
                        "f_type": "integer(C_LONG)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_LONG",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GenericReal2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "long"
                            ],
                            "typemap_name": "long"
                        }
                    ],
                    "specifier": [
                        "long"
                    ],
                    "typemap_name": "long"
                },
                "decl": "long GenericReal2(long arg1, long arg2)",
                "declgen": "long GenericReal2(long arg1 +intent(in)+value, long arg2 +intent(in)+value)",
                "doxygen": {
                    "brief": "Two argument generic",
                    "description": "It is not possible to call the function with (int, long)\nor (long, int)\n"
                },
                "fmtdict": {
                    "F_C_call": "c_generic_real2",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_name_function": "generic_real2_all_long",
                    "F_name_generic": "generic_real2",
                    "F_name_impl": "generic_real2_all_long",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "GenericReal2",
                    "function_suffix": "_all_long",
                    "underscore_name": "generic_real2"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "nvalues": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nvalues",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nvalues",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nvalues",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nvalues",
                            "F_pointer": "SHPTR_nvalues",
                            "c_var": "nvalues",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nvalues",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) values",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_values",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "values",
                            "F_pointer": "SHPTR_values",
                            "c_var": "values",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "rank": "0",
                            "sh_type": "SH_TYPE_INT",
                            "size": "1",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    }
                },
                "_gen_fortran_generic": true,
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SumValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "assumed-rank": true,
                                "dimension": {
                                    "assumedrank": true
                                }
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int SumValues(const int *values+dimension(..), int nvalues)",
                "declgen": "int SumValues(const int * values +intent(in), int nvalues +intent(in)+value)",
                "doxygen": {
                    "brief": "scalar or array argument using assumed rank"
                },
                "fmtdict": {
                    "C_call_list": "values,\t nvalues",
                    "C_name": "SumValues",
                    "C_prototype": "const int * values,\t int nvalues",
                    "C_return_type": "int",
                    "F_C_arguments": "values,\t nvalues",
                    "F_C_name": "c_sum_values",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "SumValues",
                    "underscore_name": "sum_values"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "rank": 0
                                },
                                "const": true,
                                "declarator": {
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "metaattrs": {
                                    "assumed-rank": true,
                                    "dimension": {
                                        "assumedrank": true
                                    }
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nvalues",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_0d",
                        "generic": ""
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "rank": 1
                                },
                                "const": true,
                                "declarator": {
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "metaattrs": {
                                    "assumed-rank": true,
                                    "dimension": {
                                        "assumedrank": true
                                    }
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nvalues",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_1d",
                        "generic": ""
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "rank": 2
                                },
                                "const": true,
                                "declarator": {
                                    "name": "values",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "metaattrs": {
                                    "assumed-rank": true,
                                    "dimension": {
                                        "assumedrank": true
                                    }
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nvalues",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_2d",
                        "generic": ""
                    }
                ],
                "options": {
                    "F_assumed_rank_max": 2,
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_gen_fortran_generic": true,
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SumValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 0
                            },
                            "const": true,
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "assumed-rank": true,
                                "dimension": {
                                    "assumedrank": true
                                }
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int SumValues(const int *values+dimension(..), int nvalues)",
                "declgen": "int SumValues(const int * values +intent(in)+rank(0), int nvalues +intent(in)+value)",
                "doxygen": {
                    "brief": "scalar or array argument using assumed rank"
                },
                "fmtdict": {
                    "F_C_call": "c_sum_values",
                    "F_arg_c_call": "values,\t nvalues",
                    "F_arguments": "values,\t nvalues",
                    "F_name_function": "sum_values_0d",
                    "F_name_generic": "sum_values",
                    "F_name_impl": "sum_values_0d",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "SumValues",
                    "function_suffix": "_0d",
                    "underscore_name": "sum_values"
                },
                "options": {
                    "F_assumed_rank_max": 2,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_gen_fortran_generic": true,
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SumValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "assumed-rank": true,
                                "dimension": {
                                    "assumedrank": true
                                }
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int SumValues(const int *values+dimension(..), int nvalues)",
                "declgen": "int SumValues(const int * values +intent(in)+rank(1), int nvalues +intent(in)+value)",
                "doxygen": {
                    "brief": "scalar or array argument using assumed rank"
                },
                "fmtdict": {
                    "F_C_call": "c_sum_values_1d",
                    "F_arg_c_call": "values,\t nvalues",
                    "F_arguments": "values,\t nvalues",
                    "F_name_function": "sum_values_1d",
                    "F_name_generic": "sum_values",
                    "F_name_impl": "sum_values_1d",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "SumValues",
                    "function_suffix": "_1d",
                    "underscore_name": "sum_values"
                },
                "options": {
                    "F_assumed_rank_max": 2,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "nvalues": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nvalues",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nvalues",
                            "cxx_type": "int",
                            "cxx_var": "nvalues",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nvalues",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nvalues",
                            "F_pointer": "SHPTR_nvalues",
                            "c_var": "nvalues",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nvalues",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "values": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "values",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) values",
                            "cxx_type": "int",
                            "cxx_var": "values",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_values",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "values",
                            "F_pointer": "SHPTR_values",
                            "c_var": "values",
                            "f_assumed_shape": "(:,:)",
                            "f_assumed_size": "(*)",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "values",
                            "rank": "2",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(values)",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "shadow_var": "SHadow_rv",
                        "stmt0": "c_native_scalar_result",
                        "stmt1": "c_default"
                    }
                },
                "_gen_fortran_generic": true,
                "_generated": "fortran_generic_c",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SumValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "assumed-rank": true,
                                "dimension": {
                                    "assumedrank": true
                                }
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int SumValues(const int *values+dimension(..), int nvalues)",
                "declgen": "int SumValues(const int * values +intent(in)+rank(1), int nvalues +intent(in)+value)",
                "doxygen": {
                    "brief": "scalar or array argument using assumed rank"
                },
                "fmtdict": {
                    "C_call_list": "values,\t nvalues",
                    "C_name": "SumValues",
                    "C_prototype": "const int * values,\t int nvalues",
                    "C_return_type": "int",
                    "F_C_arguments": "values,\t nvalues",
                    "F_C_name": "c_sum_values_1d",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_C_var": "SHT_crv",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "SumValues",
                    "function_suffix": "_1d",
                    "underscore_name": "sum_values"
                },
                "options": {
                    "F_assumed_rank_max": 2,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "int",
                        "f_type": "integer(C_INT)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_native_scalar_result",
                        "stmt1": "f_default",
                        "stmtc0": "c_native_scalar_result",
                        "stmtc1": "c_default"
                    }
                },
                "_gen_fortran_generic": true,
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SumValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 2
                            },
                            "const": true,
                            "declarator": {
                                "name": "values",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "metaattrs": {
                                "assumed-rank": true,
                                "dimension": {
                                    "assumedrank": true
                                }
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nvalues",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int SumValues(const int *values+dimension(..), int nvalues)",
                "declgen": "int SumValues(const int * values +intent(in)+rank(2), int nvalues +intent(in)+value)",
                "doxygen": {
                    "brief": "scalar or array argument using assumed rank"
                },
                "fmtdict": {
                    "F_C_call": "c_sum_values_1d",
                    "F_arg_c_call": "values,\t nvalues",
                    "F_arguments": "values,\t nvalues",
                    "F_name_function": "sum_values_2d",
                    "F_name_generic": "sum_values",
                    "F_name_impl": "sum_values_2d",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "function_name": "SumValues",
                    "function_suffix": "_2d",
                    "underscore_name": "sum_values"
                },
                "options": {
                    "F_assumed_rank_max": 2,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "from": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "from",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) from",
                            "cxx_type": "int",
                            "cxx_var": "from",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_from",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "from",
                            "F_pointer": "SHPTR_from",
                            "c_var": "from",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "from",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "nfrom": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nfrom",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nfrom",
                            "cxx_type": "int",
                            "cxx_var": "nfrom",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nfrom",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nfrom",
                            "F_pointer": "SHPTR_nfrom",
                            "c_var": "nfrom",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nfrom",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "nto": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nto",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nto",
                            "cxx_type": "int",
                            "cxx_var": "nto",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nto",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nto",
                            "F_pointer": "SHPTR_nto",
                            "c_var": "nto",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nto",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "to": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "to",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "to",
                            "cxx_type": "int",
                            "cxx_var": "to",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_to",
                            "stmt0": "c_native_*_inout",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "to",
                            "F_pointer": "SHPTR_to",
                            "c_var": "to",
                            "f_intent": "INOUT",
                            "f_type": "integer(C_INT)",
                            "f_var": "to",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_inout",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "AssignValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "from",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nfrom",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "to",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nto",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +intent(in), int nfrom +intent(in)+value, int * to +intent(inout), int nto +intent(in)+value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "fmtdict": {
                    "C_call_list": "from,\t nfrom,\t to,\t nto",
                    "C_name": "AssignValues",
                    "C_prototype": "const int * from,\t int nfrom,\t int * to,\t int nto",
                    "C_return_type": "void",
                    "F_C_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_C_name": "c_assign_values",
                    "F_C_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "assign_values"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "const": true,
                                "declarator": {
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nfrom",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "inout"
                                },
                                "declarator": {
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nto",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_scalar",
                        "generic": "(const int *from, int *to)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in"
                                },
                                "const": true,
                                "declarator": {
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nfrom",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "inout",
                                    "rank": 1
                                },
                                "declarator": {
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nto",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_broadcast",
                        "generic": "(const int *from, int *to+rank(1))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "rank": 1
                                },
                                "const": true,
                                "declarator": {
                                    "name": "from",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nfrom",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "inout",
                                    "rank": 1
                                },
                                "declarator": {
                                    "name": "to",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "nto",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "function_suffix": "_copy",
                        "generic": "(const int *from+rank(1), int *to+rank(1))"
                    }
                ],
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "AssignValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "from",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nfrom",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout"
                            },
                            "declarator": {
                                "name": "to",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nto",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +intent(in), int nfrom +intent(in)+value, int * to +intent(inout), int nto +intent(in)+value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "fmtdict": {
                    "F_C_call": "c_assign_values",
                    "F_arg_c_call": "from,\t nfrom,\t to,\t nto",
                    "F_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_name_function": "assign_values_scalar",
                    "F_name_generic": "assign_values",
                    "F_name_impl": "assign_values_scalar",
                    "F_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_scalar",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "assign_values"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "AssignValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "from",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nfrom",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "to",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nto",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +intent(in), int nfrom +intent(in)+value, int * to +intent(inout)+rank(1), int nto +intent(in)+value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "fmtdict": {
                    "F_C_call": "c_assign_values_broadcast",
                    "F_arg_c_call": "from,\t nfrom,\t to,\t nto",
                    "F_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_name_function": "assign_values_broadcast",
                    "F_name_generic": "assign_values",
                    "F_name_impl": "assign_values_broadcast",
                    "F_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_broadcast",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "assign_values"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "from": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "from",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) from",
                            "cxx_type": "int",
                            "cxx_var": "from",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_from",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "from",
                            "F_pointer": "SHPTR_from",
                            "c_var": "from",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "from",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "nfrom": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nfrom",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nfrom",
                            "cxx_type": "int",
                            "cxx_var": "nfrom",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nfrom",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nfrom",
                            "F_pointer": "SHPTR_nfrom",
                            "c_var": "nfrom",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nfrom",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "nto": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nto",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nto",
                            "cxx_type": "int",
                            "cxx_var": "nto",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nto",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nto",
                            "F_pointer": "SHPTR_nto",
                            "c_var": "nto",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nto",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "to": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "to",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "to",
                            "cxx_type": "int",
                            "cxx_var": "to",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_to",
                            "stmt0": "c_native_*_inout",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "to",
                            "F_pointer": "SHPTR_to",
                            "c_var": "to",
                            "f_assumed_shape": "(:)",
                            "f_assumed_size": "(*)",
                            "f_intent": "INOUT",
                            "f_type": "integer(C_INT)",
                            "f_var": "to",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(to)",
                            "stmt0": "f_native_*_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_inout",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_generated": "fortran_generic_c",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "AssignValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in"
                            },
                            "const": true,
                            "declarator": {
                                "name": "from",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nfrom",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "to",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nto",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +intent(in), int nfrom +intent(in)+value, int * to +intent(inout)+rank(1), int nto +intent(in)+value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "fmtdict": {
                    "C_call_list": "from,\t nfrom,\t to,\t nto",
                    "C_name": "AssignValues",
                    "C_prototype": "const int * from,\t int nfrom,\t int * to,\t int nto",
                    "C_return_type": "void",
                    "F_C_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_C_name": "c_assign_values_broadcast",
                    "F_C_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_broadcast",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "assign_values"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "AssignValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "from",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nfrom",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "to",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nto",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +intent(in)+rank(1), int nfrom +intent(in)+value, int * to +intent(inout)+rank(1), int nto +intent(in)+value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "fmtdict": {
                    "F_C_call": "c_assign_values_copy",
                    "F_arg_c_call": "from,\t nfrom,\t to,\t nto",
                    "F_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_name_function": "assign_values_copy",
                    "F_name_generic": "assign_values",
                    "F_name_impl": "assign_values_copy",
                    "F_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_copy",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "assign_values"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "from": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "from",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "(int *) from",
                            "cxx_type": "int",
                            "cxx_var": "from",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_from",
                            "stmt0": "c_native_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "from",
                            "F_pointer": "SHPTR_from",
                            "c_var": "from",
                            "f_assumed_shape": "(:)",
                            "f_assumed_size": "(*)",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "from",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(from)",
                            "stmt0": "f_native_*_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "nfrom": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nfrom",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nfrom",
                            "cxx_type": "int",
                            "cxx_var": "nfrom",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nfrom",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nfrom",
                            "F_pointer": "SHPTR_nfrom",
                            "c_var": "nfrom",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nfrom",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "nto": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "nto",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&nto",
                            "cxx_type": "int",
                            "cxx_var": "nto",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_nto",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "nto",
                            "F_pointer": "SHPTR_nto",
                            "c_var": "nto",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "nto",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_scalar_in",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_scalar_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "to": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "to",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "to",
                            "cxx_type": "int",
                            "cxx_var": "to",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_to",
                            "stmt0": "c_native_*_inout",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "to",
                            "F_pointer": "SHPTR_to",
                            "c_var": "to",
                            "f_assumed_shape": "(:)",
                            "f_assumed_size": "(*)",
                            "f_intent": "INOUT",
                            "f_type": "integer(C_INT)",
                            "f_var": "to",
                            "rank": "1",
                            "sh_type": "SH_TYPE_INT",
                            "size": "size(to)",
                            "stmt0": "f_native_*_inout",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_inout",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_generated": "fortran_generic_c",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "AssignValues",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "rank": 1
                            },
                            "const": true,
                            "declarator": {
                                "name": "from",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nfrom",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "inout",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "to",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "nto",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void AssignValues(const int *from, int nfrom, int *to, int nto)",
                "declgen": "void AssignValues(const int * from +intent(in)+rank(1), int nfrom +intent(in)+value, int * to +intent(inout)+rank(1), int nto +intent(in)+value)",
                "doxygen": {
                    "description": "Broadcast if nfrom == 1\nCopy if nfrom == nto\n"
                },
                "fmtdict": {
                    "C_call_list": "from,\t nfrom,\t to,\t nto",
                    "C_name": "AssignValues",
                    "C_prototype": "const int * from,\t int nfrom,\t int * to,\t int nto",
                    "C_return_type": "void",
                    "F_C_arguments": "from,\t nfrom,\t to,\t nto",
                    "F_C_name": "c_assign_values_copy",
                    "F_C_subprogram": "subroutine",
                    "function_name": "AssignValues",
                    "function_suffix": "_copy",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "assign_values"
                },
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "shadow_var": "SHadow_addr",
                            "stmt0": "c_void_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "F_pointer": "SHPTR_addr",
                            "c_var": "addr",
                            "f_assumed_shape": "(:,:)",
                            "f_assumed_size": "(*)",
                            "f_intent": "IN",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "2",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_native_*_in_raw",
                            "stmt1": "f_native_*_in_raw",
                            "stmtc0": "c_void_*_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "size",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "shadow_var": "SHadow_size",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "F_pointer": "SHPTR_size",
                            "c_var": "SH_size",
                            "f_intent": "IN",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_type",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "F_pointer": "SHPTR_type",
                            "c_var": "SH_type",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "pre_call_intent": "T_FLOAT",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(void * addr +intent(in)+value, int type +intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "SavePointer",
                    "C_prototype": "void * addr,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer",
                    "F_C_subprogram": "subroutine",
                    "function_name": "SavePointer",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "save_pointer"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "raw",
                                    "intent": "in",
                                    "rank": 1
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "T_FLOAT",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float *addr+rank(1)+deref(raw)+intent(in),    int type+implied(T_FLOAT))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "raw",
                                    "intent": "in",
                                    "rank": 2
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "T_FLOAT",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float *addr+rank(2)+deref(raw)+intent(in),  int type+implied(T_FLOAT))"
                    }
                ],
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "raw",
                                "intent": "in",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "T_FLOAT",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +deref(raw)+intent(in)+rank(1), int type +implied(T_FLOAT)+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer_float1d",
                    "F_name_generic": "save_pointer",
                    "F_name_impl": "save_pointer_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "raw",
                                "intent": "in",
                                "rank": 2
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "T_FLOAT",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer(void *addr, int type, size_t size+implied(size(addr)))",
                "declgen": "void SavePointer(float * addr +deref(raw)+intent(in)+rank(2), int type +implied(T_FLOAT)+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer_float2d",
                    "F_name_generic": "save_pointer",
                    "F_name_impl": "save_pointer_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "shadow_var": "SHadow_addr",
                            "stmt0": "c_void_*_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "F_pointer": "SHPTR_addr",
                            "c_var": "addr",
                            "f_assumed_shape": "(:,:)",
                            "f_assumed_size": "(*)",
                            "f_intent": "IN",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "2",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_native_*_in_raw",
                            "stmt1": "f_native_*_in_raw",
                            "stmtc0": "c_void_*_in",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "size",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "shadow_var": "SHadow_size",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "F_pointer": "SHPTR_size",
                            "c_var": "SH_size",
                            "f_intent": "IN",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "pre_call_intent": "size(addr,kind=C_SIZE_T)",
                            "sh_type": "SH_TYPE_SIZE_T"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_type",
                            "stmt0": "c_native_scalar_in",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "F_pointer": "SHPTR_type",
                            "c_var": "SH_type",
                            "f_intent": "IN",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "pre_call_intent": "SH_TYPE_FLOAT",
                            "sh_type": "SH_TYPE_INT"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "implied": "type(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(void * addr +intent(in)+value, int type +implied(type(addr))+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GEN_save_pointer2",
                    "C_prototype": "void * addr,\t int type,\t size_t size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_save_pointer2",
                    "F_C_subprogram": "subroutine",
                    "function_name": "SavePointer2",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "save_pointer2"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "raw",
                                    "intent": "in",
                                    "rank": 1
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "type(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float *addr+rank(1)+deref(raw)+intent(in))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "raw",
                                    "intent": "in",
                                    "rank": 2
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "implied": "type(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": []
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "implied": "size(addr)",
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": []
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float *addr+rank(2)+deref(raw)+intent(in))"
                    }
                ],
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "raw",
                                "intent": "in",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "type(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +deref(raw)+intent(in)+rank(1), int type +implied(type(addr))+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer2",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer2_float1d",
                    "F_name_generic": "save_pointer2",
                    "F_name_impl": "save_pointer2_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer2"
                },
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "SavePointer2",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "raw",
                                "intent": "in",
                                "rank": 2
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "implied": "type(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "implied": "size(addr)",
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": []
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void SavePointer2(void *addr, int type+implied(type(addr)), size_t size+implied(size(addr)))",
                "declgen": "void SavePointer2(float * addr +deref(raw)+intent(in)+rank(2), int type +implied(type(addr))+intent(in)+value, size_t size +implied(size(addr))+intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_save_pointer2",
                    "F_arg_c_call": "C_LOC(addr),\t SH_type,\t SH_size",
                    "F_arguments": "addr",
                    "F_name_function": "save_pointer2_float2d",
                    "F_name_generic": "save_pointer2",
                    "F_name_impl": "save_pointer2_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "SavePointer2",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "save_pointer2"
                },
                "fstatements": {
                    "c": {
                        "c_helper": "ShroudTypeDefines",
                        "pre_call": [
                            "// Test adding a blank line below.",
                            "",
                            "type = convert_type(type);"
                        ]
                    }
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "shadow_var": "SHadow_addr",
                            "stmt0": "c_void_**_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "F_pointer": "SHPTR_addr",
                            "c_var": "addr",
                            "f_intent": "OUT",
                            "f_type": "type(C_PTR)",
                            "f_var": "addr",
                            "sh_type": "SH_TYPE_CPTR",
                            "stmt0": "f_void_**_out",
                            "stmt1": "f_void_**_out",
                            "stmtc0": "c_void_**_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "size",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "shadow_var": "SHadow_size",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "F_pointer": "SHPTR_size",
                            "c_var": "size",
                            "f_intent": "OUT",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_type",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "F_pointer": "SHPTR_type",
                            "c_var": "type",
                            "f_intent": "OUT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "GetPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointer(void **addr+intent(out), int *type+intent(out), size_t *size+intent(out))",
                "declgen": "void GetPointer(void * * addr +intent(out), int * type +intent(out), size_t * size +intent(out))",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GetPointer",
                    "C_prototype": "void * * addr,\t int * type,\t size_t * size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_call": "c_get_pointer",
                    "F_C_name": "get_pointer",
                    "F_C_subprogram": "subroutine",
                    "F_arg_c_call": "addr,\t type,\t size",
                    "F_arguments": "addr,\t type,\t size",
                    "F_name_function": "get_pointer",
                    "F_name_generic": "get_pointer",
                    "F_name_impl": "get_pointer",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointer",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_pointer"
                },
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true
                }
            },
            {
                "_fmtargs": {
                    "addr": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "addr",
                            "c_var_context": "FIXME",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "addr",
                            "cxx_type": "void",
                            "cxx_var": "addr",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_CPTR",
                            "shadow_var": "SHadow_addr",
                            "stmt0": "c_void_**_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "addr",
                            "F_pointer": "SHPTR_addr",
                            "c_var": "addr",
                            "c_var_context": "FIXME",
                            "f_assumed_shape": "(:,:)",
                            "f_assumed_size": "(*)",
                            "f_intent": "OUT",
                            "f_type": "real(C_FLOAT)",
                            "f_var": "addr",
                            "rank": "2",
                            "sh_type": "SH_TYPE_FLOAT",
                            "size": "size(addr)",
                            "stmt0": "f_native_**_out_pointer",
                            "stmt1": "f_native_**_out",
                            "stmtc0": "c_void_**_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "size": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "size",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "size",
                            "cxx_type": "size_t",
                            "cxx_var": "size",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "shadow_var": "SHadow_size",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "size",
                            "F_pointer": "SHPTR_size",
                            "c_var": "size",
                            "f_intent": "OUT",
                            "f_type": "integer(C_SIZE_T)",
                            "f_var": "size",
                            "sh_type": "SH_TYPE_SIZE_T",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "type",
                            "cxx_addr": "",
                            "cxx_member": "->",
                            "cxx_nonconst_ptr": "type",
                            "cxx_type": "int",
                            "cxx_var": "type",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "shadow_var": "SHadow_type",
                            "stmt0": "c_native_*_out",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "type",
                            "F_pointer": "SHPTR_type",
                            "c_var": "type",
                            "f_intent": "OUT",
                            "f_type": "integer(C_INT)",
                            "f_var": "type",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_native_*_out",
                            "stmt1": "f_default",
                            "stmtc0": "c_native_*_out",
                            "stmtc1": "c_default"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetPointerAsPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "context": "FIXME",
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(void * * addr +context(FIXME)+intent(out), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "fmtdict": {
                    "C_call_list": "addr,\t type,\t size",
                    "C_name": "GetPointerAsPointer",
                    "C_prototype": "void * * addr,\t int * type,\t size_t * size",
                    "C_return_type": "void",
                    "F_C_arguments": "addr,\t type,\t size",
                    "F_C_name": "c_get_pointer_as_pointer",
                    "F_C_subprogram": "subroutine",
                    "function_name": "GetPointerAsPointer",
                    "stmt0": "c",
                    "stmt1": "c_default",
                    "underscore_name": "get_pointer_as_pointer"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "pointer",
                                    "intent": "out",
                                    "rank": 1
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out"
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out"
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float1d",
                        "generic": "(float **addr+intent(out)+rank(1)+deref(pointer))"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "deref": "pointer",
                                    "intent": "out",
                                    "rank": 2
                                },
                                "declarator": {
                                    "name": "addr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        },
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out"
                                },
                                "declarator": {
                                    "name": "type",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            },
                            {
                                "attrs": {
                                    "hidden": true,
                                    "intent": "out"
                                },
                                "declarator": {
                                    "name": "size",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "size_t"
                                ],
                                "typemap_name": "size_t"
                            }
                        ],
                        "function_suffix": "_float2d",
                        "generic": "(float **addr+intent(out)+rank(2)+deref(pointer))"
                    }
                ],
                "options": {
                    "wrap_fortran": false
                },
                "wrap": {
                    "c": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetPointerAsPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "pointer",
                                "intent": "out",
                                "rank": 1
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+intent(out)+rank(1), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "fmtdict": {
                    "F_C_call": "c_get_pointer_as_pointer",
                    "F_arg_c_call": "addr,\t type,\t size",
                    "F_arguments": "addr",
                    "F_name_function": "get_pointer_as_pointer_float1d",
                    "F_name_generic": "get_pointer_as_pointer",
                    "F_name_impl": "get_pointer_as_pointer_float1d",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float1d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_pointer_as_pointer"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "GetPointerAsPointer",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "deref": "pointer",
                                "intent": "out",
                                "rank": 2
                            },
                            "declarator": {
                                "name": "addr",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    },
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "hidden": true,
                                "intent": "out"
                            },
                            "declarator": {
                                "name": "size",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "size_t"
                            ],
                            "typemap_name": "size_t"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void GetPointerAsPointer( void **addr+intent(out), int *type+intent(out)+hidden, size_t *size+intent(out)+hidden)",
                "declgen": "void GetPointerAsPointer(float * * addr +deref(pointer)+intent(out)+rank(2), int * type +hidden+intent(out), size_t * size +hidden+intent(out))",
                "fmtdict": {
                    "F_C_call": "c_get_pointer_as_pointer",
                    "F_arg_c_call": "addr,\t type,\t size",
                    "F_arguments": "addr",
                    "F_name_function": "get_pointer_as_pointer_float2d",
                    "F_name_generic": "get_pointer_as_pointer",
                    "F_name_impl": "get_pointer_as_pointer_float2d",
                    "F_subprogram": "subroutine",
                    "function_name": "GetPointerAsPointer",
                    "function_suffix": "_float2d",
                    "stmt0": "f_subroutine",
                    "stmt1": "f_default",
                    "stmtc0": "c",
                    "stmtc1": "c_default",
                    "underscore_name": "get_pointer_as_pointer"
                },
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "wrap": {
                    "fortran": true
                }
            }
        ],
        "language": "c",
        "scope_file": [
            "generic"
        ],
        "wrap": {
            "c": true,
            "fortran": true
        }
    }
}