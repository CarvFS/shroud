// wrapforward.cpp
// This file is generated by Shroud nowrite-version. Do not edit.
// Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and
// other Shroud Project Developers.
// See the top-level COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//
#include "wrapforward.h"

// cxx_header
#include "forward.hpp"
// shroud
#include "typesforward.h"
#include <cstdlib>

// splicer begin CXX_definitions
// splicer end CXX_definitions

extern "C" {

// splicer begin C_definitions
// splicer end C_definitions

// ----------------------------------------
// Function:  int passStruct1
// Requested: c_native_scalar_result
// Match:     c_default
//    metaattrs:  +intent(result)
// ----------------------------------------
// Argument:  const Cstruct1 * arg
// Requested: c_struct_*_in
// Match:     c_struct
//    metaattrs:  +intent(in)
int FOR_pass_struct1(const STR_cstruct1 * arg)
{
    // splicer begin function.pass_struct1
    const Cstruct1 * SHCXX_arg = static_cast<const Cstruct1 *>
        (static_cast<const void *>(arg));
    int SHC_rv = forward::passStruct1(SHCXX_arg);
    return SHC_rv;
    // splicer end function.pass_struct1
}

// Release library allocated memory.
void FOR_SHROUD_memory_destructor(FOR_SHROUD_capsule_data *cap)
{
    void *ptr = cap->addr;
    switch (cap->idtor) {
    case 0:   // --none--
    {
        // Nothing to delete
        break;
    }
    case 1:   // forward::Class2
    {
        forward::Class2 *cxx_ptr = 
            reinterpret_cast<forward::Class2 *>(ptr);
        delete cxx_ptr;
        break;
    }
    default:
    {
        // Unexpected case in destructor
        break;
    }
    }
    cap->addr = nullptr;
    cap->idtor = 0;  // avoid deleting again
}

}  // extern "C"
