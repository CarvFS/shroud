! wrapfarrayclass.f
! This file is generated by Shroud nowrite-version. Do not edit.
! Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and
! other Shroud Project Developers.
! See the top-level COPYRIGHT file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!
!>
!! \file wrapfarrayclass.f
!! \brief Shroud generated wrapper for arrayclass library
!<
! splicer begin file_top
! splicer end file_top
module arrayclass_mod
    use iso_c_binding, only : C_INT, C_LONG, C_NULL_PTR, C_PTR, C_SIZE_T
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! helper capsule_data_helper
    type, bind(C) :: ARR_SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type ARR_SHROUD_capsule_data

    ! helper array_context
    type, bind(C) :: ARR_SHROUD_array
        ! address of C++ memory
        type(ARR_SHROUD_capsule_data) :: cxx
        ! address of data in cxx
        type(C_PTR) :: base_addr = C_NULL_PTR
        ! type of element
        integer(C_INT) :: type
        ! bytes-per-item or character len of data in cxx
        integer(C_SIZE_T) :: elem_len = 0_C_SIZE_T
        ! size of data in cxx
        integer(C_SIZE_T) :: size = 0_C_SIZE_T
        ! number of dimensions
        integer(C_INT) :: rank = -1
        integer(C_LONG) :: shape(7) = 0
    end type ARR_SHROUD_array

    type arraywrapper
        type(ARR_SHROUD_capsule_data) :: cxxmem
        ! splicer begin class.ArrayWrapper.component_part
        ! splicer end class.ArrayWrapper.component_part
    contains
        procedure :: set_size => arraywrapper_set_size
        procedure :: get_size => arraywrapper_get_size
        procedure :: fill_size => arraywrapper_fill_size
        procedure :: allocate => arraywrapper_allocate
        procedure :: get_array => arraywrapper_get_array
        procedure :: get_array_const => arraywrapper_get_array_const
        procedure :: get_array_c => arraywrapper_get_array_c
        procedure :: get_array_const_c => arraywrapper_get_array_const_c
        procedure :: fetch_array_ptr => arraywrapper_fetch_array_ptr
        procedure :: fetch_array_ref => arraywrapper_fetch_array_ref
        procedure :: fetch_array_ptr_const => arraywrapper_fetch_array_ptr_const
        procedure :: fetch_array_ref_const => arraywrapper_fetch_array_ref_const
        procedure :: fetch_void_ptr => arraywrapper_fetch_void_ptr
        procedure :: fetch_void_ref => arraywrapper_fetch_void_ref
        procedure :: check_ptr => arraywrapper_check_ptr
        procedure :: sum_array => arraywrapper_sum_array
        procedure :: get_instance => arraywrapper_get_instance
        procedure :: set_instance => arraywrapper_set_instance
        procedure :: associated => arraywrapper_associated
        ! splicer begin class.ArrayWrapper.type_bound_procedure_part
        ! splicer end class.ArrayWrapper.type_bound_procedure_part
    end type arraywrapper

    interface operator (.eq.)
        module procedure arraywrapper_eq
    end interface

    interface operator (.ne.)
        module procedure arraywrapper_ne
    end interface

    interface

        ! ----------------------------------------
        ! Function:  ArrayWrapper
        ! Attrs:     +intent(ctor)
        ! Requested: c_ctor_shadow_scalar
        ! Match:     c_ctor
        subroutine c_arraywrapper_ctor(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_ctor")
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(OUT) :: SHT_rv
        end subroutine c_arraywrapper_ctor

        ! ----------------------------------------
        ! Function:  void setSize
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  int size +value
        ! Attrs:     +intent(in)
        ! Requested: c_in_native_scalar
        ! Match:     c_default
        subroutine c_arraywrapper_set_size(self, size) &
                bind(C, name="ARR_ArrayWrapper_set_size")
            use iso_c_binding, only : C_INT
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT), value, intent(IN) :: size
        end subroutine c_arraywrapper_set_size

        ! ----------------------------------------
        ! Function:  int getSize
        ! Attrs:     +intent(function)
        ! Requested: c_function_native_scalar
        ! Match:     c_function
        pure function c_arraywrapper_get_size(self) &
                result(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_size")
            use iso_c_binding, only : C_INT
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT) :: SHT_rv
        end function c_arraywrapper_get_size

        ! ----------------------------------------
        ! Function:  void fillSize
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  int & size +intent(out)
        ! Attrs:     +intent(out)
        ! Requested: c_out_native_&
        ! Match:     c_default
        subroutine c_arraywrapper_fill_size(self, size) &
                bind(C, name="ARR_ArrayWrapper_fill_size")
            use iso_c_binding, only : C_INT
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            integer(C_INT), intent(OUT) :: size
        end subroutine c_arraywrapper_fill_size

        ! ----------------------------------------
        ! Function:  void allocate
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        subroutine c_arraywrapper_allocate(self) &
                bind(C, name="ARR_ArrayWrapper_allocate")
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
        end subroutine c_arraywrapper_allocate

        ! ----------------------------------------
        ! Function:  double * getArray +dimension(getSize())
        ! Attrs:     +deref(pointer)+intent(function)
        ! Requested: c_function_native_*_pointer
        ! Match:     c_function_native_*
        function c_arraywrapper_get_array(self) &
                result(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array")
            use iso_c_binding, only : C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_arraywrapper_get_array

        ! ----------------------------------------
        ! Function:  double * getArray +dimension(getSize())
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
        ! Requested: c_function_native_*_cdesc_pointer
        ! Match:     c_function_native_*_cdesc
        subroutine c_arraywrapper_get_array_bufferify(self, SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_rv
        end subroutine c_arraywrapper_get_array_bufferify

        ! ----------------------------------------
        ! Function:  double * getArrayConst +dimension(getSize())
        ! Attrs:     +deref(pointer)+intent(function)
        ! Requested: c_function_native_*_pointer
        ! Match:     c_function_native_*
        pure function c_arraywrapper_get_array_const(self) &
                result(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array_const")
            use iso_c_binding, only : C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_arraywrapper_get_array_const

        ! ----------------------------------------
        ! Function:  double * getArrayConst +dimension(getSize())
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
        ! Requested: c_function_native_*_cdesc_pointer
        ! Match:     c_function_native_*_cdesc
        subroutine c_arraywrapper_get_array_const_bufferify(self, &
                SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array_const_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_rv
        end subroutine c_arraywrapper_get_array_const_bufferify

        ! ----------------------------------------
        ! Function:  const double * getArrayC +dimension(getSize())
        ! Attrs:     +deref(pointer)+intent(function)
        ! Requested: c_function_native_*_pointer
        ! Match:     c_function_native_*
        function c_arraywrapper_get_array_c(self) &
                result(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array_c")
            use iso_c_binding, only : C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_arraywrapper_get_array_c

        ! ----------------------------------------
        ! Function:  const double * getArrayC +dimension(getSize())
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
        ! Requested: c_function_native_*_cdesc_pointer
        ! Match:     c_function_native_*_cdesc
        subroutine c_arraywrapper_get_array_c_bufferify(self, SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array_c_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_rv
        end subroutine c_arraywrapper_get_array_c_bufferify

        ! ----------------------------------------
        ! Function:  const double * getArrayConstC +dimension(getSize())
        ! Attrs:     +deref(pointer)+intent(function)
        ! Requested: c_function_native_*_pointer
        ! Match:     c_function_native_*
        pure function c_arraywrapper_get_array_const_c(self) &
                result(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array_const_c")
            use iso_c_binding, only : C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR) SHT_rv
        end function c_arraywrapper_get_array_const_c

        ! ----------------------------------------
        ! Function:  const double * getArrayConstC +dimension(getSize())
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
        ! Requested: c_function_native_*_cdesc_pointer
        ! Match:     c_function_native_*_cdesc
        subroutine c_arraywrapper_get_array_const_c_bufferify(self, &
                SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_get_array_const_c_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_rv
        end subroutine c_arraywrapper_get_array_const_c_bufferify

        ! ----------------------------------------
        ! Function:  void fetchArrayPtr
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  double * * array +dimension(isize)+intent(out)
        ! Attrs:     +deref(pointer)+intent(out)
        ! Requested: c_out_native_**_pointer
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int * isize +hidden
        ! Attrs:     +intent(inout)
        ! Requested: c_inout_native_*
        ! Match:     c_default
        subroutine c_arraywrapper_fetch_array_ptr(self, array, isize) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ptr")
            use iso_c_binding, only : C_INT, C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR), intent(OUT) :: array
            integer(C_INT), intent(INOUT) :: isize
        end subroutine c_arraywrapper_fetch_array_ptr

        ! ----------------------------------------
        ! Function:  void fetchArrayPtr
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  double * * array +dimension(isize)+intent(out)
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
        ! Requested: c_out_native_**_cdesc_pointer
        ! Match:     c_out_native_**_cdesc
        subroutine c_arraywrapper_fetch_array_ptr_bufferify(self, &
                SHT_array_cdesc) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ptr_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_array_cdesc
        end subroutine c_arraywrapper_fetch_array_ptr_bufferify

        ! ----------------------------------------
        ! Function:  void fetchArrayRef
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  double * & array +dimension(isize)+intent(out)
        ! Attrs:     +deref(pointer)+intent(out)
        ! Requested: c_out_native_*&_pointer
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int & isize +hidden
        ! Attrs:     +intent(inout)
        ! Requested: c_inout_native_&
        ! Match:     c_default
        subroutine c_arraywrapper_fetch_array_ref(self, array, isize) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ref")
            use iso_c_binding, only : C_INT, C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR), intent(OUT) :: array
            integer(C_INT), intent(INOUT) :: isize
        end subroutine c_arraywrapper_fetch_array_ref

        ! ----------------------------------------
        ! Function:  void fetchArrayRef
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  double * & array +dimension(isize)+intent(out)
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
        ! Requested: c_out_native_*&_cdesc_pointer
        ! Match:     c_out_native_*&_cdesc
        subroutine c_arraywrapper_fetch_array_ref_bufferify(self, &
                SHT_array_cdesc) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ref_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_array_cdesc
        end subroutine c_arraywrapper_fetch_array_ref_bufferify

        ! ----------------------------------------
        ! Function:  void fetchArrayPtrConst
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  const double * * array +dimension(isize)+intent(out)
        ! Attrs:     +deref(pointer)+intent(out)
        ! Requested: c_out_native_**_pointer
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int * isize +hidden
        ! Attrs:     +intent(inout)
        ! Requested: c_inout_native_*
        ! Match:     c_default
        subroutine c_arraywrapper_fetch_array_ptr_const(self, array, &
                isize) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ptr_const")
            use iso_c_binding, only : C_INT, C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR), intent(OUT) :: array
            integer(C_INT), intent(INOUT) :: isize
        end subroutine c_arraywrapper_fetch_array_ptr_const

        ! ----------------------------------------
        ! Function:  void fetchArrayPtrConst
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  const double * * array +dimension(isize)+intent(out)
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
        ! Requested: c_out_native_**_cdesc_pointer
        ! Match:     c_out_native_**_cdesc
        subroutine c_arraywrapper_fetch_array_ptr_const_bufferify(self, &
                SHT_array_cdesc) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ptr_const_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_array_cdesc
        end subroutine c_arraywrapper_fetch_array_ptr_const_bufferify

        ! ----------------------------------------
        ! Function:  void fetchArrayRefConst
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  const double * & array +dimension(isize)+intent(out)
        ! Attrs:     +deref(pointer)+intent(out)
        ! Requested: c_out_native_*&_pointer
        ! Match:     c_default
        ! ----------------------------------------
        ! Argument:  int & isize +hidden
        ! Attrs:     +intent(inout)
        ! Requested: c_inout_native_&
        ! Match:     c_default
        subroutine c_arraywrapper_fetch_array_ref_const(self, array, &
                isize) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ref_const")
            use iso_c_binding, only : C_INT, C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR), intent(OUT) :: array
            integer(C_INT), intent(INOUT) :: isize
        end subroutine c_arraywrapper_fetch_array_ref_const

        ! ----------------------------------------
        ! Function:  void fetchArrayRefConst
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  const double * & array +dimension(isize)+intent(out)
        ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
        ! Requested: c_out_native_*&_cdesc_pointer
        ! Match:     c_out_native_*&_cdesc
        subroutine c_arraywrapper_fetch_array_ref_const_bufferify(self, &
                SHT_array_cdesc) &
                bind(C, name="ARR_ArrayWrapper_fetch_array_ref_const_bufferify")
            import :: ARR_SHROUD_array, ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(ARR_SHROUD_array), intent(OUT) :: SHT_array_cdesc
        end subroutine c_arraywrapper_fetch_array_ref_const_bufferify

        ! ----------------------------------------
        ! Function:  void fetchVoidPtr
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  void * * array +intent(out)
        ! Attrs:     +intent(out)
        ! Exact:     c_out_void_**
        subroutine c_arraywrapper_fetch_void_ptr(self, array) &
                bind(C, name="ARR_ArrayWrapper_fetch_void_ptr")
            use iso_c_binding, only : C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR), intent(OUT) :: array
        end subroutine c_arraywrapper_fetch_void_ptr

        ! ----------------------------------------
        ! Function:  void fetchVoidRef
        ! Attrs:     +intent(subroutine)
        ! Requested: c_subroutine_void_scalar
        ! Match:     c_subroutine
        ! ----------------------------------------
        ! Argument:  void * & array +intent(out)
        ! Attrs:     +intent(out)
        ! Requested: c_out_void_*&
        ! Match:     c_default
        subroutine c_arraywrapper_fetch_void_ref(self, array) &
                bind(C, name="ARR_ArrayWrapper_fetch_void_ref")
            use iso_c_binding, only : C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR), intent(OUT) :: array
        end subroutine c_arraywrapper_fetch_void_ref

        ! ----------------------------------------
        ! Function:  bool checkPtr
        ! Attrs:     +intent(function)
        ! Requested: c_function_bool_scalar
        ! Match:     c_function
        ! ----------------------------------------
        ! Argument:  void * array +value
        ! Attrs:     +intent(in)
        ! Requested: c_in_void_*
        ! Match:     c_default
        function c_arraywrapper_check_ptr(self, array) &
                result(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_check_ptr")
            use iso_c_binding, only : C_BOOL, C_PTR
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            type(C_PTR), value, intent(IN) :: array
            logical(C_BOOL) :: SHT_rv
        end function c_arraywrapper_check_ptr

        ! ----------------------------------------
        ! Function:  double sumArray
        ! Attrs:     +intent(function)
        ! Requested: c_function_native_scalar
        ! Match:     c_function
        function c_arraywrapper_sum_array(self) &
                result(SHT_rv) &
                bind(C, name="ARR_ArrayWrapper_sum_array")
            use iso_c_binding, only : C_DOUBLE
            import :: ARR_SHROUD_capsule_data
            implicit none
            type(ARR_SHROUD_capsule_data), intent(IN) :: self
            real(C_DOUBLE) :: SHT_rv
        end function c_arraywrapper_sum_array

        ! splicer begin class.ArrayWrapper.additional_interfaces
        ! splicer end class.ArrayWrapper.additional_interfaces

        ! splicer begin additional_interfaces
        ! splicer end additional_interfaces
    end interface

    interface arraywrapper
        module procedure arraywrapper_ctor
    end interface arraywrapper

contains

    ! ----------------------------------------
    ! Function:  ArrayWrapper
    ! Attrs:     +intent(ctor)
    ! Exact:     f_ctor
    ! Attrs:     +intent(ctor)
    ! Exact:     c_ctor
    function arraywrapper_ctor() &
            result(SHT_rv)
        type(arraywrapper) :: SHT_rv
        ! splicer begin class.ArrayWrapper.method.ctor
        call c_arraywrapper_ctor(SHT_rv%cxxmem)
        ! splicer end class.ArrayWrapper.method.ctor
    end function arraywrapper_ctor

    ! ----------------------------------------
    ! Function:  void setSize
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  int size +value
    ! Attrs:     +intent(in)
    ! Requested: f_in_native_scalar
    ! Match:     f_default
    ! Attrs:     +intent(in)
    ! Requested: c_in_native_scalar
    ! Match:     c_default
    subroutine arraywrapper_set_size(obj, size)
        use iso_c_binding, only : C_INT
        class(arraywrapper) :: obj
        integer(C_INT), value, intent(IN) :: size
        ! splicer begin class.ArrayWrapper.method.set_size
        call c_arraywrapper_set_size(obj%cxxmem, size)
        ! splicer end class.ArrayWrapper.method.set_size
    end subroutine arraywrapper_set_size

    ! ----------------------------------------
    ! Function:  int getSize
    ! Attrs:     +intent(function)
    ! Requested: f_function_native_scalar
    ! Match:     f_function
    ! Attrs:     +intent(function)
    ! Requested: c_function_native_scalar
    ! Match:     c_function
    function arraywrapper_get_size(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_INT
        class(arraywrapper) :: obj
        integer(C_INT) :: SHT_rv
        ! splicer begin class.ArrayWrapper.method.get_size
        SHT_rv = c_arraywrapper_get_size(obj%cxxmem)
        ! splicer end class.ArrayWrapper.method.get_size
    end function arraywrapper_get_size

    ! ----------------------------------------
    ! Function:  void fillSize
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  int & size +intent(out)
    ! Attrs:     +intent(out)
    ! Requested: f_out_native_&
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Requested: c_out_native_&
    ! Match:     c_default
    subroutine arraywrapper_fill_size(obj, size)
        use iso_c_binding, only : C_INT
        class(arraywrapper) :: obj
        integer(C_INT), intent(OUT) :: size
        ! splicer begin class.ArrayWrapper.method.fill_size
        call c_arraywrapper_fill_size(obj%cxxmem, size)
        ! splicer end class.ArrayWrapper.method.fill_size
    end subroutine arraywrapper_fill_size

    ! ----------------------------------------
    ! Function:  void allocate
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    subroutine arraywrapper_allocate(obj)
        class(arraywrapper) :: obj
        ! splicer begin class.ArrayWrapper.method.allocate
        call c_arraywrapper_allocate(obj%cxxmem)
        ! splicer end class.ArrayWrapper.method.allocate
    end subroutine arraywrapper_allocate

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  double * getArray +dimension(getSize())
    ! Attrs:     +deref(pointer)+intent(function)
    ! Exact:     f_function_native_*_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
    ! Requested: c_function_native_*_cdesc_pointer
    ! Match:     c_function_native_*_cdesc
    function arraywrapper_get_array(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), pointer :: SHT_rv(:)
        ! splicer begin class.ArrayWrapper.method.get_array
        type(ARR_SHROUD_array) :: SHT_rv_cdesc
        call c_arraywrapper_get_array_bufferify(obj%cxxmem, &
            SHT_rv_cdesc)
        call c_f_pointer(SHT_rv_cdesc%base_addr, SHT_rv, &
            SHT_rv_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.get_array
    end function arraywrapper_get_array

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  double * getArrayConst +dimension(getSize())
    ! Attrs:     +deref(pointer)+intent(function)
    ! Exact:     f_function_native_*_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
    ! Requested: c_function_native_*_cdesc_pointer
    ! Match:     c_function_native_*_cdesc
    function arraywrapper_get_array_const(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), pointer :: SHT_rv(:)
        ! splicer begin class.ArrayWrapper.method.get_array_const
        type(ARR_SHROUD_array) :: SHT_rv_cdesc
        call c_arraywrapper_get_array_const_bufferify(obj%cxxmem, &
            SHT_rv_cdesc)
        call c_f_pointer(SHT_rv_cdesc%base_addr, SHT_rv, &
            SHT_rv_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.get_array_const
    end function arraywrapper_get_array_const

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  const double * getArrayC +dimension(getSize())
    ! Attrs:     +deref(pointer)+intent(function)
    ! Exact:     f_function_native_*_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
    ! Requested: c_function_native_*_cdesc_pointer
    ! Match:     c_function_native_*_cdesc
    function arraywrapper_get_array_c(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), pointer :: SHT_rv(:)
        ! splicer begin class.ArrayWrapper.method.get_array_c
        type(ARR_SHROUD_array) :: SHT_rv_cdesc
        call c_arraywrapper_get_array_c_bufferify(obj%cxxmem, &
            SHT_rv_cdesc)
        call c_f_pointer(SHT_rv_cdesc%base_addr, SHT_rv, &
            SHT_rv_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.get_array_c
    end function arraywrapper_get_array_c

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  const double * getArrayConstC +dimension(getSize())
    ! Attrs:     +deref(pointer)+intent(function)
    ! Exact:     f_function_native_*_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(function)
    ! Requested: c_function_native_*_cdesc_pointer
    ! Match:     c_function_native_*_cdesc
    function arraywrapper_get_array_const_c(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), pointer :: SHT_rv(:)
        ! splicer begin class.ArrayWrapper.method.get_array_const_c
        type(ARR_SHROUD_array) :: SHT_rv_cdesc
        call c_arraywrapper_get_array_const_c_bufferify(obj%cxxmem, &
            SHT_rv_cdesc)
        call c_f_pointer(SHT_rv_cdesc%base_addr, SHT_rv, &
            SHT_rv_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.get_array_const_c
    end function arraywrapper_get_array_const_c

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void fetchArrayPtr
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  double * * array +dimension(isize)+intent(out)
    ! Attrs:     +deref(pointer)+intent(out)
    ! Exact:     f_out_native_**_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
    ! Requested: c_out_native_**_cdesc_pointer
    ! Match:     c_out_native_**_cdesc
    subroutine arraywrapper_fetch_array_ptr(obj, array)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), intent(OUT), pointer :: array(:)
        ! splicer begin class.ArrayWrapper.method.fetch_array_ptr
        type(ARR_SHROUD_array) :: SHT_array_cdesc
        call c_arraywrapper_fetch_array_ptr_bufferify(obj%cxxmem, &
            SHT_array_cdesc)
        call c_f_pointer(SHT_array_cdesc%base_addr, array, &
            SHT_array_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.fetch_array_ptr
    end subroutine arraywrapper_fetch_array_ptr

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void fetchArrayRef
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  double * & array +dimension(isize)+intent(out)
    ! Attrs:     +deref(pointer)+intent(out)
    ! Exact:     f_out_native_*&_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
    ! Requested: c_out_native_*&_cdesc_pointer
    ! Match:     c_out_native_*&_cdesc
    subroutine arraywrapper_fetch_array_ref(obj, array)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), intent(OUT), pointer :: array(:)
        ! splicer begin class.ArrayWrapper.method.fetch_array_ref
        type(ARR_SHROUD_array) :: SHT_array_cdesc
        call c_arraywrapper_fetch_array_ref_bufferify(obj%cxxmem, &
            SHT_array_cdesc)
        call c_f_pointer(SHT_array_cdesc%base_addr, array, &
            SHT_array_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.fetch_array_ref
    end subroutine arraywrapper_fetch_array_ref

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void fetchArrayPtrConst
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  const double * * array +dimension(isize)+intent(out)
    ! Attrs:     +deref(pointer)+intent(out)
    ! Exact:     f_out_native_**_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
    ! Requested: c_out_native_**_cdesc_pointer
    ! Match:     c_out_native_**_cdesc
    subroutine arraywrapper_fetch_array_ptr_const(obj, array)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), intent(OUT), pointer :: array(:)
        ! splicer begin class.ArrayWrapper.method.fetch_array_ptr_const
        type(ARR_SHROUD_array) :: SHT_array_cdesc
        call c_arraywrapper_fetch_array_ptr_const_bufferify(obj%cxxmem, &
            SHT_array_cdesc)
        call c_f_pointer(SHT_array_cdesc%base_addr, array, &
            SHT_array_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.fetch_array_ptr_const
    end subroutine arraywrapper_fetch_array_ptr_const

    ! Generated by arg_to_buffer
    ! ----------------------------------------
    ! Function:  void fetchArrayRefConst
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  const double * & array +dimension(isize)+intent(out)
    ! Attrs:     +deref(pointer)+intent(out)
    ! Exact:     f_out_native_*&_cdesc_pointer
    ! Attrs:     +api(cdesc)+deref(pointer)+intent(out)
    ! Requested: c_out_native_*&_cdesc_pointer
    ! Match:     c_out_native_*&_cdesc
    subroutine arraywrapper_fetch_array_ref_const(obj, array)
        use iso_c_binding, only : C_DOUBLE, c_f_pointer
        class(arraywrapper) :: obj
        real(C_DOUBLE), intent(OUT), pointer :: array(:)
        ! splicer begin class.ArrayWrapper.method.fetch_array_ref_const
        type(ARR_SHROUD_array) :: SHT_array_cdesc
        call c_arraywrapper_fetch_array_ref_const_bufferify(obj%cxxmem, &
            SHT_array_cdesc)
        call c_f_pointer(SHT_array_cdesc%base_addr, array, &
            SHT_array_cdesc%shape(1:1))
        ! splicer end class.ArrayWrapper.method.fetch_array_ref_const
    end subroutine arraywrapper_fetch_array_ref_const

    ! ----------------------------------------
    ! Function:  void fetchVoidPtr
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  void * * array +intent(out)
    ! Attrs:     +intent(out)
    ! Exact:     f_out_void_**
    ! Attrs:     +intent(out)
    ! Exact:     c_out_void_**
    subroutine arraywrapper_fetch_void_ptr(obj, array)
        use iso_c_binding, only : C_PTR
        class(arraywrapper) :: obj
        type(C_PTR), intent(OUT) :: array
        ! splicer begin class.ArrayWrapper.method.fetch_void_ptr
        call c_arraywrapper_fetch_void_ptr(obj%cxxmem, array)
        ! splicer end class.ArrayWrapper.method.fetch_void_ptr
    end subroutine arraywrapper_fetch_void_ptr

    ! ----------------------------------------
    ! Function:  void fetchVoidRef
    ! Attrs:     +intent(subroutine)
    ! Exact:     f_subroutine
    ! Attrs:     +intent(subroutine)
    ! Exact:     c_subroutine
    ! ----------------------------------------
    ! Argument:  void * & array +intent(out)
    ! Attrs:     +intent(out)
    ! Requested: f_out_void_*&
    ! Match:     f_default
    ! Attrs:     +intent(out)
    ! Requested: c_out_void_*&
    ! Match:     c_default
    subroutine arraywrapper_fetch_void_ref(obj, array)
        class(arraywrapper) :: obj
        type(C_PTR), intent(OUT) :: array
        ! splicer begin class.ArrayWrapper.method.fetch_void_ref
        call c_arraywrapper_fetch_void_ref(obj%cxxmem, array)
        ! splicer end class.ArrayWrapper.method.fetch_void_ref
    end subroutine arraywrapper_fetch_void_ref

    ! ----------------------------------------
    ! Function:  bool checkPtr
    ! Attrs:     +intent(function)
    ! Requested: f_function_bool_scalar
    ! Match:     f_function_bool
    ! Attrs:     +intent(function)
    ! Requested: c_function_bool_scalar
    ! Match:     c_function
    ! ----------------------------------------
    ! Argument:  void * array +value
    ! Attrs:     +intent(in)
    ! Exact:     f_in_void_*
    ! Attrs:     +intent(in)
    ! Requested: c_in_void_*
    ! Match:     c_default
    function arraywrapper_check_ptr(obj, array) &
            result(SHT_rv)
        use iso_c_binding, only : C_BOOL, C_PTR
        class(arraywrapper) :: obj
        type(C_PTR), intent(IN) :: array
        logical :: SHT_rv
        ! splicer begin class.ArrayWrapper.method.check_ptr
        SHT_rv = c_arraywrapper_check_ptr(obj%cxxmem, array)
        ! splicer end class.ArrayWrapper.method.check_ptr
    end function arraywrapper_check_ptr

    ! ----------------------------------------
    ! Function:  double sumArray
    ! Attrs:     +intent(function)
    ! Requested: f_function_native_scalar
    ! Match:     f_function
    ! Attrs:     +intent(function)
    ! Requested: c_function_native_scalar
    ! Match:     c_function
    function arraywrapper_sum_array(obj) &
            result(SHT_rv)
        use iso_c_binding, only : C_DOUBLE
        class(arraywrapper) :: obj
        real(C_DOUBLE) :: SHT_rv
        ! splicer begin class.ArrayWrapper.method.sum_array
        SHT_rv = c_arraywrapper_sum_array(obj%cxxmem)
        ! splicer end class.ArrayWrapper.method.sum_array
    end function arraywrapper_sum_array

    ! Return pointer to C++ memory.
    function arraywrapper_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(arraywrapper), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function arraywrapper_get_instance

    subroutine arraywrapper_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(arraywrapper), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine arraywrapper_set_instance

    function arraywrapper_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(arraywrapper), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function arraywrapper_associated

    ! splicer begin class.ArrayWrapper.additional_functions
    ! splicer end class.ArrayWrapper.additional_functions

    ! splicer begin additional_functions
    ! splicer end additional_functions

    function arraywrapper_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(arraywrapper), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function arraywrapper_eq

    function arraywrapper_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(arraywrapper), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function arraywrapper_ne

end module arrayclass_mod
