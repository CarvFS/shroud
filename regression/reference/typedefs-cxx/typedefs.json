{
    "<NOTICE>": "This file is generated by Shroud nowrite-version and is useful for debugging.",
    "library": {
        "copyright": [
            "Copyright (c) 2017-2023, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": [
            "typedefs.h"
        ],
        "functions": [
            {
                "<FUNCTION>": "0 ****************************************",
                "ast": {
                    "declarator": {
                        "name": "typefunc"
                    },
                    "metaattrs": {
                        "intent": "function"
                    },
                    "params": [
                        {
                            "attrs": {
                                "value": true
                            },
                            "declarator": {
                                "name": "arg"
                            },
                            "metaattrs": {
                                "intent": "in"
                            },
                            "specifier": [
                                "TypeID"
                            ],
                            "typemap_name": "TypeID"
                        }
                    ],
                    "specifier": [
                        "TypeID"
                    ],
                    "typemap_name": "TypeID"
                },
                "decl": "TypeID typefunc(TypeID arg);",
                "declgen": "TypeID typefunc(TypeID arg +value)",
                "options": {},
                "wrap": {
                    "c": true,
                    "f_c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_type": "TYP_TypeID",
                            "c_var": "arg",
                            "cfi_type": "CFI_type_int",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "TypeID",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "c_in_native_scalar",
                            "stmt1": "c_default"
                        },
                        "fmtf": {
                            "F_C_var": "arg",
                            "c_var": "arg",
                            "f_c_module_line": "--import--:type_id",
                            "f_intent": "IN",
                            "f_kind": "type_id",
                            "f_type": "integer(type_id)",
                            "f_var": "arg",
                            "sh_type": "SH_TYPE_INT",
                            "stmt0": "f_in_native_scalar",
                            "stmt1": "f_default",
                            "stmtc0": "c_in_native_scalar",
                            "stmtc1": "c_default"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_deref": "",
                            "c_type": "TYP_TypeID",
                            "c_var": "arg",
                            "ctor_expr": "arg",
                            "cxx_addr": "&",
                            "cxx_member": ".",
                            "cxx_nonconst_ptr": "&arg",
                            "cxx_type": "TypeID",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg",
                            "stmt0": "py_in_native_scalar",
                            "stmt1": "py_default",
                            "value_var": "SHValue_arg"
                        }
                    }
                },
                "zz_fmtdict": {
                    "C_call_list": "arg",
                    "C_name": "TYP_typefunc",
                    "C_prototype": "TYP_TypeID arg",
                    "C_return_type": "TYP_TypeID",
                    "F_C_arguments": "arg",
                    "F_C_call": "c_typefunc",
                    "F_C_name": "typefunc",
                    "F_C_result_clause": "\fresult(SHT_rv)",
                    "F_C_subprogram": "function",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_name_function": "typefunc",
                    "F_name_generic": "typefunc",
                    "F_name_impl": "typefunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_typefunc",
                    "cxx_rv_decl": "TypeID SHC_rv",
                    "function_name": "typefunc",
                    "underscore_name": "typefunc"
                },
                "zz_fmtresult": {
                    "fmtc": {
                        "c_const": "",
                        "c_get_value": "",
                        "c_type": "TYP_TypeID",
                        "c_var": "SHC_rv",
                        "cfi_type": "CFI_type_int",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHC_rv",
                        "cxx_type": "TypeID",
                        "cxx_var": "SHC_rv",
                        "idtor": "0",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "c_function_native_scalar",
                        "stmt1": "c_function"
                    },
                    "fmtf": {
                        "F_C_var": "SHT_rv",
                        "c_var": "SHT_rv",
                        "cxx_type": "TypeID",
                        "f_c_module_line": "--import--:type_id",
                        "f_intent": "OUT",
                        "f_kind": "type_id",
                        "f_type": "integer(type_id)",
                        "f_var": "SHT_rv",
                        "sh_type": "SH_TYPE_INT",
                        "stmt0": "f_function_native_scalar",
                        "stmt1": "f_function",
                        "stmtc0": "c_function_native_scalar",
                        "stmtc1": "c_function"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "ctor_expr": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_nonconst_ptr": "&SHCXX_rv",
                        "cxx_type": "TypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv",
                        "stmt0": "py_function_native_scalar",
                        "stmt1": "py_default",
                        "value_var": "SHValue_rv"
                    }
                }
            }
        ],
        "language": "cxx",
        "scope_file": [
            "typedefs"
        ],
        "typedefs": [
            {
                "<TYPEDEF>": "****************************************",
                "ast": {
                    "declarator": {
                        "name": "TypeID"
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "typedef"
                    ],
                    "typemap_name": "TypeID"
                },
                "f_kind": "C_INT",
                "f_module": {
                    "iso_c_binding": [
                        "C_INT"
                    ]
                },
                "name": "TypeID",
                "options": {},
                "wrap": {
                    "c": true,
                    "fortran": true,
                    "python": true
                },
                "zz_fmtdict": {
                    "C_typedef_name": "TYP_TypeID",
                    "F_typedef_name": "type_id",
                    "cxx_type": "TypeID",
                    "typedef_name": "TypeID",
                    "underscore_name": "type_id"
                }
            }
        ],
        "wrap": {
            "c": true,
            "fortran": true,
            "python": true
        }
    },
    "types": {
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})",
            "LUA_push": "lua_pushinteger({LUA_state_var}, {push_arg})",
            "LUA_type": "LUA_TNUMBER",
            "PYN_typenum": "NPY_INT",
            "PY_ctor": "PyInt_FromLong({ctor_expr})",
            "PY_format": "i",
            "PY_get": "PyInt_AsLong({py_var})",
            "base": "integer",
            "c_type": "TYP_TypeID",
            "cfi_type": "CFI_type_int",
            "cxx_type": "TypeID",
            "f_c_module": {
                "--import--": [
                    "type_id"
                ]
            },
            "f_c_module_line": "--import--:type_id",
            "f_cast": "int({f_var}, C_INT)",
            "f_kind": "type_id",
            "f_module": {
                "typedefs_mod": [
                    "type_id"
                ]
            },
            "f_module_line": "typedefs_mod:type_id",
            "f_type": "integer(type_id)",
            "flat_name": "int",
            "sgroup": "native",
            "sh_type": "SH_TYPE_INT",
            "typedef": "int",
            "wrap_header": [
                "wraptypedefs.h"
            ]
        }
    }
}