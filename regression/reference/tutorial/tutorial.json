{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.",
    "library": {
        "classes": [
            {
                "cxx_header": "",
                "enums": [
                    {
                        "_fmtmembers": {
                            "DOWN": {
                                "C_enum_member": "TUT_Class1_DOWN",
                                "F_enum_member": "class1_down",
                                "F_value": 3,
                                "enum_member_lower": "down",
                                "enum_member_name": "DOWN",
                                "enum_member_upper": "DOWN"
                            },
                            "LEFT": {
                                "C_enum_member": "TUT_Class1_LEFT",
                                "C_value": 100,
                                "F_enum_member": "class1_left",
                                "F_value": 100,
                                "enum_member_lower": "left",
                                "enum_member_name": "LEFT",
                                "enum_member_upper": "LEFT"
                            },
                            "RIGHT": {
                                "C_enum_member": "TUT_Class1_RIGHT",
                                "F_enum_member": "class1_right",
                                "F_value": 101,
                                "enum_member_lower": "right",
                                "enum_member_name": "RIGHT",
                                "enum_member_upper": "RIGHT"
                            },
                            "UP": {
                                "C_enum_member": "TUT_Class1_UP",
                                "C_value": 2,
                                "F_enum_member": "class1_up",
                                "F_value": 2,
                                "enum_member_lower": "up",
                                "enum_member_name": "UP",
                                "enum_member_upper": "UP"
                            }
                        },
                        "ast": {
                            "members": [
                                {
                                    "name": "UP",
                                    "value": {
                                        "constant": "2"
                                    }
                                },
                                {
                                    "name": "DOWN"
                                },
                                {
                                    "name": "LEFT",
                                    "value": {
                                        "constant": "100"
                                    }
                                },
                                {
                                    "name": "RIGHT"
                                }
                            ],
                            "name": "DIRECTION"
                        },
                        "decl": "enum DIRECTION { UP = 2, DOWN, LEFT= 100, RIGHT };",
                        "fmtdict": {
                            "C_enum": "TUT_Class1_DIRECTION",
                            "enum_lower": "direction",
                            "enum_name": "DIRECTION",
                            "enum_upper": "DIRECTION",
                            "namespace_scope": "tutorial::Class1::"
                        },
                        "linenumber": 208,
                        "name": "DIRECTION",
                        "options": {},
                        "typemap_name": "tutorial::Class1::DIRECTION"
                    }
                ],
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapClass1.h",
                    "C_impl_filename": "wrapClass1.cpp",
                    "C_name_scope": "Class1_",
                    "C_type_name": "TUT_Class1",
                    "F_capsule_data_type": "SHROUD_class1_capsule",
                    "F_derived_name": "class1",
                    "F_name_scope": "class1_",
                    "LUA_class_reg": "l_Class1_Reg",
                    "LUA_ctor_name": "Class1",
                    "LUA_metadata": "Class1.metatable",
                    "LUA_this_call": "SH_this->self->",
                    "LUA_userdata_member": "self",
                    "LUA_userdata_type": "l_Class1_Type",
                    "LUA_userdata_var": "SH_this",
                    "PY_PyObject": "PY_Class1",
                    "PY_PyTypeObject": "PY_Class1_Type",
                    "PY_capsule_name": "PY_Class1_capsule_name",
                    "PY_from_object_func": "PP_Class1_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Class1_to_Object",
                    "PY_type_filename": "pyClass1type.cpp",
                    "class_scope": "Class1::",
                    "cxx_class": "Class1",
                    "cxx_type": "Class1",
                    "file_scope": "Class1"
                },
                "functions": [
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_type": "TUT_Class1",
                                "c_val": "static_cast<void *>(\tSHCXX_rv)",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "tutorial::Class1",
                                "f_var": "SHT_rv"
                            },
                            "fmtl": {
                                "c_var": "static_cast<void *>(\tSHCXX_rv)",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_var": "SHCXX_rv"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PyObject": "PY_Class1",
                                "PyTypeObject": "PY_Class1_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "vargs": "SHCXX_rv"
                            }
                        },
                        "_overloaded": true,
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor",
                                "name": "new"
                            },
                            "params": [],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        },
                        "decl": "Class1()         +name(new)",
                        "declgen": "Class1() +name(new)",
                        "fmtdict": {
                            "C_call_code": "tutorial::Class1 *SHCXX_rv =\t new tutorial::Class1();",
                            "C_call_list": "",
                            "C_name": "TUT_Class1_new_default",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(\tSHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_prototype": "TUT_Class1 * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TUT_Class1 *",
                            "F_C_call": "c_class1_new_default",
                            "F_C_name": "c_class1_new_default",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_call_code": "SHT_prv = c_class1_new_default(SHT_rv%cxxmem)",
                            "F_name_function": "new_default",
                            "F_name_generic": "new",
                            "F_name_impl": "class1_new_default",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "new",
                            "LUA_name_impl": "l_Class1_new",
                            "PY_name_impl": "PY_Class1_tp_init_default",
                            "PY_type_impl": "PY_Class1_tp_init_default",
                            "PY_type_method": "tp_init",
                            "__line__": 159,
                            "c_const": "",
                            "c_rv_decl": "TUT_Class1 *SHC_rv",
                            "cxx_rv_decl": "tutorial::Class1 *SHCXX_rv",
                            "function_name": "new",
                            "function_suffix": "_default",
                            "underscore_name": "new"
                        },
                        "linenumber": 158,
                        "options": {}
                    },
                    {
                        "_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "flag",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&flag)",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "idtor": "0",
                                    "stmt0": "c_native_in_"
                                },
                                "fmtf": {
                                    "c_var": "flag",
                                    "f_var": "flag"
                                },
                                "fmtl": {
                                    "LUA_index": 1,
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "lua_tointeger(L, 1)",
                                    "c_var_len": "Lflag",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "lua_var": "SH_Lua_flag"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "int flag",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "flag",
                                    "cxx_addr": "&",
                                    "cxx_decl": "int flag",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "flag",
                                    "data_var": "SHData_flag",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_flag",
                                    "size_var": "SHSize_flag"
                                }
                            }
                        },
                        "_fmtresult": {
                            "fmtc": {
                                "c_type": "TUT_Class1",
                                "c_val": "static_cast<void *>(\tSHCXX_rv)",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "tutorial::Class1",
                                "f_var": "SHT_rv"
                            },
                            "fmtl": {
                                "c_var": "static_cast<void *>(\tSHCXX_rv)",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_var": "SHCXX_rv"
                            },
                            "fmtpy": {
                                "PY_build_format": "O",
                                "PyObject": "PY_Class1",
                                "PyTypeObject": "PY_Class1_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv",
                                "vargs": "SHCXX_rv"
                            }
                        },
                        "_overloaded": true,
                        "ast": {
                            "attrs": {
                                "_constructor": true,
                                "_name": "ctor",
                                "name": "new"
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "flag",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        },
                        "decl": "Class1(int flag) +name(new)",
                        "declgen": "Class1(int flag +intent(in)+value) +name(new)",
                        "fmtdict": {
                            "C_call_code": "tutorial::Class1 *SHCXX_rv =\t new tutorial::Class1(flag);",
                            "C_call_list": "flag",
                            "C_name": "TUT_Class1_new_flag",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(\tSHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_prototype": "int flag,\t TUT_Class1 * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TUT_Class1 *",
                            "F_C_call": "c_class1_new_flag",
                            "F_C_name": "c_class1_new_flag",
                            "F_arg_c_call": "flag,\t SHT_rv%cxxmem",
                            "F_arguments": "flag",
                            "F_call_code": "SHT_prv = c_class1_new_flag(flag,\t SHT_rv%cxxmem)",
                            "F_name_function": "new_flag",
                            "F_name_generic": "new",
                            "F_name_impl": "class1_new_flag",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_Class1_tp_init_flag",
                            "PY_type_impl": "PY_Class1_tp_init_flag",
                            "PY_type_method": "tp_init",
                            "__line__": 162,
                            "c_const": "",
                            "c_rv_decl": "TUT_Class1 *SHC_rv",
                            "cxx_rv_decl": "tutorial::Class1 *SHCXX_rv",
                            "function_name": "new",
                            "function_suffix": "_flag",
                            "underscore_name": "new"
                        },
                        "linenumber": 161,
                        "options": {}
                    },
                    {
                        "ast": {
                            "attrs": {
                                "_destructor": true,
                                "_name": "dtor",
                                "name": "delete"
                            },
                            "params": [],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        },
                        "decl": "~Class1()        +name(delete)",
                        "declgen": "~Class1() +name(delete)",
                        "fmtdict": {
                            "C_call_code": "delete SH_this;\nself->addr = NULL;",
                            "C_call_list": "",
                            "C_name": "TUT_Class1_delete",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);",
                            "C_prototype": "TUT_Class1 * self",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_class1_delete",
                            "F_C_name": "c_class1_delete",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "call c_class1_delete(obj%cxxmem)",
                            "F_name_function": "delete",
                            "F_name_generic": "delete",
                            "F_name_impl": "class1_delete",
                            "F_subprogram": "subroutine",
                            "LUA_name": "delete",
                            "LUA_name_impl": "l_Class1_delete",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "delete",
                            "underscore_name": "delete"
                        },
                        "linenumber": 164,
                        "options": {}
                    },
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "int",
                                "f_var": "SHT_rv"
                            },
                            "fmtl": {
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "Method1",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int Method1()",
                        "declgen": "int Method1()",
                        "doxygen": {
                            "__line__": 166,
                            "brief": "returns the value of flag member"
                        },
                        "fmtdict": {
                            "C_call_code": "int SHC_rv =\t SH_this->Method1(\t);",
                            "C_call_list": "",
                            "C_name": "TUT_Class1_method1",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);",
                            "C_prototype": "TUT_Class1 * self",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "int",
                            "F_C_call": "c_class1_method1",
                            "F_C_name": "c_class1_method1",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "SHT_rv = c_class1_method1(obj%cxxmem)",
                            "F_name_function": "method1",
                            "F_name_generic": "method1",
                            "F_name_impl": "class1_method1",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "Method1",
                            "LUA_name_impl": "l_Class1_method1",
                            "PY_name_impl": "PY_Method1",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "Method1",
                            "underscore_name": "method1"
                        },
                        "linenumber": 165,
                        "options": {}
                    },
                    {
                        "_fmtargs": {
                            "obj2": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "const ",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "obj2",
                                    "cxx_addr": "",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<tutorial::Class1 *>\t(SHCXX_obj2))",
                                    "cxx_decl": "const tutorial::Class1 * SHCXX_obj2",
                                    "cxx_member": "->",
                                    "cxx_type": "tutorial::Class1",
                                    "cxx_val": "static_cast<const tutorial::Class1 *>(obj2->addr)",
                                    "cxx_var": "SHCXX_obj2",
                                    "idtor": "0",
                                    "stmt0": "c_shadow_in_",
                                    "stmt1": "c_shadow_in"
                                },
                                "fmtf": {
                                    "c_var": "obj2",
                                    "f_var": "obj2"
                                },
                                "fmtpy": {
                                    "PyObject": "PY_Class1",
                                    "PyTypeObject": "PY_Class1_Type",
                                    "c_const": "const ",
                                    "c_decl": "TUT_Class1 obj2",
                                    "c_deref": "",
                                    "c_type": "TUT_Class1",
                                    "c_var": "obj2",
                                    "cxx_addr": "&",
                                    "cxx_decl": "tutorial::Class1 obj2",
                                    "cxx_member": "->",
                                    "cxx_type": "tutorial::Class1",
                                    "cxx_var": "obj2",
                                    "data_var": "SHData_obj2",
                                    "numpy_type": null,
                                    "py_type": "PY_Class1",
                                    "py_var": "SHPy_obj2",
                                    "size_var": "SHSize_obj2"
                                }
                            }
                        },
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "bool",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "bool",
                                "cxx_var": "SHC_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "bool",
                                "f_var": "SHT_rv"
                            },
                            "fmtpy": {
                                "PyTypeObject": "PyBool_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "bool",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_BOOL",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "equivalent",
                                "pointer": []
                            },
                            "func_const": true,
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": false
                                    },
                                    "const": true,
                                    "declarator": {
                                        "name": "obj2",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "Class1"
                                    ],
                                    "typemap_name": "tutorial::Class1"
                                }
                            ],
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        },
                        "decl": "bool equivalent(Class1 const &obj2) const;",
                        "declgen": "bool equivalent(const Class1 & obj2 +intent(in)) const",
                        "doxygen": {
                            "__line__": 171,
                            "brief": "Pass in reference to instance"
                        },
                        "fmtdict": {
                            "C_call_code": "bool SHC_rv =\t SH_this->equivalent(\t*SHCXX_obj2);",
                            "C_call_list": "*SHCXX_obj2",
                            "C_name": "TUT_Class1_equivalent",
                            "C_pre_call": "const tutorial::Class1 *SH_this =\t static_cast<const tutorial::Class1 *>(self->addr);\nconst tutorial::Class1 * SHCXX_obj2 =\t static_cast<const tutorial::Class1 *>(obj2->addr);",
                            "C_prototype": "const TUT_Class1 * self,\t const TUT_Class1 * obj2",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "bool",
                            "F_C_call": "c_class1_equivalent",
                            "F_C_name": "c_class1_equivalent",
                            "F_arg_c_call": "obj%cxxmem,\t obj2%cxxmem",
                            "F_arguments": "obj,\t obj2",
                            "F_call_code": "SHT_rv = c_class1_equivalent(obj%cxxmem,\t obj2%cxxmem)",
                            "F_name_function": "equivalent",
                            "F_name_generic": "equivalent",
                            "F_name_impl": "class1_equivalent",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_equivalent",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "bool SHC_rv",
                            "function_name": "equivalent",
                            "underscore_name": "equivalent"
                        },
                        "linenumber": 169,
                        "options": {
                            "__line__": 173,
                            "wrap_lua": false
                        }
                    },
                    {
                        "ast": {
                            "declarator": {
                                "name": "returnThis",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "params": [],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        },
                        "decl": "Class1 * returnThis();",
                        "declgen": "Class1 * returnThis()",
                        "doxygen": {
                            "__line__": 179,
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "fmtdict": {
                            "C_call_code": "SH_this->returnThis(\t);",
                            "C_call_list": "",
                            "C_name": "TUT_Class1_return_this",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);",
                            "C_prototype": "TUT_Class1 * self",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_class1_return_this",
                            "F_C_name": "c_class1_return_this",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "call c_class1_return_this(obj%cxxmem)",
                            "F_name_function": "return_this",
                            "F_name_generic": "return_this",
                            "F_name_impl": "class1_return_this",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "returnThis",
                            "underscore_name": "return_this"
                        },
                        "linenumber": 177,
                        "options": {
                            "__line__": 181,
                            "wrap_lua": false,
                            "wrap_python": false
                        },
                        "return_this": true
                    },
                    {
                        "_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "flag",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&flag)",
                                    "cxx_member": ".",
                                    "cxx_type": "bool",
                                    "cxx_var": "flag",
                                    "idtor": "0",
                                    "stmt0": "c_bool_in_"
                                }
                            },
                            "name": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "name",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_name)",
                                    "cxx_member": ".",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_name",
                                    "idtor": "0",
                                    "stmt0": "c_string_in_",
                                    "stmt1": "c_string_in"
                                }
                            }
                        },
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "TUT_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)",
                                "cxx_member": "->",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "tutorial::Class1",
                                "f_var": "SHT_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "returnThisBuffer",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": false
                                    },
                                    "declarator": {
                                        "name": "name",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "typemap_name": "std::string"
                                },
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "flag",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "bool"
                                    ],
                                    "typemap_name": "bool"
                                }
                            ],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        },
                        "decl": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag);",
                        "declgen": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +intent(in)+value)",
                        "doxygen": {
                            "__line__": 194,
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "fmtdict": {
                            "C_call_code": "tutorial::Class1 * SHCXX_rv =\t SH_this->returnThisBuffer(\tSHCXX_name,\t flag);",
                            "C_call_list": "SHCXX_name,\t flag",
                            "C_name": "TUT_Class1_return_this_buffer",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(SHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);\nstd::string SHCXX_name(name);",
                            "C_prototype": "TUT_Class1 * self,\t char * name,\t bool flag,\t TUT_Class1 * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TUT_Class1 *",
                            "F_C_call": "c_class1_return_this_buffer_bufferify",
                            "F_C_name": "c_class1_return_this_buffer",
                            "F_arg_c_call": "obj%cxxmem,\t name,\t len_trim(name, kind=C_INT),\t SH_flag,\t SHT_rv%cxxmem",
                            "F_arguments": "obj,\t name,\t flag",
                            "F_call_code": "SHT_prv = c_class1_return_this_buffer_bufferify(obj%cxxmem,\t name,\t len_trim(name, kind=C_INT),\t SH_flag,\t SHT_rv%cxxmem)",
                            "F_name_function": "return_this_buffer",
                            "F_name_generic": "return_this_buffer",
                            "F_name_impl": "class1_return_this_buffer",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "tutorial::Class1 * SHCXX_rv",
                            "function_name": "returnThisBuffer",
                            "underscore_name": "return_this_buffer"
                        },
                        "linenumber": 185,
                        "options": {
                            "__line__": 196,
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "flag",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&flag)",
                                    "cxx_member": ".",
                                    "cxx_type": "bool",
                                    "cxx_var": "flag",
                                    "idtor": "0",
                                    "stmt0": "c_bool_in_buf"
                                },
                                "fmtf": {
                                    "c_var": "SH_flag",
                                    "f_var": "flag"
                                }
                            },
                            "name": {
                                "fmtc": {
                                    "c_addr": "",
                                    "c_const": "",
                                    "c_deref": "*",
                                    "c_member": "->",
                                    "c_var": "name",
                                    "c_var_trim": "Lname",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_name)",
                                    "cxx_member": ".",
                                    "cxx_type": "std::string",
                                    "cxx_var": "SHCXX_name",
                                    "idtor": "0",
                                    "stmt0": "c_string_in_buf",
                                    "stmt1": "c_string_in_buf"
                                },
                                "fmtf": {
                                    "c_var": "name",
                                    "f_var": "name"
                                }
                            }
                        },
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "TUT_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)",
                                "cxx_member": "->",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            }
                        },
                        "_generated": "arg_to_buffer",
                        "ast": {
                            "declarator": {
                                "name": "returnThisBuffer",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "len_trim": "Lname",
                                        "value": false
                                    },
                                    "declarator": {
                                        "name": "name",
                                        "pointer": [
                                            {
                                                "ptr": "&"
                                            }
                                        ]
                                    },
                                    "specifier": [
                                        "std::string"
                                    ],
                                    "stmts_suffix": "buf",
                                    "typemap_name": "std::string"
                                },
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "flag",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "bool"
                                    ],
                                    "stmts_suffix": "buf",
                                    "typemap_name": "bool"
                                }
                            ],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        },
                        "decl": "Class1 * returnThisBuffer(std::string & name +intent(in), bool flag);",
                        "declgen": "Class1 * returnThisBuffer(std::string & name +intent(in)+len_trim(Lname), bool flag +intent(in)+value)",
                        "doxygen": {
                            "__line__": 194,
                            "brief": "Return pointer to 'this' to allow chaining calls"
                        },
                        "fmtdict": {
                            "C_call_code": "tutorial::Class1 * SHCXX_rv =\t SH_this->returnThisBuffer(\tSHCXX_name,\t flag);",
                            "C_call_list": "SHCXX_name,\t flag",
                            "C_name": "TUT_Class1_return_this_buffer_bufferify",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(SHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);\nstd::string SHCXX_name(name, Lname);",
                            "C_prototype": "TUT_Class1 * self,\t char * name,\t int Lname,\t bool flag,\t TUT_Class1 * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TUT_Class1 *",
                            "F_C_name": "c_class1_return_this_buffer_bufferify",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "tutorial::Class1 * SHCXX_rv",
                            "function_name": "returnThisBuffer",
                            "function_suffix": "_bufferify",
                            "underscore_name": "return_this_buffer"
                        },
                        "linenumber": 185,
                        "options": {
                            "__line__": 196,
                            "wrap_c": true,
                            "wrap_fortran": false,
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "TUT_Class1",
                                "c_var": "SHC_rv",
                                "cxx_addr": "",
                                "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)",
                                "cxx_member": "->",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "tutorial::Class1",
                                "f_var": "SHT_rv"
                            },
                            "fmtpy": {
                                "PyObject": "PY_Class1",
                                "PyTypeObject": "PY_Class1_Type",
                                "c_deref": "*",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "",
                                "cxx_member": "->",
                                "cxx_type": "tutorial::Class1",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "getclass3",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "func_const": true,
                            "params": [],
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        },
                        "decl": "Class1 *getclass3() const",
                        "declgen": "Class1 * getclass3() const",
                        "doxygen": {
                            "__line__": 201,
                            "brief": "Test const method"
                        },
                        "fmtdict": {
                            "C_call_code": "tutorial::Class1 * SHCXX_rv =\t SH_this->getclass3(\t);",
                            "C_call_list": "",
                            "C_name": "TUT_Class1_getclass3",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(SHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_pre_call": "const tutorial::Class1 *SH_this =\t static_cast<const tutorial::Class1 *>(self->addr);",
                            "C_prototype": "const TUT_Class1 * self,\t TUT_Class1 * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TUT_Class1 *",
                            "F_C_call": "c_class1_getclass3",
                            "F_C_name": "c_class1_getclass3",
                            "F_arg_c_call": "obj%cxxmem,\t SHT_rv%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "SHT_prv = c_class1_getclass3(obj%cxxmem,\t SHT_rv%cxxmem)",
                            "F_name_function": "getclass3",
                            "F_name_generic": "getclass3",
                            "F_name_impl": "class1_getclass3",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getclass3",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "tutorial::Class1 * SHCXX_rv",
                            "function_name": "getclass3",
                            "underscore_name": "getclass3"
                        },
                        "linenumber": 200,
                        "options": {
                            "__line__": 204,
                            "wrap_lua": false
                        }
                    },
                    {
                        "_fmtargs": {
                            "arg": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "arg",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_arg)",
                                    "cxx_decl": "tutorial::Class1::DIRECTION SHCXX_arg",
                                    "cxx_member": ".",
                                    "cxx_type": "tutorial::Class1::DIRECTION",
                                    "cxx_val": "static_cast<tutorial::Class1::DIRECTION>(arg)",
                                    "cxx_var": "SHCXX_arg",
                                    "idtor": "0",
                                    "stmt0": "c_native_in_"
                                },
                                "fmtf": {
                                    "c_var": "arg",
                                    "f_var": "arg"
                                },
                                "fmtl": {
                                    "LUA_index": 1,
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "lua_tointeger(L, 1)",
                                    "c_var_len": "Larg",
                                    "cxx_member": ".",
                                    "cxx_type": "tutorial::Class1::DIRECTION",
                                    "cxx_var": "arg",
                                    "lua_var": "SH_Lua_arg"
                                },
                                "fmtpy": {
                                    "c_const": "",
                                    "c_decl": "int arg",
                                    "c_deref": "",
                                    "c_type": "int",
                                    "c_var": "arg",
                                    "cxx_addr": "&",
                                    "cxx_decl": "tutorial::Class1::DIRECTION SH_arg",
                                    "cxx_member": ".",
                                    "cxx_type": "tutorial::Class1::DIRECTION",
                                    "cxx_val": "static_cast<tutorial::Class1::DIRECTION>(arg)",
                                    "cxx_var": "SH_arg",
                                    "data_var": "SHData_arg",
                                    "numpy_type": "NPY_INT",
                                    "py_var": "SHPy_arg",
                                    "size_var": "SHSize_arg"
                                }
                            }
                        },
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_rv_decl": "int SHC_rv",
                                "c_type": "int",
                                "c_val": "static_cast<int>(SHCXX_rv)",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "tutorial::Class1::DIRECTION",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "tutorial::Class1::DIRECTION",
                                "f_var": "SHT_rv"
                            },
                            "fmtl": {
                                "c_var": "static_cast<int>(SHCXX_rv)",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_var": "SHCXX_rv"
                            },
                            "fmtpy": {
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "tutorial::Class1::DIRECTION",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": "NPY_INT",
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "directionFunc",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "arg",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "DIRECTION"
                                    ],
                                    "typemap_name": "tutorial::Class1::DIRECTION"
                                }
                            ],
                            "specifier": [
                                "DIRECTION"
                            ],
                            "typemap_name": "tutorial::Class1::DIRECTION"
                        },
                        "decl": "DIRECTION directionFunc(DIRECTION arg);",
                        "declgen": "DIRECTION directionFunc(DIRECTION arg +intent(in)+value)",
                        "fmtdict": {
                            "C_call_code": "tutorial::Class1::DIRECTION SHCXX_rv =\t SH_this->directionFunc(\tSHCXX_arg);",
                            "C_call_list": "SHCXX_arg",
                            "C_name": "TUT_Class1_direction_func",
                            "C_post_call": "int SHC_rv =\t static_cast<int>(SHCXX_rv);",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);\ntutorial::Class1::DIRECTION SHCXX_arg =\t static_cast<tutorial::Class1::DIRECTION>(arg);",
                            "C_prototype": "TUT_Class1 * self,\t int arg",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "int",
                            "F_C_call": "c_class1_direction_func",
                            "F_C_name": "c_class1_direction_func",
                            "F_arg_c_call": "obj%cxxmem,\t arg",
                            "F_arguments": "obj,\t arg",
                            "F_call_code": "SHT_rv = c_class1_direction_func(obj%cxxmem,\t arg)",
                            "F_name_function": "direction_func",
                            "F_name_generic": "direction_func",
                            "F_name_impl": "class1_direction_func",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "LUA_name": "directionFunc",
                            "LUA_name_impl": "l_Class1_direction_func",
                            "PY_name_impl": "PY_directionFunc",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "tutorial::Class1::DIRECTION SHCXX_rv",
                            "function_name": "directionFunc",
                            "underscore_name": "direction_func"
                        },
                        "linenumber": 210,
                        "options": {}
                    },
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "int",
                                "f_var": "SHT_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "getM_flag",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getM_flag()",
                        "declgen": "int getM_flag()",
                        "fmtdict": {
                            "C_call_code": "int SHC_rv =\t SH_this->getM_flag(\t);",
                            "C_call_list": "",
                            "C_code": "{C_pre_call}\nreturn SH_this->m_flag;",
                            "C_name": "TUT_Class1_get_m_flag",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);",
                            "C_prototype": "TUT_Class1 * self",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "int",
                            "F_C_call": "c_class1_get_m_flag",
                            "F_C_name": "c_class1_get_m_flag",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "SHT_rv = c_class1_get_m_flag(obj%cxxmem)",
                            "F_name_function": "get_m_flag",
                            "F_name_generic": "get_m_flag",
                            "F_name_impl": "class1_get_m_flag",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "getM_flag",
                            "underscore_name": "get_m_flag"
                        },
                        "linenumber": "?",
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_get_value": "",
                                "c_type": "int",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "int",
                                "cxx_var": "SHC_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "int",
                                "f_var": "SHT_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "getTest",
                                "pointer": []
                            },
                            "params": [],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "decl": "int getTest()",
                        "declgen": "int getTest()",
                        "fmtdict": {
                            "C_call_code": "int SHC_rv =\t SH_this->getTest(\t);",
                            "C_call_list": "",
                            "C_code": "{C_pre_call}\nreturn SH_this->m_test;",
                            "C_name": "TUT_Class1_get_test",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);",
                            "C_prototype": "TUT_Class1 * self",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "int",
                            "F_C_call": "c_class1_get_test",
                            "F_C_name": "c_class1_get_test",
                            "F_arg_c_call": "obj%cxxmem",
                            "F_arguments": "obj",
                            "F_call_code": "SHT_rv = c_class1_get_test(obj%cxxmem)",
                            "F_name_function": "get_test",
                            "F_name_generic": "get_test",
                            "F_name_impl": "class1_get_test",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "int SHC_rv",
                            "function_name": "getTest",
                            "underscore_name": "get_test"
                        },
                        "linenumber": "?",
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    },
                    {
                        "_fmtargs": {
                            "val": {
                                "fmtc": {
                                    "c_addr": "&",
                                    "c_const": "",
                                    "c_deref": "",
                                    "c_member": ".",
                                    "c_var": "val",
                                    "cxx_addr": "&",
                                    "cxx_cast_to_void_ptr": "static_cast<void *>(&val)",
                                    "cxx_member": ".",
                                    "cxx_type": "int",
                                    "cxx_var": "val",
                                    "idtor": "0",
                                    "stmt0": "c_native_in_"
                                },
                                "fmtf": {
                                    "c_var": "val",
                                    "f_var": "val"
                                }
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "setTest",
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in",
                                        "value": true
                                    },
                                    "declarator": {
                                        "name": "val",
                                        "pointer": []
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "void"
                            ],
                            "typemap_name": "void"
                        },
                        "decl": "void setTest(int val)",
                        "declgen": "void setTest(int val +intent(in)+value)",
                        "fmtdict": {
                            "C_call_code": "SH_this->setTest(\tval);",
                            "C_call_list": "val",
                            "C_code": "{C_pre_call}\nSH_this->m_test = val;\nreturn;",
                            "C_name": "TUT_Class1_set_test",
                            "C_pre_call": "tutorial::Class1 *SH_this =\t static_cast<tutorial::Class1 *>(self->addr);",
                            "C_prototype": "TUT_Class1 * self,\t int val",
                            "C_return_code": "return;",
                            "C_return_type": "void",
                            "F_C_call": "c_class1_set_test",
                            "F_C_name": "c_class1_set_test",
                            "F_arg_c_call": "obj%cxxmem,\t val",
                            "F_arguments": "obj,\t val",
                            "F_call_code": "call c_class1_set_test(obj%cxxmem,\t val)",
                            "F_name_function": "set_test",
                            "F_name_generic": "set_test",
                            "F_name_impl": "class1_set_test",
                            "F_subprogram": "subroutine",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "function_name": "setTest",
                            "underscore_name": "set_test"
                        },
                        "linenumber": "?",
                        "options": {
                            "wrap_lua": false,
                            "wrap_python": false
                        }
                    }
                ],
                "linenumber": 152,
                "name": "Class1",
                "options": {
                    "__line__": 153,
                    "literalinclude": true
                },
                "scope": "tutorial::Class1::",
                "typemap_name": "tutorial::Class1",
                "variables": [
                    {
                        "ast": {
                            "attrs": {
                                "readonly": true
                            },
                            "declarator": {
                                "name": "m_flag",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "fmtdict": {
                            "PY_getter": "PY_Class1_m_flag_getter",
                            "PY_setter": "NULL",
                            "field_name": "m_flag",
                            "variable_lower": "m_flag",
                            "variable_name": "m_flag",
                            "variable_upper": "M_FLAG"
                        },
                        "linenumber": 156,
                        "name": "m_flag",
                        "options": {}
                    },
                    {
                        "ast": {
                            "attrs": {
                                "name": "test"
                            },
                            "declarator": {
                                "name": "m_test",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        "fmtdict": {
                            "PY_getter": "PY_Class1_test_getter",
                            "PY_setter": "PY_Class1_test_setter",
                            "field_name": "m_test",
                            "variable_lower": "test",
                            "variable_name": "test",
                            "variable_upper": "TEST"
                        },
                        "linenumber": 157,
                        "name": "test",
                        "options": {}
                    }
                ]
            },
            {
                "cxx_header": "",
                "fmtdict": {
                    "CXX_this_call": "SH_this->",
                    "C_header_filename": "wrapSingleton.h",
                    "C_impl_filename": "wrapSingleton.cpp",
                    "C_name_scope": "Singleton_",
                    "C_type_name": "TUT_Singleton",
                    "F_capsule_data_type": "SHROUD_singleton_capsule",
                    "F_derived_name": "singleton",
                    "F_name_scope": "singleton_",
                    "PY_PyObject": "PY_Singleton",
                    "PY_PyTypeObject": "PY_Singleton_Type",
                    "PY_capsule_name": "PY_Singleton_capsule_name",
                    "PY_from_object_func": "PP_Singleton_from_Object",
                    "PY_this_call": "self->obj->",
                    "PY_to_object_func": "PP_Singleton_to_Object",
                    "PY_type_filename": "pySingletontype.cpp",
                    "class_scope": "Singleton::",
                    "cxx_class": "Singleton",
                    "cxx_type": "Singleton",
                    "file_scope": "Singleton"
                },
                "functions": [
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_type": "TUT_Singleton",
                                "c_var": "SHC_rv",
                                "cxx_addr": "&",
                                "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                                "cxx_member": ".",
                                "cxx_type": "tutorial::Singleton",
                                "cxx_var": "SHCXX_rv",
                                "idtor": "0"
                            },
                            "fmtf": {
                                "cxx_type": "tutorial::Singleton",
                                "f_var": "SHT_rv"
                            },
                            "fmtpy": {
                                "PyObject": "PY_Singleton",
                                "PyTypeObject": "PY_Singleton_Type",
                                "c_deref": "",
                                "c_var": "SHCXX_rv",
                                "cxx_addr": "&",
                                "cxx_member": ".",
                                "cxx_type": "tutorial::Singleton",
                                "cxx_var": "SHCXX_rv",
                                "data_var": "SHData_rv",
                                "numpy_type": null,
                                "py_var": "SHTPy_rv",
                                "size_var": "SHSize_rv"
                            }
                        },
                        "ast": {
                            "declarator": {
                                "name": "getReference",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "params": [],
                            "specifier": [
                                "Singleton"
                            ],
                            "storage": [
                                "static"
                            ],
                            "typemap_name": "tutorial::Singleton"
                        },
                        "decl": "static Singleton& getReference()",
                        "declgen": "static Singleton & getReference()",
                        "fmtdict": {
                            "CXX_this_call": "tutorial::Singleton::",
                            "C_call_code": "tutorial::Singleton & SHCXX_rv =\t tutorial::Singleton::getReference(\t);",
                            "C_call_list": "",
                            "C_name": "TUT_Singleton_get_reference",
                            "C_post_call": "SHC_rv->addr = static_cast<void *>(&SHCXX_rv);\nSHC_rv->idtor = 0;",
                            "C_prototype": "TUT_Singleton * SHC_rv",
                            "C_return_code": "return SHC_rv;",
                            "C_return_type": "TUT_Singleton *",
                            "F_C_call": "c_singleton_get_reference",
                            "F_C_name": "c_singleton_get_reference",
                            "F_arg_c_call": "SHT_rv%cxxmem",
                            "F_arguments": "",
                            "F_call_code": "SHT_prv = c_singleton_get_reference(SHT_rv%cxxmem)",
                            "F_name_function": "get_reference",
                            "F_name_generic": "get_reference",
                            "F_name_impl": "singleton_get_reference",
                            "F_result_clause": "\fresult(SHT_rv)",
                            "F_subprogram": "function",
                            "PY_name_impl": "PY_getReference",
                            "PY_this_call": "tutorial::Singleton::",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "self",
                            "cxx_rv_decl": "tutorial::Singleton & SHCXX_rv",
                            "function_name": "getReference",
                            "underscore_name": "get_reference"
                        },
                        "linenumber": 274,
                        "options": {}
                    }
                ],
                "linenumber": 269,
                "name": "Singleton",
                "options": {
                    "__line__": 270,
                    "wrap_lua": false
                },
                "scope": "tutorial::Singleton::",
                "typemap_name": "tutorial::Singleton"
            }
        ],
        "copyright": [
            "Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and",
            "other Shroud Project Developers.",
            "See the top-level COPYRIGHT file for details.",
            "",
            "SPDX-License-Identifier: (BSD-3-Clause)",
            ""
        ],
        "cxx_header": "tutorial.hpp",
        "enums": [
            {
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "TUT_BLUE",
                        "F_enum_member": "blue",
                        "F_value": 1,
                        "enum_member_lower": "blue",
                        "enum_member_name": "BLUE",
                        "enum_member_upper": "BLUE"
                    },
                    "RED": {
                        "C_enum_member": "TUT_RED",
                        "F_enum_member": "red",
                        "F_value": 0,
                        "enum_member_lower": "red",
                        "enum_member_name": "RED",
                        "enum_member_upper": "RED"
                    },
                    "WHITE": {
                        "C_enum_member": "TUT_WHITE",
                        "F_enum_member": "white",
                        "F_value": 2,
                        "enum_member_lower": "white",
                        "enum_member_name": "WHITE",
                        "enum_member_upper": "WHITE"
                    }
                },
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        },
                        {
                            "name": "BLUE"
                        },
                        {
                            "name": "WHITE"
                        }
                    ],
                    "name": "Color"
                },
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n",
                "fmtdict": {
                    "C_enum": "TUT_Color",
                    "enum_lower": "color",
                    "enum_name": "Color",
                    "enum_upper": "COLOR"
                },
                "linenumber": 32,
                "name": "Color",
                "options": {
                    "__line__": 38,
                    "bar": 4
                },
                "typemap_name": "tutorial::Color"
            }
        ],
        "fmtdict": {
            "CXX_local": "SHCXX_",
            "CXX_template": "",
            "CXX_this": "SH_this",
            "CXX_this_call": "",
            "C_array_type": "TUT_SHROUD_array",
            "C_bufferify_suffix": "_bufferify",
            "C_capsule_data_type": "TUT_SHROUD_capsule_data",
            "C_custom_return_type": "",
            "C_header_filename": "wrapTutorial.h",
            "C_header_filename_suffix": "h",
            "C_header_utility": "typesTutorial.h",
            "C_impl_filename": "wrapTutorial.cpp",
            "C_impl_filename_suffix": "cpp",
            "C_local": "SHC_",
            "C_memory_dtor_function": "TUT_SHROUD_memory_destructor",
            "C_name_scope": "",
            "C_post_call": "",
            "C_pre_call": "",
            "C_prefix": "TUT_",
            "C_result": "rv",
            "C_string_result_as_arg": "SHF_rv",
            "C_this": "self",
            "F_C_prefix": "c_",
            "F_C_pure_clause": "",
            "F_C_result_clause": "",
            "F_array_type": "SHROUD_array",
            "F_capsule_data_type": "SHROUD_capsule_data",
            "F_capsule_final_function": "SHROUD_capsule_final",
            "F_capsule_type": "SHROUD_capsule",
            "F_derived_member": "cxxmem",
            "F_filename_suffix": "f",
            "F_impl_filename": "wrapftutorial.f",
            "F_module_name": "tutorial_mod",
            "F_name_assign": "assign",
            "F_name_associated": "associated",
            "F_name_final": "final",
            "F_name_instance_get": "get_instance",
            "F_name_instance_set": "set_instance",
            "F_name_scope": "",
            "F_pointer": "SHT_ptr",
            "F_pure_clause": "",
            "F_result": "SHT_rv",
            "F_result_capsule": "SHT_crv",
            "F_result_clause": "",
            "F_result_ptr": "SHT_prv",
            "F_string_result_as_arg": "",
            "F_this": "obj",
            "LUA_header_filename": "luaTutorialmodule.hpp",
            "LUA_header_filename_suffix": "hpp",
            "LUA_impl_filename_suffix": "cpp",
            "LUA_metadata": "XXLUA_metadata",
            "LUA_module_filename": "luaTutorialmodule.cpp",
            "LUA_module_name": "tutorial",
            "LUA_module_reg": "l_Tutorial_Reg",
            "LUA_prefix": "l_",
            "LUA_result": "rv",
            "LUA_state_var": "L",
            "LUA_this_call": "",
            "LUA_used_param_state": false,
            "LUA_userdata_type": "XXLUA_userdata_type",
            "PY_PyObject": "PyObject",
            "PY_capsule_destructor_function": "PY_SHROUD_capsule_destructor",
            "PY_dtor_context_array": "PY_SHROUD_capsule_context",
            "PY_dtor_context_typedef": "PY_SHROUD_dtor_context",
            "PY_extern_C_begin": "extern \"C\" ",
            "PY_fetch_context_function": "PY_SHROUD_fetch_context",
            "PY_header_filename": "pyTutorialmodule.hpp",
            "PY_header_filename_suffix": "hpp",
            "PY_impl_filename_suffix": "cpp",
            "PY_module_init": "tutorial",
            "PY_module_name": "tutorial",
            "PY_module_scope": "tutorial",
            "PY_numpy_array_capsule_name": "PY_array_dtor",
            "PY_param_args": "args",
            "PY_param_kwds": "kwds",
            "PY_param_self": "self",
            "PY_prefix": "PY_",
            "PY_release_memory_function": "PY_SHROUD_release_memory",
            "PY_result": "SHTPy_rv",
            "PY_this_call": "",
            "PY_type_dtor": "idtor",
            "PY_type_obj": "obj",
            "PY_used_param_args": false,
            "PY_used_param_kwds": false,
            "PY_used_param_self": false,
            "PY_utility_filename": "pyTutorialutil.cpp",
            "PyObject": "PyObject",
            "YAML_type_filename": "tutorial_types.yaml",
            "c_temp": "SHT_",
            "capsule_order": "0",
            "cast1": ">\t(",
            "cast2": ")",
            "cast_const": "const_cast<",
            "cast_reinterpret": "reinterpret_cast<",
            "cast_static": "static_cast<",
            "class_scope": "",
            "cxx_class": "",
            "file_scope": "Tutorial",
            "function_suffix": "",
            "library": "Tutorial",
            "library_lower": "tutorial",
            "library_upper": "TUTORIAL",
            "namespace_scope": "",
            "npy_dims": "NULL",
            "npy_intp": "",
            "npy_ndims": "0",
            "stdlib": "std::",
            "template_suffix": "",
            "void_proto": ""
        },
        "functions": [
            {
                "ast": {
                    "declarator": {
                        "name": "NoReturnNoArguments",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void NoReturnNoArguments()",
                "declgen": "void NoReturnNoArguments()",
                "fmtdict": {
                    "C_call_code": "tutorial::NoReturnNoArguments(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_no_return_no_arguments",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_no_return_no_arguments",
                    "F_C_name": "no_return_no_arguments",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call c_no_return_no_arguments()",
                    "F_name_function": "no_return_no_arguments",
                    "F_name_generic": "no_return_no_arguments",
                    "F_name_impl": "no_return_no_arguments",
                    "F_subprogram": "subroutine",
                    "LUA_name": "NoReturnNoArguments",
                    "LUA_name_impl": "l_no_return_no_arguments",
                    "PY_name_impl": "PY_NoReturnNoArguments",
                    "c_const": "",
                    "function_name": "NoReturnNoArguments",
                    "underscore_name": "no_return_no_arguments"
                },
                "linenumber": 45,
                "options": {
                    "__line__": 47,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg1",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg2",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg2",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "PassByValue",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double PassByValue(double arg1, int arg2)",
                "declgen": "double PassByValue(double arg1 +intent(in)+value, int arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "double SHC_rv =\t tutorial::PassByValue(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TUT_pass_by_value",
                    "C_prototype": "double arg1,\t int arg2",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "double",
                    "F_C_call": "c_pass_by_value",
                    "F_C_name": "pass_by_value",
                    "F_arg_c_call": "arg1,\t arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "SHT_rv = c_pass_by_value(arg1,\t arg2)",
                    "F_name_function": "pass_by_value",
                    "F_name_generic": "pass_by_value",
                    "F_name_impl": "pass_by_value",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "PassByValue",
                    "LUA_name_impl": "l_pass_by_value",
                    "PY_name_impl": "PY_PassByValue",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "PassByValue",
                    "underscore_name": "pass_by_value"
                },
                "linenumber": 50,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 1)",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * arg1",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "const std::string & arg1",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": null,
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1"
                        }
                    },
                    "arg2": {
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * arg2",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "const std::string & arg2",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": null,
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "allocatable"
                    },
                    "const": true,
                    "declarator": {
                        "name": "ConcatenateStrings",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "return_pointer_as": "allocatable",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string ConcatenateStrings( const std::string& arg1, const std::string& arg2 )",
                "declgen": "const std::string ConcatenateStrings(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)",
                "doxygen": {
                    "__line__": 56,
                    "description": "Note that since a reference is returned, no intermediate string\nis allocated.  It is assumed +owner(library).\n"
                },
                "fmtdict": {
                    "F_C_call": "c_concatenate_strings_bufferify",
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t DSHF_rv",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "call c_concatenate_strings_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t DSHF_rv)",
                    "F_name_function": "concatenate_strings",
                    "F_name_generic": "concatenate_strings",
                    "F_name_impl": "concatenate_strings",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "ConcatenateStrings",
                    "LUA_name_impl": "l_concatenate_strings",
                    "PY_name_impl": "PY_ConcatenateStrings",
                    "function_name": "ConcatenateStrings",
                    "underscore_name": "concatenate_strings"
                },
                "linenumber": 53,
                "options": {
                    "wrap_c": false
                }
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_context": "DSHF_rv",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(SHCXX_rv))",
                            "cxx_member": "->",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "2",
                            "stmt0": "c_string_scalar_result_buf_allocatable",
                            "stmt1": "c_string_scalar_result_buf_allocatable"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "c_var_context": "DSHF_rv",
                            "f_var": "SHT_rv"
                        }
                    },
                    "arg1": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg1",
                            "c_var_trim": "Larg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_arg1))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg1",
                            "idtor": "0",
                            "stmt0": "c_string_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg2",
                            "c_var_trim": "Larg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_arg2))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_arg2",
                            "idtor": "0",
                            "stmt0": "c_string_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "declarator": {
                        "name": "ConcatenateStrings",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Larg1",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg1",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Larg2",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg2",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "_is_result": true,
                                "context": "DSHF_rv",
                                "deref": "allocatable",
                                "intent": "out"
                            },
                            "const": true,
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string ConcatenateStrings( const std::string& arg1, const std::string& arg2 )",
                "declgen": "void ConcatenateStrings(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))",
                "doxygen": {
                    "__line__": 56,
                    "description": "Note that since a reference is returned, no intermediate string\nis allocated.  It is assumed +owner(library).\n"
                },
                "fmtdict": {
                    "C_call_code": "*SHCXX_rv =\t tutorial::ConcatenateStrings(\tSHCXX_arg1,\t SHCXX_arg2);",
                    "C_call_list": "SHCXX_arg1,\t SHCXX_arg2",
                    "C_name": "TUT_concatenate_strings_bufferify",
                    "C_post_call": "ShroudStrToArray(DSHF_rv, SHCXX_rv, 2);",
                    "C_pre_call": "const std::string SHCXX_arg1(arg1, Larg1);\nconst std::string SHCXX_arg2(arg2, Larg2);\nstd::string * SHCXX_rv = new std::string;",
                    "C_prototype": "const char * arg1,\t int Larg1,\t const char * arg2,\t int Larg2,\t TUT_SHROUD_array *DSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_concatenate_strings_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "ConcatenateStrings",
                    "function_suffix": "_bufferify",
                    "underscore_name": "concatenate_strings"
                },
                "linenumber": 53,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments()",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_call_code": "double SHC_rv =\t tutorial::UseDefaultArguments(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_use_default_arguments",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "double",
                    "F_C_call": "c_use_default_arguments",
                    "F_C_name": "c_use_default_arguments",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_use_default_arguments()",
                    "F_name_function": "use_default_arguments",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "",
                    "underscore_name": "use_default_arguments"
                },
                "linenumber": 61,
                "options": {
                    "__line__": 66,
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "init": 3.1415,
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +intent(in)+value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_call_code": "double SHC_rv =\t tutorial::UseDefaultArguments(\targ1);",
                    "C_call_list": "arg1",
                    "C_name": "TUT_use_default_arguments_arg1",
                    "C_prototype": "double arg1",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "double",
                    "F_C_call": "c_use_default_arguments_arg1",
                    "F_C_name": "c_use_default_arguments_arg1",
                    "F_arg_c_call": "arg1",
                    "F_arguments": "arg1",
                    "F_call_code": "SHT_rv = c_use_default_arguments_arg1(arg1)",
                    "F_name_function": "use_default_arguments_arg1",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1",
                    "underscore_name": "use_default_arguments"
                },
                "linenumber": 61,
                "options": {
                    "__line__": 66,
                    "literalinclude": true,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_default_funcs": [
                    40,
                    41
                ],
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg1)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg1",
                            "f_var": "arg1"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Larg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "lua_var": "SH_Lua_arg1"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg1",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg1",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg1",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg1",
                            "data_var": "SHData_arg1",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg1",
                            "size_var": "SHSize_arg1"
                        }
                    },
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "stmt0": "c_bool_in_"
                        },
                        "fmtf": {
                            "c_var": "SH_arg2",
                            "f_var": "arg2"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_toboolean(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "PyTypeObject": "PyBool_Type",
                            "c_const": "",
                            "c_decl": "bool arg2",
                            "c_deref": "",
                            "c_type": "bool",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "bool arg2",
                            "cxx_member": ".",
                            "cxx_type": "bool",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_BOOL",
                            "py_type": "PyObject",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_DOUBLE",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    0,
                    2
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultArguments",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg1",
                                "pointer": []
                            },
                            "init": 3.1415,
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "init": "true",
                            "specifier": [
                                "bool"
                            ],
                            "typemap_name": "bool"
                        }
                    ],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "double UseDefaultArguments(double arg1 = 3.1415, bool arg2 = true)",
                "declgen": "double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)",
                "default_arg_suffix": [
                    "",
                    "_arg1",
                    "_arg1_arg2"
                ],
                "fmtdict": {
                    "C_call_code": "double SHC_rv =\t tutorial::UseDefaultArguments(\targ1,\t arg2);",
                    "C_call_list": "arg1,\t arg2",
                    "C_name": "TUT_use_default_arguments_arg1_arg2",
                    "C_prototype": "double arg1,\t bool arg2",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "double",
                    "F_C_call": "c_use_default_arguments_arg1_arg2",
                    "F_C_name": "c_use_default_arguments_arg1_arg2",
                    "F_arg_c_call": "arg1,\t SH_arg2",
                    "F_arguments": "arg1,\t arg2",
                    "F_call_code": "SHT_rv = c_use_default_arguments_arg1_arg2(arg1,\t SH_arg2)",
                    "F_name_function": "use_default_arguments_arg1_arg2",
                    "F_name_generic": "use_default_arguments",
                    "F_name_impl": "use_default_arguments_arg1_arg2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "UseDefaultArguments",
                    "LUA_name_impl": "l_use_default_arguments",
                    "PY_name_impl": "PY_UseDefaultArguments_arg1_arg2",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "UseDefaultArguments",
                    "function_suffix": "_arg1_arg2",
                    "underscore_name": "use_default_arguments"
                },
                "linenumber": 61,
                "options": {
                    "__line__": 66,
                    "literalinclude": true
                }
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "stmt0": "c_string_in_",
                            "stmt1": "c_string_in"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 1)",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * name",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_decl": "const std::string & name",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(const std::string& name)",
                "declgen": "void OverloadedFunction(const std::string & name +intent(in))",
                "fmtdict": {
                    "C_call_code": "tutorial::OverloadedFunction(\tSHCXX_name);",
                    "C_call_list": "SHCXX_name",
                    "C_name": "TUT_overloaded_function_from_name",
                    "C_pre_call": "const std::string SHCXX_name(name);",
                    "C_prototype": "const char * name",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_overloaded_function_from_name_bufferify",
                    "F_C_name": "c_overloaded_function_from_name",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)",
                    "F_arguments": "name",
                    "F_call_code": "call c_overloaded_function_from_name_bufferify(name,\t len_trim(name, kind=C_INT))",
                    "F_name_function": "overloaded_function_from_name",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_name",
                    "F_subprogram": "subroutine",
                    "LUA_name": "OverloadedFunction",
                    "LUA_name_impl": "l_overloaded_function",
                    "PY_name_impl": "PY_OverloadedFunction_from_name",
                    "__line__": 71,
                    "c_const": "",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_name",
                    "underscore_name": "overloaded_function"
                },
                "linenumber": 70,
                "options": {}
            },
            {
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "stmt0": "c_string_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_var": "name"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Lname",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(const std::string& name)",
                "declgen": "void OverloadedFunction(const std::string & name +intent(in)+len_trim(Lname))",
                "fmtdict": {
                    "C_call_code": "tutorial::OverloadedFunction(\tSHCXX_name);",
                    "C_call_list": "SHCXX_name",
                    "C_name": "TUT_overloaded_function_from_name_bufferify",
                    "C_pre_call": "const std::string SHCXX_name(name, Lname);",
                    "C_prototype": "const char * name,\t int Lname",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_overloaded_function_from_name_bufferify",
                    "__line__": 71,
                    "c_const": "",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_name_bufferify",
                    "underscore_name": "overloaded_function"
                },
                "linenumber": 70,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "indx": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "indx",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&indx)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "indx",
                            "f_var": "indx"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Lindx",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "lua_var": "SH_Lua_indx"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int indx",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "indx",
                            "cxx_addr": "&",
                            "cxx_decl": "int indx",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "indx",
                            "data_var": "SHData_indx",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_indx",
                            "size_var": "SHSize_indx"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "OverloadedFunction",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "indx",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void OverloadedFunction(int indx)",
                "declgen": "void OverloadedFunction(int indx +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::OverloadedFunction(\tindx);",
                    "C_call_list": "indx",
                    "C_name": "TUT_overloaded_function_from_index",
                    "C_prototype": "int indx",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_overloaded_function_from_index",
                    "F_C_name": "c_overloaded_function_from_index",
                    "F_arg_c_call": "indx",
                    "F_arguments": "indx",
                    "F_call_code": "call c_overloaded_function_from_index(indx)",
                    "F_name_function": "overloaded_function_from_index",
                    "F_name_generic": "overloaded_function",
                    "F_name_impl": "overloaded_function_from_index",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_OverloadedFunction_from_index",
                    "__line__": 74,
                    "c_const": "",
                    "function_name": "OverloadedFunction",
                    "function_suffix": "_from_index",
                    "underscore_name": "overloaded_function"
                },
                "linenumber": 73,
                "options": {}
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "ArgType"
                            ],
                            "typemap_name": "ArgType"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "cxx_template": {
                    "ArgType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(ArgType arg +intent(in)+value)",
                "fmtdict": {
                    "function_name": "TemplateArgument",
                    "underscore_name": "template_argument"
                },
                "have_template_args": true,
                "linenumber": 77,
                "options": {
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ]
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(int arg +intent(in)+value)",
                "fmtdict": {
                    "CXX_template": "<int>",
                    "C_call_code": "tutorial::TemplateArgument<int>(\targ);",
                    "C_call_list": "arg",
                    "C_name": "TUT_template_argument_int",
                    "C_prototype": "int arg",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_template_argument_int",
                    "F_C_name": "c_template_argument_int",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "call c_template_argument_int(arg)",
                    "F_name_function": "template_argument_int",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_int",
                    "F_subprogram": "subroutine",
                    "LUA_name": "TemplateArgument",
                    "LUA_name_impl": "l_template_argument",
                    "PY_name_impl": "PY_TemplateArgument_int",
                    "c_const": "",
                    "function_name": "TemplateArgument",
                    "template_suffix": "_int",
                    "underscore_name": "template_argument"
                },
                "have_template_args": true,
                "linenumber": 77,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": true,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ]
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateArgument",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "template<typename ArgType>\nvoid TemplateArgument(ArgType arg)\n",
                "declgen": "void TemplateArgument(double arg +intent(in)+value)",
                "fmtdict": {
                    "CXX_template": "<double>",
                    "C_call_code": "tutorial::TemplateArgument<double>(\targ);",
                    "C_call_list": "arg",
                    "C_name": "TUT_template_argument_double",
                    "C_prototype": "double arg",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_template_argument_double",
                    "F_C_name": "c_template_argument_double",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "call c_template_argument_double(arg)",
                    "F_name_function": "template_argument_double",
                    "F_name_generic": "template_argument",
                    "F_name_impl": "template_argument_double",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_TemplateArgument_double",
                    "c_const": "",
                    "function_name": "TemplateArgument",
                    "template_suffix": "_double",
                    "underscore_name": "template_argument"
                },
                "gen_headers_typedef": [
                    "double",
                    "int"
                ],
                "have_template_args": true,
                "linenumber": 77,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": true,
                    "wrap_python": true
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "ArgType"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "RetType"
                    ],
                    "typemap_name": "RetType"
                },
                "cxx_template": {
                    "RetType": [
                        "int",
                        "double"
                    ]
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "RetType TemplateReturn()",
                "fmtdict": {
                    "function_name": "TemplateReturn",
                    "underscore_name": "template_return"
                },
                "have_template_args": true,
                "linenumber": 84,
                "options": {
                    "__line__": 88,
                    "wrap_c": false,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "int TemplateReturn()",
                "fmtdict": {
                    "CXX_template": "<int>",
                    "C_call_code": "int SHC_rv =\t tutorial::TemplateReturn<int>(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_template_return_int",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_template_return_int",
                    "F_C_name": "c_template_return_int",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_template_return_int()",
                    "F_name_function": "template_return_int",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_int",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_int",
                    "underscore_name": "template_return"
                },
                "have_template_args": true,
                "linenumber": 84,
                "options": {
                    "F_create_generic": false,
                    "__line__": 88,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ]
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "double",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "double",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "double",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "cxx_template",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "TemplateReturn",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "double"
                    ],
                    "typemap_name": "double"
                },
                "decl": "template<typename RetType> RetType TemplateReturn()",
                "declgen": "double TemplateReturn()",
                "fmtdict": {
                    "CXX_template": "<double>",
                    "C_call_code": "double SHC_rv =\t tutorial::TemplateReturn<double>(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_template_return_double",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "double",
                    "F_C_call": "c_template_return_double",
                    "F_C_name": "c_template_return_double",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_template_return_double()",
                    "F_name_function": "template_return_double",
                    "F_name_generic": "template_return",
                    "F_name_impl": "template_return_double",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "double SHC_rv",
                    "function_name": "TemplateReturn",
                    "template_suffix": "_double",
                    "underscore_name": "template_return"
                },
                "gen_headers_typedef": [
                    "double",
                    "int"
                ],
                "have_template_args": true,
                "linenumber": 84,
                "options": {
                    "F_create_generic": false,
                    "__line__": 88,
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                },
                "template_arguments": [
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "int"
                                ],
                                "typemap_name": "int"
                            }
                        ],
                        "instantiation": "<int>"
                    },
                    {
                        "asts": [
                            {
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "instantiation": "<double>"
                    }
                ],
                "template_parameters": [
                    "RetType"
                ]
            },
            {
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded()",
                "declgen": "void FortranGenericOverloaded()",
                "fmtdict": {
                    "C_call_code": "tutorial::FortranGenericOverloaded(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_fortran_generic_overloaded_0",
                    "C_prototype": "",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_fortran_generic_overloaded_0",
                    "F_C_name": "c_fortran_generic_overloaded_0",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "call c_fortran_generic_overloaded_0()",
                    "F_name_function": "fortran_generic_overloaded_0",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_0",
                    "F_subprogram": "subroutine",
                    "LUA_name": "FortranGenericOverloaded",
                    "LUA_name_impl": "l_fortran_generic_overloaded",
                    "PY_name_impl": "PY_FortranGenericOverloaded_0",
                    "c_const": "",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_0",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "linenumber": 110,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 2)",
                            "c_var_len": "Larg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "lua_var": "SH_Lua_arg2"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double arg2",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_decl": "double arg2",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "data_var": "SHData_arg2",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_arg2",
                            "size_var": "SHSize_arg2"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "stmt0": "c_string_in_",
                            "stmt1": "c_string_in"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tostring(L, 1)",
                            "c_var_len": "Lname",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "name",
                            "lua_var": "SH_Lua_name"
                        },
                        "fmtpy": {
                            "c_const": "const ",
                            "c_decl": "const char * name",
                            "c_deref": "",
                            "c_type": "char",
                            "c_var": "name",
                            "cxx_addr": "&",
                            "cxx_decl": "const std::string & name",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SH_name",
                            "data_var": "SHData_name",
                            "numpy_type": null,
                            "py_var": "SHPy_name",
                            "size_var": "SHSize_name"
                        }
                    }
                },
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::FortranGenericOverloaded(\tSHCXX_name,\t arg2);",
                    "C_call_list": "SHCXX_name,\t arg2",
                    "C_name": "TUT_fortran_generic_overloaded_1",
                    "C_pre_call": "const std::string SHCXX_name(name);",
                    "C_prototype": "const char * name,\t double arg2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_fortran_generic_overloaded_1",
                    "PY_name_impl": "PY_FortranGenericOverloaded_1",
                    "c_const": "",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg2)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg2)"
                    }
                ],
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_fortran": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "float"
                            ],
                            "typemap_name": "float"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in), float arg2 +intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_fortran_generic_overloaded_1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t real(arg2, C_DOUBLE)",
                    "F_arguments": "name,\t arg2",
                    "F_call_code": "call c_fortran_generic_overloaded_1_bufferify(name,\t len_trim(name, kind=C_INT),\t real(arg2, C_DOUBLE))",
                    "F_name_function": "fortran_generic_overloaded_1_float",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_float",
                    "F_subprogram": "subroutine",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_float",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_generated": "fortran_generic",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)",
                "fmtdict": {
                    "F_C_call": "c_fortran_generic_overloaded_1_bufferify",
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t arg2",
                    "F_arguments": "name,\t arg2",
                    "F_call_code": "call c_fortran_generic_overloaded_1_bufferify(name,\t len_trim(name, kind=C_INT),\t arg2)",
                    "F_name_function": "fortran_generic_overloaded_1_double",
                    "F_name_generic": "fortran_generic_overloaded",
                    "F_name_impl": "fortran_generic_overloaded_1_double",
                    "F_subprogram": "subroutine",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_double",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_c": false,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg2",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg2)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "arg2",
                            "idtor": "0",
                            "stmt0": "c_native_in_buf"
                        },
                        "fmtf": {
                            "c_var": "arg2",
                            "f_var": "arg2"
                        }
                    },
                    "name": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "name",
                            "c_var_trim": "Lname",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<std::string *>\t(&SHCXX_name))",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_name",
                            "idtor": "0",
                            "stmt0": "c_string_in_buf",
                            "stmt1": "c_string_in_buf"
                        },
                        "fmtf": {
                            "c_var": "name",
                            "f_var": "name"
                        }
                    }
                },
                "_generated": "arg_to_buffer",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "FortranGenericOverloaded",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "len_trim": "Lname",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "name",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "std::string"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg2",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "stmts_suffix": "buf",
                            "typemap_name": "double"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void FortranGenericOverloaded(const std::string &name, double arg2)",
                "declgen": "void FortranGenericOverloaded(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::FortranGenericOverloaded(\tSHCXX_name,\t arg2);",
                    "C_call_list": "SHCXX_name,\t arg2",
                    "C_name": "TUT_fortran_generic_overloaded_1_bufferify",
                    "C_pre_call": "const std::string SHCXX_name(name, Lname);",
                    "C_prototype": "const char * name,\t int Lname,\t double arg2",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_fortran_generic_overloaded_1_bufferify",
                    "c_const": "",
                    "function_name": "FortranGenericOverloaded",
                    "function_suffix": "_1_bufferify",
                    "underscore_name": "fortran_generic_overloaded"
                },
                "fortran_generic": [
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "float"
                                ],
                                "typemap_name": "float"
                            }
                        ],
                        "function_suffix": "_float",
                        "generic": "(float arg2)"
                    },
                    {
                        "decls": [
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": false
                                },
                                "const": true,
                                "declarator": {
                                    "name": "name",
                                    "pointer": [
                                        {
                                            "ptr": "&"
                                        }
                                    ]
                                },
                                "specifier": [
                                    "std::string"
                                ],
                                "typemap_name": "std::string"
                            },
                            {
                                "attrs": {
                                    "intent": "in",
                                    "value": true
                                },
                                "declarator": {
                                    "name": "arg2",
                                    "pointer": []
                                },
                                "specifier": [
                                    "double"
                                ],
                                "typemap_name": "double"
                            }
                        ],
                        "function_suffix": "_double",
                        "generic": "(double arg2)"
                    }
                ],
                "linenumber": 111,
                "options": {
                    "F_string_len_trim": true,
                    "__line__": 112,
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_var": "num"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +intent(in)+value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::UseDefaultOverload(\tnum);",
                    "C_call_list": "num",
                    "C_name": "TUT_use_default_overload_num",
                    "C_prototype": "int num",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_num",
                    "F_C_name": "c_use_default_overload_num",
                    "F_arg_c_call": "num",
                    "F_arguments": "num",
                    "F_call_code": "SHT_rv = c_use_default_overload_num(num)",
                    "F_name_function": "use_default_overload_num",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 124,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_var": "num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_var": "offset"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::UseDefaultOverload(\tnum,\t offset);",
                    "C_call_list": "num,\t offset",
                    "C_name": "TUT_use_default_overload_num_offset",
                    "C_prototype": "int num,\t int offset",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_num_offset",
                    "F_C_name": "c_use_default_overload_num_offset",
                    "F_arg_c_call": "num,\t offset",
                    "F_arguments": "num,\t offset",
                    "F_call_code": "SHT_rv = c_use_default_overload_num_offset(num,\t offset)",
                    "F_name_function": "use_default_overload_num_offset",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 124,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_default_funcs": [
                    46,
                    47
                ],
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_var": "num"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int num",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_decl": "int num",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_var": "offset"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 2)",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int offset",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_decl": "int offset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&stride)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "stride",
                            "f_var": "stride"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 3)",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int stride",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_decl": "int stride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    1,
                    3
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "stride",
                                "pointer": []
                            },
                            "init": 1,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)",
                "default_arg_suffix": [
                    "_num",
                    "_num_offset",
                    "_num_offset_stride"
                ],
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::UseDefaultOverload(\tnum,\t offset,\t stride);",
                    "C_call_list": "num,\t offset,\t stride",
                    "C_name": "TUT_use_default_overload_num_offset_stride",
                    "C_prototype": "int num,\t int offset,\t int stride",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_num_offset_stride",
                    "F_C_name": "c_use_default_overload_num_offset_stride",
                    "F_arg_c_call": "num,\t offset,\t stride",
                    "F_arguments": "num,\t offset,\t stride",
                    "F_call_code": "SHT_rv = c_use_default_overload_num_offset_stride(num,\t offset,\t stride)",
                    "F_name_function": "use_default_overload_num_offset_stride",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_num_offset_stride",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "UseDefaultOverload",
                    "LUA_name_impl": "l_use_default_overload",
                    "PY_name_impl": "PY_UseDefaultOverload_num_offset_stride",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_num_offset_stride",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 124,
                "options": {}
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_var": "num"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&type)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_var": "type"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::UseDefaultOverload(\ttype,\t num);",
                    "C_call_list": "type,\t num",
                    "C_name": "TUT_use_default_overload_3",
                    "C_prototype": "double type,\t int num",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_3",
                    "F_C_name": "c_use_default_overload_3",
                    "F_arg_c_call": "type,\t num",
                    "F_arguments": "type,\t num",
                    "F_call_code": "SHT_rv = c_use_default_overload_3(type,\t num)",
                    "F_name_function": "use_default_overload_3",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_3",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 130,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_var": "num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_var": "offset"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&type)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_var": "type"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "_generated": "has_default_arg",
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::UseDefaultOverload(\ttype,\t num,\t offset);",
                    "C_call_list": "type,\t num,\t offset",
                    "C_name": "TUT_use_default_overload_4",
                    "C_prototype": "double type,\t int num,\t int offset",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_4",
                    "F_C_name": "c_use_default_overload_4",
                    "F_arg_c_call": "type,\t num,\t offset",
                    "F_arguments": "type,\t num,\t offset",
                    "F_call_code": "SHT_rv = c_use_default_overload_4(type,\t num,\t offset)",
                    "F_name_function": "use_default_overload_4",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_4",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_4",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 130,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_default_funcs": [
                    48,
                    49
                ],
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&num)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "num",
                            "f_var": "num"
                        },
                        "fmtl": {
                            "LUA_index": 2,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 2)",
                            "c_var_len": "Lnum",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "lua_var": "SH_Lua_num"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int num",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "num",
                            "cxx_addr": "&",
                            "cxx_decl": "int num",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "num",
                            "data_var": "SHData_num",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_num",
                            "size_var": "SHSize_num"
                        }
                    },
                    "offset": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&offset)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "offset",
                            "f_var": "offset"
                        },
                        "fmtl": {
                            "LUA_index": 3,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 3)",
                            "c_var_len": "Loffset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "lua_var": "SH_Lua_offset"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int offset",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "offset",
                            "cxx_addr": "&",
                            "cxx_decl": "int offset",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "offset",
                            "data_var": "SHData_offset",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_offset",
                            "size_var": "SHSize_offset"
                        }
                    },
                    "stride": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&stride)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "stride",
                            "f_var": "stride"
                        },
                        "fmtl": {
                            "LUA_index": 4,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 4)",
                            "c_var_len": "Lstride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "lua_var": "SH_Lua_stride"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int stride",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "stride",
                            "cxx_addr": "&",
                            "cxx_decl": "int stride",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "stride",
                            "data_var": "SHData_stride",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_stride",
                            "size_var": "SHSize_stride"
                        }
                    },
                    "type": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&type)",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "type",
                            "f_var": "type"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tonumber(L, 1)",
                            "c_var_len": "Ltype",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "lua_var": "SH_Lua_type"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "double type",
                            "c_deref": "",
                            "c_type": "double",
                            "c_var": "type",
                            "cxx_addr": "&",
                            "cxx_decl": "double type",
                            "cxx_member": ".",
                            "cxx_type": "double",
                            "cxx_var": "type",
                            "data_var": "SHData_type",
                            "numpy_type": "NPY_DOUBLE",
                            "py_var": "SHPy_type",
                            "size_var": "SHSize_type"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "_has_default_arg": true,
                "_nargs": [
                    2,
                    4
                ],
                "_overloaded": true,
                "ast": {
                    "declarator": {
                        "name": "UseDefaultOverload",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "type",
                                "pointer": []
                            },
                            "specifier": [
                                "double"
                            ],
                            "typemap_name": "double"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "num",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "offset",
                                "pointer": []
                            },
                            "init": 0,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "stride",
                                "pointer": []
                            },
                            "init": 1,
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int UseDefaultOverload(double type, int num, int offset = 0, int stride = 1)",
                "declgen": "int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::UseDefaultOverload(\ttype,\t num,\t offset,\t stride);",
                    "C_call_list": "type,\t num,\t offset,\t stride",
                    "C_name": "TUT_use_default_overload_5",
                    "C_prototype": "double type,\t int num,\t int offset,\t int stride",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_use_default_overload_5",
                    "F_C_name": "c_use_default_overload_5",
                    "F_arg_c_call": "type,\t num,\t offset,\t stride",
                    "F_arguments": "type,\t num,\t offset,\t stride",
                    "F_call_code": "SHT_rv = c_use_default_overload_5(type,\t num,\t offset,\t stride)",
                    "F_name_function": "use_default_overload_5",
                    "F_name_generic": "use_default_overload",
                    "F_name_impl": "use_default_overload_5",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_UseDefaultOverload_5",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "UseDefaultOverload",
                    "function_suffix": "_5",
                    "underscore_name": "use_default_overload"
                },
                "linenumber": 130,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg)",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::TypeID arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::TypeID",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::TypeID",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::TypeID",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::TypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "typefunc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "TypeID"
                            ],
                            "typemap_name": "tutorial::TypeID"
                        }
                    ],
                    "specifier": [
                        "TypeID"
                    ],
                    "typemap_name": "tutorial::TypeID"
                },
                "decl": "TypeID typefunc(TypeID arg)",
                "declgen": "TypeID typefunc(TypeID arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::TypeID SHC_rv =\t tutorial::typefunc(\targ);",
                    "C_call_list": "arg",
                    "C_name": "TUT_typefunc",
                    "C_prototype": "int arg",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_typefunc",
                    "F_C_name": "typefunc",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "SHT_rv = c_typefunc(arg)",
                    "F_name_function": "typefunc",
                    "F_name_generic": "typefunc",
                    "F_name_impl": "typefunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "typefunc",
                    "LUA_name_impl": "l_typefunc",
                    "PY_name_impl": "PY_typefunc",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::TypeID SHC_rv",
                    "function_name": "typefunc",
                    "underscore_name": "typefunc"
                },
                "linenumber": 139,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_arg)",
                            "cxx_decl": "tutorial::EnumTypeID SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::EnumTypeID SH_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::EnumTypeID",
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::EnumTypeID",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::EnumTypeID",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::EnumTypeID",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "enumfunc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "EnumTypeID"
                            ],
                            "typemap_name": "tutorial::EnumTypeID"
                        }
                    ],
                    "specifier": [
                        "EnumTypeID"
                    ],
                    "typemap_name": "tutorial::EnumTypeID"
                },
                "decl": "EnumTypeID enumfunc(EnumTypeID arg)",
                "declgen": "EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::EnumTypeID SHCXX_rv =\t tutorial::enumfunc(\tSHCXX_arg);",
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_enumfunc",
                    "C_post_call": "int SHC_rv =\t static_cast<int>(SHCXX_rv);",
                    "C_pre_call": "tutorial::EnumTypeID SHCXX_arg =\t static_cast<tutorial::EnumTypeID>(arg);",
                    "C_prototype": "int arg",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_enumfunc",
                    "F_C_name": "enumfunc",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "SHT_rv = c_enumfunc(arg)",
                    "F_name_function": "enumfunc",
                    "F_name_generic": "enumfunc",
                    "F_name_impl": "enumfunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "enumfunc",
                    "LUA_name_impl": "l_enumfunc",
                    "PY_name_impl": "PY_enumfunc",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::EnumTypeID SHCXX_rv",
                    "function_name": "enumfunc",
                    "underscore_name": "enumfunc"
                },
                "linenumber": 140,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_arg)",
                            "cxx_decl": "tutorial::Color SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Color SH_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Color",
                            "cxx_val": "static_cast<tutorial::Color>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::Color",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::Color",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::Color",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "colorfunc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "Color"
                            ],
                            "typemap_name": "tutorial::Color"
                        }
                    ],
                    "specifier": [
                        "Color"
                    ],
                    "typemap_name": "tutorial::Color"
                },
                "decl": "Color colorfunc(Color arg);",
                "declgen": "Color colorfunc(Color arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::Color SHCXX_rv =\t tutorial::colorfunc(\tSHCXX_arg);",
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_colorfunc",
                    "C_post_call": "int SHC_rv =\t static_cast<int>(SHCXX_rv);",
                    "C_pre_call": "tutorial::Color SHCXX_arg =\t static_cast<tutorial::Color>(arg);",
                    "C_prototype": "int arg",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_colorfunc",
                    "F_C_name": "colorfunc",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "SHT_rv = c_colorfunc(arg)",
                    "F_name_function": "colorfunc",
                    "F_name_generic": "colorfunc",
                    "F_name_impl": "colorfunc",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "colorfunc",
                    "LUA_name_impl": "l_colorfunc",
                    "PY_name_impl": "PY_colorfunc",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::Color SHCXX_rv",
                    "function_name": "colorfunc",
                    "underscore_name": "colorfunc"
                },
                "linenumber": 141,
                "options": {}
            },
            {
                "_fmtargs": {
                    "max": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "max",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(max)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "idtor": "0",
                            "stmt0": "c_native_out_"
                        },
                        "fmtf": {
                            "c_var": "max",
                            "f_var": "max"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int max",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "max",
                            "cxx_addr": "&",
                            "cxx_decl": "int max",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "max",
                            "data_var": "SHData_max",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_max",
                            "size_var": "SHSize_max"
                        }
                    },
                    "min": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "min",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(min)",
                            "cxx_member": "->",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "idtor": "0",
                            "stmt0": "c_native_out_"
                        },
                        "fmtf": {
                            "c_var": "min",
                            "f_var": "min"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int min",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "min",
                            "cxx_addr": "&",
                            "cxx_decl": "int min",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "min",
                            "data_var": "SHData_min",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_min",
                            "size_var": "SHSize_min"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "getMinMax",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "min",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "out",
                                "value": false
                            },
                            "declarator": {
                                "name": "max",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void getMinMax(int &min +intent(out), int &max +intent(out))",
                "declgen": "void getMinMax(int & min +intent(out), int & max +intent(out))",
                "doxygen": {
                    "__line__": 144,
                    "brief": "Pass in reference to scalar"
                },
                "fmtdict": {
                    "C_call_code": "tutorial::getMinMax(\t*min,\t *max);",
                    "C_call_list": "*min,\t *max",
                    "C_name": "TUT_get_min_max",
                    "C_prototype": "int * min,\t int * max",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_get_min_max",
                    "F_C_name": "get_min_max",
                    "F_arg_c_call": "min,\t max",
                    "F_arguments": "min,\t max",
                    "F_call_code": "call c_get_min_max(min,\t max)",
                    "F_name_function": "get_min_max",
                    "F_name_generic": "get_min_max",
                    "F_name_impl": "get_min_max",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_getMinMax",
                    "c_const": "",
                    "function_name": "getMinMax",
                    "underscore_name": "get_min_max"
                },
                "linenumber": 143,
                "options": {
                    "__line__": 146,
                    "literalinclude": true,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_arg)",
                            "cxx_decl": "tutorial::Class1::DIRECTION SHCXX_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Class1::DIRECTION",
                            "cxx_val": "static_cast<tutorial::Class1::DIRECTION>(arg)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Class1::DIRECTION",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Class1::DIRECTION SH_arg",
                            "cxx_member": ".",
                            "cxx_type": "tutorial::Class1::DIRECTION",
                            "cxx_val": "static_cast<tutorial::Class1::DIRECTION>(arg)",
                            "cxx_var": "SH_arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_rv_decl": "int SHC_rv",
                        "c_type": "int",
                        "c_val": "static_cast<int>(SHCXX_rv)",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::Class1::DIRECTION",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::Class1::DIRECTION",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::Class1::DIRECTION",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "directionFunc",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "Class1::DIRECTION"
                            ],
                            "typemap_name": "tutorial::Class1::DIRECTION"
                        }
                    ],
                    "specifier": [
                        "Class1::DIRECTION"
                    ],
                    "typemap_name": "tutorial::Class1::DIRECTION"
                },
                "decl": "Class1::DIRECTION directionFunc(Class1::DIRECTION arg);",
                "declgen": "Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::Class1::DIRECTION SHCXX_rv =\t tutorial::directionFunc(\tSHCXX_arg);",
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_direction_func",
                    "C_post_call": "int SHC_rv =\t static_cast<int>(SHCXX_rv);",
                    "C_pre_call": "tutorial::Class1::DIRECTION SHCXX_arg =\t static_cast<tutorial::Class1::DIRECTION>(arg);",
                    "C_prototype": "int arg",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_direction_func",
                    "F_C_name": "direction_func",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "SHT_rv = c_direction_func(arg)",
                    "F_name_function": "direction_func",
                    "F_name_generic": "direction_func",
                    "F_name_impl": "direction_func",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "directionFunc",
                    "LUA_name_impl": "l_direction_func",
                    "PY_name_impl": "PY_directionFunc",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::Class1::DIRECTION SHCXX_rv",
                    "function_name": "directionFunc",
                    "underscore_name": "direction_func"
                },
                "linenumber": 214,
                "options": {}
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_arg)",
                            "cxx_decl": "tutorial::Class1 * SHCXX_arg",
                            "cxx_member": "->",
                            "cxx_type": "tutorial::Class1",
                            "cxx_val": "static_cast<tutorial::Class1 *>(arg.addr)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "stmt0": "c_shadow_in_",
                            "stmt1": "c_shadow_in"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtpy": {
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "c_const": "",
                            "c_decl": "TUT_Class1 arg",
                            "c_deref": "",
                            "c_type": "TUT_Class1",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "tutorial::Class1 arg",
                            "cxx_member": "->",
                            "cxx_type": "tutorial::Class1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_type": "PY_Class1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "passClassByValue",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void passClassByValue(Class1 arg)",
                "declgen": "void passClassByValue(Class1 arg +intent(in)+value)",
                "doxygen": {
                    "__line__": 217,
                    "brief": "Pass arguments to a function."
                },
                "fmtdict": {
                    "C_call_code": "tutorial::passClassByValue(\t*SHCXX_arg);",
                    "C_call_list": "*SHCXX_arg",
                    "C_name": "TUT_pass_class_by_value",
                    "C_pre_call": "tutorial::Class1 * SHCXX_arg =\t static_cast<tutorial::Class1 *>(arg.addr);",
                    "C_prototype": "TUT_Class1 arg",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_pass_class_by_value",
                    "F_C_name": "c_pass_class_by_value",
                    "F_arg_c_call": "arg%cxxmem",
                    "F_arguments": "arg",
                    "F_call_code": "call c_pass_class_by_value(arg%cxxmem)",
                    "F_name_function": "pass_class_by_value",
                    "F_name_generic": "pass_class_by_value",
                    "F_name_impl": "pass_class_by_value",
                    "F_subprogram": "subroutine",
                    "PY_name_impl": "PY_passClassByValue",
                    "c_const": "",
                    "function_name": "passClassByValue",
                    "underscore_name": "pass_class_by_value"
                },
                "linenumber": 216,
                "options": {
                    "__line__": 219,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "const ",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<tutorial::Class1 *>\t(SHCXX_arg))",
                            "cxx_decl": "const tutorial::Class1 * SHCXX_arg",
                            "cxx_member": "->",
                            "cxx_type": "tutorial::Class1",
                            "cxx_val": "static_cast<const tutorial::Class1 *>(arg->addr)",
                            "cxx_var": "SHCXX_arg",
                            "idtor": "0",
                            "stmt0": "c_shadow_in_",
                            "stmt1": "c_shadow_in"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtpy": {
                            "PyObject": "PY_Class1",
                            "PyTypeObject": "PY_Class1_Type",
                            "c_const": "const ",
                            "c_decl": "TUT_Class1 arg",
                            "c_deref": "",
                            "c_type": "TUT_Class1",
                            "c_var": "arg",
                            "cxx_addr": "",
                            "cxx_decl": "tutorial::Class1 arg",
                            "cxx_member": "->",
                            "cxx_type": "tutorial::Class1",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": null,
                            "py_type": "PY_Class1",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "useclass",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": false
                            },
                            "const": true,
                            "declarator": {
                                "name": "arg",
                                "pointer": [
                                    {
                                        "ptr": "*"
                                    }
                                ]
                            },
                            "specifier": [
                                "Class1"
                            ],
                            "typemap_name": "tutorial::Class1"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int useclass(const Class1 *arg)",
                "declgen": "int useclass(const Class1 * arg +intent(in))",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::useclass(\tSHCXX_arg);",
                    "C_call_list": "SHCXX_arg",
                    "C_name": "TUT_useclass",
                    "C_pre_call": "const tutorial::Class1 * SHCXX_arg =\t static_cast<const tutorial::Class1 *>(arg->addr);",
                    "C_prototype": "const TUT_Class1 * arg",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_useclass",
                    "F_C_name": "c_useclass",
                    "F_arg_c_call": "arg%cxxmem",
                    "F_arguments": "arg",
                    "F_call_code": "SHT_rv = c_useclass(arg%cxxmem)",
                    "F_name_function": "useclass",
                    "F_name_generic": "useclass",
                    "F_name_impl": "useclass",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_useclass",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "useclass",
                    "underscore_name": "useclass"
                },
                "linenumber": 222,
                "options": {
                    "__line__": 223,
                    "wrap_lua": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "TUT_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_cast_to_void_ptr": "static_cast<void *>\t(const_cast<tutorial::Class1 *>\t(SHCXX_rv))",
                        "cxx_member": "->",
                        "cxx_type": "tutorial::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::Class1",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "const": true,
                    "declarator": {
                        "name": "getclass2",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "tutorial::Class1"
                },
                "decl": "const Class1 *getclass2()",
                "declgen": "const Class1 * getclass2()",
                "fmtdict": {
                    "C_call_code": "const tutorial::Class1 * SHCXX_rv =\t tutorial::getclass2(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_getclass2",
                    "C_post_call": "SHC_rv->addr = static_cast<void *>\t(const_cast<tutorial::Class1 *>\t(SHCXX_rv));\nSHC_rv->idtor = 0;",
                    "C_prototype": "TUT_Class1 * SHC_rv",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "TUT_Class1 *",
                    "F_C_call": "c_getclass2",
                    "F_C_name": "c_getclass2",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_call_code": "SHT_prv = c_getclass2(SHT_rv%cxxmem)",
                    "F_name_function": "getclass2",
                    "F_name_generic": "getclass2",
                    "F_name_impl": "getclass2",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "const ",
                    "cxx_rv_decl": "const tutorial::Class1 * SHCXX_rv",
                    "function_name": "getclass2",
                    "underscore_name": "getclass2"
                },
                "linenumber": 232,
                "options": {
                    "__line__": 233,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "TUT_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)",
                        "cxx_member": "->",
                        "cxx_type": "tutorial::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::Class1",
                        "f_var": "SHT_rv"
                    },
                    "fmtpy": {
                        "PyObject": "PY_Class1",
                        "PyTypeObject": "PY_Class1_Type",
                        "c_deref": "*",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "",
                        "cxx_member": "->",
                        "cxx_type": "tutorial::Class1",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "getclass3",
                        "pointer": [
                            {
                                "ptr": "*"
                            }
                        ]
                    },
                    "params": [],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "tutorial::Class1"
                },
                "decl": "Class1 *getclass3()",
                "declgen": "Class1 * getclass3()",
                "fmtdict": {
                    "C_call_code": "tutorial::Class1 * SHCXX_rv =\t tutorial::getclass3(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_getclass3",
                    "C_post_call": "SHC_rv->addr = static_cast<void *>(SHCXX_rv);\nSHC_rv->idtor = 0;",
                    "C_prototype": "TUT_Class1 * SHC_rv",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "TUT_Class1 *",
                    "F_C_call": "c_getclass3",
                    "F_C_name": "c_getclass3",
                    "F_arg_c_call": "SHT_rv%cxxmem",
                    "F_arguments": "",
                    "F_call_code": "SHT_prv = c_getclass3(SHT_rv%cxxmem)",
                    "F_name_function": "getclass3",
                    "F_name_generic": "getclass3",
                    "F_name_impl": "getclass3",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "PY_name_impl": "PY_getclass3",
                    "c_const": "",
                    "cxx_rv_decl": "tutorial::Class1 * SHCXX_rv",
                    "function_name": "getclass3",
                    "underscore_name": "getclass3"
                },
                "linenumber": 238,
                "options": {
                    "__line__": 239,
                    "wrap_lua": false
                }
            },
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "flag",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&flag)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "flag",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "flag",
                            "f_var": "flag"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "TUT_Class1",
                        "c_var": "SHC_rv",
                        "cxx_addr": "",
                        "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)",
                        "cxx_member": ".",
                        "cxx_type": "tutorial::Class1",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "1"
                    },
                    "fmtf": {
                        "cxx_type": "tutorial::Class1",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "getClassCopy",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "flag",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "Class1"
                    ],
                    "typemap_name": "tutorial::Class1"
                },
                "decl": "Class1 getClassCopy(int flag)",
                "declgen": "Class1 getClassCopy(int flag +intent(in)+value)",
                "doxygen": {
                    "__line__": 244,
                    "brief": "Return Class1 instance by value, uses copy constructor"
                },
                "fmtdict": {
                    "C_call_code": "*SHCXX_rv =\t tutorial::getClassCopy(\tflag);",
                    "C_call_list": "flag",
                    "C_name": "TUT_get_class_copy",
                    "C_post_call": "SHC_rv->addr = static_cast<void *>(SHCXX_rv);\nSHC_rv->idtor = 1;",
                    "C_pre_call": "tutorial::Class1 * SHCXX_rv = new tutorial::Class1;",
                    "C_prototype": "int flag,\t TUT_Class1 * SHC_rv",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "TUT_Class1 *",
                    "F_C_call": "c_get_class_copy",
                    "F_C_name": "c_get_class_copy",
                    "F_arg_c_call": "flag,\t SHT_rv%cxxmem",
                    "F_arguments": "flag",
                    "F_call_code": "SHT_prv = c_get_class_copy(flag,\t SHT_rv%cxxmem)",
                    "F_name_function": "get_class_copy",
                    "F_name_generic": "get_class_copy",
                    "F_name_impl": "get_class_copy",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "*SHCXX_rv",
                    "function_name": "getClassCopy",
                    "underscore_name": "get_class_copy"
                },
                "linenumber": 243,
                "options": {
                    "__line__": 246,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "in",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&in)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "in",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "in",
                            "f_var": "in"
                        }
                    },
                    "incr": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "incr",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&incr)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "incr",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "incr",
                            "f_var": "incr"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "callback1",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "in",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        },
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "func": {
                                    "name": "incr",
                                    "pointer": [
                                        {
                                            "ptr": "*"
                                        }
                                    ]
                                },
                                "pointer": []
                            },
                            "params": [
                                {
                                    "attrs": {
                                        "value": true
                                    },
                                    "specifier": [
                                        "int"
                                    ],
                                    "typemap_name": "int"
                                }
                            ],
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int callback1(int in, int (*incr)(int));",
                "declgen": "int callback1(int in +intent(in)+value, int ( * incr)(int +value) +intent(in)+value)",
                "doxygen": {
                    "__line__": 254,
                    "brief": "Test function pointer"
                },
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::callback1(\tin,\t incr);",
                    "C_call_list": "in,\t incr",
                    "C_name": "TUT_callback1",
                    "C_prototype": "int in,\t int ( * incr)(\tint)",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_callback1",
                    "F_C_name": "callback1",
                    "F_arg_c_call": "in,\t incr",
                    "F_arguments": "in,\t incr",
                    "F_call_code": "SHT_rv = c_callback1(in,\t incr)",
                    "F_name_function": "callback1",
                    "F_name_generic": "callback1",
                    "F_name_impl": "callback1",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "callback1",
                    "underscore_name": "callback1"
                },
                "linenumber": 253,
                "options": {
                    "__line__": 256,
                    "literalinclude": true,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            },
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_addr": "&",
                            "c_const": "",
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&arg)",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "idtor": "0",
                            "stmt0": "c_native_in_"
                        },
                        "fmtf": {
                            "c_var": "arg",
                            "f_var": "arg"
                        },
                        "fmtl": {
                            "LUA_index": 1,
                            "c_deref": "",
                            "c_member": ".",
                            "c_var": "lua_tointeger(L, 1)",
                            "c_var_len": "Larg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "lua_var": "SH_Lua_arg"
                        },
                        "fmtpy": {
                            "c_const": "",
                            "c_decl": "int arg",
                            "c_deref": "",
                            "c_type": "int",
                            "c_var": "arg",
                            "cxx_addr": "&",
                            "cxx_decl": "int arg",
                            "cxx_member": ".",
                            "cxx_type": "int",
                            "cxx_var": "arg",
                            "data_var": "SHData_arg",
                            "numpy_type": "NPY_INT",
                            "py_var": "SHPy_arg",
                            "size_var": "SHSize_arg"
                        }
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "set_global_flag",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "intent": "in",
                                "value": true
                            },
                            "declarator": {
                                "name": "arg",
                                "pointer": []
                            },
                            "specifier": [
                                "int"
                            ],
                            "typemap_name": "int"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "void set_global_flag(int arg)",
                "declgen": "void set_global_flag(int arg +intent(in)+value)",
                "fmtdict": {
                    "C_call_code": "tutorial::set_global_flag(\targ);",
                    "C_call_list": "arg",
                    "C_name": "TUT_set_global_flag",
                    "C_prototype": "int arg",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_call": "c_set_global_flag",
                    "F_C_name": "set_global_flag",
                    "F_arg_c_call": "arg",
                    "F_arguments": "arg",
                    "F_call_code": "call c_set_global_flag(arg)",
                    "F_name_function": "set_global_flag",
                    "F_name_generic": "set_global_flag",
                    "F_name_impl": "set_global_flag",
                    "F_subprogram": "subroutine",
                    "LUA_name": "set_global_flag",
                    "LUA_name_impl": "l_set_global_flag",
                    "PY_name_impl": "PY_set_global_flag",
                    "c_const": "",
                    "function_name": "set_global_flag",
                    "underscore_name": "set_global_flag"
                },
                "linenumber": 263,
                "options": {}
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_get_value": "",
                        "c_type": "int",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHC_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "int",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "int",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": "NPY_INT",
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "declarator": {
                        "name": "get_global_flag",
                        "pointer": []
                    },
                    "params": [],
                    "specifier": [
                        "int"
                    ],
                    "typemap_name": "int"
                },
                "decl": "int get_global_flag()",
                "declgen": "int get_global_flag()",
                "fmtdict": {
                    "C_call_code": "int SHC_rv =\t tutorial::get_global_flag(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_get_global_flag",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "int",
                    "F_C_call": "c_get_global_flag",
                    "F_C_name": "get_global_flag",
                    "F_arg_c_call": "",
                    "F_arguments": "",
                    "F_call_code": "SHT_rv = c_get_global_flag()",
                    "F_name_function": "get_global_flag",
                    "F_name_generic": "get_global_flag",
                    "F_name_impl": "get_global_flag",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "get_global_flag",
                    "LUA_name_impl": "l_get_global_flag",
                    "PY_name_impl": "PY_get_global_flag",
                    "c_const": "",
                    "cxx_rv_decl": "int SHC_rv",
                    "function_name": "get_global_flag",
                    "underscore_name": "get_global_flag"
                },
                "linenumber": 264,
                "options": {}
            },
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv",
                        "c_type": "char",
                        "c_val": "SHCXX_rv.c_str()",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    },
                    "fmtf": {
                        "cxx_type": "std::string",
                        "f_var": "SHT_rv"
                    },
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_var": "SHCXX_rv"
                    },
                    "fmtpy": {
                        "c_deref": "",
                        "c_var": "SHCXX_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "std::string",
                        "cxx_var": "SHCXX_rv",
                        "data_var": "SHData_rv",
                        "numpy_type": null,
                        "py_var": "SHTPy_rv",
                        "size_var": "SHSize_rv"
                    }
                },
                "ast": {
                    "attrs": {
                        "deref": "result_as_arg",
                        "len": "30"
                    },
                    "const": true,
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": [
                            {
                                "ptr": "&"
                            }
                        ]
                    },
                    "params": [],
                    "return_pointer_as": "result_as_arg",
                    "specifier": [
                        "std::string"
                    ],
                    "typemap_name": "std::string"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)",
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t tutorial::LastFunctionCalled(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_last_function_called",
                    "C_post_call": "const char * SHC_rv =\t SHCXX_rv.c_str();",
                    "C_prototype": "",
                    "C_return_code": "return SHC_rv;",
                    "C_return_type": "const char *",
                    "F_C_call": "c_last_function_called_bufferify",
                    "F_C_name": "c_last_function_called",
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)",
                    "F_arguments": "",
                    "F_call_code": "call c_last_function_called_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))",
                    "F_name_function": "last_function_called",
                    "F_name_generic": "last_function_called",
                    "F_name_impl": "last_function_called",
                    "F_result_clause": "\fresult(SHT_rv)",
                    "F_subprogram": "function",
                    "LUA_name": "LastFunctionCalled",
                    "LUA_name_impl": "l_last_function_called",
                    "PY_name_impl": "PY_LastFunctionCalled",
                    "c_const": "const ",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "underscore_name": "last_function_called"
                },
                "linenumber": 265,
                "options": {}
            },
            {
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_addr": "",
                            "c_const": "",
                            "c_deref": "*",
                            "c_member": "->",
                            "c_var": "SHF_rv",
                            "c_var_len": "NSHF_rv",
                            "cxx_addr": "&",
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&SHCXX_rv)",
                            "cxx_member": ".",
                            "cxx_type": "std::string",
                            "cxx_var": "SHCXX_rv",
                            "idtor": "0",
                            "stmt0": "c_string_pointer_result_buf_",
                            "stmt1": "c_string_result_buf"
                        },
                        "fmtf": {
                            "c_var": "SHT_rv",
                            "f_var": "SHT_rv"
                        }
                    }
                },
                "_fmtresult": {
                    "fmtc": {
                        "c_type": "void",
                        "c_var": "SHC_rv",
                        "cxx_addr": "&",
                        "cxx_member": ".",
                        "cxx_type": "void",
                        "cxx_var": "SHCXX_rv",
                        "idtor": "0"
                    }
                },
                "_generated": "arg_to_buffer",
                "ast": {
                    "attrs": {
                        "len": "30"
                    },
                    "declarator": {
                        "name": "LastFunctionCalled",
                        "pointer": []
                    },
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true,
                                "intent": "out",
                                "len": "NSHF_rv"
                            },
                            "declarator": {
                                "name": "SHF_rv",
                                "pointer": [
                                    {
                                        "ptr": "&"
                                    }
                                ]
                            },
                            "specifier": [
                                "std::string"
                            ],
                            "typemap_name": "std::string"
                        }
                    ],
                    "specifier": [
                        "void"
                    ],
                    "typemap_name": "void"
                },
                "decl": "const std::string& LastFunctionCalled() +len(30)",
                "declgen": "void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)",
                "fmtdict": {
                    "C_call_code": "const std::string & SHCXX_rv =\t tutorial::LastFunctionCalled(\t);",
                    "C_call_list": "",
                    "C_name": "TUT_last_function_called_bufferify",
                    "C_post_call": "if (SHCXX_rv.empty()) {+\nShroudStrCopy(SHF_rv, NSHF_rv,\t NULL,\t 0);\n-} else {+\nShroudStrCopy(SHF_rv, NSHF_rv,\t SHCXX_rv.data(),\t SHCXX_rv.size());\n-}",
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv",
                    "C_return_code": "return;",
                    "C_return_type": "void",
                    "F_C_name": "c_last_function_called_bufferify",
                    "c_const": "",
                    "cxx_rv_decl": "const std::string & SHCXX_rv",
                    "function_name": "LastFunctionCalled",
                    "function_suffix": "_bufferify",
                    "underscore_name": "last_function_called"
                },
                "linenumber": 265,
                "options": {
                    "wrap_c": true,
                    "wrap_fortran": false,
                    "wrap_lua": false,
                    "wrap_python": false
                }
            }
        ],
        "language": "cxx",
        "options": {
            "C_API_case": "native",
            "C_enum_member_template": "{C_prefix}{C_name_scope}{enum_member_name}",
            "C_enum_template": "{C_prefix}{C_name_scope}{enum_name}",
            "C_header_filename_class_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}",
            "C_header_filename_namespace_template": "wrap{file_scope}.{C_header_filename_suffix}",
            "C_header_utility_template": "types{library}.{C_header_filename_suffix}",
            "C_impl_filename_class_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}",
            "C_impl_filename_namespace_template": "wrap{file_scope}.{C_impl_filename_suffix}",
            "C_line_length": 72,
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor",
            "C_name_template": "{C_prefix}{C_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "C_var_capsule_template": "C{c_var}",
            "C_var_context_template": "D{c_var}",
            "C_var_len_template": "N{c_var}",
            "C_var_size_template": "S{c_var}",
            "C_var_trim_template": "L{c_var}",
            "F_C_name_template": "{F_C_prefix}{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_abstract_interface_argument_template": "arg{index}",
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}",
            "F_auto_reference_count": false,
            "F_capsule_data_type_class_template": "SHROUD_{F_name_scope}capsule",
            "F_create_bufferify_function": true,
            "F_create_generic": true,
            "F_enum_member_template": "{F_name_scope}{enum_member_lower}",
            "F_flatten_namespace": false,
            "F_force_wrapper": false,
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}",
            "F_impl_filename_namespace_template": "wrapf{file_scope}.{F_filename_suffix}",
            "F_line_length": 72,
            "F_module_name_library_template": "{library_lower}_mod",
            "F_module_name_namespace_template": "{file_scope}_mod",
            "F_name_function_template": "{underscore_name}{function_suffix}{template_suffix}",
            "F_name_generic_template": "{underscore_name}",
            "F_name_impl_template": "{F_name_scope}{underscore_name}{function_suffix}{template_suffix}",
            "F_return_fortran_pointer": true,
            "F_standard": 2003,
            "F_string_len_trim": true,
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg",
            "LUA_ctor_name_template": "{cxx_class}",
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}",
            "LUA_metadata_template": "{cxx_class}.metatable",
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}",
            "LUA_module_name_template": "{library_lower}",
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg",
            "LUA_name_impl_template": "{LUA_prefix}{C_name_scope}{underscore_name}",
            "LUA_name_template": "{function_name}",
            "LUA_userdata_member_template": "self",
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type",
            "PY_PyObject_template": "{PY_prefix}{cxx_class}",
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type",
            "PY_array_arg": "numpy",
            "PY_capsule_destructor_function_template": "{PY_prefix}SHROUD_capsule_destructor",
            "PY_dtor_context_array_template": "{PY_prefix}SHROUD_capsule_context",
            "PY_dtor_context_typedef_template": "{PY_prefix}SHROUD_dtor_context",
            "PY_fetch_context_function_template": "{PY_prefix}SHROUD_fetch_context",
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}",
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter",
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter",
            "PY_module_filename_template": "py{file_scope}module.{PY_impl_filename_suffix}",
            "PY_name_impl_template": "{PY_prefix}{function_name}{function_suffix}{template_suffix}",
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor",
            "PY_release_memory_function_template": "{PY_prefix}SHROUD_release_memory",
            "PY_struct_arg": "numpy",
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr",
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype",
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr",
            "PY_type_filename_template": "py{file_scope}type.{PY_impl_filename_suffix}",
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}{template_suffix}",
            "PY_utility_filename_template": "py{library}util.{PY_impl_filename_suffix}",
            "YAML_type_filename_template": "{library_lower}_types.yaml",
            "__line__": 15,
            "debug": true,
            "debug_index": false,
            "doxygen": true,
            "flatten_namespace": false,
            "literalinclude": false,
            "literalinclude2": true,
            "return_scalar_pointer": "pointer",
            "show_splicer_comments": true,
            "wrap_c": true,
            "wrap_fortran": true,
            "wrap_lua": true,
            "wrap_python": true
        },
        "scope_file": [
            "Tutorial"
        ],
        "variables": [
            {
                "ast": {
                    "declarator": {
                        "name": "global_flag",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {
                    "field_name": "global_flag",
                    "variable_lower": "global_flag",
                    "variable_name": "global_flag",
                    "variable_upper": "GLOBAL_FLAG"
                },
                "linenumber": 23,
                "name": "global_flag",
                "options": {}
            },
            {
                "ast": {
                    "declarator": {
                        "name": "tutorial_flag",
                        "pointer": []
                    },
                    "specifier": [
                        "int"
                    ],
                    "storage": [
                        "extern"
                    ],
                    "typemap_name": "int"
                },
                "fmtdict": {
                    "field_name": "tutorial_flag",
                    "variable_lower": "tutorial_flag",
                    "variable_name": "tutorial_flag",
                    "variable_upper": "TUTORIAL_FLAG"
                },
                "linenumber": 43,
                "name": "tutorial_flag",
                "options": {}
            }
        ]
    }
}