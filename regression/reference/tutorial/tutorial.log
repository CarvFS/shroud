Read yaml tutorial.yaml
Skipping std::string, unable to create C wrapper for function returning ConcatenateStrings instance (must return a pointer or reference). Bufferify version will still be created.
Read splicer ftutorialsplicer.f
Close tutorial_types.yaml
class Class1
C method Class1() +name(new)
C method Class1(int flag +intent(in)+value) +name(new)
C method ~Class1() +name(delete)
C method int Method1()
C method bool equivalent(const Class1 & obj2 +intent(in)) const
C method Class1 * returnThis()
C method Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +intent(in)+value)
C method Class1 * returnThisBuffer(std::string & name +intent(in)+len_trim(Lname), bool flag +intent(in)+value)
C method Class1 * getclass3() const
C method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
C method int getM_flag()
C method int getTest()
C method void setTest(int val +intent(in)+value)
Close wrapClass1.h
Close wrapClass1.cpp
class Singleton
C method static Singleton & getReference()
Close wrapSingleton.h
Close wrapSingleton.cpp
C function void NoReturnNoArguments()
C function double PassByValue(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
C function void ConcatenateStrings(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C function double UseDefaultArguments()
C function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value)
C function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
C function void OverloadedFunction(const std::string & name +intent(in))
C function void OverloadedFunction(const std::string & name +intent(in)+len_trim(Lname))
C function void OverloadedFunction(int indx +intent(in)+value)
C function void TemplateArgument(int arg +intent(in)+value)
C function void TemplateArgument(double arg +intent(in)+value)
C function int TemplateReturn()
C function double TemplateReturn()
C function void FortranGeneric(double arg +intent(in)+value)
C function void FortranGenericOverloaded()
C function void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)
C function void FortranGenericOverloaded(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)
C function int UseDefaultOverload(int num +intent(in)+value)
C function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value)
C function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value)
C function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)
C function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C function TypeID typefunc(TypeID arg +intent(in)+value)
C function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
C function Color colorfunc(Color arg +intent(in)+value)
C function void getMinMax(int & min +intent(out), int & max +intent(out))
C function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
C function void passClassByValue(Class1 arg +intent(in)+value)
C function int useclass(const Class1 * arg +intent(in))
C function const Class1 * getclass2()
C function Class1 * getclass3()
C function Class1 getClassCopy(int flag +intent(in)+value)
C function int callback1(int in +intent(in)+value, int ( * incr)(int +value) +intent(in)+value)
C function void set_global_flag(int arg +intent(in)+value)
C function int get_global_flag()
C function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
C function void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)
Close wrapTutorial.h
Close wrapTutorial.cpp
Close typesTutorial.h
class Class1
C-interface, Fortran method Class1() +name(new)
C-interface, Fortran method Class1(int flag +intent(in)+value) +name(new)
C-interface, Fortran method ~Class1() +name(delete)
C-interface, Fortran method int Method1()
C-interface, Fortran method bool equivalent(const Class1 & obj2 +intent(in)) const
C-interface, Fortran method Class1 * returnThis()
C-interface, Fortran method Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +intent(in)+value)
C-interface method Class1 * returnThisBuffer(std::string & name +intent(in)+len_trim(Lname), bool flag +intent(in)+value)
C-interface, Fortran method Class1 * getclass3() const
C-interface, Fortran method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
C-interface, Fortran method int getM_flag()
C-interface, Fortran method int getTest()
C-interface, Fortran method void setTest(int val +intent(in)+value)
class Singleton
C-interface, Fortran method static Singleton & getReference()
C-interface, Fortran function void NoReturnNoArguments()
C-interface, Fortran function double PassByValue(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
Fortran function const std::string ConcatenateStrings(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)
C-interface function void ConcatenateStrings(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), const std::string * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C-interface, Fortran function double UseDefaultArguments()
C-interface, Fortran function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value)
C-interface, Fortran function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
C-interface, Fortran function void OverloadedFunction(const std::string & name +intent(in))
C-interface function void OverloadedFunction(const std::string & name +intent(in)+len_trim(Lname))
C-interface, Fortran function void OverloadedFunction(int indx +intent(in)+value)
C-interface, Fortran function void TemplateArgument(int arg +intent(in)+value)
C-interface, Fortran function void TemplateArgument(double arg +intent(in)+value)
C-interface, Fortran function int TemplateReturn()
C-interface, Fortran function double TemplateReturn()
C-interface function void FortranGeneric(double arg +intent(in)+value)
Fortran function void FortranGeneric(float arg +intent(in)+value)
Fortran function void FortranGeneric(double arg +intent(in)+value)
C-interface, Fortran function void FortranGenericOverloaded()
C-interface function void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)
Fortran function void FortranGenericOverloaded(const std::string & name +intent(in), float arg2 +intent(in)+value)
Fortran function void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)
C-interface function void FortranGenericOverloaded(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)
C-interface, Fortran function int UseDefaultOverload(int num +intent(in)+value)
C-interface, Fortran function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value)
C-interface, Fortran function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C-interface, Fortran function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value)
C-interface, Fortran function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)
C-interface, Fortran function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C-interface, Fortran function TypeID typefunc(TypeID arg +intent(in)+value)
C-interface, Fortran function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
C-interface, Fortran function Color colorfunc(Color arg +intent(in)+value)
C-interface, Fortran function void getMinMax(int & min +intent(out), int & max +intent(out))
C-interface, Fortran function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
C-interface, Fortran function void passClassByValue(Class1 arg +intent(in)+value)
C-interface, Fortran function int useclass(const Class1 * arg +intent(in))
C-interface, Fortran function const Class1 * getclass2()
C-interface, Fortran function Class1 * getclass3()
C-interface, Fortran function Class1 getClassCopy(int flag +intent(in)+value)
C-interface, Fortran function int callback1(int in +intent(in)+value, int ( * incr)(int +value) +intent(in)+value)
C-interface, Fortran function void set_global_flag(int arg +intent(in)+value)
C-interface, Fortran function int get_global_flag()
C-interface, Fortran function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
C-interface function void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)
Close wrapftutorial.f
class Class1
Python method Class1() +name(new)
Python method Class1(int flag +intent(in)+value) +name(new)
Python method ~Class1() +name(delete)
Python method int Method1()
Python method bool equivalent(const Class1 & obj2 +intent(in)) const
Python method Class1 * getclass3() const
Python method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
Close pyClass1type.cpp
class Singleton
Python method static Singleton & getReference()
Close pySingletontype.cpp
Python function void NoReturnNoArguments()
Python function double PassByValue(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
Python function const std::string ConcatenateStrings(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)
Python function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Python function void OverloadedFunction(const std::string & name +intent(in))
Python function void OverloadedFunction(int indx +intent(in)+value)
Python function void TemplateArgument(int arg +intent(in)+value)
Python function void TemplateArgument(double arg +intent(in)+value)
Python function void FortranGeneric(double arg +intent(in)+value)
Python function void FortranGenericOverloaded()
Python function void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)
Python function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Python function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Python function TypeID typefunc(TypeID arg +intent(in)+value)
Python function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
Python function Color colorfunc(Color arg +intent(in)+value)
Python function void getMinMax(int & min +intent(out), int & max +intent(out))
Python function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
Python function void passClassByValue(Class1 arg +intent(in)+value)
Python function int useclass(const Class1 * arg +intent(in))
Python function Class1 * getclass3()
Python function void set_global_flag(int arg +intent(in)+value)
Python function int get_global_flag()
Python function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
Close pyTutorialmodule.cpp
Close pyTutorialutil.cpp
Close pyTutorialmodule.hpp
Lua method Class1() +name(new)
Lua method Class1(int flag +intent(in)+value) +name(new)
Lua method ~Class1() +name(delete)
Lua method int Method1()
Lua method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
Lua function void NoReturnNoArguments()
Lua function double PassByValue(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
Lua function const std::string ConcatenateStrings(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)
Lua function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Lua function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Lua function double UseDefaultArguments(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Lua function void OverloadedFunction(const std::string & name +intent(in))
Lua function void OverloadedFunction(int indx +intent(in)+value)
Lua function void TemplateArgument(int arg +intent(in)+value)
Lua function void TemplateArgument(double arg +intent(in)+value)
Lua function void FortranGeneric(double arg +intent(in)+value)
Lua function void FortranGenericOverloaded()
Lua function void FortranGenericOverloaded(const std::string & name +intent(in), double arg2 +intent(in)+value)
Lua function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int UseDefaultOverload(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int UseDefaultOverload(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function TypeID typefunc(TypeID arg +intent(in)+value)
Lua function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
Lua function Color colorfunc(Color arg +intent(in)+value)
Lua function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
Lua function void set_global_flag(int arg +intent(in)+value)
Lua function int get_global_flag()
Lua function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
Close luaTutorialmodule.hpp
Close luaTutorialmodule.cpp
