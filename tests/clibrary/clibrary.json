{
    "F_module_dependencies": [], 
    "classes": [], 
    "copyright": [
        "#######################################################################", 
        "Copyright (c) 2017, Lawrence Livermore National Security, LLC.", 
        "Produced at the Lawrence Livermore National Laboratory", 
        null, 
        "LLNL-CODE-738041.", 
        "All rights reserved.", 
        null, 
        "This file is part of Shroud.  For details, see", 
        "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
        null, 
        "Redistribution and use in source and binary forms, with or without", 
        "modification, are permitted provided that the following conditions are", 
        "met:", 
        null, 
        "* Redistributions of source code must retain the above copyright", 
        "  notice, this list of conditions and the disclaimer below.", 
        null, 
        "* Redistributions in binary form must reproduce the above copyright", 
        "  notice, this list of conditions and the disclaimer (as noted below)", 
        "  in the documentation and/or other materials provided with the", 
        "  distribution.", 
        null, 
        "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
        "  may be used to endorse or promote products derived from this", 
        "  software without specific prior written permission.", 
        null, 
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
        "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
        "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
        "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
        "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
        "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
        "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
        "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
        "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
        "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
        null, 
        "#######################################################################"
    ], 
    "cpp_header": "clibrary.h", 
    "fmt": {
        "CPP_template": "", 
        "CPP_this": "SH_this", 
        "CPP_this_call": "", 
        "C_header_filename": "wrapClibrary.h", 
        "C_header_filename_suffix": "h", 
        "C_impl_filename": "wrapClibrary.c", 
        "C_impl_filename_suffix": "c", 
        "C_post_call": "", 
        "C_pre_call": "", 
        "C_prefix": "CLI_", 
        "C_result": "SHT_rv", 
        "C_string_result_as_arg": "SHF_rv", 
        "C_this": "self", 
        "F_C_prefix": "c_", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_filename_suffix": "f", 
        "F_impl_filename": "wrapfclibrary.f", 
        "F_module_name": "clibrary_mod", 
        "F_pure_clause": "", 
        "F_result": "SHT_rv", 
        "F_result_clause": "", 
        "F_string_result_as_arg": "", 
        "F_this": "obj", 
        "LUA_header_filename_suffix": "h", 
        "LUA_impl_filename_suffix": "c", 
        "LUA_result": "rv", 
        "PY_header_filename_suffix": "h", 
        "PY_impl_filename_suffix": "c", 
        "PY_result": "rv", 
        "YAML_type_filename": "clibrary_types.yaml", 
        "c_temp": "SHT_", 
        "class_prefix": "", 
        "function_suffix": "", 
        "library": "Clibrary", 
        "library_lower": "clibrary", 
        "library_upper": "CLIBRARY", 
        "namespace_scope": "", 
        "stdlib": ""
    }, 
    "functions": [
        {
            "_decl": "void Function1()", 
            "_function_index": 0, 
            "_subprogram": "subroutine", 
            "decl": "void Function1()", 
            "fmt": {
                "C_call_code": "Function1();", 
                "C_call_list": "", 
                "C_name": "Function1", 
                "C_prototype": "", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function1", 
                "F_C_name": "function1", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "call c_function1(\t)", 
                "F_name_function": "function1", 
                "F_name_generic": "function1", 
                "F_name_impl": "function1", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_name": "Function1", 
                "underscore_name": "function1"
            }, 
            "options": {}, 
            "result": {
                "args": [], 
                "attrs": {}, 
                "const": false, 
                "fattrs": {}, 
                "func_const": false, 
                "init": null, 
                "name": "Function1", 
                "type": "void"
            }
        }, 
        {
            "_decl": "double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)", 
            "_function_index": 1, 
            "_subprogram": "function", 
            "decl": "double Function2(double arg1, int arg2)", 
            "fmt": {
                "C_call_code": "double SHT_rv = Function2(arg1, arg2);", 
                "C_call_list": "arg1, arg2", 
                "C_name": "Function2", 
                "C_prototype": "double arg1, int arg2", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "double", 
                "F_C_call": "c_function2", 
                "F_C_name": "function2", 
                "F_arg_c_call": "arg1, arg2", 
                "F_arg_c_call_tab": "\targ1\targ2", 
                "F_arguments": "arg1, arg2", 
                "F_call_code": "SHT_rv = c_function2(\targ1\targ2)", 
                "F_name_function": "function2", 
                "F_name_generic": "function2", 
                "F_name_impl": "function2", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_name": "Function2", 
                "underscore_name": "function2"
            }, 
            "options": {}, 
            "result": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cpp_type": "double", 
                            "cpp_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }, 
                        "init": null, 
                        "name": "arg1", 
                        "type": "double"
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cpp_type": "int", 
                            "cpp_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }, 
                        "init": null, 
                        "name": "arg2", 
                        "type": "int"
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "fattrs": {}, 
                "fmtc": {
                    "cpp_rv_decl": "double SHT_rv", 
                    "cpp_var": "SHT_rv"
                }, 
                "func_const": false, 
                "init": null, 
                "name": "Function2", 
                "type": "double"
            }
        }, 
        {
            "_decl": "void Sum(int len +intent(in)+value, int * values +dimension(len)+intent(in), int * result +intent(out))", 
            "_function_index": 2, 
            "_subprogram": "subroutine", 
            "decl": "void Sum(int len, int *values+dimension(len)+intent(in), int *result+intent(out))", 
            "fmt": {
                "C_call_code": "Sum(len, values, result);", 
                "C_call_list": "len, values, result", 
                "C_name": "Sum", 
                "C_prototype": "int len, int * values, int * result", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_sum", 
                "F_C_name": "sum", 
                "F_arg_c_call": "len, values, result", 
                "F_arg_c_call_tab": "\tlen\tvalues\tresult", 
                "F_arguments": "len, values, result", 
                "F_call_code": "call c_sum(\tlen\tvalues\tresult)", 
                "F_name_function": "sum", 
                "F_name_generic": "sum", 
                "F_name_impl": "sum", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_name": "Sum", 
                "underscore_name": "sum"
            }, 
            "options": {}, 
            "result": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "len", 
                            "cpp_type": "int", 
                            "cpp_var": "len"
                        }, 
                        "fmtf": {
                            "c_var": "len", 
                            "f_var": "len"
                        }, 
                        "init": null, 
                        "name": "len", 
                        "type": "int"
                    }, 
                    {
                        "attrs": {
                            "dimension": "(len)", 
                            "intent": "in", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "values", 
                            "cpp_type": "int", 
                            "cpp_var": "values"
                        }, 
                        "fmtf": {
                            "c_var": "values", 
                            "f_var": "values"
                        }, 
                        "init": null, 
                        "name": "values", 
                        "type": "int"
                    }, 
                    {
                        "attrs": {
                            "intent": "out", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "result", 
                            "cpp_type": "int", 
                            "cpp_var": "result"
                        }, 
                        "fmtf": {
                            "c_var": "result", 
                            "f_var": "result"
                        }, 
                        "init": null, 
                        "name": "result", 
                        "type": "int"
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "fattrs": {}, 
                "func_const": false, 
                "init": null, 
                "name": "Sum", 
                "type": "void"
            }
        }, 
        {
            "_decl": "bool Function3(bool arg +intent(in)+value)", 
            "_function_index": 3, 
            "_subprogram": "function", 
            "decl": "bool Function3(bool arg)", 
            "fmt": {
                "C_call_code": "bool SHT_rv = Function3(arg);", 
                "C_call_list": "arg", 
                "C_name": "Function3", 
                "C_prototype": "bool arg", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "bool", 
                "F_C_call": "c_function3", 
                "F_C_name": "c_function3", 
                "F_arg_c_call": "SH_arg", 
                "F_arg_c_call_tab": "\tSH_arg", 
                "F_arguments": "arg", 
                "F_call_code": "SHT_rv = c_function3(\tSH_arg)", 
                "F_name_function": "function3", 
                "F_name_generic": "function3", 
                "F_name_impl": "function3", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_name": "Function3", 
                "underscore_name": "function3"
            }, 
            "options": {}, 
            "result": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cpp_type": "bool", 
                            "cpp_var": "arg"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg", 
                            "f_var": "arg"
                        }, 
                        "init": null, 
                        "name": "arg", 
                        "type": "bool"
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "fattrs": {}, 
                "fmtc": {
                    "cpp_rv_decl": "bool SHT_rv", 
                    "cpp_var": "SHT_rv"
                }, 
                "func_const": false, 
                "init": null, 
                "name": "Function3", 
                "type": "bool"
            }
        }, 
        {
            "_decl": "void Function3b(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))", 
            "_function_index": 4, 
            "_subprogram": "subroutine", 
            "decl": "void Function3b(const bool arg1, bool *arg2+intent(out), bool *arg3+intent(inout))", 
            "fmt": {
                "C_call_code": "Function3b(arg1, arg2, arg3);", 
                "C_call_list": "arg1, arg2, arg3", 
                "C_name": "Function3b", 
                "C_prototype": "const bool arg1, bool * arg2, bool * arg3", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function3b", 
                "F_C_name": "c_function3b", 
                "F_arg_c_call": "SH_arg1, SH_arg2, SH_arg3", 
                "F_arg_c_call_tab": "\tSH_arg1\tSH_arg2\tSH_arg3", 
                "F_arguments": "arg1, arg2, arg3", 
                "F_call_code": "call c_function3b(\tSH_arg1\tSH_arg2\tSH_arg3)", 
                "F_name_function": "function3b", 
                "F_name_generic": "function3b", 
                "F_name_impl": "function3b", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_name": "Function3b", 
                "underscore_name": "function3b"
            }, 
            "options": {}, 
            "result": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cpp_type": "bool", 
                            "cpp_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg1", 
                            "f_var": "arg1"
                        }, 
                        "init": null, 
                        "name": "arg1", 
                        "type": "bool"
                    }, 
                    {
                        "attrs": {
                            "intent": "out", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "cpp_type": "bool", 
                            "cpp_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg2", 
                            "f_var": "arg2"
                        }, 
                        "init": null, 
                        "name": "arg2", 
                        "type": "bool"
                    }, 
                    {
                        "attrs": {
                            "intent": "inout", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg3", 
                            "cpp_type": "bool", 
                            "cpp_var": "arg3"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg3", 
                            "f_var": "arg3"
                        }, 
                        "init": null, 
                        "name": "arg3", 
                        "type": "bool"
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "fattrs": {}, 
                "func_const": false, 
                "init": null, 
                "name": "Function3b", 
                "type": "void"
            }
        }, 
        {
            "C_post_call_buf": "// Function4a allocates memory which must be released after it is copied\n// into the Fortran argument or else it will leak.\nfree({C_result});\n", 
            "_PTR_F_C_index": 6, 
            "_decl": "char * Function4a(const char * arg1 +intent(in), const char * arg2 +intent(in))", 
            "_function_index": 5, 
            "_subprogram": "function", 
            "decl": "char *Function4a+len(30)( const char *arg1, const char *arg2 )", 
            "fmt": {
                "C_call_code": "char * SHT_rv = Function4a(arg1, arg2);", 
                "C_call_list": "arg1, arg2", 
                "C_name": "Function4a", 
                "C_prototype": "const char * arg1, const char * arg2", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "char *", 
                "F_C_call": "c_function4a_bufferify", 
                "F_C_name": "c_function4a", 
                "F_arg_c_call": "arg1, len_trim(arg1, kind=C_INT), arg2, len_trim(arg2, kind=C_INT), SHT_rv, len(SHT_rv, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ1\tlen_trim(arg1, kind=C_INT)\targ2\tlen_trim(arg2, kind=C_INT)\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                "F_arguments": "arg1, arg2", 
                "F_call_code": "call c_function4a_bufferify(\targ1\tlen_trim(arg1, kind=C_INT)\targ2\tlen_trim(arg2, kind=C_INT)\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                "F_name_function": "function4a", 
                "F_name_generic": "function4a", 
                "F_name_impl": "function4a", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "c_var_len": "30", 
                "function_name": "Function4a", 
                "underscore_name": "function4a"
            }, 
            "options": {}, 
            "result": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg1", 
                            "cpp_type": "char", 
                            "cpp_var": "arg1"
                        }, 
                        "init": null, 
                        "name": "arg1", 
                        "type": "char"
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "cpp_type": "char", 
                            "cpp_var": "arg2"
                        }, 
                        "init": null, 
                        "name": "arg2", 
                        "type": "char"
                    }
                ], 
                "attrs": {
                    "len": "30", 
                    "ptr": true
                }, 
                "const": false, 
                "fattrs": {}, 
                "fmtc": {
                    "cpp_rv_decl": "char * SHT_rv", 
                    "cpp_var": "SHT_rv"
                }, 
                "func_const": false, 
                "init": null, 
                "name": "Function4a", 
                "type": "char"
            }
        }, 
        {
            "C_post_call": "// Function4a allocates memory which must be released after it is copied\n// into the Fortran argument or else it will leak.\nfree({C_result});\n", 
            "C_post_call_buf": "// Function4a allocates memory which must be released after it is copied\n// into the Fortran argument or else it will leak.\nfree({C_result});\n", 
            "_PTR_C_CPP_index": 5, 
            "_decl": "void Function4a(const char * arg1 +intent(in)+len_trim(Larg1), const char * arg2 +intent(in)+len_trim(Larg2), char * SHF_rv +intent(out)+len(NSHF_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 6, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "char *Function4a+len(30)( const char *arg1, const char *arg2 )", 
            "fmt": {
                "C_call_code": "char * SHT_rv = Function4a(SH_arg1, SH_arg2);", 
                "C_call_list": "SH_arg1, SH_arg2", 
                "C_name": "CLI_function4a_bufferify", 
                "C_post_call": "free(SH_arg1);\nfree(SH_arg2);\nif (SHT_rv == NULL) {\n  memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv);\n}", 
                "C_pre_call": "char * SH_arg1 = (char *) malloc(Larg1 + 1);\nmemcpy(SH_arg1, arg1, Larg1);\nSH_arg1[Larg1] = '\\0';\nchar * SH_arg2 = (char *) malloc(Larg2 + 1);\nmemcpy(SH_arg2, arg2, Larg2);\nSH_arg2[Larg2] = '\\0';", 
                "C_prototype": "const char * arg1, int Larg1, const char * arg2, int Larg2, char * SHF_rv, int NSHF_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_function4a_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg1", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg1", 
                            "c_var_trim": "Larg1", 
                            "cpp_type": "char", 
                            "cpp_val": "SH_arg1", 
                            "cpp_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }, 
                        "init": null, 
                        "name": "arg1", 
                        "type": "char"
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg2", 
                            "ptr": true, 
                            "value": false
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "c_var_trim": "Larg2", 
                            "cpp_type": "char", 
                            "cpp_val": "SH_arg2", 
                            "cpp_var": "SH_arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }, 
                        "init": null, 
                        "name": "arg2", 
                        "type": "char"
                    }, 
                    {
                        "args": [
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "ptr": true, 
                                    "value": false
                                }, 
                                "const": true, 
                                "init": null, 
                                "name": "arg1", 
                                "type": "char"
                            }, 
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "ptr": true, 
                                    "value": false
                                }, 
                                "const": true, 
                                "init": null, 
                                "name": "arg2", 
                                "type": "char"
                            }
                        ], 
                        "attrs": {
                            "_is_result": true, 
                            "intent": "out", 
                            "len": "NSHF_rv", 
                            "ptr": true
                        }, 
                        "const": false, 
                        "fattrs": {}, 
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cpp_type": "char", 
                            "cpp_val": "SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }, 
                        "func_const": false, 
                        "init": null, 
                        "name": "SHF_rv", 
                        "type": "char"
                    }
                ], 
                "attrs": {
                    "len": "30", 
                    "ptr": false, 
                    "reference": false
                }, 
                "const": false, 
                "fattrs": {}, 
                "fmtc": {
                    "cpp_rv_decl": "char * SHT_rv", 
                    "cpp_var": "SHT_rv"
                }, 
                "func_const": false, 
                "init": null, 
                "name": "Function4a", 
                "type": "void"
            }
        }
    ], 
    "language": "c", 
    "library": "Clibrary", 
    "namespace": "", 
    "options": {
        "C_bufferify_suffix": "_bufferify", 
        "C_header_filename_class_template": "wrap{cpp_class}.{C_header_filename_suffix}", 
        "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
        "C_impl_filename_class_template": "wrap{cpp_class}.{C_impl_filename_suffix}", 
        "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
        "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "C_var_len_template": "N{c_var}", 
        "C_var_size_template": "S{c_var}", 
        "C_var_trim_template": "L{c_var}", 
        "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "F_C_prefix": "c_", 
        "F_force_wrapper": false, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.{F_filename_suffix}", 
        "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
        "F_module_name_class_template": "{class_lower}_mod", 
        "F_module_name_library_template": "{library_lower}_mod", 
        "F_module_per_class": false, 
        "F_name_associated": "associated", 
        "F_name_function_template": "{underscore_name}{function_suffix}", 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
        "F_name_instance_get": "get_instance", 
        "F_name_instance_set": "set_instance", 
        "F_string_len_trim": true, 
        "LUA_class_reg_template": "{LUA_prefix}{cpp_class}_Reg", 
        "LUA_ctor_name_template": "{cpp_class}", 
        "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
        "LUA_metadata_template": "{cpp_class}.metatable", 
        "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
        "LUA_module_name_template": "{library_lower}", 
        "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
        "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
        "LUA_name_template": "{function_name}", 
        "LUA_userdata_member_template": "self", 
        "LUA_userdata_type_template": "{LUA_prefix}{cpp_class}_Type", 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
        "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
        "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
        "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "PY_type_filename_template": "py{cpp_class}type.{PY_impl_filename_suffix}", 
        "YAML_type_filename_template": "{library_lower}_types.yaml", 
        "class_prefix_template": "{class_lower}_", 
        "debug": true, 
        "doxygen": true, 
        "show_splicer_comments": true, 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_lua": false, 
        "wrap_python": false
    }, 
    "patterns": [], 
    "type_aliases": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float", 
        "std::string": "string", 
        "std::vector": "vector"
    }, 
    "types": {
        "EnumTypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_to_cpp": "static_cast<EnumTypeID>({c_var})", 
            "c_type": "int", 
            "cpp_to_c": "static_cast<int>({cpp_var})", 
            "cpp_type": "EnumTypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cpp": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cpp_to_c": "MPI_Comm_c2f({cpp_var})", 
            "cpp_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "TypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({c_var})", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = PyObject_IsTrue({py_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cpp_header": "<stdlib.h> <cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<stdlib.h> <cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<stdlib.h>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "if ({cpp_var} == NULL) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cpp_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cpp_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cpp_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cpp_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "      {c_var}[{c_temp}i] = {cpp_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cpp_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cpp_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "    {c_var}[{c_temp}i] = {cpp_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cpp_local_var": true, 
                        "pre_call": [
                            "std::vector<{cpp_T}> {cpp_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cpp_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cpp_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cpp_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cpp_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cpp_T}> {cpp_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cpp_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cpp_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cpp_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cpp_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cpp_T}> {cpp_var};"
                        ]
                    }
                }
            }, 
            "cpp_header": "<vector>", 
            "cpp_type": "std::vector<{cpp_T}>"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cpp_var}, NULL, NULL)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}