{
    "library": {
        "copyright": [
            "#######################################################################", 
            "Copyright (c) 2017, Lawrence Livermore National Security, LLC.", 
            "Produced at the Lawrence Livermore National Laboratory", 
            "", 
            "LLNL-CODE-738041.", 
            "All rights reserved.", 
            "", 
            "This file is part of Shroud.  For details, see", 
            "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
            "", 
            "Redistribution and use in source and binary forms, with or without", 
            "modification, are permitted provided that the following conditions are", 
            "met:", 
            "", 
            "* Redistributions of source code must retain the above copyright", 
            "  notice, this list of conditions and the disclaimer below.", 
            "", 
            "* Redistributions in binary form must reproduce the above copyright", 
            "  notice, this list of conditions and the disclaimer (as noted below)", 
            "  in the documentation and/or other materials provided with the", 
            "  distribution.", 
            "", 
            "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
            "  may be used to endorse or promote products derived from this", 
            "  software without specific prior written permission.", 
            "", 
            "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
            "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
            "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
            "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
            "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
            "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
            "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
            "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
            "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
            "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
            "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
            "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "", 
            "#######################################################################"
        ], 
        "cxx_header": "clibrary.h", 
        "format": {
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "", 
            "C_bufferify_suffix": "_bufferify", 
            "C_custom_return_type": "", 
            "C_header_filename": "wrapClibrary.h", 
            "C_header_filename_suffix": "h", 
            "C_impl_filename": "wrapClibrary.c", 
            "C_impl_filename_suffix": "c", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "CLI_", 
            "C_result": "SHT_rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_derived_member": "voidptr", 
            "F_filename_suffix": "f", 
            "F_impl_filename": "wrapfclibrary.f", 
            "F_module_name": "clibrary_mod", 
            "F_name_associated": "associated", 
            "F_name_instance_get": "get_instance", 
            "F_name_instance_set": "set_instance", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename_suffix": "h", 
            "LUA_impl_filename_suffix": "c", 
            "LUA_prefix": "l_", 
            "LUA_result": "rv", 
            "LUA_state_var": "L", 
            "PY_PyObject": "PyObject", 
            "PY_header_filename": "pyClibrarymodule.h", 
            "PY_header_filename_suffix": "h", 
            "PY_helper_filename": "pyClibraryhelper.c", 
            "PY_impl_filename_suffix": "c", 
            "PY_library_doc": "library documentation", 
            "PY_module_filename": "pyClibrarymodule.c", 
            "PY_module_name": "clibrary", 
            "PY_obj": "obj", 
            "PY_param_args": "args", 
            "PY_param_kwds": "kwds", 
            "PY_param_self": "self", 
            "PY_prefix": "PY_", 
            "PY_result": "rv", 
            "PY_used_param_args": false, 
            "PY_used_param_kwds": false, 
            "PY_used_param_self": false, 
            "YAML_type_filename": "clibrary_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "function_suffix": "", 
            "library": "Clibrary", 
            "library_lower": "clibrary", 
            "library_upper": "CLIBRARY", 
            "namespace_scope": "", 
            "stdlib": ""
        }, 
        "functions": [
            {
                "_function_index": 0, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function1()", 
                "declgen": "void Function1()", 
                "format": {
                    "C_call_code": "Function1(\t);", 
                    "C_call_list": "", 
                    "C_name": "Function1", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function1", 
                    "F_C_name": "function1", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "call c_function1()", 
                    "F_name_function": "function1", 
                    "F_name_generic": "function1", 
                    "F_name_impl": "function1", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_function1", 
                    "c_const": "", 
                    "function_name": "Function1", 
                    "underscore_name": "function1"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_decl": "double arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1", 
                            "py_var": "SH_Py_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cxx_decl": "int arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "arg2", 
                            "py_var": "SH_Py_arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "cxx_deref": ".", 
                        "cxx_rv_decl": "double SHT_rv", 
                        "cxx_var": "SHT_rv"
                    }
                }, 
                "_function_index": 1, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function2", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "double"
                    ]
                }, 
                "decl": "double Function2(double arg1, int arg2)", 
                "declgen": "double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)", 
                "format": {
                    "C_call_code": "double SHT_rv =\t Function2(\targ1,\t arg2);", 
                    "C_call_list": "arg1,\t arg2", 
                    "C_name": "Function2", 
                    "C_prototype": "double arg1,\t int arg2", 
                    "C_return_code": "return SHT_rv;", 
                    "C_return_type": "double", 
                    "F_C_call": "c_function2", 
                    "F_C_name": "function2", 
                    "F_arg_c_call": "arg1,\t arg2", 
                    "F_arguments": "arg1,\t arg2", 
                    "F_call_code": "SHT_rv = c_function2(arg1,\t arg2)", 
                    "F_name_function": "function2", 
                    "F_name_generic": "function2", 
                    "F_name_impl": "function2", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_function2", 
                    "c_const": "", 
                    "function_name": "Function2", 
                    "underscore_name": "function2"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "len", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }, 
                        "fmtf": {
                            "c_var": "len", 
                            "f_var": "len"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "len", 
                            "cxx_decl": "int len", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "len", 
                            "py_var": "SH_Py_len"
                        }
                    }, 
                    "result": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "result", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "result"
                        }, 
                        "fmtf": {
                            "c_var": "result", 
                            "f_var": "result"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "result", 
                            "cxx_decl": "int * result", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "result", 
                            "py_var": "SH_Py_result"
                        }
                    }, 
                    "values": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "values", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "values"
                        }, 
                        "fmtf": {
                            "c_var": "values", 
                            "f_var": "values"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "values", 
                            "cxx_decl": "int * values", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "values", 
                            "py_var": "SH_Py_values"
                        }
                    }
                }, 
                "_function_index": 2, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Sum", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "dimension": "(len)", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "values", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "result", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Sum(int len, int *values+dimension(len)+intent(in), int *result+intent(out))", 
                "declgen": "void Sum(int len +intent(in)+value, int * values +dimension(len)+intent(in), int * result +intent(out))", 
                "format": {
                    "C_call_code": "Sum(\tlen,\t values,\t result);", 
                    "C_call_list": "len,\t values,\t result", 
                    "C_name": "Sum", 
                    "C_prototype": "int len,\t int * values,\t int * result", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_sum", 
                    "F_C_name": "sum", 
                    "F_arg_c_call": "len,\t values,\t result", 
                    "F_arguments": "len,\t values,\t result", 
                    "F_call_code": "call c_sum(len,\t values,\t result)", 
                    "F_name_function": "sum", 
                    "F_name_generic": "sum", 
                    "F_name_impl": "sum", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_sum", 
                    "c_const": "", 
                    "function_name": "Sum", 
                    "underscore_name": "sum"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg", 
                            "f_var": "arg"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_decl": "bool arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg", 
                            "py_var": "SH_Py_arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "cxx_deref": ".", 
                        "cxx_rv_decl": "bool SHT_rv", 
                        "cxx_var": "SHT_rv"
                    }
                }, 
                "_function_index": 3, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function3", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }
                    ], 
                    "specifier": [
                        "bool"
                    ]
                }, 
                "decl": "bool Function3(bool arg)", 
                "declgen": "bool Function3(bool arg +intent(in)+value)", 
                "format": {
                    "C_call_code": "bool SHT_rv =\t Function3(\targ);", 
                    "C_call_list": "arg", 
                    "C_name": "Function3", 
                    "C_prototype": "bool arg", 
                    "C_return_code": "return SHT_rv;", 
                    "C_return_type": "bool", 
                    "F_C_call": "c_function3", 
                    "F_C_name": "c_function3", 
                    "F_arg_c_call": "SH_arg", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_function3(SH_arg)", 
                    "F_name_function": "function3", 
                    "F_name_generic": "function3", 
                    "F_name_impl": "function3", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_function3", 
                    "c_const": "", 
                    "function_name": "Function3", 
                    "underscore_name": "function3"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg1", 
                            "f_var": "arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_decl": "const bool arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg1", 
                            "py_var": "SH_Py_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg2", 
                            "f_var": "arg2"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": "PyBool_Type", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "cxx_decl": "bool * arg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2", 
                            "py_var": "SH_Py_arg2"
                        }
                    }, 
                    "arg3": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg3", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg3"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg3", 
                            "f_var": "arg3"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": "PyBool_Type", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg3", 
                            "cxx_decl": "bool * arg3", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg3", 
                            "py_var": "SH_Py_arg3"
                        }
                    }
                }, 
                "_function_index": 4, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function3b", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg3", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function3b(const bool arg1, bool *arg2+intent(out), bool *arg3+intent(inout))", 
                "declgen": "void Function3b(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))", 
                "format": {
                    "C_call_code": "Function3b(\targ1,\t arg2,\t arg3);", 
                    "C_call_list": "arg1,\t arg2,\t arg3", 
                    "C_name": "Function3b", 
                    "C_prototype": "const bool arg1,\t bool * arg2,\t bool * arg3", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function3b", 
                    "F_C_name": "c_function3b", 
                    "F_arg_c_call": "SH_arg1,\t SH_arg2,\t SH_arg3", 
                    "F_arguments": "arg1,\t arg2,\t arg3", 
                    "F_call_code": "call c_function3b(SH_arg1,\t SH_arg2,\t SH_arg3)", 
                    "F_name_function": "function3b", 
                    "F_name_generic": "function3b", 
                    "F_name_impl": "function3b", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_function3b", 
                    "c_const": "", 
                    "function_name": "Function3b", 
                    "underscore_name": "function3b"
                }, 
                "options": {}
            }, 
            {
                "_PTR_F_C_index": 6, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg1", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg1", 
                            "cxx_decl": "const char * arg1", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "arg1", 
                            "py_var": "SH_Py_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "cxx_decl": "const char * arg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "arg2", 
                            "py_var": "SH_Py_arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "cxx_deref": "->", 
                        "cxx_rv_decl": "char * SHT_rv", 
                        "cxx_var": "SHT_rv"
                    }
                }, 
                "_function_index": 5, 
                "ast": {
                    "attrs": {
                        "len": "30"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "Function4a", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "char"
                    ]
                }, 
                "decl": "char *Function4a+len(30)( const char *arg1, const char *arg2 )", 
                "declgen": "char * Function4a +len(30)(const char * arg1 +intent(in), const char * arg2 +intent(in))", 
                "format": {
                    "C_call_code": "char * SHT_rv =\t Function4a(\targ1,\t arg2);", 
                    "C_call_list": "arg1,\t arg2", 
                    "C_finalize_buf": "// Function4a allocates memory which must be released after it is copied\n// into the Fortran argument or else it will leak.\nfree({C_result});\n", 
                    "C_name": "Function4a", 
                    "C_prototype": "const char * arg1,\t const char * arg2", 
                    "C_return_code": "return SHT_rv;", 
                    "C_return_type": "char *", 
                    "F_C_call": "c_function4a_bufferify", 
                    "F_C_name": "c_function4a", 
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "arg1,\t arg2", 
                    "F_call_code": "call c_function4a_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "function4a", 
                    "F_name_generic": "function4a", 
                    "F_name_impl": "function4a", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_function4a", 
                    "c_const": "", 
                    "c_var_len": "30", 
                    "function_name": "Function4a", 
                    "underscore_name": "function4a"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 5, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SHT_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }, 
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg1", 
                            "c_var_trim": "Larg1", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "c_var_trim": "Larg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "cxx_deref": "->", 
                        "cxx_rv_decl": "char * SHT_rv", 
                        "cxx_var": "SHT_rv"
                    }
                }, 
                "_function_index": 6, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "len": "30"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "Function4a", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg1", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg2", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "char *Function4a+len(30)( const char *arg1, const char *arg2 )", 
                "declgen": "void Function4a +len(30)(const char * arg1 +intent(in)+len_trim(Larg1), const char * arg2 +intent(in)+len_trim(Larg2), char * SHF_rv +intent(out)+len(NSHF_rv))", 
                "format": {
                    "C_call_code": "char * SHT_rv =\t Function4a(\tSH_arg1,\t SH_arg2);", 
                    "C_call_list": "SH_arg1,\t SH_arg2", 
                    "C_finalize_buf": "// Function4a allocates memory which must be released after it is copied\n// into the Fortran argument or else it will leak.\nfree({C_result});\n", 
                    "C_name": "CLI_function4a_bufferify", 
                    "C_post_call": "free(SH_arg1);\nfree(SH_arg2);\nif (SHT_rv == NULL) {\n    memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv);\n}\n{\n    // C_finalize\n    // Function4a allocates memory which must be released after it is copied\n    // into the Fortran argument or else it will leak.\n    free(SHT_rv);\n    \n}", 
                    "C_pre_call": "char * SH_arg1 = (char *) malloc(Larg1 + 1);\nmemcpy(SH_arg1, arg1, Larg1);\nSH_arg1[Larg1] = '\\0';\nchar * SH_arg2 = (char *) malloc(Larg2 + 1);\nmemcpy(SH_arg2, arg2, Larg2);\nSH_arg2[Larg2] = '\\0';", 
                    "C_prototype": "const char * arg1,\t int Larg1,\t const char * arg2,\t int Larg2,\t char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_function4a_bufferify", 
                    "c_const": "", 
                    "function_name": "Function4a", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "function4a"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }
        ], 
        "language": "c", 
        "options": {
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_line_length": 72, 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_abstract_interface_argument_template": "arg{index}", 
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}", 
            "F_force_wrapper": false, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_line_length": 72, 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": false, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": true, 
            "doxygen": true, 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": false, 
            "wrap_python": true
        }
    }, 
    "typealias": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "integer(C_LONG_LONG)": "long_long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float", 
        "std::string": "string", 
        "std::vector": "vector"
    }, 
    "types": {
        "EnumTypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "i", 
            "c_to_cxx": "static_cast<EnumTypeID>({c_var})", 
            "c_type": "int", 
            "cxx_to_c": "static_cast<int>({cxx_var})", 
            "cxx_type": "EnumTypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cxx": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "i", 
            "c_type": "int", 
            "cxx_type": "TypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_inout": {
                    "ctor": [
                        "{py_var} = PyBool_FromLong({c_var});"
                    ], 
                    "post_parse": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "(int) {cxx_var}", 
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)", 
            "PY_format": "c", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyFloat_FromDouble({c_var})", 
            "PY_format": "d", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyFloat_FromDouble({c_var})", 
            "PY_format": "f", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "i", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "l", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromSize_t({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "{cxx_var}{cxx_deref}c_str()", 
            "PY_ctor": "PyString_FromString({cxx_var}{cxx_deref}c_str())", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "object", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cxx_local_var": "object", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "object", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "object", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "object", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "object", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}{cxx_deref}empty()) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}{cxx_deref}c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "object", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "object", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_out": {
                    "cxx_local_var": "object", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        }, 
        "vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "object", 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "object", 
                    "post_call": [
                        "{{", 
                        "    std::vector<{cxx_T}>::size_type", 
                        "        {c_temp}i = 0,", 
                        "        {c_temp}n = {c_var_size};", 
                        "    {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "          {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "    }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "object", 
                    "post_call": [
                        "{{", 
                        "    std::vector<{cxx_T}>::size_type", 
                        "        {c_temp}i = 0,", 
                        "        {c_temp}n = {c_var_size};", 
                        "    {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "        {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "    }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "object", 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "      {c_const}char * BBB = {c_var};", 
                            "      std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cxx_local_var": "object", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "    {c_const}char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "object", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            }, 
            "cxx_header": "<vector>", 
            "cxx_type": "std::vector<{cxx_T}>"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}