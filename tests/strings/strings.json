{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.", 
    "library": {
        "copyright": [
            "#######################################################################", 
            "Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.", 
            "Produced at the Lawrence Livermore National Laboratory", 
            "", 
            "LLNL-CODE-738041.", 
            "All rights reserved.", 
            "", 
            "This file is part of Shroud.  For details, see", 
            "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
            "", 
            "Redistribution and use in source and binary forms, with or without", 
            "modification, are permitted provided that the following conditions are", 
            "met:", 
            "", 
            "* Redistributions of source code must retain the above copyright", 
            "  notice, this list of conditions and the disclaimer below.", 
            "", 
            "* Redistributions in binary form must reproduce the above copyright", 
            "  notice, this list of conditions and the disclaimer (as noted below)", 
            "  in the documentation and/or other materials provided with the", 
            "  distribution.", 
            "", 
            "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
            "  may be used to endorse or promote products derived from this", 
            "  software without specific prior written permission.", 
            "", 
            "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
            "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
            "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
            "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
            "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
            "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
            "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
            "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
            "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
            "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
            "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
            "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "", 
            "#######################################################################"
        ], 
        "cxx_header": "strings.hpp", 
        "format": {
            "CXX_local": "SHCXX_", 
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "", 
            "C_argument": "SH_", 
            "C_bufferify_suffix": "_bufferify", 
            "C_custom_return_type": "", 
            "C_header_filename": "wrapstrings.h", 
            "C_header_filename_suffix": "h", 
            "C_impl_filename": "wrapstrings.cpp", 
            "C_impl_filename_suffix": "cpp", 
            "C_local": "SHC_", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "STR_", 
            "C_result": "rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_derived_member": "voidptr", 
            "F_filename_suffix": "f", 
            "F_impl_filename": "wrapfstrings.f", 
            "F_module_name": "strings_mod", 
            "F_name_associated": "associated", 
            "F_name_instance_get": "get_instance", 
            "F_name_instance_set": "set_instance", 
            "F_pointer": "SHT_ptr", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename_suffix": "hpp", 
            "LUA_impl_filename_suffix": "cpp", 
            "LUA_prefix": "l_", 
            "LUA_result": "rv", 
            "LUA_state_var": "L", 
            "LUA_this_call": "", 
            "PY_PyObject": "PyObject", 
            "PY_extern_C_begin": "extern \"C\" ", 
            "PY_header_filename": "pystringsmodule.hpp", 
            "PY_header_filename_suffix": "hpp", 
            "PY_helper_filename": "pystringshelper.cpp", 
            "PY_impl_filename_suffix": "cpp", 
            "PY_library_doc": "library documentation", 
            "PY_module_filename": "pystringsmodule.cpp", 
            "PY_module_name": "strings", 
            "PY_obj": "obj", 
            "PY_param_args": "args", 
            "PY_param_kwds": "kwds", 
            "PY_param_self": "self", 
            "PY_prefix": "PY_", 
            "PY_result": "SHTPy_rv", 
            "PY_this_call": "", 
            "PY_used_param_args": false, 
            "PY_used_param_kwds": false, 
            "PY_used_param_self": false, 
            "YAML_type_filename": "strings_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "class_scope": "", 
            "cxx_class": "", 
            "function_suffix": "", 
            "library": "strings", 
            "library_lower": "strings", 
            "library_upper": "STRINGS", 
            "namespace_scope": "", 
            "stdlib": "std::"
        }, 
        "functions": [
            {
                "_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "status", 
                            "cxx_deref": ".", 
                            "cxx_type": "char", 
                            "cxx_var": "status"
                        }, 
                        "fmtf": {
                            "c_var": "status", 
                            "f_var": "status"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "char status", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "status", 
                            "cxx_addr": "&", 
                            "cxx_decl": "char status", 
                            "cxx_deref": ".", 
                            "cxx_type": "char", 
                            "cxx_var": "status", 
                            "py_var": "SHPy_status"
                        }
                    }
                }, 
                "_function_index": 0, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "passChar", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char_scalar", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "status", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "char_scalar"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void passChar(char status)", 
                "declgen": "void passChar(char_scalar status +intent(in)+value)", 
                "doxygen": {
                    "brief": "pass a single char argument as a scalar."
                }, 
                "format": {
                    "C_call_code": "passChar(\tstatus);", 
                    "C_call_list": "status", 
                    "C_name": "STR_pass_char", 
                    "C_prototype": "char status", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_pass_char", 
                    "F_C_name": "pass_char", 
                    "F_arg_c_call": "status", 
                    "F_arguments": "status", 
                    "F_call_code": "call c_pass_char(status)", 
                    "F_name_function": "pass_char", 
                    "F_name_generic": "pass_char", 
                    "F_name_impl": "pass_char", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_passChar", 
                    "c_const": "", 
                    "function_name": "passChar", 
                    "underscore_name": "pass_char"
                }, 
                "options": {}
            }, 
            {
                "_PTR_F_C_index": 29, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 1, 
                "ast": {
                    "attrs": {
                        "_typename": "char_scalar"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "returnChar", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "char_scalar"
                    ]
                }, 
                "decl": "char returnChar()", 
                "declgen": "char_scalar returnChar()", 
                "doxygen": {
                    "brief": "return a char argument (non-pointer)"
                }, 
                "format": {
                    "C_call_code": "char SHC_rv =\t returnChar(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_return_char", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "char", 
                    "F_C_call": "c_return_char_bufferify", 
                    "F_C_name": "c_return_char", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_return_char_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "return_char", 
                    "F_name_generic": "return_char", 
                    "F_name_impl": "return_char", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_returnChar", 
                    "c_const": "", 
                    "cxx_rv_decl": "char SHC_rv", 
                    "function_name": "returnChar", 
                    "underscore_name": "return_char"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 1, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "char", 
                            "cxx_var": "SHC_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 29, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "returnChar", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "char_scalar", 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char_scalar"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "char returnChar()", 
                "declgen": "void returnChar(char_scalar * SHF_rv +intent(out)+len(NSHF_rv))", 
                "doxygen": {
                    "brief": "return a char argument (non-pointer)"
                }, 
                "format": {
                    "C_call_code": "char SHC_rv =\t returnChar(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_return_char_bufferify", 
                    "C_post_call": "std::memset(SHF_rv, ' ', NSHF_rv);\nSHF_rv[0] = SHC_rv;", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_return_char_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "char SHC_rv", 
                    "function_name": "returnChar", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "return_char"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 30, 
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "dest", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "dest"
                        }
                    }, 
                    "src": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "src", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "src"
                        }
                    }
                }, 
                "_function_index": 2, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "passCharPtr", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "dest", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "src", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void passCharPtr(char * dest+intent(out), const char *src)", 
                "declgen": "void passCharPtr(char * dest +intent(out), const char * src +intent(in))", 
                "doxygen": {
                    "brief": "strcpy like behavior", 
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\n"
                }, 
                "format": {
                    "C_call_code": "passCharPtr(\tdest,\t src);", 
                    "C_call_list": "dest,\t src", 
                    "C_name": "STR_pass_char_ptr", 
                    "C_prototype": "char * dest,\t const char * src", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_pass_char_ptr_bufferify", 
                    "F_C_name": "c_pass_char_ptr", 
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT)", 
                    "F_arguments": "dest,\t src", 
                    "F_call_code": "call c_pass_char_ptr_bufferify(dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT))", 
                    "F_name_function": "pass_char_ptr", 
                    "F_name_generic": "pass_char_ptr", 
                    "F_name_impl": "pass_char_ptr", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "passCharPtr", 
                    "underscore_name": "pass_char_ptr"
                }, 
                "options": {
                    "wrap_Lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 2, 
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "dest", 
                            "c_var_len": "Ndest", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_dest"
                        }, 
                        "fmtf": {
                            "c_var": "dest", 
                            "f_var": "dest"
                        }
                    }, 
                    "src": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "src", 
                            "c_var_trim": "Lsrc", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_src"
                        }, 
                        "fmtf": {
                            "c_var": "src", 
                            "f_var": "src"
                        }
                    }
                }, 
                "_function_index": 30, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "passCharPtr", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "Ndest", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "dest", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "in", 
                                "len_trim": "Lsrc", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "src", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void passCharPtr(char * dest+intent(out), const char *src)", 
                "declgen": "void passCharPtr(char * dest +intent(out)+len(Ndest), const char * src +intent(in)+len_trim(Lsrc))", 
                "doxygen": {
                    "brief": "strcpy like behavior", 
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\n"
                }, 
                "format": {
                    "C_call_code": "passCharPtr(\tSH_dest,\t SH_src);", 
                    "C_call_list": "SH_dest,\t SH_src", 
                    "C_name": "STR_pass_char_ptr_bufferify", 
                    "C_post_call": "ShroudStrCopy(dest, Ndest, SH_dest);\nfree(SH_dest);\nfree(SH_src);", 
                    "C_pre_call": "char * SH_dest = (char *) malloc(Ndest + 1);\nchar * SH_src = (char *) malloc(Lsrc + 1);\nstd::memcpy(SH_src, src, Lsrc);\nSH_src[Lsrc] = '\\0';", 
                    "C_prototype": "char * dest,\t int Ndest,\t const char * src,\t int Lsrc", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_pass_char_ptr_bufferify", 
                    "c_const": "", 
                    "function_name": "passCharPtr", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "pass_char_ptr"
                }, 
                "options": {
                    "wrap_Lua": false, 
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 31, 
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "s", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "s"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "char * s", 
                            "c_ptr": " *", 
                            "c_type": "char", 
                            "c_var": "s", 
                            "cxx_addr": "", 
                            "cxx_decl": "char * s", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "s", 
                            "py_var": "SHPy_s"
                        }
                    }
                }, 
                "_function_index": 3, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "passCharPtrInOut", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "s", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void passCharPtrInOut(char * s+intent(inout))", 
                "declgen": "void passCharPtrInOut(char * s +intent(inout))", 
                "doxygen": {
                    "brief": "toupper", 
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                }, 
                "format": {
                    "C_call_code": "passCharPtrInOut(\ts);", 
                    "C_call_list": "s", 
                    "C_name": "STR_pass_char_ptr_in_out", 
                    "C_prototype": "char * s", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_pass_char_ptr_in_out_bufferify", 
                    "F_C_name": "c_pass_char_ptr_in_out", 
                    "F_arg_c_call": "s,\t len_trim(s, kind=C_INT),\t len(s, kind=C_INT)", 
                    "F_arguments": "s", 
                    "F_call_code": "call c_pass_char_ptr_in_out_bufferify(s,\t len_trim(s, kind=C_INT),\t len(s, kind=C_INT))", 
                    "F_name_function": "pass_char_ptr_in_out", 
                    "F_name_generic": "pass_char_ptr_in_out", 
                    "F_name_impl": "pass_char_ptr_in_out", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_passCharPtrInOut", 
                    "c_const": "", 
                    "function_name": "passCharPtrInOut", 
                    "underscore_name": "pass_char_ptr_in_out"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 3, 
                "_fmtargs": {
                    "s": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "s", 
                            "c_var_len": "Ns", 
                            "c_var_trim": "Ls", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_s"
                        }, 
                        "fmtf": {
                            "c_var": "s", 
                            "f_var": "s"
                        }
                    }
                }, 
                "_function_index": 31, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "passCharPtrInOut", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "inout", 
                                "len": "Ns", 
                                "len_trim": "Ls", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "s", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void passCharPtrInOut(char * s+intent(inout))", 
                "declgen": "void passCharPtrInOut(char * s +intent(inout)+len(Ns)+len_trim(Ls))", 
                "doxygen": {
                    "brief": "toupper", 
                    "description": "Change a string in-place.\nFor Python, return a new string since strings are immutable.\n"
                }, 
                "format": {
                    "C_call_code": "passCharPtrInOut(\tSH_s);", 
                    "C_call_list": "SH_s", 
                    "C_name": "STR_pass_char_ptr_in_out_bufferify", 
                    "C_post_call": "ShroudStrCopy(s, Ns, SH_s);\nfree(SH_s);", 
                    "C_pre_call": "char * SH_s = (char *) malloc(Ns + 1);\nstd::memcpy(SH_s, s, Ls);\nSH_s[Ls] = '\\0';", 
                    "C_prototype": "char * s,\t int Ls,\t int Ns", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_pass_char_ptr_in_out_bufferify", 
                    "c_const": "", 
                    "function_name": "passCharPtrInOut", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "pass_char_ptr_in_out"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 4, 
                "ast": {
                    "attrs": {
                        "_typename": "char", 
                        "pure": true
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getCharPtr1", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "char"
                    ]
                }, 
                "decl": "const char * getCharPtr1()  +pure", 
                "declgen": "const char * getCharPtr1() +pure", 
                "doxygen": {
                    "brief": "return a 'const char *' as character(*)"
                }, 
                "format": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr1(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_char_ptr1", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_char_ptr1", 
                    "F_C_name": "c_get_char_ptr1", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = fstr_ptr(c_get_char_ptr1())", 
                    "F_name_function": "get_char_ptr1", 
                    "F_name_generic": "get_char_ptr1", 
                    "F_name_impl": "get_char_ptr1", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getCharPtr1", 
                    "c_const": "const ", 
                    "c_var_len": "strlen_ptr(\tc_get_char_ptr1(\t))", 
                    "cxx_rv_decl": "const char * SHC_rv", 
                    "function_name": "getCharPtr1", 
                    "underscore_name": "get_char_ptr1"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 4, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SHC_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 32, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "pure": true
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getCharPtr1", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "pure": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const char * getCharPtr1()  +pure", 
                "declgen": "void getCharPtr1(char * SHF_rv +intent(out)+len(NSHF_rv)+pure) +pure", 
                "doxygen": {
                    "brief": "return a 'const char *' as character(*)"
                }, 
                "format": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr1(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_char_ptr1_bufferify", 
                    "C_post_call": "if (SHC_rv == NULL) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHC_rv);\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_char_ptr1_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const char * SHC_rv", 
                    "function_name": "getCharPtr1", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_char_ptr1"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 33, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 5, 
                "ast": {
                    "attrs": {
                        "_typename": "char", 
                        "len": "30"
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getCharPtr2", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "char"
                    ]
                }, 
                "decl": "const char * getCharPtr2() +len(30)", 
                "declgen": "const char * getCharPtr2() +len(30)", 
                "doxygen": {
                    "brief": "return 'const char *' with fixed size (len=30)"
                }, 
                "format": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr2(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_char_ptr2", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_char_ptr2_bufferify", 
                    "F_C_name": "c_get_char_ptr2", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_char_ptr2_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "get_char_ptr2", 
                    "F_name_generic": "get_char_ptr2", 
                    "F_name_impl": "get_char_ptr2", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getCharPtr2", 
                    "c_const": "const ", 
                    "c_var_len": "30", 
                    "cxx_rv_decl": "const char * SHC_rv", 
                    "function_name": "getCharPtr2", 
                    "underscore_name": "get_char_ptr2"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 5, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SHC_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 33, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "len": "30"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getCharPtr2", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const char * getCharPtr2() +len(30)", 
                "declgen": "void getCharPtr2(char * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)", 
                "doxygen": {
                    "brief": "return 'const char *' with fixed size (len=30)"
                }, 
                "format": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr2(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_char_ptr2_bufferify", 
                    "C_post_call": "if (SHC_rv == NULL) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHC_rv);\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_char_ptr2_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const char * SHC_rv", 
                    "function_name": "getCharPtr2", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_char_ptr2"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 6, 
                "ast": {
                    "attrs": {
                        "_typename": "char"
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getCharPtr3", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "char"
                    ]
                }, 
                "decl": "const char * getCharPtr3()", 
                "declgen": "const char * getCharPtr3()", 
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                }, 
                "format": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr3(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_char_ptr3", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_name": "c_get_char_ptr3", 
                    "F_string_result_as_arg": "output", 
                    "PY_name_impl": "PY_getCharPtr3", 
                    "c_const": "const ", 
                    "cxx_rv_decl": "const char * SHC_rv", 
                    "function_name": "getCharPtr3", 
                    "underscore_name": "get_char_ptr3"
                }, 
                "options": {
                    "wrap_fortran": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 6, 
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "output", 
                            "c_var_len": "Noutput", 
                            "cxx_addr": "", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SHC_rv"
                        }, 
                        "fmtf": {
                            "c_var": "output", 
                            "f_var": "output"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 34, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getCharPtr3", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const char * getCharPtr3()", 
                "declgen": "void getCharPtr3(char * output +intent(out)+len(Noutput))", 
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                }, 
                "format": {
                    "C_call_code": "const char * SHC_rv =\t getCharPtr3(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_char_ptr3_bufferify", 
                    "C_post_call": "if (SHC_rv == NULL) {\n    std::memset(output, ' ', Noutput);\n} else {\n    ShroudStrCopy(output, Noutput, SHC_rv);\n}", 
                    "C_prototype": "char * output,\t int Noutput", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_char_ptr3_bufferify", 
                    "F_string_result_as_arg": "output", 
                    "c_const": "", 
                    "cxx_rv_decl": "const char * SHC_rv", 
                    "function_name": "getCharPtr3", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_char_ptr3"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 6, 
                "_PTR_F_C_index": 34, 
                "_function_index": 35, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getCharPtr3", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const char * getCharPtr3()", 
                "declgen": "void getCharPtr3(char * output +intent(out)+len(Noutput))", 
                "doxygen": {
                    "brief": "return a 'const char *' as argument"
                }, 
                "format": {
                    "F_C_call": "c_get_char_ptr3_bufferify", 
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)", 
                    "F_arguments": "output", 
                    "F_call_code": "call c_get_char_ptr3_bufferify(output,\t len(output, kind=C_INT))", 
                    "F_name_function": "get_char_ptr3", 
                    "F_name_generic": "get_char_ptr3", 
                    "F_name_impl": "get_char_ptr3", 
                    "F_string_result_as_arg": "output", 
                    "F_subprogram": "subroutine", 
                    "function_name": "getCharPtr3", 
                    "function_suffix": "", 
                    "underscore_name": "get_char_ptr3"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_F_C_index": 36, 
                "_fmtresult": {
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 7, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "len": 30
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringLen", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "string"
                    ]
                }, 
                "decl": "const string getConstStringLen() +len=30", 
                "declgen": "const string getConstStringLen() +len(30)", 
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                }, 
                "format": {
                    "F_C_call": "c_get_const_string_len_bufferify", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_len_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "get_const_string_len", 
                    "F_name_generic": "get_const_string_len", 
                    "F_name_impl": "get_const_string_len", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringLen", 
                    "c_var_len": "30", 
                    "function_name": "getConstStringLen", 
                    "underscore_name": "get_const_string_len"
                }, 
                "options": {
                    "wrap_c": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_C_CXX_index": 7, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 36, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "len": 30
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringLen", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string getConstStringLen() +len=30", 
                "declgen": "void getConstStringLen(string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)", 
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                }, 
                "format": {
                    "C_call_code": "const std::string SHCXX_rv =\t getConstStringLen(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_len_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_len_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string SHCXX_rv", 
                    "function_name": "getConstStringLen", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_len"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_fmtresult": {
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 8, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string"
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringAsArg", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "string"
                    ]
                }, 
                "decl": "const string getConstStringAsArg()", 
                "declgen": "const string getConstStringAsArg()", 
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                }, 
                "format": {
                    "F_string_result_as_arg": "output", 
                    "PY_name_impl": "PY_getConstStringAsArg", 
                    "function_name": "getConstStringAsArg", 
                    "underscore_name": "get_const_string_as_arg"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_C_CXX_index": 8, 
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "output", 
                            "c_var_len": "Noutput", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "output", 
                            "f_var": "output"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 37, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringAsArg", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string getConstStringAsArg()", 
                "declgen": "void getConstStringAsArg(string * output +intent(out)+len(Noutput))", 
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                }, 
                "format": {
                    "C_call_code": "const std::string SHCXX_rv =\t getConstStringAsArg(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_as_arg_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(output, ' ', Noutput);\n} else {\n    ShroudStrCopy(output, Noutput, SHCXX_rv.c_str());\n}", 
                    "C_prototype": "char * output,\t int Noutput", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_as_arg_bufferify", 
                    "F_string_result_as_arg": "output", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string SHCXX_rv", 
                    "function_name": "getConstStringAsArg", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_as_arg"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_C_CXX_index": 8, 
                "_PTR_F_C_index": 37, 
                "_function_index": 38, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringAsArg", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string getConstStringAsArg()", 
                "declgen": "void getConstStringAsArg(string * output +intent(out)+len(Noutput))", 
                "doxygen": {
                    "brief": "return a 'const string' as argument"
                }, 
                "format": {
                    "F_C_call": "c_get_const_string_as_arg_bufferify", 
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)", 
                    "F_arguments": "output", 
                    "F_call_code": "call c_get_const_string_as_arg_bufferify(output,\t len(output, kind=C_INT))", 
                    "F_name_function": "get_const_string_as_arg", 
                    "F_name_generic": "get_const_string_as_arg", 
                    "F_name_impl": "get_const_string_as_arg", 
                    "F_string_result_as_arg": "output", 
                    "F_subprogram": "subroutine", 
                    "function_name": "getConstStringAsArg", 
                    "function_suffix": "", 
                    "underscore_name": "get_const_string_as_arg"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 39, 
                "_fmtresult": {
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 9, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "allocatable": true
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringAlloc", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "std::string"
                    ]
                }, 
                "decl": "const std::string getConstStringAlloc() +allocatable", 
                "declgen": "const std::string getConstStringAlloc() +allocatable", 
                "format": {
                    "F_C_call": "c_get_const_string_alloc_bufferify", 
                    "F_arg_c_call": "SHP_SHF_rv,\t NSHF_rv", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_alloc_bufferify(SHP_SHF_rv,\t NSHF_rv)", 
                    "F_name_function": "get_const_string_alloc", 
                    "F_name_generic": "get_const_string_alloc", 
                    "F_name_impl": "get_const_string_alloc", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringAlloc", 
                    "function_name": "getConstStringAlloc", 
                    "underscore_name": "get_const_string_alloc"
                }, 
                "options": {
                    "wrap_c": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 9, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "", 
                            "cxx_deref": "->", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_cptr": "SHP_SHF_rv", 
                            "f_var": "SHT_rv", 
                            "f_var_len": "NSHF_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 39, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "allocatable": true
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringAlloc", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "stringout", 
                                "intent": "out", 
                                "lenout": "NSHF_rv"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }, 
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "stringout"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string getConstStringAlloc() +allocatable", 
                "declgen": "void getConstStringAlloc(const stringout * * SHF_rv +intent(out)+lenout(NSHF_rv)) +allocatable", 
                "format": {
                    "C_call_code": "std::string * SHCXX_rv = new std::string;\n*SHCXX_rv = getConstStringAlloc(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_alloc_bufferify", 
                    "C_post_call": "*SHF_rv = SHCXX_rv;\n*NSHF_rv = SHCXX_rv->size();", 
                    "C_prototype": "const void * * SHF_rv,\t size_t *NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_alloc_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string SHCXX_rv", 
                    "function_name": "getConstStringAlloc", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_alloc"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv.c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 10, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "pure": true
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringRefPure", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "&"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "string"
                    ]
                }, 
                "decl": "const string& getConstStringRefPure()  +pure", 
                "declgen": "const string & getConstStringRefPure() +pure", 
                "doxygen": {
                    "brief": "return a 'const string&' as character(*)"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefPure(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_pure", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_const_string_ref_pure", 
                    "F_C_name": "c_get_const_string_ref_pure", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = fstr_ptr(c_get_const_string_ref_pure())", 
                    "F_name_function": "get_const_string_ref_pure", 
                    "F_name_generic": "get_const_string_ref_pure", 
                    "F_name_impl": "get_const_string_ref_pure", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringRefPure", 
                    "c_const": "const ", 
                    "c_var_len": "strlen_ptr(\tc_get_const_string_ref_pure(\t))", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefPure", 
                    "underscore_name": "get_const_string_ref_pure"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 10, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 40, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "pure": true
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringRefPure", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "pure": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string& getConstStringRefPure()  +pure", 
                "declgen": "void getConstStringRefPure(string & SHF_rv +intent(out)+len(NSHF_rv)+pure) +pure", 
                "doxygen": {
                    "brief": "return a 'const string&' as character(*)"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefPure(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_pure_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ref_pure_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefPure", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ref_pure"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_F_C_index": 41, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv.c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 11, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "len": 30
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringRefLen", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "&"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "string"
                    ]
                }, 
                "decl": "const string& getConstStringRefLen() +len=30", 
                "declgen": "const string & getConstStringRefLen() +len(30)", 
                "doxygen": {
                    "brief": "return 'const string&' with fixed size (len=30)"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLen(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_len", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                    "C_post_call_pattern": "// C_error_pattern\nif (SHCXX_rv.empty()) {\n    return NULL;\n}\n", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_const_string_ref_len_bufferify", 
                    "F_C_name": "c_get_const_string_ref_len", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_ref_len_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "get_const_string_ref_len", 
                    "F_name_generic": "get_const_string_ref_len", 
                    "F_name_impl": "get_const_string_ref_len", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringRefLen", 
                    "c_const": "const ", 
                    "c_var_len": "30", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefLen", 
                    "underscore_name": "get_const_string_ref_len"
                }, 
                "options": {}
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_C_CXX_index": 11, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 41, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "len": 30
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringRefLen", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string& getConstStringRefLen() +len=30", 
                "declgen": "void getConstStringRefLen(string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)", 
                "doxygen": {
                    "brief": "return 'const string&' with fixed size (len=30)"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLen(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_len_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ref_len_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefLen", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ref_len"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv.c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 12, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string"
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringRefAsArg", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "&"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "string"
                    ]
                }, 
                "decl": "const string& getConstStringRefAsArg()", 
                "declgen": "const string & getConstStringRefAsArg()", 
                "doxygen": {
                    "brief": "return a 'const string&' as argument"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAsArg(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_as_arg", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                    "C_post_call_pattern": "// C_error_pattern\nif (SHCXX_rv.empty()) {\n    return NULL;\n}\n", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_name": "c_get_const_string_ref_as_arg", 
                    "F_string_result_as_arg": "output", 
                    "PY_name_impl": "PY_getConstStringRefAsArg", 
                    "c_const": "const ", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefAsArg", 
                    "underscore_name": "get_const_string_ref_as_arg"
                }, 
                "options": {
                    "wrap_fortran": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_C_CXX_index": 12, 
                "_fmtargs": {
                    "output": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "output", 
                            "c_var_len": "Noutput", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "output", 
                            "f_var": "output"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 42, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringRefAsArg", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string& getConstStringRefAsArg()", 
                "declgen": "void getConstStringRefAsArg(string & output +intent(out)+len(Noutput))", 
                "doxygen": {
                    "brief": "return a 'const string&' as argument"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAsArg(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_as_arg_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(output, ' ', Noutput);\n} else {\n    ShroudStrCopy(output, Noutput, SHCXX_rv.c_str());\n}", 
                    "C_prototype": "char * output,\t int Noutput", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ref_as_arg_bufferify", 
                    "F_string_result_as_arg": "output", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefAsArg", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ref_as_arg"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_C_CXX_index": 12, 
                "_PTR_F_C_index": 42, 
                "_function_index": 43, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringRefAsArg", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string& getConstStringRefAsArg()", 
                "declgen": "void getConstStringRefAsArg(string & output +intent(out)+len(Noutput))", 
                "doxygen": {
                    "brief": "return a 'const string&' as argument"
                }, 
                "format": {
                    "F_C_call": "c_get_const_string_ref_as_arg_bufferify", 
                    "F_arg_c_call": "output,\t len(output, kind=C_INT)", 
                    "F_arguments": "output", 
                    "F_call_code": "call c_get_const_string_ref_as_arg_bufferify(output,\t len(output, kind=C_INT))", 
                    "F_name_function": "get_const_string_ref_as_arg", 
                    "F_name_generic": "get_const_string_ref_as_arg", 
                    "F_name_impl": "get_const_string_ref_as_arg", 
                    "F_string_result_as_arg": "output", 
                    "F_subprogram": "subroutine", 
                    "function_name": "getConstStringRefAsArg", 
                    "function_suffix": "", 
                    "underscore_name": "get_const_string_ref_as_arg"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_F_C_index": 44, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv.c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 13, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "len": 30
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringRefLenEmpty", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "&"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "string"
                    ]
                }, 
                "decl": "const string& getConstStringRefLenEmpty() +len=30", 
                "declgen": "const string & getConstStringRefLenEmpty() +len(30)", 
                "doxygen": {
                    "brief": "Test returning empty string reference"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLenEmpty(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_len_empty", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                    "C_post_call_pattern": "// C_error_pattern\nif (SHCXX_rv.empty()) {\n    return NULL;\n}\n", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_const_string_ref_len_empty_bufferify", 
                    "F_C_name": "c_get_const_string_ref_len_empty", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_ref_len_empty_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "get_const_string_ref_len_empty", 
                    "F_name_generic": "get_const_string_ref_len_empty", 
                    "F_name_impl": "get_const_string_ref_len_empty", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringRefLenEmpty", 
                    "c_const": "const ", 
                    "c_var_len": "30", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefLenEmpty", 
                    "underscore_name": "get_const_string_ref_len_empty"
                }, 
                "options": {}
            }, 
            {
                "C_error_pattern": "C_invalid_name", 
                "_PTR_C_CXX_index": 13, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 44, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "len": 30
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringRefLenEmpty", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string& getConstStringRefLenEmpty() +len=30", 
                "declgen": "void getConstStringRefLenEmpty(string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)", 
                "doxygen": {
                    "brief": "Test returning empty string reference"
                }, 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefLenEmpty(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_len_empty_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ref_len_empty_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefLenEmpty", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ref_len_empty"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 45, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv.c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 14, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "allocatable": true
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringRefAlloc", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "&"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "std::string"
                    ]
                }, 
                "decl": "const std::string& getConstStringRefAlloc() +allocatable", 
                "declgen": "const std::string & getConstStringRefAlloc() +allocatable", 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAlloc(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_alloc", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_const_string_ref_alloc_bufferify", 
                    "F_C_name": "c_get_const_string_ref_alloc", 
                    "F_arg_c_call": "SHP_SHF_rv,\t NSHF_rv", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_ref_alloc_bufferify(SHP_SHF_rv,\t NSHF_rv)", 
                    "F_name_function": "get_const_string_ref_alloc", 
                    "F_name_generic": "get_const_string_ref_alloc", 
                    "F_name_impl": "get_const_string_ref_alloc", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringRefAlloc", 
                    "c_const": "const ", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefAlloc", 
                    "underscore_name": "get_const_string_ref_alloc"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 14, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_cptr": "SHP_SHF_rv", 
                            "f_var": "SHT_rv", 
                            "f_var_len": "NSHF_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 45, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "allocatable": true
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringRefAlloc", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "stringout", 
                                "intent": "out", 
                                "lenout": "NSHF_rv"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }, 
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "stringout"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string& getConstStringRefAlloc() +allocatable", 
                "declgen": "void getConstStringRefAlloc(const stringout * * SHF_rv +intent(out)+lenout(NSHF_rv)) +allocatable", 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t getConstStringRefAlloc(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ref_alloc_bufferify", 
                    "C_post_call": "*SHF_rv = &SHCXX_rv;\n*NSHF_rv = SHCXX_rv.size();", 
                    "C_prototype": "const void * * SHF_rv,\t size_t *NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ref_alloc_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "getConstStringRefAlloc", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ref_alloc"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 46, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv->c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 15, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "len": 30
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringPtrLen", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "string"
                    ]
                }, 
                "decl": "const string * getConstStringPtrLen() +len=30", 
                "declgen": "const string * getConstStringPtrLen() +len(30)", 
                "doxygen": {
                    "brief": "return a 'const string *' as character(*)"
                }, 
                "format": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrLen(\t);", 
                    "C_call_list": "", 
                    "C_finalize_buf": "delete {cxx_var};", 
                    "C_name": "STR_get_const_string_ptr_len", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv->c_str();", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_const_string_ptr_len_bufferify", 
                    "F_C_name": "c_get_const_string_ptr_len", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_ptr_len_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "get_const_string_ptr_len", 
                    "F_name_generic": "get_const_string_ptr_len", 
                    "F_name_impl": "get_const_string_ptr_len", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringPtrLen", 
                    "c_const": "const ", 
                    "c_var_len": "30", 
                    "cxx_rv_decl": "const std::string * SHCXX_rv", 
                    "function_name": "getConstStringPtrLen", 
                    "underscore_name": "get_const_string_ptr_len"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 15, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "", 
                            "cxx_deref": "->", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 46, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "len": 30
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringPtrLen", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const string * getConstStringPtrLen() +len=30", 
                "declgen": "void getConstStringPtrLen(string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)", 
                "doxygen": {
                    "brief": "return a 'const string *' as character(*)"
                }, 
                "format": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrLen(\t);", 
                    "C_call_list": "", 
                    "C_finalize_buf": "delete {cxx_var};", 
                    "C_name": "STR_get_const_string_ptr_len_bufferify", 
                    "C_post_call": "if (SHCXX_rv->empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv->c_str());\n}\n{\n    // C_finalize\n    delete SHCXX_rv;\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ptr_len_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string * SHCXX_rv", 
                    "function_name": "getConstStringPtrLen", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ptr_len"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 47, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv->c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 16, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "allocatable": true
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringPtrAlloc", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "std::string"
                    ]
                }, 
                "decl": "const std::string * getConstStringPtrAlloc() +allocatable", 
                "declgen": "const std::string * getConstStringPtrAlloc() +allocatable", 
                "format": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrAlloc(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ptr_alloc", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv->c_str();", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_const_string_ptr_alloc_bufferify", 
                    "F_C_name": "c_get_const_string_ptr_alloc", 
                    "F_arg_c_call": "SHP_SHF_rv,\t NSHF_rv", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_ptr_alloc_bufferify(SHP_SHF_rv,\t NSHF_rv)", 
                    "F_name_function": "get_const_string_ptr_alloc", 
                    "F_name_generic": "get_const_string_ptr_alloc", 
                    "F_name_impl": "get_const_string_ptr_alloc", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringPtrAlloc", 
                    "c_const": "const ", 
                    "cxx_rv_decl": "const std::string * SHCXX_rv", 
                    "function_name": "getConstStringPtrAlloc", 
                    "underscore_name": "get_const_string_ptr_alloc"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 16, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "", 
                            "cxx_deref": "->", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_cptr": "SHP_SHF_rv", 
                            "f_var": "SHT_rv", 
                            "f_var_len": "NSHF_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 47, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "allocatable": true
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringPtrAlloc", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "stringout", 
                                "intent": "out", 
                                "lenout": "NSHF_rv"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }, 
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "stringout"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string * getConstStringPtrAlloc() +allocatable", 
                "declgen": "void getConstStringPtrAlloc(const stringout * * SHF_rv +intent(out)+lenout(NSHF_rv)) +allocatable", 
                "format": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrAlloc(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ptr_alloc_bufferify", 
                    "C_post_call": "*SHF_rv = SHCXX_rv;\n*NSHF_rv = SHCXX_rv->size();", 
                    "C_prototype": "const void * * SHF_rv,\t size_t *NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ptr_alloc_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string * SHCXX_rv", 
                    "function_name": "getConstStringPtrAlloc", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ptr_alloc"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 48, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv->c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 17, 
                "ast": {
                    "attrs": {
                        "_typename": "std::string", 
                        "allocatable": true
                    }, 
                    "const": true, 
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "std::string"
                    ]
                }, 
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +allocatable", 
                "declgen": "const std::string * getConstStringPtrOwnsAlloc() +allocatable", 
                "format": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrOwnsAlloc(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ptr_owns_alloc", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv->c_str();", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_get_const_string_ptr_owns_alloc_bufferify", 
                    "F_C_name": "c_get_const_string_ptr_owns_alloc", 
                    "F_arg_c_call": "SHP_SHF_rv,\t NSHF_rv", 
                    "F_arguments": "", 
                    "F_call_code": "call c_get_const_string_ptr_owns_alloc_bufferify(SHP_SHF_rv,\t NSHF_rv)", 
                    "F_name_function": "get_const_string_ptr_owns_alloc", 
                    "F_name_generic": "get_const_string_ptr_owns_alloc", 
                    "F_name_impl": "get_const_string_ptr_owns_alloc", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getConstStringPtrOwnsAlloc", 
                    "c_const": "const ", 
                    "cxx_rv_decl": "const std::string * SHCXX_rv", 
                    "function_name": "getConstStringPtrOwnsAlloc", 
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 17, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "", 
                            "cxx_deref": "->", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_cptr": "SHP_SHF_rv", 
                            "f_var": "SHT_rv", 
                            "f_var_len": "NSHF_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 48, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void", 
                        "allocatable": true
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getConstStringPtrOwnsAlloc", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "stringout", 
                                "intent": "out", 
                                "lenout": "NSHF_rv"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }, 
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "stringout"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string * getConstStringPtrOwnsAlloc() +allocatable", 
                "declgen": "void getConstStringPtrOwnsAlloc(const stringout * * SHF_rv +intent(out)+lenout(NSHF_rv)) +allocatable", 
                "format": {
                    "C_call_code": "const std::string * SHCXX_rv =\t getConstStringPtrOwnsAlloc(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_get_const_string_ptr_owns_alloc_bufferify", 
                    "C_post_call": "*SHF_rv = SHCXX_rv;\n*NSHF_rv = SHCXX_rv->size();", 
                    "C_prototype": "const void * * SHF_rv,\t size_t *NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_get_const_string_ptr_owns_alloc_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string * SHCXX_rv", 
                    "function_name": "getConstStringPtrOwnsAlloc", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "get_const_string_ptr_owns_alloc"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 49, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * arg1", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }
                }, 
                "_function_index": 18, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringConstReference", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringConstReference(const std::string & arg1)", 
                "declgen": "void acceptStringConstReference(const std::string & arg1 +intent(in))", 
                "doxygen": {
                    "brief": "Accept a const string reference", 
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                }, 
                "format": {
                    "C_call_code": "acceptStringConstReference(\tSH_arg1);", 
                    "C_call_list": "SH_arg1", 
                    "C_name": "STR_accept_string_const_reference", 
                    "C_pre_call": "const std::string SH_arg1(arg1);", 
                    "C_prototype": "const char * arg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_accept_string_const_reference_bufferify", 
                    "F_C_name": "c_accept_string_const_reference", 
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT)", 
                    "F_arguments": "arg1", 
                    "F_call_code": "call c_accept_string_const_reference_bufferify(arg1,\t len_trim(arg1, kind=C_INT))", 
                    "F_name_function": "accept_string_const_reference", 
                    "F_name_generic": "accept_string_const_reference", 
                    "F_name_impl": "accept_string_const_reference", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_acceptStringConstReference", 
                    "c_const": "", 
                    "function_name": "acceptStringConstReference", 
                    "underscore_name": "accept_string_const_reference"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 18, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "c_var_trim": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }
                }, 
                "_function_index": 49, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringConstReference", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "len_trim": "Larg1", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringConstReference(const std::string & arg1)", 
                "declgen": "void acceptStringConstReference(const std::string & arg1 +intent(in)+len_trim(Larg1))", 
                "doxygen": {
                    "brief": "Accept a const string reference", 
                    "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
                }, 
                "format": {
                    "C_call_code": "acceptStringConstReference(\tSH_arg1);", 
                    "C_call_list": "SH_arg1", 
                    "C_name": "STR_accept_string_const_reference_bufferify", 
                    "C_pre_call": "const std::string SH_arg1(arg1, Larg1);", 
                    "C_prototype": "const char * arg1,\t int Larg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_accept_string_const_reference_bufferify", 
                    "c_const": "", 
                    "function_name": "acceptStringConstReference", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "accept_string_const_reference"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 50, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "char * arg1", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "std::string & arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }
                }, 
                "_function_index": 19, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringReferenceOut", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))", 
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out))", 
                "doxygen": {
                    "brief": "Accept a string reference", 
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                }, 
                "format": {
                    "C_call_code": "acceptStringReferenceOut(\tSH_arg1);", 
                    "C_call_list": "SH_arg1", 
                    "C_name": "STR_accept_string_reference_out", 
                    "C_post_call": "strcpy(arg1, SH_arg1.c_str());", 
                    "C_pre_call": "std::string SH_arg1;", 
                    "C_prototype": "char * arg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_accept_string_reference_out_bufferify", 
                    "F_C_name": "c_accept_string_reference_out", 
                    "F_arg_c_call": "arg1,\t len(arg1, kind=C_INT)", 
                    "F_arguments": "arg1", 
                    "F_call_code": "call c_accept_string_reference_out_bufferify(arg1,\t len(arg1, kind=C_INT))", 
                    "F_name_function": "accept_string_reference_out", 
                    "F_name_generic": "accept_string_reference_out", 
                    "F_name_impl": "accept_string_reference_out", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_acceptStringReferenceOut", 
                    "c_const": "", 
                    "function_name": "acceptStringReferenceOut", 
                    "underscore_name": "accept_string_reference_out"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 19, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "c_var_len": "Narg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }
                }, 
                "_function_index": 50, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringReferenceOut", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "out", 
                                "len": "Narg1", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringReferenceOut(std::string & arg1+intent(out))", 
                "declgen": "void acceptStringReferenceOut(std::string & arg1 +intent(out)+len(Narg1))", 
                "doxygen": {
                    "brief": "Accept a string reference", 
                    "description": "Set out to a constant string.\narg1 is intent(OUT)\nMust copy out.\n"
                }, 
                "format": {
                    "C_call_code": "acceptStringReferenceOut(\tSH_arg1);", 
                    "C_call_list": "SH_arg1", 
                    "C_name": "STR_accept_string_reference_out_bufferify", 
                    "C_post_call": "ShroudStrCopy(arg1, Narg1, SH_arg1.c_str());", 
                    "C_pre_call": "std::string SH_arg1;", 
                    "C_prototype": "char * arg1,\t int Narg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_accept_string_reference_out_bufferify", 
                    "c_const": "", 
                    "function_name": "acceptStringReferenceOut", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "accept_string_reference_out"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 51, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "char * arg1", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "std::string & arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }
                }, 
                "_function_index": 20, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringReference", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringReference(std::string & arg1)", 
                "declgen": "void acceptStringReference(std::string & arg1 +intent(inout))", 
                "doxygen": {
                    "brief": "Accept a string reference", 
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                }, 
                "format": {
                    "C_call_code": "acceptStringReference(\tSH_arg1);", 
                    "C_call_list": "SH_arg1", 
                    "C_name": "STR_accept_string_reference", 
                    "C_post_call": "strcpy(arg1, SH_arg1.c_str());", 
                    "C_pre_call": "std::string SH_arg1(arg1);", 
                    "C_prototype": "char * arg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_accept_string_reference_bufferify", 
                    "F_C_name": "c_accept_string_reference", 
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT)", 
                    "F_arguments": "arg1", 
                    "F_call_code": "call c_accept_string_reference_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT))", 
                    "F_name_function": "accept_string_reference", 
                    "F_name_generic": "accept_string_reference", 
                    "F_name_impl": "accept_string_reference", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_acceptStringReference", 
                    "c_const": "", 
                    "function_name": "acceptStringReference", 
                    "underscore_name": "accept_string_reference"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 20, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "c_var_len": "Narg1", 
                            "c_var_trim": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }
                }, 
                "_function_index": 51, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringReference", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "inout", 
                                "len": "Narg1", 
                                "len_trim": "Larg1", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringReference(std::string & arg1)", 
                "declgen": "void acceptStringReference(std::string & arg1 +intent(inout)+len(Narg1)+len_trim(Larg1))", 
                "doxygen": {
                    "brief": "Accept a string reference", 
                    "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
                }, 
                "format": {
                    "C_call_code": "acceptStringReference(\tSH_arg1);", 
                    "C_call_list": "SH_arg1", 
                    "C_name": "STR_accept_string_reference_bufferify", 
                    "C_post_call": "ShroudStrCopy(arg1, Narg1,\t SH_arg1.c_str());", 
                    "C_pre_call": "std::string SH_arg1(arg1, Larg1);", 
                    "C_prototype": "char * arg1,\t int Larg1,\t int Narg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_accept_string_reference_bufferify", 
                    "c_const": "", 
                    "function_name": "acceptStringReference", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "accept_string_reference"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 52, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "char * arg1", 
                            "c_ptr": " *", 
                            "c_type": "char", 
                            "c_var": "arg1", 
                            "cxx_addr": "", 
                            "cxx_decl": "std::string * arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }
                }, 
                "_function_index": 21, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringPointer", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringPointer(std::string * arg1)", 
                "declgen": "void acceptStringPointer(std::string * arg1 +intent(inout))", 
                "doxygen": {
                    "brief": "Accept a string pointer"
                }, 
                "format": {
                    "C_call_code": "acceptStringPointer(\t&SH_arg1);", 
                    "C_call_list": "&SH_arg1", 
                    "C_name": "STR_accept_string_pointer", 
                    "C_post_call": "strcpy(arg1, SH_arg1.c_str());", 
                    "C_pre_call": "std::string SH_arg1(arg1);", 
                    "C_prototype": "char * arg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_accept_string_pointer_bufferify", 
                    "F_C_name": "c_accept_string_pointer", 
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT)", 
                    "F_arguments": "arg1", 
                    "F_call_code": "call c_accept_string_pointer_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t len(arg1, kind=C_INT))", 
                    "F_name_function": "accept_string_pointer", 
                    "F_name_generic": "accept_string_pointer", 
                    "F_name_impl": "accept_string_pointer", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_acceptStringPointer", 
                    "c_const": "", 
                    "function_name": "acceptStringPointer", 
                    "underscore_name": "accept_string_pointer"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 21, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "arg1", 
                            "c_var_len": "Narg1", 
                            "c_var_trim": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }
                }, 
                "_function_index": 52, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "acceptStringPointer", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "inout", 
                                "len": "Narg1", 
                                "len_trim": "Larg1", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void acceptStringPointer(std::string * arg1)", 
                "declgen": "void acceptStringPointer(std::string * arg1 +intent(inout)+len(Narg1)+len_trim(Larg1))", 
                "doxygen": {
                    "brief": "Accept a string pointer"
                }, 
                "format": {
                    "C_call_code": "acceptStringPointer(\t&SH_arg1);", 
                    "C_call_list": "&SH_arg1", 
                    "C_name": "STR_accept_string_pointer_bufferify", 
                    "C_post_call": "ShroudStrCopy(arg1, Narg1,\t SH_arg1.c_str());", 
                    "C_pre_call": "std::string SH_arg1(arg1, Larg1);", 
                    "C_prototype": "char * arg1,\t int Larg1,\t int Narg1", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_accept_string_pointer_bufferify", 
                    "c_const": "", 
                    "function_name": "acceptStringPointer", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "accept_string_pointer"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "char * arg1", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "std::string & arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "char * arg2", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_decl": "std::string & arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg2", 
                            "py_var": "SHPy_arg2"
                        }
                    }
                }, 
                "_function_index": 22, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "returnStrings", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "out"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "out"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))", 
                "declgen": "void returnStrings(std::string & arg1 +intent(out), std::string & arg2 +intent(out))", 
                "doxygen": {
                    "brief": "Test Python returning multiple std::string arguments."
                }, 
                "format": {
                    "PY_name_impl": "PY_returnStrings", 
                    "function_name": "returnStrings", 
                    "underscore_name": "return_strings"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false
                }
            }, 
            {
                "_function_index": 23, 
                "ast": {
                    "attrs": {
                        "_typename": "char"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "returnMany", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "out"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "char"
                    ]
                }, 
                "decl": "char returnMany(int *arg1 +intent(out))", 
                "declgen": "char returnMany(int * arg1 +intent(out))", 
                "doxygen": {
                    "description": "Test Py_BuildValue with multiple values.\n"
                }, 
                "format": {
                    "function_name": "returnMany", 
                    "underscore_name": "return_many"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 53, 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "name", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "name"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "char * name", 
                            "c_ptr": " *", 
                            "c_type": "char", 
                            "c_var": "name", 
                            "cxx_addr": "", 
                            "cxx_decl": "char * name", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "name", 
                            "py_var": "SHPy_name"
                        }
                    }
                }, 
                "_function_index": 24, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "explicit1", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "in", 
                                "len_trim": "AAlen", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))", 
                "declgen": "void explicit1(char * name +intent(in)+len_trim(AAlen))", 
                "format": {
                    "C_bufferify_suffix": "_BUFFER", 
                    "C_call_code": "explicit1(\tname);", 
                    "C_call_list": "name", 
                    "C_name": "STR_explicit1", 
                    "C_prototype": "char * name", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_explicit1_buffer", 
                    "F_C_name": "c_explicit1", 
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)", 
                    "F_arguments": "name", 
                    "F_call_code": "call c_explicit1_buffer(name,\t len_trim(name, kind=C_INT))", 
                    "F_name_function": "explicit1", 
                    "F_name_generic": "explicit1", 
                    "F_name_impl": "explicit1", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_explicit1", 
                    "c_const": "", 
                    "function_name": "explicit1", 
                    "underscore_name": "explicit1"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 24, 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "name", 
                            "c_var_trim": "AAlen", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtf": {
                            "c_var": "name", 
                            "f_var": "name"
                        }
                    }
                }, 
                "_function_index": 53, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "explicit1", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "in", 
                                "len_trim": "AAlen", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))", 
                "declgen": "void explicit1(char * name +intent(in)+len_trim(AAlen))", 
                "format": {
                    "C_bufferify_suffix": "_BUFFER", 
                    "C_call_code": "explicit1(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_name": "STR_explicit1_BUFFER", 
                    "C_post_call": "free(SH_name);", 
                    "C_pre_call": "char * SH_name = (char *) malloc(AAlen + 1);\nstd::memcpy(SH_name, name, AAlen);\nSH_name[AAlen] = '\\0';", 
                    "C_prototype": "char * name,\t int AAlen", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_explicit1_buffer", 
                    "c_const": "", 
                    "function_name": "explicit1", 
                    "function_suffix": "_BUFFER", 
                    "underscore_name": "explicit1"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 54, 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "name", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "name"
                        }
                    }
                }, 
                "_function_index": 25, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "explicit2", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "AAtrim", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))", 
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))", 
                "format": {
                    "C_call_code": "explicit2(\tname);", 
                    "C_call_list": "name", 
                    "C_name": "STR_explicit2", 
                    "C_prototype": "char * name", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_explicit2_bufferify", 
                    "F_C_name": "c_explicit2", 
                    "F_arg_c_call": "name,\t len(name, kind=C_INT)", 
                    "F_arguments": "name", 
                    "F_call_code": "call c_explicit2_bufferify(name,\t len(name, kind=C_INT))", 
                    "F_name_function": "explicit2", 
                    "F_name_generic": "explicit2", 
                    "F_name_impl": "explicit2", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "explicit2", 
                    "underscore_name": "explicit2"
                }, 
                "options": {
                    "wrap_Lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 25, 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "name", 
                            "c_var_len": "AAtrim", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtf": {
                            "c_var": "name", 
                            "f_var": "name"
                        }
                    }
                }, 
                "_function_index": 54, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "explicit2", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "AAtrim", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void explicit2(char * name+len(AAtrim)+intent(out))", 
                "declgen": "void explicit2(char * name +intent(out)+len(AAtrim))", 
                "format": {
                    "C_call_code": "explicit2(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_name": "STR_explicit2_bufferify", 
                    "C_post_call": "ShroudStrCopy(name, AAtrim, SH_name);\nfree(SH_name);", 
                    "C_pre_call": "char * SH_name = (char *) malloc(AAtrim + 1);", 
                    "C_prototype": "char * name,\t int AAtrim", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_explicit2_bufferify", 
                    "c_const": "", 
                    "function_name": "explicit2", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "explicit2"
                }, 
                "options": {
                    "wrap_Lua": false, 
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "status": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "status", 
                            "cxx_deref": ".", 
                            "cxx_type": "char", 
                            "cxx_var": "status"
                        }, 
                        "fmtf": {
                            "c_var": "status", 
                            "f_var": "status"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "char status", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "status", 
                            "cxx_addr": "&", 
                            "cxx_decl": "char status", 
                            "cxx_deref": ".", 
                            "cxx_type": "char", 
                            "cxx_var": "status", 
                            "py_var": "SHPy_status"
                        }
                    }
                }, 
                "_function_index": 26, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "CpassChar", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char_scalar", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "status", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "char_scalar"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void CpassChar(char status)", 
                "declgen": "void CpassChar(char_scalar status +intent(in)+value)", 
                "doxygen": {
                    "brief": "pass a single char argument as a scalar, extern \"C\""
                }, 
                "format": {
                    "C_call_code": "CpassChar(\tstatus);", 
                    "C_call_list": "status", 
                    "C_name": "CpassChar", 
                    "C_prototype": "char status", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_cpass_char", 
                    "F_C_name": "cpass_char", 
                    "F_arg_c_call": "status", 
                    "F_arguments": "status", 
                    "F_call_code": "call c_cpass_char(status)", 
                    "F_name_function": "cpass_char", 
                    "F_name_generic": "cpass_char", 
                    "F_name_impl": "cpass_char", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_CpassChar", 
                    "c_const": "", 
                    "function_name": "CpassChar", 
                    "underscore_name": "cpass_char"
                }, 
                "options": {
                    "C_extern_C": true
                }
            }, 
            {
                "_PTR_F_C_index": 55, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 27, 
                "ast": {
                    "attrs": {
                        "_typename": "char_scalar"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "CreturnChar", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "char_scalar"
                    ]
                }, 
                "decl": "char CreturnChar()", 
                "declgen": "char_scalar CreturnChar()", 
                "doxygen": {
                    "brief": "return a char argument (non-pointer), extern \"C\""
                }, 
                "format": {
                    "C_call_code": "char SHC_rv =\t CreturnChar(\t);", 
                    "C_call_list": "", 
                    "C_name": "CreturnChar", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "char", 
                    "F_C_call": "c_creturn_char_bufferify", 
                    "F_C_name": "c_creturn_char", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_creturn_char_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "creturn_char", 
                    "F_name_generic": "creturn_char", 
                    "F_name_impl": "creturn_char", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_CreturnChar", 
                    "c_const": "", 
                    "cxx_rv_decl": "char SHC_rv", 
                    "function_name": "CreturnChar", 
                    "underscore_name": "creturn_char"
                }, 
                "options": {
                    "C_extern_C": true
                }
            }, 
            {
                "_PTR_C_CXX_index": 27, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "char", 
                            "cxx_var": "SHC_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 55, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "CreturnChar", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "_typename": "char_scalar", 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char_scalar"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "char CreturnChar()", 
                "declgen": "void CreturnChar(char_scalar * SHF_rv +intent(out)+len(NSHF_rv))", 
                "doxygen": {
                    "brief": "return a char argument (non-pointer), extern \"C\""
                }, 
                "format": {
                    "C_call_code": "char SHC_rv =\t CreturnChar(\t);", 
                    "C_call_list": "", 
                    "C_name": "STR_creturn_char_bufferify", 
                    "C_post_call": "std::memset(SHF_rv, ' ', NSHF_rv);\nSHF_rv[0] = SHC_rv;", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_creturn_char_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "char SHC_rv", 
                    "function_name": "CreturnChar", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "creturn_char"
                }, 
                "options": {
                    "C_extern_C": true, 
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 56, 
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "dest", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "dest"
                        }
                    }, 
                    "src": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "src", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "src"
                        }
                    }
                }, 
                "_function_index": 28, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "CpassCharPtr", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "dest", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "src", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)", 
                "declgen": "void CpassCharPtr(char * dest +intent(out), const char * src +intent(in))", 
                "doxygen": {
                    "brief": "strcpy like behavior", 
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                }, 
                "format": {
                    "C_call_code": "CpassCharPtr(\tdest,\t src);", 
                    "C_call_list": "dest,\t src", 
                    "C_name": "CpassCharPtr", 
                    "C_prototype": "char * dest,\t const char * src", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_cpass_char_ptr_bufferify", 
                    "F_C_name": "c_cpass_char_ptr", 
                    "F_arg_c_call": "dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT)", 
                    "F_arguments": "dest,\t src", 
                    "F_call_code": "call c_cpass_char_ptr_bufferify(dest,\t len(dest, kind=C_INT),\t src,\t len_trim(src, kind=C_INT))", 
                    "F_name_function": "cpass_char_ptr", 
                    "F_name_generic": "cpass_char_ptr", 
                    "F_name_impl": "cpass_char_ptr", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "CpassCharPtr", 
                    "underscore_name": "cpass_char_ptr"
                }, 
                "options": {
                    "C_extern_C": true, 
                    "wrap_Lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 28, 
                "_fmtargs": {
                    "dest": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "dest", 
                            "c_var_len": "Ndest", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_dest"
                        }, 
                        "fmtf": {
                            "c_var": "dest", 
                            "f_var": "dest"
                        }
                    }, 
                    "src": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "src", 
                            "c_var_trim": "Lsrc", 
                            "cxx_deref": "->", 
                            "cxx_type": "char", 
                            "cxx_var": "SH_src"
                        }, 
                        "fmtf": {
                            "c_var": "src", 
                            "f_var": "src"
                        }
                    }
                }, 
                "_function_index": 56, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "CpassCharPtr", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "out", 
                                "len": "Ndest", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "dest", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "char", 
                                "intent": "in", 
                                "len_trim": "Lsrc", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "src", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "char"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void CpassCharPtr(char * dest+intent(out), const char *src)", 
                "declgen": "void CpassCharPtr(char * dest +intent(out)+len(Ndest), const char * src +intent(in)+len_trim(Lsrc))", 
                "doxygen": {
                    "brief": "strcpy like behavior", 
                    "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\nextern \"C\"\n"
                }, 
                "format": {
                    "C_call_code": "CpassCharPtr(\tSH_dest,\t SH_src);", 
                    "C_call_list": "SH_dest,\t SH_src", 
                    "C_name": "STR_cpass_char_ptr_bufferify", 
                    "C_post_call": "ShroudStrCopy(dest, Ndest, SH_dest);\nfree(SH_dest);\nfree(SH_src);", 
                    "C_pre_call": "char * SH_dest = (char *) malloc(Ndest + 1);\nchar * SH_src = (char *) malloc(Lsrc + 1);\nstd::memcpy(SH_src, src, Lsrc);\nSH_src[Lsrc] = '\\0';", 
                    "C_prototype": "char * dest,\t int Ndest,\t const char * src,\t int Lsrc", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_cpass_char_ptr_bufferify", 
                    "c_const": "", 
                    "function_name": "CpassCharPtr", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "cpass_char_ptr"
                }, 
                "options": {
                    "C_extern_C": true, 
                    "wrap_Lua": false, 
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }
        ], 
        "language": "c++", 
        "options": {
            "C_enum_member_template": "{enum_member_name}", 
            "C_enum_template": "{C_prefix}{class_prefix}{enum_name}", 
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_line_length": 72, 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_abstract_interface_argument_template": "arg{index}", 
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}", 
            "F_enum_member_template": "{class_prefix}{enum_lower}_{enum_member_lower}", 
            "F_force_wrapper": false, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_line_length": 72, 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": true, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_return_fortran_pointer": true, 
            "F_standard": 2003, 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter", 
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": true, 
            "doxygen": true, 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": false, 
            "wrap_python": true
        }
    }, 
    "typealias": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "integer(C_LONG_LONG)": "long_long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float"
    }, 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cxx": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_kind": "C_INT", 
            "f_type": "integer"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_kind": "C_BOOL", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_var});"
                    ], 
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "(int) {cxx_var}", 
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)", 
            "PY_format": "c", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyFloat_FromDouble({c_var})", 
            "PY_format": "d", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyFloat_FromDouble({c_var})", 
            "PY_format": "f", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "i", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "l", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_kind": "C_LONG_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromSize_t({c_var})", 
            "c_header": "<stddef.h>", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "{cxx_var}{cxx_deref}c_str()", 
            "PY_ctor": "PyString_FromString({cxx_var}{cxx_deref}c_str())", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}{cxx_deref}empty()) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}{cxx_deref}c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_out": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        }, 
        "std::vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{+", 
                        "std::vector<{cxx_T}>::size_type+", 
                        "{c_temp}i = 0,", 
                        "{c_temp}n = {c_var_size};", 
                        "-{c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+", 
                        "{c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "-}}", 
                        "-}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> {cxx_var}(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{", 
                        "    std::vector<{cxx_T}>::size_type", 
                        "        {c_temp}i = 0,", 
                        "        {c_temp}n = {c_var_size};", 
                        "    {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "        {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "    }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t {cxx_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "std::string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "      {c_const}char * BBB = {c_var};", 
                            "      std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "    {c_const}char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            }, 
            "cxx_header": "<vector>", 
            "cxx_type": "std::vector<{cxx_T}>"
        }, 
        "stringout": {
            "base": "string", 
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        " post_call intent_out_buf"
                    ], 
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "post_call": [
                        "*{c_var} = {cxx_addr}{cxx_var};", 
                        "*{c_var_len} = {cxx_var}{cxx_deref}size();"
                    ]
                }
            }, 
            "c_type": "void", 
            "cxx_header": "<string>", 
            "cxx_to_c": "static_cast<void *>({cxx_var})", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_statements": {
                "result_buf": {
                    "f_helper": "copy_string", 
                    "need_wrapper": true, 
                    "post_call": [
                        "allocate(character(len={f_var_len}, kind=C_CHAR):: {f_var})", 
                        "call SHROUD_string_copy_and_free({f_cptr}, {f_var})"
                    ]
                }
            }, 
            "f_type": "type(C_PTR)YY"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}