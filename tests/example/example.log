Read yaml example.yaml
Read splicer csplicer.c
Read splicer pysplicer.c
Read splicer fsplicer.f
Close userlibrary_types.yaml
class ExClass1
C method ExClass1()
C method ExClass1(const string * name +intent(in))
C method ExClass1(const string * name +intent(in)+len_trim(Lname))
C method ~ExClass1()
C method int incrementCount(int incr +intent(in)+value)
C method const string & getName +len(aa_exclass1_get_name_length({F_this}%{F_derived_member}))() const
C method void getName +len(aa_exclass1_get_name_length({F_this}%{F_derived_member}))(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C method int GetNameLength() const
C method const string & getNameErrorCheck() const
C method void getNameErrorCheck(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C method const string & getNameArg() const
C method void getNameArg(string & name +intent(out)+len(Nname)) const
C method ExClass2 * getRoot()
C method int getValue(int value +intent(in)+value)
C method long getValue(long value +intent(in)+value)
C method void * getAddr()
C method bool hasAddr(bool in +intent(in)+value)
C method void SplicerSpecial()
Close wrapExClass1.h
Close wrapExClass1.cpp
class ExClass2
C method ExClass2(const string * name +intent(in)+random(2))
C method ExClass2(const string * name +intent(in)+len_trim(Lname)+random(2))
C method ~ExClass2()
C method const string & getName +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))() const
C method void getName +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C method const string & getName2()
C method void getName2(string & SHF_rv +intent(out)+len(NSHF_rv))
C method string & getName3() const
C method void getName3(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C method string & getName4()
C method void getName4(string & SHF_rv +intent(out)+len(NSHF_rv))
C method int GetNameLength() const
C method ExClass1 * get_class1(const ExClass1 * in +intent(in)+value)
C method void * declare(TypeID type +intent(in)+value)
C method void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
C method void destroyall()
C method TypeID getTypeID() const
C method void setValue(int value +intent(in)+value)
C method void setValue(long value +intent(in)+value)
C method void setValue(float value +intent(in)+value)
C method void setValue(double value +intent(in)+value)
C method int getValue()
C method double getValue()
Close wrapExClass2.h
Close wrapExClass2.cpp
class ExClass3
C method void exfunc()
Close wrapExClass3.h
Close wrapExClass3.cpp
C function void local_function1()
C function bool isNameValid(const std::string & name +intent(in))
C function bool isNameValid(const std::string & name +intent(in)+len_trim(Lname))
C function bool isInitialized()
C function void checkBool(bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))
C function void test_names(const std::string & name +intent(in))
C function void test_names(const std::string & name +intent(in)+len_trim(Lname))
C function void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
C function void test_names(const std::string & name +intent(in)+len_trim(Lname), int flag +intent(in)+value)
C function void testoptional()
C function void testoptional(int i=1 +intent(in)+value)
C function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
C function size_t test_size_t()
C function void testmpi(MPI_Comm comm +intent(in)+value)
C function void testgroup1(DataGroup * grp +intent(in)+value)
C function void testgroup2(const DataGroup * grp +intent(in)+value)
C function void verlongfunctionname1(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
C function void verlongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
Close wrapUserLibrary.h
Close wrapUserLibrary.cpp
class ExClass1
C-interface, Fortran method ExClass1()
C-interface, Fortran method ExClass1(const string * name +intent(in))
C-interface method ExClass1(const string * name +intent(in)+len_trim(Lname))
C-interface, Fortran method ~ExClass1()
C-interface, Fortran method int incrementCount(int incr +intent(in)+value)
C-interface, Fortran method const string & getName +len(aa_exclass1_get_name_length({F_this}%{F_derived_member}))() const
C-interface method void getName +len(aa_exclass1_get_name_length({F_this}%{F_derived_member}))(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C-interface, Fortran method int GetNameLength() const
C-interface, Fortran method const string & getNameErrorCheck() const
C-interface method void getNameErrorCheck(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C-interface method const string & getNameArg() const
C-interface method void getNameArg(string & name +intent(out)+len(Nname)) const
Fortran method void getNameArg(string & name +intent(out)+len(Nname)) const
C-interface, Fortran method ExClass2 * getRoot()
C-interface, Fortran method int getValue(int value +intent(in)+value)
C-interface, Fortran method long getValue(long value +intent(in)+value)
C-interface, Fortran method void * getAddr()
C-interface, Fortran method bool hasAddr(bool in +intent(in)+value)
C-interface, Fortran method void SplicerSpecial()
Close wrapfExClass1.f
class ExClass2
C-interface, Fortran method ExClass2(const string * name +intent(in)+random(2))
C-interface method ExClass2(const string * name +intent(in)+len_trim(Lname)+random(2))
C-interface, Fortran method ~ExClass2()
C-interface, Fortran method const string & getName +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))() const
C-interface method void getName +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C-interface, Fortran method const string & getName2()
C-interface method void getName2(string & SHF_rv +intent(out)+len(NSHF_rv))
C-interface, Fortran method string & getName3() const
C-interface method void getName3(string & SHF_rv +intent(out)+len(NSHF_rv)) const
C-interface, Fortran method string & getName4()
C-interface method void getName4(string & SHF_rv +intent(out)+len(NSHF_rv))
C-interface, Fortran method int GetNameLength() const
C-interface, Fortran method ExClass1 * get_class1(const ExClass1 * in +intent(in)+value)
C-interface method void * declare(TypeID type +intent(in)+value)
Fortran method void * declare(TypeID type +intent(in)+value)
Fortran method void * declare(TypeID type +intent(in)+value)
C-interface method void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
Fortran method void * declare(TypeID type +intent(in)+value, int len=1 +intent(in)+value)
Fortran method void * declare(TypeID type +intent(in)+value, long len=1 +intent(in)+value)
C-interface, Fortran method void destroyall()
C-interface, Fortran method TypeID getTypeID() const
C-interface, Fortran method void setValue(int value +intent(in)+value)
C-interface, Fortran method void setValue(long value +intent(in)+value)
C-interface, Fortran method void setValue(float value +intent(in)+value)
C-interface, Fortran method void setValue(double value +intent(in)+value)
C-interface, Fortran method int getValue()
C-interface, Fortran method double getValue()
Close wrapfExClass2.f
class ExClass3
C-interface, Fortran method void exfunc()
Close wrapfExClass3.f
C-interface, Fortran function void local_function1()
C-interface, Fortran function bool isNameValid(const std::string & name +intent(in))
C-interface function bool isNameValid(const std::string & name +intent(in)+len_trim(Lname))
C-interface, Fortran function bool isInitialized()
C-interface, Fortran function void checkBool(bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))
C-interface, Fortran function void test_names(const std::string & name +intent(in))
C-interface function void test_names(const std::string & name +intent(in)+len_trim(Lname))
C-interface, Fortran function void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
C-interface function void test_names(const std::string & name +intent(in)+len_trim(Lname), int flag +intent(in)+value)
C-interface, Fortran function void testoptional()
C-interface, Fortran function void testoptional(int i=1 +intent(in)+value)
C-interface, Fortran function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
C-interface, Fortran function size_t test_size_t()
C-interface, Fortran function void testmpi(MPI_Comm comm +intent(in)+value)
C-interface, Fortran function void testgroup1(DataGroup * grp +intent(in)+value)
C-interface, Fortran function void testgroup2(const DataGroup * grp +intent(in)+value)
C-interface, Fortran function void verlongfunctionname1(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
C-interface, Fortran function void verlongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
Close wrapfuserlibrary.f
class ExClass1
Python method ExClass1(const string * name +intent(in))
Python method ~ExClass1()
Python method int incrementCount(int incr +intent(in)+value)
Python method const string & getName +len(aa_exclass1_get_name_length({F_this}%{F_derived_member}))() const
Python method int GetNameLength() const
Python method const string & getNameErrorCheck() const
Python method const string & getNameArg() const
Python method ExClass2 * getRoot()
Python method int getValue(int value +intent(in)+value)
Python method long getValue(long value +intent(in)+value)
Python method void * getAddr()
Python method bool hasAddr(bool in +intent(in)+value)
Python method void SplicerSpecial()
Close pyExClass1type.cpp
class ExClass2
Python method ExClass2(const string * name +intent(in)+random(2))
Python method ~ExClass2()
Python method const string & getName +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))() const
Python method const string & getName2()
Python method string & getName3() const
Python method string & getName4()
Python method int GetNameLength() const
Python method ExClass1 * get_class1(const ExClass1 * in +intent(in)+value)
Python method void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)
Python method void destroyall()
Python method TypeID getTypeID() const
Close pyExClass2type.cpp
Python function void local_function1()
Python function bool isNameValid(const std::string & name +intent(in))
Python function bool isInitialized()
Python function void checkBool(bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))
Python function void test_names(const std::string & name +intent(in))
Python function void test_names(const std::string & name +intent(in), int flag +intent(in)+value)
Python function void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)
Python function size_t test_size_t()
Python function void testmpi(MPI_Comm comm +intent(in)+value)
Python function void testgroup1(DataGroup * grp +intent(in)+value)
Python function void testgroup2(const DataGroup * grp +intent(in)+value)
Python function void verlongfunctionname1(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
Python function void verlongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)
Close pyUserLibrarymodule.hpp
Close pyUserLibrarymodule.cpp
Close pyUserLibraryhelper.cpp
