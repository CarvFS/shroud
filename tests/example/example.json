{
    "F_module_dependencies": [], 
    "classes": [
        {
            "cpp_header": "ExClass1.hpp", 
            "fmt": {
                "CPP_this_call": "SH_this->", 
                "C_header_filename": "wrapExClass1.h", 
                "C_impl_filename": "wrapExClass1.cpp", 
                "C_type_name": "AA_exclass1", 
                "F_derived_name": "exclass1", 
                "F_impl_filename": "wrapfExClass1.f", 
                "F_module_name": "exclass1_mod", 
                "PY_PyObject": "PP_ExClass1", 
                "PY_PyTypeObject": "PP_ExClass1_Type", 
                "PY_capsule_name": "PY_ExClass1_capsule_name", 
                "PY_from_object_func": "PP_ExClass1_from_Object", 
                "PY_to_object_func": "PP_ExClass1_to_Object", 
                "PY_type_filename": "pyExClass1type.cpp", 
                "class_lower": "exclass1", 
                "class_prefix": "exclass1_", 
                "class_upper": "EXCLASS1", 
                "cpp_class": "ExClass1"
            }, 
            "methods": [
                {
                    "_PTR_F_C_index": 13, 
                    "_decl": "ExClass1 * new(const string * name +intent(in)) +constructor", 
                    "_function_index": 0, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "ptr": true, 
                                "value": false
                            }, 
                            "const": true, 
                            "fmtc": {
                                "c_const": "const ", 
                                "c_ptr": " *", 
                                "c_var": "name", 
                                "cpp_type": "std::string", 
                                "cpp_var": "SH_name"
                            }, 
                            "init": null, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "decl": "ExClass1 *new ( const string *name ) +constructor", 
                    "doxygen": {
                        "brief": "constructor", 
                        "description": "longer description\nusually multiple lines\n", 
                        "return": "return new instance"
                    }, 
                    "fattrs": {
                        "constructor": true
                    }, 
                    "fmt": {
                        "C_call_code": "ExClass1 * SHT_rv = new ExClass1(SH_name);", 
                        "C_call_list": "SH_name", 
                        "C_name": "AA_exclass1_new", 
                        "C_pre_call": "const std::string SH_name(name);", 
                        "C_prototype": "const char * name", 
                        "C_return_code": "return static_cast<AA_exclass1 *>(static_cast<void *>(SHT_rv));", 
                        "C_return_type": "AA_exclass1 *", 
                        "F_C_call": "c_exclass1_new_bufferify", 
                        "F_C_name": "c_exclass1_new", 
                        "F_arg_c_call": "name, len_trim(name, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)", 
                        "F_arguments": "name", 
                        "F_call_code": "SHT_rv%voidptr = c_exclass1_new_bufferify(\tname\tlen_trim(name, kind=C_INT))", 
                        "F_name_function": "new", 
                        "F_name_generic": "new", 
                        "F_name_impl": "exclass1_new", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "c_const": "", 
                        "function_name": "new", 
                        "underscore_name": "new"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "ExClass1 * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "new", 
                        "type": "ExClass1"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 0, 
                    "_decl": "ExClass1 * new(const string * name +intent(in)+len_trim(Lname)) +constructor", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 13, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Lname", 
                                "ptr": true, 
                                "value": false
                            }, 
                            "const": true, 
                            "fmtc": {
                                "c_const": "const ", 
                                "c_ptr": " *", 
                                "c_var": "name", 
                                "c_var_trim": "Lname", 
                                "cpp_type": "std::string", 
                                "cpp_var": "SH_name"
                            }, 
                            "fmtf": {
                                "c_var": "name", 
                                "f_var": "name"
                            }, 
                            "init": null, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "decl": "ExClass1 *new ( const string *name ) +constructor", 
                    "doxygen": {
                        "brief": "constructor", 
                        "description": "longer description\nusually multiple lines\n", 
                        "return": "return new instance"
                    }, 
                    "fattrs": {
                        "constructor": true
                    }, 
                    "fmt": {
                        "C_call_code": "ExClass1 * SHT_rv = new ExClass1(SH_name);", 
                        "C_call_list": "SH_name", 
                        "C_name": "AA_exclass1_new_bufferify", 
                        "C_pre_call": "const std::string SH_name(name, Lname);", 
                        "C_prototype": "const char * name, int Lname", 
                        "C_return_code": "return static_cast<AA_exclass1 *>(static_cast<void *>(SHT_rv));", 
                        "C_return_type": "AA_exclass1 *", 
                        "F_C_name": "c_exclass1_new_bufferify", 
                        "c_const": "", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "ExClass1 * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "new", 
                        "type": "ExClass1"
                    }
                }, 
                {
                    "_decl": "void delete() +destructor", 
                    "_function_index": 1, 
                    "_subprogram": "subroutine", 
                    "args": [], 
                    "decl": "void delete() +destructor", 
                    "doxygen": {
                        "description": "longer description joined with previous line"
                    }, 
                    "fattrs": {
                        "destructor": true
                    }, 
                    "fmt": {
                        "C_call_code": "delete SH_this;", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_delete", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass1_delete", 
                        "F_C_name": "c_exclass1_delete", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass1_delete(\tobj%voidptr)", 
                        "F_name_function": "delete", 
                        "F_name_generic": "delete", 
                        "F_name_impl": "exclass1_delete", 
                        "F_subprogram": "subroutine", 
                        "PY_name_impl": "PP_exclass1_delete", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "delete", 
                        "underscore_name": "delete"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "delete", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "int incrementCount(int incr +intent(in)+value)", 
                    "_function_index": 2, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "incr", 
                                "cpp_type": "int", 
                                "cpp_var": "incr"
                            }, 
                            "fmtf": {
                                "c_var": "incr", 
                                "f_var": "incr"
                            }, 
                            "fmtpy": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "incr", 
                                "cpp_type": "int", 
                                "cpp_var": "incr", 
                                "py_var": "SH_Py_incr"
                            }, 
                            "init": null, 
                            "name": "incr", 
                            "type": "int"
                        }
                    ], 
                    "decl": "int incrementCount(int incr)", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "int SHT_rv = SH_this->incrementCount(incr);", 
                        "C_call_list": "incr", 
                        "C_name": "AA_exclass1_increment_count", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self, int incr", 
                        "C_return_code": "return SHT_rv;", 
                        "C_return_type": "int", 
                        "F_C_call": "c_exclass1_increment_count", 
                        "F_C_name": "c_exclass1_increment_count", 
                        "F_arg_c_call": "obj%voidptr, incr", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tincr", 
                        "F_arguments": "obj, incr", 
                        "F_call_code": "SHT_rv = c_exclass1_increment_count(\tobj%voidptr\tincr)", 
                        "F_name_function": "increment_count", 
                        "F_name_generic": "increment_count", 
                        "F_name_impl": "exclass1_increment_count", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_increment_count", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "incrementCount", 
                        "underscore_name": "increment_count"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "int SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "incrementCount", 
                        "type": "int"
                    }
                }, 
                {
                    "C_error_pattern": "C_invalid_name", 
                    "PY_error_pattern": "PY_invalid_name", 
                    "_PTR_F_C_index": 14, 
                    "_decl": "const string & getName() const", 
                    "_function_index": 3, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "const string& getName() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getName();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_name", 
                        "C_post_call_pattern": "// C_error_pattern\nif (! isNameValid(SHT_rv)) {\n    return NULL;\n}\n", 
                        "C_pre_call": "const ExClass1 *SH_this = static_cast<const ExClass1 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass1 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "const char *", 
                        "F_C_call": "c_exclass1_get_name_bufferify", 
                        "F_C_name": "c_exclass1_get_name", 
                        "F_arg_c_call": "obj%voidptr, SHT_rv, len(SHT_rv, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass1_get_name_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                        "F_name_function": "get_name", 
                        "F_name_generic": "get_name", 
                        "F_name_impl": "exclass1_get_name", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_get_name", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "c_var_len": "aa_exclass1_get_name_length(obj%voidptr)", 
                        "function_name": "getName", 
                        "underscore_name": "get_name"
                    }, 
                    "func_const": true, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "len": "aa_exclass1_get_name_length({F_this}%{F_derived_member})", 
                            "reference": true
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_rv_decl": "const char * XSHT_rv", 
                            "c_val": "SHT_rv.c_str()", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName", 
                        "type": "string"
                    }
                }, 
                {
                    "C_error_pattern": "C_invalid_name", 
                    "PY_error_pattern": "PY_invalid_name", 
                    "_PTR_C_CPP_index": 3, 
                    "_decl": "void getName(string & SHF_rv +intent(out)+len(NSHF_rv)) const", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 14, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "reference": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "SHF_rv", 
                                "c_var_len": "NSHF_rv", 
                                "cpp_type": "std::string", 
                                "cpp_val": "SHT_rv.c_str()", 
                                "cpp_var": "SHT_rv"
                            }, 
                            "fmtf": {
                                "c_var": "SHT_rv", 
                                "f_var": "SHT_rv"
                            }, 
                            "init": null, 
                            "name": "SHF_rv", 
                            "type": "string"
                        }
                    ], 
                    "decl": "const string& getName() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getName();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_name_bufferify", 
                        "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                        "C_pre_call": "const ExClass1 *SH_this = static_cast<const ExClass1 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass1 * self, char * SHF_rv, int NSHF_rv", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass1_get_name_bufferify", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": true, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "len": "aa_exclass1_get_name_length({F_this}%{F_derived_member})", 
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName", 
                        "type": "void"
                    }
                }, 
                {
                    "C_code": "{C_pre_call}\nreturn {CPP_this}->getName().length();\n", 
                    "_decl": "int GetNameLength() const", 
                    "_function_index": 4, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "int GetNameLength() const", 
                    "doxygen": {
                        "brief": "helper function for Fortran to get length of name."
                    }, 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_name_length", 
                        "C_pre_call": "const ExClass1 *SH_this = static_cast<const ExClass1 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass1 * self", 
                        "C_return_type": "int", 
                        "F_C_call": "c_exclass1_get_name_length", 
                        "F_C_name": "c_exclass1_get_name_length", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "SHT_rv = c_exclass1_get_name_length(\tobj%voidptr)", 
                        "F_name_function": "get_name_length", 
                        "F_name_generic": "get_name_length", 
                        "F_name_impl": "exclass1_get_name_length", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_get_name_length", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "GetNameLength", 
                        "underscore_name": "get_name_length"
                    }, 
                    "func_const": true, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "int SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "GetNameLength", 
                        "type": "int"
                    }
                }, 
                {
                    "_PTR_F_C_index": 15, 
                    "_decl": "const string & getNameErrorCheck() const", 
                    "_function_index": 5, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "const string& getNameErrorCheck() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getNameErrorCheck();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_name_error_check", 
                        "C_pre_call": "const ExClass1 *SH_this = static_cast<const ExClass1 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass1 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "const char *", 
                        "F_C_call": "c_exclass1_get_name_error_check_bufferify", 
                        "F_C_name": "c_exclass1_get_name_error_check", 
                        "F_arg_c_call": "obj%voidptr, SHT_rv, len(SHT_rv, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass1_get_name_error_check_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                        "F_name_function": "get_name_error_check", 
                        "F_name_generic": "get_name_error_check", 
                        "F_name_impl": "exclass1_get_name_error_check", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_get_name_error_check", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "c_var_len": "strlen_ptr(c_exclass1_get_name_error_check_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)))", 
                        "function_name": "getNameErrorCheck", 
                        "underscore_name": "get_name_error_check"
                    }, 
                    "func_const": true, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "reference": true
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_rv_decl": "const char * XSHT_rv", 
                            "c_val": "SHT_rv.c_str()", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getNameErrorCheck", 
                        "type": "string"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 5, 
                    "_decl": "void getNameErrorCheck(string & SHF_rv +intent(out)+len(NSHF_rv)) const", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 15, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "reference": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "SHF_rv", 
                                "c_var_len": "NSHF_rv", 
                                "cpp_type": "std::string", 
                                "cpp_val": "SHT_rv.c_str()", 
                                "cpp_var": "SHT_rv"
                            }, 
                            "fmtf": {
                                "c_var": "SHT_rv", 
                                "f_var": "SHT_rv"
                            }, 
                            "init": null, 
                            "name": "SHF_rv", 
                            "type": "string"
                        }
                    ], 
                    "decl": "const string& getNameErrorCheck() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getNameErrorCheck();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_name_error_check_bufferify", 
                        "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                        "C_pre_call": "const ExClass1 *SH_this = static_cast<const ExClass1 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass1 * self, char * SHF_rv, int NSHF_rv", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass1_get_name_error_check_bufferify", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": true, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getNameErrorCheck", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "const string & getNameArg() const", 
                    "_function_index": 6, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "const string& getNameArg() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getNameArg();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_name_arg", 
                        "C_pre_call": "const ExClass1 *SH_this = static_cast<const ExClass1 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass1 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "const char *", 
                        "F_C_name": "c_exclass1_get_name_arg", 
                        "F_string_result_as_arg": "name", 
                        "PY_name_impl": "PP_exclass1_get_name_arg", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "getNameArg", 
                        "underscore_name": "get_name_arg"
                    }, 
                    "func_const": true, 
                    "options": {
                        "F_string_result_as_arg": "name", 
                        "wrap_fortran": false
                    }, 
                    "result": {
                        "attrs": {
                            "reference": true
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_rv_decl": "const char * XSHT_rv", 
                            "c_val": "SHT_rv.c_str()", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getNameArg", 
                        "type": "string"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 6, 
                    "_decl": "void getNameArg(string & name +intent(out)+len(Nname)) const", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 16, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "Nname", 
                                "reference": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "name", 
                                "c_var_len": "Nname", 
                                "cpp_type": "std::string", 
                                "cpp_val": "SHT_rv.c_str()", 
                                "cpp_var": "SHT_rv"
                            }, 
                            "fmtf": {
                                "c_var": "name", 
                                "f_var": "name"
                            }, 
                            "init": null, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "decl": "const string& getNameArg() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getNameArg();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_name_arg_bufferify", 
                        "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(name, ' ', Nname);\n} else {\n  ShroudStrCopy(name, Nname, SHT_rv.c_str());\n}", 
                        "C_pre_call": "const ExClass1 *SH_this = static_cast<const ExClass1 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass1 * self, char * name, int Nname", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass1_get_name_arg_bufferify", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": true, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getNameArg", 
                        "type": "void"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 6, 
                    "_PTR_F_C_index": 16, 
                    "_decl": "void getNameArg(string & name +intent(out)+len(Nname)) const", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 17, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "Nname", 
                                "reference": true
                            }, 
                            "const": false, 
                            "init": null, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "decl": "const string& getNameArg() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "F_C_call": "c_exclass1_get_name_arg_bufferify", 
                        "F_arg_c_call": "obj%voidptr, name, len(name, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tname\tlen(name, kind=C_INT)", 
                        "F_arguments": "obj, name", 
                        "F_call_code": "call c_exclass1_get_name_arg_bufferify(\tobj%voidptr\tname\tlen(name, kind=C_INT))", 
                        "F_name_function": "get_name_arg", 
                        "F_name_generic": "get_name_arg", 
                        "F_name_impl": "exclass1_get_name_arg", 
                        "F_subprogram": "subroutine", 
                        "function_suffix": ""
                    }, 
                    "func_const": true, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "init": null, 
                        "name": "getNameArg", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "ExClass2 * getRoot()", 
                    "_function_index": 7, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "ExClass2 *getRoot()", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "ExClass2 * SHT_rv = SH_this->getRoot();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_root", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "AA_exclass2 *", 
                        "F_C_call": "c_exclass1_get_root", 
                        "F_C_name": "c_exclass1_get_root", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "SHT_rv%voidptr = c_exclass1_get_root(\tobj%voidptr)", 
                        "F_name_function": "get_root", 
                        "F_name_generic": "get_root", 
                        "F_name_impl": "exclass1_get_root", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_get_root", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "getRoot", 
                        "underscore_name": "get_root"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_rv_decl": "AA_exclass2 * XSHT_rv", 
                            "c_val": "static_cast<AA_exclass2 *>(static_cast<void *>(SHT_rv))", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "ExClass2 * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getRoot", 
                        "type": "ExClass2"
                    }
                }, 
                {
                    "_cpp_overload": [
                        8, 
                        9
                    ], 
                    "_decl": "int getValue(int value +intent(in)+value)", 
                    "_function_index": 8, 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "int", 
                                "cpp_var": "value"
                            }, 
                            "fmtf": {
                                "c_var": "value", 
                                "f_var": "value"
                            }, 
                            "fmtpy": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "int", 
                                "cpp_var": "value", 
                                "py_var": "SH_Py_value"
                            }, 
                            "init": null, 
                            "name": "value", 
                            "type": "int"
                        }
                    ], 
                    "decl": "int  getValue(int value)", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "int SHT_rv = SH_this->getValue(value);", 
                        "C_call_list": "value", 
                        "C_name": "AA_exclass1_get_value_from_int", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self, int value", 
                        "C_return_code": "return SHT_rv;", 
                        "C_return_type": "int", 
                        "F_C_call": "c_exclass1_get_value_from_int", 
                        "F_C_name": "c_exclass1_get_value_from_int", 
                        "F_arg_c_call": "obj%voidptr, value", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tvalue", 
                        "F_arguments": "obj, value", 
                        "F_call_code": "SHT_rv = c_exclass1_get_value_from_int(\tobj%voidptr\tvalue)", 
                        "F_name_function": "get_value_from_int", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass1_get_value_from_int", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_get_value_from_int", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "getValue", 
                        "function_suffix": "_from_int", 
                        "underscore_name": "get_value"
                    }, 
                    "func_const": false, 
                    "function_suffix": "_from_int", 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "int SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getValue", 
                        "type": "int"
                    }
                }, 
                {
                    "_cpp_overload": [
                        8, 
                        9
                    ], 
                    "_decl": "long getValue(long value +intent(in)+value)", 
                    "_function_index": 9, 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "long", 
                                "cpp_var": "value"
                            }, 
                            "fmtf": {
                                "c_var": "value", 
                                "f_var": "value"
                            }, 
                            "fmtpy": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "long", 
                                "cpp_var": "value", 
                                "py_var": "SH_Py_value"
                            }, 
                            "init": null, 
                            "name": "value", 
                            "type": "long"
                        }
                    ], 
                    "decl": "long getValue(long value)", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "long SHT_rv = SH_this->getValue(value);", 
                        "C_call_list": "value", 
                        "C_name": "AA_exclass1_get_value_1", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self, long value", 
                        "C_return_code": "return SHT_rv;", 
                        "C_return_type": "long", 
                        "F_C_call": "c_exclass1_get_value_1", 
                        "F_C_name": "c_exclass1_get_value_1", 
                        "F_arg_c_call": "obj%voidptr, value", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tvalue", 
                        "F_arguments": "obj, value", 
                        "F_call_code": "SHT_rv = c_exclass1_get_value_1(\tobj%voidptr\tvalue)", 
                        "F_name_function": "get_value_1", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass1_get_value_1", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_get_value_1", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "getValue", 
                        "function_suffix": "_1", 
                        "underscore_name": "get_value"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "long SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getValue", 
                        "type": "long"
                    }
                }, 
                {
                    "_decl": "void * getAddr()", 
                    "_function_index": 10, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "void *getAddr()", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "void * SHT_rv = SH_this->getAddr();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_get_addr", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self", 
                        "C_return_code": "return SHT_rv;", 
                        "C_return_type": "void *", 
                        "F_C_call": "c_exclass1_get_addr", 
                        "F_C_name": "c_exclass1_get_addr", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "SHT_rv = c_exclass1_get_addr(\tobj%voidptr)", 
                        "F_name_function": "get_addr", 
                        "F_name_generic": "get_addr", 
                        "F_name_impl": "exclass1_get_addr", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_get_addr", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "getAddr", 
                        "underscore_name": "get_addr"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "void * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getAddr", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "bool hasAddr(bool in +intent(in)+value)", 
                    "_function_index": 11, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "in", 
                                "cpp_type": "bool", 
                                "cpp_var": "in"
                            }, 
                            "fmtf": {
                                "c_var": "SH_in", 
                                "f_var": "in"
                            }, 
                            "fmtpy": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "in", 
                                "cpp_type": "bool", 
                                "cpp_var": "in", 
                                "py_var": "SH_Py_in"
                            }, 
                            "init": null, 
                            "name": "in", 
                            "type": "bool"
                        }
                    ], 
                    "decl": "bool hasAddr(bool in)", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "bool SHT_rv = SH_this->hasAddr(in);", 
                        "C_call_list": "in", 
                        "C_name": "AA_exclass1_has_addr", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self, bool in", 
                        "C_return_code": "return SHT_rv;", 
                        "C_return_type": "bool", 
                        "F_C_call": "c_exclass1_has_addr", 
                        "F_C_name": "c_exclass1_has_addr", 
                        "F_arg_c_call": "obj%voidptr, SH_in", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tSH_in", 
                        "F_arguments": "obj, in", 
                        "F_call_code": "SHT_rv = c_exclass1_has_addr(\tobj%voidptr\tSH_in)", 
                        "F_name_function": "has_addr", 
                        "F_name_generic": "has_addr", 
                        "F_name_impl": "exclass1_has_addr", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass1_has_addr", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "hasAddr", 
                        "underscore_name": "has_addr"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "bool SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "hasAddr", 
                        "type": "bool"
                    }
                }, 
                {
                    "_decl": "void SplicerSpecial()", 
                    "_function_index": 12, 
                    "_subprogram": "subroutine", 
                    "args": [], 
                    "decl": "void SplicerSpecial", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_list": "", 
                        "C_name": "AA_exclass1_splicer_special", 
                        "C_pre_call": "ExClass1 *SH_this = static_cast<ExClass1 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass1 * self", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass1_splicer_special", 
                        "F_C_name": "c_exclass1_splicer_special", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_name_function": "splicer_special", 
                        "F_name_generic": "splicer_special", 
                        "F_name_impl": "exclass1_splicer_special", 
                        "F_subprogram": "subroutine", 
                        "PY_name_impl": "PP_exclass1_splicer_special", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "SplicerSpecial", 
                        "underscore_name": "splicer_special"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "SplicerSpecial", 
                        "type": "void"
                    }
                }
            ], 
            "name": "ExClass1", 
            "options": {}, 
            "python": {
                "type": [
                    "init", 
                    "repr", 
                    "richcompare"
                ]
            }
        }, 
        {
            "cpp_header": "ExClass2.hpp", 
            "fmt": {
                "CPP_this_call": "SH_this->", 
                "C_header_filename": "wrapExClass2.h", 
                "C_impl_filename": "wrapExClass2.cpp", 
                "C_type_name": "AA_exclass2", 
                "F_derived_name": "exclass2", 
                "F_impl_filename": "wrapfExClass2.f", 
                "F_module_name": "exclass2_mod", 
                "PY_PyObject": "PP_ExClass2", 
                "PY_PyTypeObject": "PP_ExClass2_Type", 
                "PY_capsule_name": "PY_ExClass2_capsule_name", 
                "PY_from_object_func": "PP_ExClass2_from_Object", 
                "PY_to_object_func": "PP_ExClass2_to_Object", 
                "PY_type_filename": "pyExClass2type.cpp", 
                "class_lower": "exclass2", 
                "class_prefix": "exclass2_", 
                "class_upper": "EXCLASS2", 
                "cpp_class": "ExClass2"
            }, 
            "methods": [
                {
                    "_PTR_F_C_index": 38, 
                    "_decl": "ExClass2 * ExClass2(const string * name +intent(in)) +constructor", 
                    "_function_index": 18, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "ptr": true, 
                                "value": false
                            }, 
                            "const": true, 
                            "fmtc": {
                                "c_const": "const ", 
                                "c_ptr": " *", 
                                "c_var": "name", 
                                "cpp_type": "std::string", 
                                "cpp_var": "SH_name"
                            }, 
                            "init": null, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "decl": "ExClass2 *ExClass2 (const string *name) +constructor", 
                    "fattrs": {
                        "constructor": true
                    }, 
                    "fmt": {
                        "C_call_code": "ExClass2 * SHT_rv = new ExClass2(SH_name);", 
                        "C_call_list": "SH_name", 
                        "C_name": "AA_exclass2_ex_class2", 
                        "C_pre_call": "const std::string SH_name(name);", 
                        "C_prototype": "const char * name", 
                        "C_return_code": "return static_cast<AA_exclass2 *>(static_cast<void *>(SHT_rv));", 
                        "C_return_type": "AA_exclass2 *", 
                        "F_C_call": "c_exclass2_ex_class2_bufferify", 
                        "F_C_name": "c_exclass2_ex_class2", 
                        "F_arg_c_call": "name, len_trim(name, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)", 
                        "F_arguments": "name", 
                        "F_call_code": "SHT_rv%voidptr = c_exclass2_ex_class2_bufferify(\tname\tlen_trim(name, kind=C_INT))", 
                        "F_name_function": "ex_class2", 
                        "F_name_generic": "ex_class2", 
                        "F_name_impl": "exclass2_ex_class2", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "c_const": "", 
                        "function_name": "ExClass2", 
                        "underscore_name": "ex_class2"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "ExClass2 * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "ExClass2", 
                        "type": "ExClass2"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 18, 
                    "_decl": "ExClass2 * ExClass2(const string * name +intent(in)+len_trim(Lname)) +constructor", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 38, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Lname", 
                                "ptr": true, 
                                "value": false
                            }, 
                            "const": true, 
                            "fmtc": {
                                "c_const": "const ", 
                                "c_ptr": " *", 
                                "c_var": "name", 
                                "c_var_trim": "Lname", 
                                "cpp_type": "std::string", 
                                "cpp_var": "SH_name"
                            }, 
                            "fmtf": {
                                "c_var": "name", 
                                "f_var": "name"
                            }, 
                            "init": null, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "decl": "ExClass2 *ExClass2 (const string *name) +constructor", 
                    "fattrs": {
                        "constructor": true
                    }, 
                    "fmt": {
                        "C_call_code": "ExClass2 * SHT_rv = new ExClass2(SH_name);", 
                        "C_call_list": "SH_name", 
                        "C_name": "AA_exclass2_ex_class2_bufferify", 
                        "C_pre_call": "const std::string SH_name(name, Lname);", 
                        "C_prototype": "const char * name, int Lname", 
                        "C_return_code": "return static_cast<AA_exclass2 *>(static_cast<void *>(SHT_rv));", 
                        "C_return_type": "AA_exclass2 *", 
                        "F_C_name": "c_exclass2_ex_class2_bufferify", 
                        "c_const": "", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "ExClass2 * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "ExClass2", 
                        "type": "ExClass2"
                    }
                }, 
                {
                    "_decl": "void delete() +destructor", 
                    "_function_index": 19, 
                    "_subprogram": "subroutine", 
                    "args": [], 
                    "decl": "void delete() +destructor", 
                    "fattrs": {
                        "destructor": true
                    }, 
                    "fmt": {
                        "C_call_code": "delete SH_this;", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_delete", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass2_delete", 
                        "F_C_name": "c_exclass2_delete", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass2_delete(\tobj%voidptr)", 
                        "F_name_function": "delete", 
                        "F_name_generic": "delete", 
                        "F_name_impl": "exclass2_delete", 
                        "F_subprogram": "subroutine", 
                        "PY_name_impl": "PP_exclass2_delete", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "delete", 
                        "underscore_name": "delete"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "delete", 
                        "type": "void"
                    }
                }, 
                {
                    "_PTR_F_C_index": 39, 
                    "_decl": "const string & getName() const", 
                    "_function_index": 20, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "const string& getName() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getName();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name", 
                        "C_pre_call": "const ExClass2 *SH_this = static_cast<const ExClass2 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass2 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "const char *", 
                        "F_C_call": "c_exclass2_get_name_bufferify", 
                        "F_C_name": "c_exclass2_get_name", 
                        "F_arg_c_call": "obj%voidptr, SHT_rv, len(SHT_rv, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass2_get_name_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                        "F_name_function": "get_name", 
                        "F_name_generic": "get_name", 
                        "F_name_impl": "exclass2_get_name", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass2_get_name", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "c_var_len": "aa_exclass2_get_name_length(obj%voidptr)", 
                        "function_name": "getName", 
                        "underscore_name": "get_name"
                    }, 
                    "func_const": true, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})", 
                            "reference": true
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_rv_decl": "const char * XSHT_rv", 
                            "c_val": "SHT_rv.c_str()", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName", 
                        "type": "string"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 20, 
                    "_decl": "void getName(string & SHF_rv +intent(out)+len(NSHF_rv)) const", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 39, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "reference": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "SHF_rv", 
                                "c_var_len": "NSHF_rv", 
                                "cpp_type": "std::string", 
                                "cpp_val": "SHT_rv.c_str()", 
                                "cpp_var": "SHT_rv"
                            }, 
                            "fmtf": {
                                "c_var": "SHT_rv", 
                                "f_var": "SHT_rv"
                            }, 
                            "init": null, 
                            "name": "SHF_rv", 
                            "type": "string"
                        }
                    ], 
                    "decl": "const string& getName() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getName();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name_bufferify", 
                        "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                        "C_pre_call": "const ExClass2 *SH_this = static_cast<const ExClass2 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass2 * self, char * SHF_rv, int NSHF_rv", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass2_get_name_bufferify", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": true, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})", 
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName", 
                        "type": "void"
                    }
                }, 
                {
                    "_PTR_F_C_index": 40, 
                    "_decl": "const string & getName2()", 
                    "_function_index": 21, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "const string& getName2()", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getName2();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name2", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "const char *", 
                        "F_C_call": "c_exclass2_get_name2_bufferify", 
                        "F_C_name": "c_exclass2_get_name2", 
                        "F_arg_c_call": "obj%voidptr, SHT_rv, len(SHT_rv, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass2_get_name2_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                        "F_name_function": "get_name2", 
                        "F_name_generic": "get_name2", 
                        "F_name_impl": "exclass2_get_name2", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass2_get_name2", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "c_var_len": "strlen_ptr(c_exclass2_get_name2_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)))", 
                        "function_name": "getName2", 
                        "underscore_name": "get_name2"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "reference": true
                        }, 
                        "const": true, 
                        "fmtc": {
                            "c_rv_decl": "const char * XSHT_rv", 
                            "c_val": "SHT_rv.c_str()", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName2", 
                        "type": "string"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 21, 
                    "_decl": "void getName2(string & SHF_rv +intent(out)+len(NSHF_rv))", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 40, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "reference": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "SHF_rv", 
                                "c_var_len": "NSHF_rv", 
                                "cpp_type": "std::string", 
                                "cpp_val": "SHT_rv.c_str()", 
                                "cpp_var": "SHT_rv"
                            }, 
                            "fmtf": {
                                "c_var": "SHT_rv", 
                                "f_var": "SHT_rv"
                            }, 
                            "init": null, 
                            "name": "SHF_rv", 
                            "type": "string"
                        }
                    ], 
                    "decl": "const string& getName2()", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "const std::string & SHT_rv = SH_this->getName2();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name2_bufferify", 
                        "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, char * SHF_rv, int NSHF_rv", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass2_get_name2_bufferify", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "const std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName2", 
                        "type": "void"
                    }
                }, 
                {
                    "_PTR_F_C_index": 41, 
                    "_decl": "string & getName3() const", 
                    "_function_index": 22, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "string& getName3() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "std::string & SHT_rv = SH_this->getName3();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name3", 
                        "C_pre_call": "const ExClass2 *SH_this = static_cast<const ExClass2 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass2 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "char *", 
                        "F_C_call": "c_exclass2_get_name3_bufferify", 
                        "F_C_name": "c_exclass2_get_name3", 
                        "F_arg_c_call": "obj%voidptr, SHT_rv, len(SHT_rv, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass2_get_name3_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                        "F_name_function": "get_name3", 
                        "F_name_generic": "get_name3", 
                        "F_name_impl": "exclass2_get_name3", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass2_get_name3", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "c_var_len": "strlen_ptr(c_exclass2_get_name3_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)))", 
                        "function_name": "getName3", 
                        "underscore_name": "get_name3"
                    }, 
                    "func_const": true, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "reference": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_rv_decl": "char * XSHT_rv", 
                            "c_val": "SHT_rv.c_str()", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName3", 
                        "type": "string"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 22, 
                    "_decl": "void getName3(string & SHF_rv +intent(out)+len(NSHF_rv)) const", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 41, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "reference": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "SHF_rv", 
                                "c_var_len": "NSHF_rv", 
                                "cpp_type": "std::string", 
                                "cpp_val": "SHT_rv.c_str()", 
                                "cpp_var": "SHT_rv"
                            }, 
                            "fmtf": {
                                "c_var": "SHT_rv", 
                                "f_var": "SHT_rv"
                            }, 
                            "init": null, 
                            "name": "SHF_rv", 
                            "type": "string"
                        }
                    ], 
                    "decl": "string& getName3() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "std::string & SHT_rv = SH_this->getName3();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name3_bufferify", 
                        "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                        "C_pre_call": "const ExClass2 *SH_this = static_cast<const ExClass2 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass2 * self, char * SHF_rv, int NSHF_rv", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass2_get_name3_bufferify", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": true, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName3", 
                        "type": "void"
                    }
                }, 
                {
                    "_PTR_F_C_index": 42, 
                    "_decl": "string & getName4()", 
                    "_function_index": 23, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "string& getName4()", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "std::string & SHT_rv = SH_this->getName4();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name4", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "char *", 
                        "F_C_call": "c_exclass2_get_name4_bufferify", 
                        "F_C_name": "c_exclass2_get_name4", 
                        "F_arg_c_call": "obj%voidptr, SHT_rv, len(SHT_rv, kind=C_INT)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass2_get_name4_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                        "F_name_function": "get_name4", 
                        "F_name_generic": "get_name4", 
                        "F_name_impl": "exclass2_get_name4", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass2_get_name4", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "c_var_len": "strlen_ptr(c_exclass2_get_name4_bufferify(\tobj%voidptr\tSHT_rv\tlen(SHT_rv, kind=C_INT)))", 
                        "function_name": "getName4", 
                        "underscore_name": "get_name4"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "reference": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_rv_decl": "char * XSHT_rv", 
                            "c_val": "SHT_rv.c_str()", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName4", 
                        "type": "string"
                    }
                }, 
                {
                    "_PTR_C_CPP_index": 23, 
                    "_decl": "void getName4(string & SHF_rv +intent(out)+len(NSHF_rv))", 
                    "_error_pattern_suffix": "_as_buffer", 
                    "_function_index": 42, 
                    "_generated": "arg_to_buffer", 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv", 
                                "reference": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "SHF_rv", 
                                "c_var_len": "NSHF_rv", 
                                "cpp_type": "std::string", 
                                "cpp_val": "SHT_rv.c_str()", 
                                "cpp_var": "SHT_rv"
                            }, 
                            "fmtf": {
                                "c_var": "SHT_rv", 
                                "f_var": "SHT_rv"
                            }, 
                            "init": null, 
                            "name": "SHF_rv", 
                            "type": "string"
                        }
                    ], 
                    "decl": "string& getName4()", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "std::string & SHT_rv = SH_this->getName4();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name4_bufferify", 
                        "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, char * SHF_rv, int NSHF_rv", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass2_get_name4_bufferify", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_bufferify"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": false, 
                            "reference": false
                        }, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "std::string & SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getName4", 
                        "type": "void"
                    }
                }, 
                {
                    "C_code": "{C_pre_call}\nreturn {CPP_this}->getName().length();\n", 
                    "_decl": "const int GetNameLength()", 
                    "_function_index": 24, 
                    "_subprogram": "function", 
                    "args": [], 
                    "doxygen": {
                        "brief": "helper function for Fortran"
                    }, 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_name_length", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self", 
                        "C_return_type": "const int", 
                        "F_C_call": "c_exclass2_get_name_length", 
                        "F_C_name": "c_exclass2_get_name_length", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "SHT_rv = c_exclass2_get_name_length(\tobj%voidptr)", 
                        "F_name_function": "get_name_length", 
                        "F_name_generic": "get_name_length", 
                        "F_name_impl": "exclass2_get_name_length", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass2_get_name_length", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "GetNameLength", 
                        "underscore_name": "get_name_length"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": true, 
                        "fmtc": {
                            "cpp_rv_decl": "const int SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "GetNameLength", 
                        "type": "int"
                    }
                }, 
                {
                    "_decl": "ExClass1 * get_class1(const ExClass1 * in +intent(in)+value)", 
                    "_function_index": 25, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "ptr": true, 
                                "value": true
                            }, 
                            "const": true, 
                            "fmtc": {
                                "c_const": "const ", 
                                "c_ptr": " *", 
                                "c_var": "in", 
                                "cpp_type": "ExClass1", 
                                "cpp_var": "in"
                            }, 
                            "fmtf": {
                                "c_var": "in", 
                                "f_var": "in"
                            }, 
                            "fmtpy": {
                                "c_const": "const ", 
                                "c_ptr": " *", 
                                "c_var": "in", 
                                "cpp_type": "ExClass1", 
                                "cpp_var": "in", 
                                "py_var": "SH_Py_in"
                            }, 
                            "init": null, 
                            "name": "in", 
                            "type": "ExClass1"
                        }
                    ], 
                    "decl": "ExClass1 *get_class1(const ExClass1 *in)", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "ExClass1 * SHT_rv = SH_this->get_class1(static_cast<const ExClass1 *>(static_cast<const void *>(in)));", 
                        "C_call_list": "static_cast<const ExClass1 *>(static_cast<const void *>(in))", 
                        "C_name": "AA_exclass2_get_class1", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, const AA_exclass1 * in", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "AA_exclass1 *", 
                        "F_C_call": "c_exclass2_get_class1", 
                        "F_C_name": "c_exclass2_get_class1", 
                        "F_arg_c_call": "obj%voidptr, in%yadda()", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tin%yadda()", 
                        "F_arguments": "obj, in", 
                        "F_call_code": "SHT_rv%voidptr = c_exclass2_get_class1(\tobj%voidptr\tin%yadda())", 
                        "F_name_function": "get_class1", 
                        "F_name_generic": "get_class1", 
                        "F_name_impl": "exclass2_get_class1", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass2_get_class1", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "get_class1", 
                        "underscore_name": "get_class1"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "fmtc": {
                            "c_rv_decl": "AA_exclass1 * XSHT_rv", 
                            "c_val": "static_cast<AA_exclass1 *>(static_cast<void *>(SHT_rv))", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "ExClass1 * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "get_class1", 
                        "type": "ExClass1"
                    }
                }, 
                {
                    "_decl": "void * declare(TypeID type +intent(in)+value)", 
                    "_function_index": 31, 
                    "_generated": "has_default_arg", 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "type", 
                                "cpp_type": "TypeID", 
                                "cpp_var": "type"
                            }, 
                            "fmtf": {
                                "c_var": "type", 
                                "f_var": "type"
                            }, 
                            "init": null, 
                            "name": "type", 
                            "type": "TypeID"
                        }
                    ], 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "SH_this->declare(getTypeID(type));", 
                        "C_call_list": "getTypeID(type)", 
                        "C_name": "AA_exclass2_declare_0", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, int type", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass2_declare_0", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_0"
                    }, 
                    "fortran_generic": {
                        "len": [
                            "int", 
                            "long"
                        ]
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "init": null, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 31, 
                    "_decl": "void * declare(TypeID type +intent(in)+value)", 
                    "_function_index": 43, 
                    "_generated": "fortran_generic", 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "init": null, 
                            "name": "type", 
                            "type": "TypeID"
                        }
                    ], 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fattrs": {}, 
                    "fmt": {
                        "F_C_call": "c_exclass2_declare_0", 
                        "F_arg_c_call": "obj%voidptr, type", 
                        "F_arg_c_call_tab": "\tobj%voidptr\ttype", 
                        "F_arguments": "obj, type", 
                        "F_call_code": "call c_exclass2_declare_0(\tobj%voidptr\ttype)", 
                        "F_name_function": "declare_0_int", 
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_0_int", 
                        "F_subprogram": "subroutine", 
                        "function_suffix": "_0_int"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "init": null, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 31, 
                    "_decl": "void * declare(TypeID type +intent(in)+value)", 
                    "_function_index": 44, 
                    "_generated": "fortran_generic", 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "init": null, 
                            "name": "type", 
                            "type": "TypeID"
                        }
                    ], 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fattrs": {}, 
                    "fmt": {
                        "F_C_call": "c_exclass2_declare_0", 
                        "F_arg_c_call": "obj%voidptr, type", 
                        "F_arg_c_call_tab": "\tobj%voidptr\ttype", 
                        "F_arguments": "obj, type", 
                        "F_call_code": "call c_exclass2_declare_0(\tobj%voidptr\ttype)", 
                        "F_name_function": "declare_0_long", 
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_0_long", 
                        "F_subprogram": "subroutine", 
                        "function_suffix": "_0_long"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "init": null, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_decl": "void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)", 
                    "_default_funcs": [
                        31
                    ], 
                    "_function_index": 26, 
                    "_has_default_arg": true, 
                    "_nargs": [
                        1, 
                        2
                    ], 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "type", 
                                "cpp_type": "TypeID", 
                                "cpp_var": "type"
                            }, 
                            "fmtf": {
                                "c_var": "type", 
                                "f_var": "type"
                            }, 
                            "fmtpy": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "type", 
                                "cpp_type": "TypeID", 
                                "cpp_var": "type", 
                                "py_var": "SH_Py_type"
                            }, 
                            "init": null, 
                            "name": "type", 
                            "type": "TypeID"
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "len", 
                                "cpp_type": "SidreLength", 
                                "cpp_var": "len"
                            }, 
                            "fmtf": {
                                "c_var": "len", 
                                "f_var": "len"
                            }, 
                            "fmtpy": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "len", 
                                "cpp_type": "SidreLength", 
                                "cpp_var": "len", 
                                "py_var": "SH_Py_len"
                            }, 
                            "init": 1, 
                            "name": "len", 
                            "type": "SidreLength"
                        }
                    ], 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "SH_this->declare(getTypeID(type), len);", 
                        "C_call_list": "getTypeID(type), len", 
                        "C_name": "AA_exclass2_declare_1", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, int type, SIDRE_SidreLength len", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_name": "c_exclass2_declare_1", 
                        "PY_name_impl": "PP_exclass2_declare_1", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "declare", 
                        "function_suffix": "_1", 
                        "underscore_name": "declare"
                    }, 
                    "fortran_generic": {
                        "len": [
                            "int", 
                            "long"
                        ]
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_fortran": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "init": null, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 26, 
                    "_decl": "void * declare(TypeID type +intent(in)+value, int len=1 +intent(in)+value)", 
                    "_default_funcs": [
                        31
                    ], 
                    "_function_index": 45, 
                    "_generated": "fortran_generic", 
                    "_has_default_arg": true, 
                    "_nargs": [
                        1, 
                        2
                    ], 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "init": null, 
                            "name": "type", 
                            "type": "TypeID"
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "init": 1, 
                            "name": "len", 
                            "type": "int"
                        }
                    ], 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fattrs": {}, 
                    "fmt": {
                        "F_C_call": "c_exclass2_declare_1", 
                        "F_arg_c_call": "obj%voidptr, type, int(len, C_LONG)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\ttype\tint(len, C_LONG)", 
                        "F_arguments": "obj, type, len", 
                        "F_call_code": "call c_exclass2_declare_1(\tobj%voidptr\ttype\tint(len, C_LONG))", 
                        "F_name_function": "declare_1_int", 
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_1_int", 
                        "F_subprogram": "subroutine", 
                        "function_suffix": "_1_int"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "init": null, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 26, 
                    "_decl": "void * declare(TypeID type +intent(in)+value, long len=1 +intent(in)+value)", 
                    "_default_funcs": [
                        31
                    ], 
                    "_function_index": 46, 
                    "_generated": "fortran_generic", 
                    "_has_default_arg": true, 
                    "_nargs": [
                        1, 
                        2
                    ], 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "init": null, 
                            "name": "type", 
                            "type": "TypeID"
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "init": 1, 
                            "name": "len", 
                            "type": "long"
                        }
                    ], 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fattrs": {}, 
                    "fmt": {
                        "F_C_call": "c_exclass2_declare_1", 
                        "F_arg_c_call": "obj%voidptr, type, int(len, C_LONG)", 
                        "F_arg_c_call_tab": "\tobj%voidptr\ttype\tint(len, C_LONG)", 
                        "F_arguments": "obj, type, len", 
                        "F_call_code": "call c_exclass2_declare_1(\tobj%voidptr\ttype\tint(len, C_LONG))", 
                        "F_name_function": "declare_1_long", 
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_1_long", 
                        "F_subprogram": "subroutine", 
                        "function_suffix": "_1_long"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "const": false, 
                        "init": null, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_decl": "void destroyall()", 
                    "_function_index": 27, 
                    "_subprogram": "subroutine", 
                    "args": [], 
                    "decl": "void destroyall()", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "SH_this->destroyall();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_destroyall", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass2_destroyall", 
                        "F_C_name": "c_exclass2_destroyall", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_exclass2_destroyall(\tobj%voidptr)", 
                        "F_name_function": "destroyall", 
                        "F_name_generic": "destroyall", 
                        "F_name_impl": "exclass2_destroyall", 
                        "F_subprogram": "subroutine", 
                        "PY_name_impl": "PP_exclass2_destroyall", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "destroyall", 
                        "underscore_name": "destroyall"
                    }, 
                    "func_const": false, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "destroyall", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "TypeID getTypeID() const", 
                    "_function_index": 28, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "TypeID getTypeID() const", 
                    "fattrs": {}, 
                    "fmt": {
                        "C_call_code": "TypeID SHT_rv = SH_this->getTypeID();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_type_id", 
                        "C_pre_call": "const ExClass2 *SH_this = static_cast<const ExClass2 *>(static_cast<const void *>(self));", 
                        "C_prototype": "const AA_exclass2 * self", 
                        "C_return_code": "return XSHT_rv;", 
                        "C_return_type": "int", 
                        "F_C_call": "c_exclass2_get_type_id", 
                        "F_C_name": "c_exclass2_get_type_id", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "SHT_rv = c_exclass2_get_type_id(\tobj%voidptr)", 
                        "F_name_function": "get_type_id", 
                        "F_name_generic": "get_type_id", 
                        "F_name_impl": "exclass2_get_type_id", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "PY_name_impl": "PP_exclass2_get_type_id", 
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "getTypeID", 
                        "underscore_name": "get_type_id"
                    }, 
                    "func_const": true, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "c_rv_decl": "int XSHT_rv", 
                            "c_val": "static_cast<int>(SHT_rv)", 
                            "c_var": "XSHT_rv", 
                            "cpp_rv_decl": "TypeID SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getTypeID", 
                        "type": "TypeID"
                    }
                }, 
                {
                    "_decl": "void setValue(ValueType value +intent(in)+value)", 
                    "_function_index": 29, 
                    "_overloaded": true, 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "init": null, 
                            "name": "value", 
                            "type": "ValueType"
                        }
                    ], 
                    "cpp_template": {
                        "ValueType": [
                            "int", 
                            "long", 
                            "float", 
                            "double"
                        ]
                    }, 
                    "decl": "void setValue(ValueType value)", 
                    "fattrs": {}, 
                    "fmt": {
                        "function_name": "setValue", 
                        "underscore_name": "set_value"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(int value +intent(in)+value)", 
                    "_function_index": 32, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "int", 
                                "cpp_var": "value"
                            }, 
                            "fmtf": {
                                "c_var": "value", 
                                "f_var": "value"
                            }, 
                            "init": null, 
                            "name": "value", 
                            "type": "int"
                        }
                    ], 
                    "decl": "void setValue(ValueType value)", 
                    "fattrs": {}, 
                    "fmt": {
                        "CPP_template": "<int>", 
                        "C_call_code": "SH_this->setValue<int>(value);", 
                        "C_call_list": "value", 
                        "C_name": "AA_exclass2_set_value_int", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, int value", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass2_set_value_int", 
                        "F_C_name": "c_exclass2_set_value_int", 
                        "F_arg_c_call": "obj%voidptr, value", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tvalue", 
                        "F_arguments": "obj, value", 
                        "F_call_code": "call c_exclass2_set_value_int(\tobj%voidptr\tvalue)", 
                        "F_name_function": "set_value_int", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_int", 
                        "F_subprogram": "subroutine", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_int"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(long value +intent(in)+value)", 
                    "_function_index": 33, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "long", 
                                "cpp_var": "value"
                            }, 
                            "fmtf": {
                                "c_var": "value", 
                                "f_var": "value"
                            }, 
                            "init": null, 
                            "name": "value", 
                            "type": "long"
                        }
                    ], 
                    "decl": "void setValue(ValueType value)", 
                    "fattrs": {}, 
                    "fmt": {
                        "CPP_template": "<long>", 
                        "C_call_code": "SH_this->setValue<long>(value);", 
                        "C_call_list": "value", 
                        "C_name": "AA_exclass2_set_value_long", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, long value", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass2_set_value_long", 
                        "F_C_name": "c_exclass2_set_value_long", 
                        "F_arg_c_call": "obj%voidptr, value", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tvalue", 
                        "F_arguments": "obj, value", 
                        "F_call_code": "call c_exclass2_set_value_long(\tobj%voidptr\tvalue)", 
                        "F_name_function": "set_value_long", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_long", 
                        "F_subprogram": "subroutine", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_long"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(float value +intent(in)+value)", 
                    "_function_index": 34, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "float", 
                                "cpp_var": "value"
                            }, 
                            "fmtf": {
                                "c_var": "value", 
                                "f_var": "value"
                            }, 
                            "init": null, 
                            "name": "value", 
                            "type": "float"
                        }
                    ], 
                    "decl": "void setValue(ValueType value)", 
                    "fattrs": {}, 
                    "fmt": {
                        "CPP_template": "<float>", 
                        "C_call_code": "SH_this->setValue<float>(value);", 
                        "C_call_list": "value", 
                        "C_name": "AA_exclass2_set_value_float", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, float value", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass2_set_value_float", 
                        "F_C_name": "c_exclass2_set_value_float", 
                        "F_arg_c_call": "obj%voidptr, value", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tvalue", 
                        "F_arguments": "obj, value", 
                        "F_call_code": "call c_exclass2_set_value_float(\tobj%voidptr\tvalue)", 
                        "F_name_function": "set_value_float", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_float", 
                        "F_subprogram": "subroutine", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_float"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(double value +intent(in)+value)", 
                    "_function_index": 35, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "_subprogram": "subroutine", 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "fmtc": {
                                "c_const": "", 
                                "c_ptr": "", 
                                "c_var": "value", 
                                "cpp_type": "double", 
                                "cpp_var": "value"
                            }, 
                            "fmtf": {
                                "c_var": "value", 
                                "f_var": "value"
                            }, 
                            "init": null, 
                            "name": "value", 
                            "type": "double"
                        }
                    ], 
                    "decl": "void setValue(ValueType value)", 
                    "fattrs": {}, 
                    "fmt": {
                        "CPP_template": "<double>", 
                        "C_call_code": "SH_this->setValue<double>(value);", 
                        "C_call_list": "value", 
                        "C_name": "AA_exclass2_set_value_double", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self, double value", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_exclass2_set_value_double", 
                        "F_C_name": "c_exclass2_set_value_double", 
                        "F_arg_c_call": "obj%voidptr, value", 
                        "F_arg_c_call_tab": "\tobj%voidptr\tvalue", 
                        "F_arguments": "obj, value", 
                        "F_call_code": "call c_exclass2_set_value_double(\tobj%voidptr\tvalue)", 
                        "F_name_function": "set_value_double", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_double", 
                        "F_subprogram": "subroutine", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_double"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "ValueType getValue()", 
                    "_function_index": 30, 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [], 
                    "cpp_template": {
                        "ValueType": [
                            "int", 
                            "double"
                        ]
                    }, 
                    "decl": "ValueType getValue()", 
                    "fattrs": {}, 
                    "fmt": {
                        "function_name": "getValue", 
                        "underscore_name": "get_value"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": false, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "init": null, 
                        "name": "getValue", 
                        "type": "ValueType"
                    }
                }, 
                {
                    "_CPP_return_templated": true, 
                    "_decl": "int getValue()", 
                    "_function_index": 36, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "ValueType getValue()", 
                    "fattrs": {}, 
                    "fmt": {
                        "CPP_template": "<int>", 
                        "C_call_code": "int SHT_rv = SH_this->getValue<int>();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_value_int", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self", 
                        "C_return_code": "return SHT_rv;", 
                        "C_return_type": "int", 
                        "F_C_call": "c_exclass2_get_value_int", 
                        "F_C_name": "c_exclass2_get_value_int", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "SHT_rv = c_exclass2_get_value_int(\tobj%voidptr)", 
                        "F_name_function": "get_value_int", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass2_get_value_int", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_int"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "int SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getValue", 
                        "type": "int"
                    }
                }, 
                {
                    "_CPP_return_templated": true, 
                    "_decl": "double getValue()", 
                    "_function_index": 37, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "_subprogram": "function", 
                    "args": [], 
                    "decl": "ValueType getValue()", 
                    "fattrs": {}, 
                    "fmt": {
                        "CPP_template": "<double>", 
                        "C_call_code": "double SHT_rv = SH_this->getValue<double>();", 
                        "C_call_list": "", 
                        "C_name": "AA_exclass2_get_value_double", 
                        "C_pre_call": "ExClass2 *SH_this = static_cast<ExClass2 *>(static_cast<void *>(self));", 
                        "C_prototype": "AA_exclass2 * self", 
                        "C_return_code": "return SHT_rv;", 
                        "C_return_type": "double", 
                        "F_C_call": "c_exclass2_get_value_double", 
                        "F_C_name": "c_exclass2_get_value_double", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "SHT_rv = c_exclass2_get_value_double(\tobj%voidptr)", 
                        "F_name_function": "get_value_double", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass2_get_value_double", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_suffix": "_double"
                    }, 
                    "func_const": false, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_lua": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "const": false, 
                        "fmtc": {
                            "cpp_rv_decl": "double SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }, 
                        "init": null, 
                        "name": "getValue", 
                        "type": "double"
                    }
                }
            ], 
            "name": "ExClass2", 
            "options": {}, 
            "python": {
                "type": [
                    "dealloc", 
                    "print", 
                    "compare", 
                    "getattr", 
                    "setattr", 
                    "getattro", 
                    "setattro", 
                    "repr", 
                    "hash", 
                    "call", 
                    "str", 
                    "init", 
                    "alloc", 
                    "new", 
                    "free", 
                    "del"
                ]
            }
        }
    ], 
    "copyright": [
        "Copyright (c) 2017, Lawrence Livermore National Security, LLC.", 
        "Produced at the Lawrence Livermore National Laboratory", 
        null, 
        "LLNL-CODE-738041.", 
        "All rights reserved.", 
        null, 
        "This file is part of Shroud.  For details, see", 
        "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
        null, 
        "Redistribution and use in source and binary forms, with or without", 
        "modification, are permitted provided that the following conditions are", 
        "met:", 
        null, 
        "* Redistributions of source code must retain the above copyright", 
        "  notice, this list of conditions and the disclaimer below.", 
        null, 
        "* Redistributions in binary form must reproduce the above copyright", 
        "  notice, this list of conditions and the disclaimer (as noted below)", 
        "  in the documentation and/or other materials provided with the", 
        "  distribution.", 
        null, 
        "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
        "  may be used to endorse or promote products derived from this", 
        "  software without specific prior written permission.", 
        null, 
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
        "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
        "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
        "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
        "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
        "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
        "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
        "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
        "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
        "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
        null, 
        "#######################################################################"
    ], 
    "cpp_header": "", 
    "fmt": {
        "BBB": "BBB", 
        "CPP_template": "", 
        "CPP_this": "SH_this", 
        "CPP_this_call": "", 
        "C_header_filename": "wrapUserLibrary.h", 
        "C_header_filename_suffix": "h", 
        "C_impl_filename": "wrapUserLibrary.cpp", 
        "C_impl_filename_suffix": "cpp", 
        "C_post_call": "", 
        "C_pre_call": "", 
        "C_prefix": "AA_", 
        "C_result": "SHT_rv", 
        "C_string_result_as_arg": "SHF_rv", 
        "C_this": "self", 
        "F_C_prefix": "c_", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_filename_suffix": "f", 
        "F_impl_filename": "wrapfuserlibrary.f", 
        "F_module_name": "userlibrary_mod", 
        "F_pure_clause": "", 
        "F_result": "SHT_rv", 
        "F_result_clause": "", 
        "F_string_result_as_arg": "", 
        "F_this": "obj", 
        "LUA_header_filename_suffix": "hpp", 
        "LUA_impl_filename_suffix": "cpp", 
        "LUA_result": "rv", 
        "PY_PyObject": "PyObject", 
        "PY_header_filename": "pyUserLibrarymodule.hpp", 
        "PY_header_filename_suffix": "hpp", 
        "PY_helper_filename": "pyUserLibraryhelper.cpp", 
        "PY_impl_filename_suffix": "cpp", 
        "PY_library_doc": "library documentation", 
        "PY_module_filename": "pyUserLibrarymodule.cpp", 
        "PY_module_name": "userlibrary", 
        "PY_param_args": "args", 
        "PY_param_kwds": "kwds", 
        "PY_param_self": "self", 
        "PY_prefix": "PP_", 
        "PY_result": "rv", 
        "PY_used_param_args": false, 
        "PY_used_param_kwds": false, 
        "PY_used_param_self": false, 
        "YAML_type_filename": "userlibrary_types.yaml", 
        "c_temp": "SHT_", 
        "class_prefix": "", 
        "function_suffix": "", 
        "library": "UserLibrary", 
        "library_lower": "userlibrary", 
        "library_upper": "USERLIBRARY", 
        "namespace_scope": "example::nested::", 
        "stdlib": "std::"
    }, 
    "functions": [
        {
            "_decl": "void local_function1()", 
            "_function_index": 47, 
            "_subprogram": "subroutine", 
            "args": [], 
            "decl": "void local_function1", 
            "docs": "yada yada yada", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "local_function1();", 
                "C_call_list": "", 
                "C_name": "AA_local_function1", 
                "C_prototype": "", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_local_function1", 
                "F_C_name": "local_function1", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "call c_local_function1(\t)", 
                "F_name_function": "local_function1", 
                "F_name_generic": "local_function1", 
                "F_name_impl": "local_function1", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_local_function1", 
                "c_const": "", 
                "function_name": "local_function1", 
                "underscore_name": "local_function1"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "local_function1", 
                "type": "void"
            }
        }, 
        {
            "C_code": "return name != NULL;", 
            "F_code": "rv = name .ne. \" \"", 
            "_PTR_F_C_index": 59, 
            "_decl": "bool isNameValid(const std::string & name +intent(in))", 
            "_function_index": 48, 
            "_subprogram": "function", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "const": true, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name", 
                        "py_var": "SH_Py_name"
                    }, 
                    "init": null, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "decl": "bool isNameValid(const std::string& name)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_list": "SH_name", 
                "C_name": "AA_is_name_valid", 
                "C_pre_call": "const std::string SH_name(name);", 
                "C_prototype": "const char * name", 
                "C_return_type": "bool", 
                "F_C_call": "c_is_name_valid_bufferify", 
                "F_C_name": "c_is_name_valid", 
                "F_arg_c_call": "name, len_trim(name, kind=C_INT)", 
                "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)", 
                "F_arguments": "name", 
                "F_name_function": "is_name_valid", 
                "F_name_generic": "is_name_valid", 
                "F_name_impl": "is_name_valid", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PP_is_name_valid", 
                "c_const": "", 
                "function_name": "isNameValid", 
                "underscore_name": "is_name_valid"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "fmtc": {
                    "cpp_rv_decl": "bool SHT_rv", 
                    "cpp_var": "SHT_rv"
                }, 
                "init": null, 
                "name": "isNameValid", 
                "type": "bool"
            }
        }, 
        {
            "C_code": "return name != NULL;", 
            "F_code": "rv = name .ne. \" \"", 
            "_PTR_C_CPP_index": 48, 
            "_decl": "bool isNameValid(const std::string & name +intent(in)+len_trim(Lname))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 59, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "function", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "len_trim": "Lname", 
                        "reference": true, 
                        "value": false
                    }, 
                    "const": true, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "c_var_trim": "Lname", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtf": {
                        "c_var": "name", 
                        "f_var": "name"
                    }, 
                    "init": null, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "decl": "bool isNameValid(const std::string& name)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_list": "SH_name", 
                "C_name": "AA_is_name_valid_bufferify", 
                "C_pre_call": "const std::string SH_name(name, Lname);", 
                "C_prototype": "const char * name, int Lname", 
                "C_return_type": "bool", 
                "F_C_name": "c_is_name_valid_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "func_const": false, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "fmtc": {
                    "cpp_rv_decl": "bool SHT_rv", 
                    "cpp_var": "SHT_rv"
                }, 
                "init": null, 
                "name": "isNameValid", 
                "type": "bool"
            }
        }, 
        {
            "_decl": "bool isInitialized()", 
            "_function_index": 49, 
            "_subprogram": "function", 
            "args": [], 
            "decl": "bool isInitialized()", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "bool SHT_rv = isInitialized();", 
                "C_call_list": "", 
                "C_name": "AA_is_initialized", 
                "C_prototype": "", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "bool", 
                "F_C_call": "c_is_initialized", 
                "F_C_name": "c_is_initialized", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "SHT_rv = c_is_initialized(\t)", 
                "F_name_function": "is_initialized", 
                "F_name_generic": "is_initialized", 
                "F_name_impl": "is_initialized", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PP_is_initialized", 
                "c_const": "", 
                "function_name": "isInitialized", 
                "underscore_name": "is_initialized"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "fmtc": {
                    "cpp_rv_decl": "bool SHT_rv", 
                    "cpp_var": "SHT_rv"
                }, 
                "init": null, 
                "name": "isInitialized", 
                "type": "bool"
            }
        }, 
        {
            "_decl": "void checkBool(bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))", 
            "_function_index": 50, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg1"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg1", 
                        "f_var": "arg1"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg1", 
                        "py_var": "SH_Py_arg1"
                    }, 
                    "init": null, 
                    "name": "arg1", 
                    "type": "bool"
                }, 
                {
                    "attrs": {
                        "intent": "out", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "arg2", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg2"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg2", 
                        "f_var": "arg2"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": "PyBool_Type", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "arg2", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg2", 
                        "py_var": "SH_Py_arg2"
                    }, 
                    "init": null, 
                    "name": "arg2", 
                    "type": "bool"
                }, 
                {
                    "attrs": {
                        "intent": "inout", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "arg3", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg3"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg3", 
                        "f_var": "arg3"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": "PyBool_Type", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "arg3", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg3", 
                        "py_var": "SH_Py_arg3"
                    }, 
                    "init": null, 
                    "name": "arg3", 
                    "type": "bool"
                }
            ], 
            "decl": "void checkBool(bool arg1, bool * arg2+intent(out), bool * arg3+intent(inout))", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "checkBool(arg1, arg2, arg3);", 
                "C_call_list": "arg1, arg2, arg3", 
                "C_name": "AA_check_bool", 
                "C_prototype": "bool arg1, bool * arg2, bool * arg3", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_check_bool", 
                "F_C_name": "c_check_bool", 
                "F_arg_c_call": "SH_arg1, SH_arg2, SH_arg3", 
                "F_arg_c_call_tab": "\tSH_arg1\tSH_arg2\tSH_arg3", 
                "F_arguments": "arg1, arg2, arg3", 
                "F_call_code": "call c_check_bool(\tSH_arg1\tSH_arg2\tSH_arg3)", 
                "F_name_function": "check_bool", 
                "F_name_generic": "check_bool", 
                "F_name_impl": "check_bool", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_check_bool", 
                "c_const": "", 
                "function_name": "checkBool", 
                "underscore_name": "check_bool"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "checkBool", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 60, 
            "_cpp_overload": [
                51, 
                52
            ], 
            "_decl": "void test_names(const std::string & name +intent(in))", 
            "_function_index": 51, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "const": true, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name", 
                        "py_var": "SH_Py_name"
                    }, 
                    "init": null, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "decl": "void test_names(const std::string &name)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "test_names(SH_name);", 
                "C_call_list": "SH_name", 
                "C_name": "AA_test_names", 
                "C_pre_call": "const std::string SH_name(name);", 
                "C_prototype": "const char * name", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_test_names_bufferify", 
                "F_C_name": "c_test_names", 
                "F_arg_c_call": "name, len_trim(name, kind=C_INT)", 
                "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)", 
                "F_arguments": "name", 
                "F_call_code": "call c_test_names_bufferify(\tname\tlen_trim(name, kind=C_INT))", 
                "F_name_function": "test_names", 
                "F_name_generic": "test_names", 
                "F_name_impl": "test_names", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_test_names", 
                "c_const": "", 
                "function_name": "test_names", 
                "function_suffix": "", 
                "underscore_name": "test_names"
            }, 
            "func_const": false, 
            "function_suffix": "", 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 51, 
            "_cpp_overload": [
                51, 
                52
            ], 
            "_decl": "void test_names(const std::string & name +intent(in)+len_trim(Lname))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 60, 
            "_generated": "arg_to_buffer", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "len_trim": "Lname", 
                        "reference": true, 
                        "value": false
                    }, 
                    "const": true, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "c_var_trim": "Lname", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtf": {
                        "c_var": "name", 
                        "f_var": "name"
                    }, 
                    "init": null, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "decl": "void test_names(const std::string &name)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "test_names(SH_name);", 
                "C_call_list": "SH_name", 
                "C_name": "AA_test_names_bufferify", 
                "C_pre_call": "const std::string SH_name(name, Lname);", 
                "C_prototype": "const char * name, int Lname", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_test_names_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "func_const": false, 
            "function_suffix": "", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 61, 
            "_cpp_overload": [
                51, 
                52
            ], 
            "_decl": "void test_names(const std::string & name +intent(in), int flag +intent(in)+value)", 
            "_function_index": 52, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "const": true, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name", 
                        "py_var": "SH_Py_name"
                    }, 
                    "init": null, 
                    "name": "name", 
                    "type": "std::string"
                }, 
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "flag", 
                        "cpp_type": "int", 
                        "cpp_var": "flag"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "flag", 
                        "cpp_type": "int", 
                        "cpp_var": "flag", 
                        "py_var": "SH_Py_flag"
                    }, 
                    "init": null, 
                    "name": "flag", 
                    "type": "int"
                }
            ], 
            "decl": "void test_names(const std::string &name, int flag)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "test_names(SH_name, flag);", 
                "C_call_list": "SH_name, flag", 
                "C_name": "AA_test_names_flag", 
                "C_pre_call": "const std::string SH_name(name);", 
                "C_prototype": "const char * name, int flag", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_test_names_flag_bufferify", 
                "F_C_name": "c_test_names_flag", 
                "F_arg_c_call": "name, len_trim(name, kind=C_INT), flag", 
                "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)\tflag", 
                "F_arguments": "name, flag", 
                "F_call_code": "call c_test_names_flag_bufferify(\tname\tlen_trim(name, kind=C_INT)\tflag)", 
                "F_name_function": "test_names_flag", 
                "F_name_generic": "test_names", 
                "F_name_impl": "test_names_flag", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_test_names_flag", 
                "c_const": "", 
                "function_name": "test_names", 
                "function_suffix": "_flag", 
                "underscore_name": "test_names"
            }, 
            "func_const": false, 
            "function_suffix": "_flag", 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 52, 
            "_cpp_overload": [
                51, 
                52
            ], 
            "_decl": "void test_names(const std::string & name +intent(in)+len_trim(Lname), int flag +intent(in)+value)", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 61, 
            "_generated": "arg_to_buffer", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "len_trim": "Lname", 
                        "reference": true, 
                        "value": false
                    }, 
                    "const": true, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "c_var_trim": "Lname", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtf": {
                        "c_var": "name", 
                        "f_var": "name"
                    }, 
                    "init": null, 
                    "name": "name", 
                    "type": "std::string"
                }, 
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "flag", 
                        "cpp_type": "int", 
                        "cpp_var": "flag"
                    }, 
                    "fmtf": {
                        "c_var": "flag", 
                        "f_var": "flag"
                    }, 
                    "init": null, 
                    "name": "flag", 
                    "type": "int"
                }
            ], 
            "decl": "void test_names(const std::string &name, int flag)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "test_names(SH_name, flag);", 
                "C_call_list": "SH_name, flag", 
                "C_name": "AA_test_names_flag_bufferify", 
                "C_pre_call": "const std::string SH_name(name, Lname);", 
                "C_prototype": "const char * name, int Lname, int flag", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_test_names_flag_bufferify", 
                "c_const": "", 
                "function_suffix": "_flag_bufferify"
            }, 
            "func_const": false, 
            "function_suffix": "_flag", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testoptional()", 
            "_function_index": 57, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [], 
            "decl": "void testoptional(int i = 1, long j=2)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "testoptional();", 
                "C_call_list": "", 
                "C_name": "AA_testoptional_0", 
                "C_prototype": "", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_testoptional_0", 
                "F_C_name": "c_testoptional_0", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "call c_testoptional_0(\t)", 
                "F_name_function": "testoptional_0", 
                "F_name_generic": "testoptional", 
                "F_name_impl": "testoptional_0", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_suffix": "_0"
            }, 
            "func_const": false, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "testoptional", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testoptional(int i=1 +intent(in)+value)", 
            "_function_index": 58, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "i", 
                        "cpp_type": "int", 
                        "cpp_var": "i"
                    }, 
                    "fmtf": {
                        "c_var": "i", 
                        "f_var": "i"
                    }, 
                    "init": 1, 
                    "name": "i", 
                    "type": "int"
                }
            ], 
            "decl": "void testoptional(int i = 1, long j=2)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "testoptional(i);", 
                "C_call_list": "i", 
                "C_name": "AA_testoptional_1", 
                "C_prototype": "int i", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_testoptional_1", 
                "F_C_name": "c_testoptional_1", 
                "F_arg_c_call": "i", 
                "F_arg_c_call_tab": "\ti", 
                "F_arguments": "i", 
                "F_call_code": "call c_testoptional_1(\ti)", 
                "F_name_function": "testoptional_1", 
                "F_name_generic": "testoptional", 
                "F_name_impl": "testoptional_1", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_suffix": "_1"
            }, 
            "func_const": false, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "testoptional", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)", 
            "_default_funcs": [
                57, 
                58
            ], 
            "_function_index": 53, 
            "_has_default_arg": true, 
            "_nargs": [
                0, 
                2
            ], 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "i", 
                        "cpp_type": "int", 
                        "cpp_var": "i"
                    }, 
                    "fmtf": {
                        "c_var": "i", 
                        "f_var": "i"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "i", 
                        "cpp_type": "int", 
                        "cpp_var": "i", 
                        "py_var": "SH_Py_i"
                    }, 
                    "init": 1, 
                    "name": "i", 
                    "type": "int"
                }, 
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "j", 
                        "cpp_type": "long", 
                        "cpp_var": "j"
                    }, 
                    "fmtf": {
                        "c_var": "j", 
                        "f_var": "j"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "j", 
                        "cpp_type": "long", 
                        "cpp_var": "j", 
                        "py_var": "SH_Py_j"
                    }, 
                    "init": 2, 
                    "name": "j", 
                    "type": "long"
                }
            ], 
            "decl": "void testoptional(int i = 1, long j=2)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "testoptional(i, j);", 
                "C_call_list": "i, j", 
                "C_name": "AA_testoptional_2", 
                "C_prototype": "int i, long j", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_testoptional_2", 
                "F_C_name": "c_testoptional_2", 
                "F_arg_c_call": "i, j", 
                "F_arg_c_call_tab": "\ti\tj", 
                "F_arguments": "i, j", 
                "F_call_code": "call c_testoptional_2(\ti\tj)", 
                "F_name_function": "testoptional_2", 
                "F_name_generic": "testoptional", 
                "F_name_impl": "testoptional_2", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_testoptional_2", 
                "c_const": "", 
                "function_name": "testoptional", 
                "function_suffix": "_2", 
                "underscore_name": "testoptional"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "testoptional", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testmpi(MPI_Comm comm +intent(in)+value)", 
            "_function_index": 54, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "comm", 
                        "cpp_type": "MPI_Comm", 
                        "cpp_var": "comm"
                    }, 
                    "fmtf": {
                        "c_var": "comm", 
                        "f_var": "comm"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "comm", 
                        "cpp_type": "MPI_Comm", 
                        "cpp_var": "comm", 
                        "py_var": "SH_Py_comm"
                    }, 
                    "init": null, 
                    "name": "comm", 
                    "type": "MPI_Comm"
                }
            ], 
            "decl": "void testmpi(MPI_Comm comm)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "testmpi(MPI_Comm_f2c(comm));", 
                "C_call_list": "MPI_Comm_f2c(comm)", 
                "C_name": "AA_testmpi", 
                "C_prototype": "MPI_Fint comm", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_testmpi", 
                "F_C_name": "testmpi", 
                "F_arg_c_call": "comm", 
                "F_arg_c_call_tab": "\tcomm", 
                "F_arguments": "comm", 
                "F_call_code": "call c_testmpi(\tcomm)", 
                "F_name_function": "testmpi", 
                "F_name_generic": "testmpi", 
                "F_name_impl": "testmpi", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_testmpi", 
                "c_const": "", 
                "function_name": "testmpi", 
                "underscore_name": "testmpi"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "testmpi", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testgroup1(DataGroup * grp +intent(in)+value)", 
            "_function_index": 55, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "ptr": true, 
                        "value": true
                    }, 
                    "const": false, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "grp", 
                        "cpp_type": "axom::sidre::Group", 
                        "cpp_var": "SH_grp"
                    }, 
                    "fmtf": {
                        "c_var": "grp", 
                        "f_var": "grp"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "grp", 
                        "cpp_type": "axom::sidre::Group", 
                        "cpp_var": "SH_grp", 
                        "py_var": "SH_Py_grp"
                    }, 
                    "init": null, 
                    "name": "grp", 
                    "type": "DataGroup"
                }
            ], 
            "decl": "void testgroup1(DataGroup * grp)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "testgroup1(SH_grp);", 
                "C_call_list": "SH_grp", 
                "C_name": "AA_testgroup1", 
                "C_pre_call": "axom::sidre::Group * SH_grp = static_cast<axom::sidre::Group *>(static_cast<void *>(grp));", 
                "C_prototype": "SIDRE_group * grp", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_testgroup1", 
                "F_C_name": "c_testgroup1", 
                "F_arg_c_call": "grp%get_instance()", 
                "F_arg_c_call_tab": "\tgrp%get_instance()", 
                "F_arguments": "grp", 
                "F_call_code": "call c_testgroup1(\tgrp%get_instance())", 
                "F_name_function": "testgroup1", 
                "F_name_generic": "testgroup1", 
                "F_name_impl": "testgroup1", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_testgroup1", 
                "c_const": "", 
                "function_name": "testgroup1", 
                "underscore_name": "testgroup1"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "testgroup1", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testgroup2(const DataGroup * grp +intent(in)+value)", 
            "_function_index": 56, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "ptr": true, 
                        "value": true
                    }, 
                    "const": true, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "grp", 
                        "cpp_type": "axom::sidre::Group", 
                        "cpp_var": "SH_grp"
                    }, 
                    "fmtf": {
                        "c_var": "grp", 
                        "f_var": "grp"
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "grp", 
                        "cpp_type": "axom::sidre::Group", 
                        "cpp_var": "SH_grp", 
                        "py_var": "SH_Py_grp"
                    }, 
                    "init": null, 
                    "name": "grp", 
                    "type": "DataGroup"
                }
            ], 
            "decl": "void testgroup2(const DataGroup * grp)", 
            "fattrs": {}, 
            "fmt": {
                "C_call_code": "testgroup2(SH_grp);", 
                "C_call_list": "SH_grp", 
                "C_name": "AA_testgroup2", 
                "C_pre_call": "const axom::sidre::Group * SH_grp = static_cast<const axom::sidre::Group *>(static_cast<const void *>(grp));", 
                "C_prototype": "const SIDRE_group * grp", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_testgroup2", 
                "F_C_name": "c_testgroup2", 
                "F_arg_c_call": "grp%get_instance()", 
                "F_arg_c_call_tab": "\tgrp%get_instance()", 
                "F_arguments": "grp", 
                "F_call_code": "call c_testgroup2(\tgrp%get_instance())", 
                "F_name_function": "testgroup2", 
                "F_name_generic": "testgroup2", 
                "F_name_impl": "testgroup2", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PP_testgroup2", 
                "c_const": "", 
                "function_name": "testgroup2", 
                "underscore_name": "testgroup2"
            }, 
            "func_const": false, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "const": false, 
                "init": null, 
                "name": "testgroup2", 
                "type": "void"
            }
        }
    ], 
    "language": "c++", 
    "library": "UserLibrary", 
    "namespace": "example nested", 
    "options": {
        "C_bufferify_suffix": "_bufferify", 
        "C_header_filename_class_template": "wrap{cpp_class}.{C_header_filename_suffix}", 
        "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
        "C_impl_filename_class_template": "wrap{cpp_class}.{C_impl_filename_suffix}", 
        "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
        "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "C_prefix": "AA_", 
        "C_var_len_template": "N{c_var}", 
        "C_var_size_template": "S{c_var}", 
        "C_var_trim_template": "L{c_var}", 
        "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "F_C_prefix": "c_", 
        "F_force_wrapper": false, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.{F_filename_suffix}", 
        "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
        "F_module_name_class_template": "{class_lower}_mod", 
        "F_module_name_library_template": "{library_lower}_mod", 
        "F_module_per_class": true, 
        "F_name_associated": "associated", 
        "F_name_function_template": "{underscore_name}{function_suffix}", 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
        "F_name_instance_get": "yadda", 
        "F_name_instance_set": null, 
        "F_string_len_trim": true, 
        "LUA_class_reg_template": "{LUA_prefix}{cpp_class}_Reg", 
        "LUA_ctor_name_template": "{cpp_class}", 
        "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
        "LUA_metadata_template": "{cpp_class}.metatable", 
        "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
        "LUA_module_name_template": "{library_lower}", 
        "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
        "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
        "LUA_name_template": "{function_name}", 
        "LUA_userdata_member_template": "self", 
        "LUA_userdata_type_template": "{LUA_prefix}{cpp_class}_Type", 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
        "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
        "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
        "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "PY_prefix": "PP_", 
        "PY_type_filename_template": "py{cpp_class}type.{PY_impl_filename_suffix}", 
        "YAML_type_filename_template": "{library_lower}_types.yaml", 
        "class_prefix_template": "{class_lower}_", 
        "debug": true, 
        "doxygen": true, 
        "show_splicer_comments": true, 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_lua": false, 
        "wrap_python": true
    }, 
    "patterns": {
        "C_invalid_name": "if (! isNameValid({cpp_var})) {{\n    return NULL;\n}}\n", 
        "PY_invalid_name": "if (! isNameValid({cpp_var})) {{\n    PyErr_SetString(PyExc_KeyError, \"XXX need value of name\");\n    return NULL;\n}}\n"
    }, 
    "splicer": {
        "c": [
            "csplicer.c"
        ], 
        "f": [
            "fsplicer.f"
        ], 
        "py": [
            "pysplicer.c"
        ]
    }, 
    "type_aliases": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float", 
        "std::string": "string", 
        "std::vector": "vector"
    }, 
    "types": {
        "DataGroup": {
            "LUA_pop": "({LUA_userdata_type} *)luaL_checkudata({LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyTypeObject": "FillInTypeForGroup", 
            "base": "wrapped", 
            "c_header": "sidre/wrapGroup.h", 
            "c_to_cpp": "static_cast<{c_const}axom::sidre::Group{c_ptr}>(static_cast<{c_const}void *>({c_var}))", 
            "c_type": "SIDRE_group", 
            "cpp_header": "sidre/Group.hpp", 
            "cpp_local_var": true, 
            "cpp_to_c": "static_cast<{c_const}SIDRE_group *>(static_cast<{c_const}void *>({cpp_var}))", 
            "cpp_type": "axom::sidre::Group", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "datagroup", 
            "f_module": {
                "sidre_mod": [
                    "group"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call_tab})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(datagroup)", 
            "forward": "axom::sidre::Group", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = {py_var} ? {py_var}->{BBB} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{BBB} = {cpp_var};"
                    ]
                }
            }
        }, 
        "ExClass1": {
            "LUA_pop": "({LUA_userdata_type} *)luaL_checkudata({LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PP_ExClass1", 
            "PY_PyTypeObject": "PP_ExClass1_Type", 
            "PY_from_object": "PP_ExClass1_from_Object", 
            "PY_to_object": "PP_ExClass1_to_Object", 
            "base": "wrapped", 
            "c_to_cpp": "static_cast<{c_const}ExClass1{c_ptr}>(static_cast<{c_const}void *>({c_var}))", 
            "c_type": "AA_exclass1", 
            "cpp_to_c": "static_cast<{c_const}AA_exclass1 *>(static_cast<{c_const}void *>({cpp_var}))", 
            "cpp_type": "ExClass1", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "exclass1", 
            "f_module": {
                "exclass1_mod": [
                    "exclass1"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call_tab})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%yadda()", 
            "f_type": "type(exclass1)", 
            "forward": "ExClass1", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = {py_var} ? {py_var}->{BBB} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{BBB} = {cpp_var};"
                    ]
                }
            }
        }, 
        "ExClass2": {
            "LUA_pop": "({LUA_userdata_type} *)luaL_checkudata({LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PP_ExClass2", 
            "PY_PyTypeObject": "PP_ExClass2_Type", 
            "PY_from_object": "PP_ExClass2_from_Object", 
            "PY_to_object": "PP_ExClass2_to_Object", 
            "base": "wrapped", 
            "c_to_cpp": "static_cast<{c_const}ExClass2{c_ptr}>(static_cast<{c_const}void *>({c_var}))", 
            "c_type": "AA_exclass2", 
            "cpp_to_c": "static_cast<{c_const}AA_exclass2 *>(static_cast<{c_const}void *>({cpp_var}))", 
            "cpp_type": "ExClass2", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "exclass2", 
            "f_module": {
                "exclass2_mod": [
                    "exclass2"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call_tab})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%yadda()", 
            "f_type": "type(exclass2)", 
            "forward": "ExClass2", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = {py_var} ? {py_var}->{BBB} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{BBB} = {cpp_var};"
                    ]
                }
            }
        }, 
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cpp": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cpp_to_c": "MPI_Comm_c2f({cpp_var})", 
            "cpp_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "SidreLength": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_header": "sidre/SidreTypes.h", 
            "c_type": "SIDRE_SidreLength", 
            "cpp_type": "SidreLength", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)", 
            "typedef": "long"
        }, 
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_header": "sidre/SidreTypes.h", 
            "c_to_cpp": "getTypeID({c_var})", 
            "c_type": "int", 
            "cpp_header": "sidre/SidreWrapperHelpers.hpp", 
            "cpp_to_c": "static_cast<int>({cpp_var})", 
            "cpp_type": "TypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({c_var})", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = PyObject_IsTrue({py_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cpp_header": "<stdlib.h> <cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<stdlib.h> <cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<stdlib.h>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "if ({cpp_var} == NULL) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cpp_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cpp_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "other": {
            "cpp_type": "junk"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cpp_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cpp_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "      {c_var}[{c_temp}i] = {cpp_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cpp_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cpp_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "    {c_var}[{c_temp}i] = {cpp_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cpp_local_var": true, 
                        "pre_call": [
                            "std::vector<{cpp_T}> {cpp_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cpp_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cpp_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cpp_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cpp_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cpp_T}> {cpp_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cpp_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cpp_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cpp_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cpp_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cpp_T}> {cpp_var};"
                        ]
                    }
                }
            }, 
            "cpp_header": "<vector>", 
            "cpp_type": "std::vector<{cpp_T}>"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cpp_var}, NULL, NULL)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}