{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.", 
    "library": {
        "classes": [
            {
                "cxx_header": "ExClass1.hpp", 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapExClass1.h", 
                    "C_impl_filename": "wrapExClass1.cpp", 
                    "C_type_name": "AA_exclass1", 
                    "F_derived_name": "exclass1", 
                    "F_impl_filename": "wrapfExClass1.f", 
                    "F_module_name": "exclass1_mod", 
                    "LUA_class_reg": "l_ExClass1_Reg", 
                    "LUA_ctor_name": "ExClass1", 
                    "LUA_metadata": "ExClass1.metatable", 
                    "LUA_this_call": "SH_this->self->", 
                    "LUA_userdata_member": "self", 
                    "LUA_userdata_type": "l_ExClass1_Type", 
                    "LUA_userdata_var": "SH_this", 
                    "PY_PyObject": "PP_ExClass1", 
                    "PY_PyTypeObject": "PP_ExClass1_Type", 
                    "PY_capsule_name": "PY_ExClass1_capsule_name", 
                    "PY_from_object_func": "PP_ExClass1_from_Object", 
                    "PY_this_call": "self->obj->", 
                    "PY_to_object_func": "PP_ExClass1_to_Object", 
                    "PY_type_filename": "pyExClass1type.cpp", 
                    "class_lower": "exclass1", 
                    "class_prefix": "exclass1_", 
                    "class_scope": "ExClass1::", 
                    "class_upper": "EXCLASS1", 
                    "cxx_class": "ExClass1"
                }, 
                "functions": [
                    {
                        "_cxx_overload": [
                            0, 
                            1
                        ], 
                        "_fmtresult": {
                            "fmtc": {
                                "c_val": "\tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "\tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PP_ExClass1", 
                                "PyTypeObject": "PP_ExClass1_Type", 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 0, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_constructor": true, 
                                "_name": "ctor", 
                                "_typename": "example::nested::ExClass1"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "ExClass1"
                            ]
                        }, 
                        "decl": "ExClass1()", 
                        "declgen": "ExClass1()", 
                        "format": {
                            "C_call_code": "example::\tnested::\tExClass1 * SHCXX_rv = new example::\tnested::\tExClass1();", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_ctor_0", 
                            "C_post_call": "AA_exclass1 * SHC_rv = \tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_prototype": "", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "AA_exclass1 *", 
                            "F_C_call": "c_exclass1_ctor_0", 
                            "F_C_name": "c_exclass1_ctor_0", 
                            "F_arg_c_call": "", 
                            "F_arguments": "", 
                            "F_call_code": "SHT_rv%voidptr = c_exclass1_ctor_0()", 
                            "F_name_function": "ctor_0", 
                            "F_name_generic": "ctor", 
                            "F_name_impl": "exclass1_ctor_0", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "ctor", 
                            "LUA_name_impl": "l_exclass1_ctor", 
                            "PY_name_impl": "PP_ExClass1_tp_init_0", 
                            "PY_type_impl": "PP_ExClass1_tp_init_0", 
                            "PY_type_method": "tp_init", 
                            "c_const": "", 
                            "c_rv_decl": "AA_exclass1 * SHC_rv", 
                            "cxx_rv_decl": "example::\tnested::\tExClass1 * SHCXX_rv", 
                            "function_name": "ctor", 
                            "function_suffix": "_0", 
                            "underscore_name": "ctor"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_F_C_index": 14, 
                        "_cxx_overload": [
                            0, 
                            1
                        ], 
                        "_fmtargs": {
                            "name": {
                                "fmtc": {
                                    "c_const": "const ", 
                                    "c_ptr": "*", 
                                    "c_var": "name", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SH_name"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": " *", 
                                    "c_var": "lua_tostring(L, 1)", 
                                    "c_var_len": "Lname", 
                                    "cxx_deref": "->", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "name", 
                                    "lua_var": "SH_Lua_name"
                                }, 
                                "fmtpy": {
                                    "c_const": "const ", 
                                    "c_decl": "const char * name", 
                                    "c_ptr": " *", 
                                    "c_type": "char", 
                                    "c_var": "name", 
                                    "cxx_addr": "", 
                                    "cxx_decl": "const std::string * name", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SH_name", 
                                    "numpy_type": null, 
                                    "py_var": "SHPy_name"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_val": "\tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "\tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PP_ExClass1", 
                                "PyTypeObject": "PP_ExClass1_Type", 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 1, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_constructor": true, 
                                "_name": "ctor", 
                                "_typename": "example::nested::ExClass1"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "std::string", 
                                        "intent": "in", 
                                        "value": false
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "name", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "*"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "ExClass1"
                            ]
                        }, 
                        "decl": "ExClass1( const string *name )", 
                        "declgen": "ExClass1(const string * name +intent(in))", 
                        "doxygen": {
                            "brief": "constructor", 
                            "description": "longer description\nusually multiple lines\n", 
                            "return": "return new instance"
                        }, 
                        "format": {
                            "C_call_code": "example::\tnested::\tExClass1 * SHCXX_rv = new example::\tnested::\tExClass1(&SH_name);", 
                            "C_call_list": "&SH_name", 
                            "C_name": "AA_exclass1_ctor_1", 
                            "C_post_call": "AA_exclass1 * SHC_rv = \tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_pre_call": "const std::string SH_name(name);", 
                            "C_prototype": "const char * name", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "AA_exclass1 *", 
                            "F_C_call": "c_exclass1_ctor_1_bufferify", 
                            "F_C_name": "c_exclass1_ctor_1", 
                            "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)", 
                            "F_arguments": "name", 
                            "F_call_code": "SHT_rv%voidptr = c_exclass1_ctor_1_bufferify(name,\t len_trim(name, kind=C_INT))", 
                            "F_name_function": "ctor_1", 
                            "F_name_generic": "ctor", 
                            "F_name_impl": "exclass1_ctor_1", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "PY_name_impl": "PP_ExClass1_tp_init_1", 
                            "PY_type_impl": "PP_ExClass1_tp_init_1", 
                            "PY_type_method": "tp_init", 
                            "c_const": "", 
                            "c_rv_decl": "AA_exclass1 * SHC_rv", 
                            "cxx_rv_decl": "example::\tnested::\tExClass1 * SHCXX_rv", 
                            "function_name": "ctor", 
                            "function_suffix": "_1", 
                            "underscore_name": "ctor"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_C_CXX_index": 1, 
                        "_cxx_overload": [
                            0, 
                            1
                        ], 
                        "_fmtargs": {
                            "name": {
                                "fmtc": {
                                    "c_const": "const ", 
                                    "c_ptr": "*", 
                                    "c_var": "name", 
                                    "c_var_trim": "Lname", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SH_name"
                                }, 
                                "fmtf": {
                                    "c_var": "name", 
                                    "f_var": "name"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_val": "\tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 14, 
                        "_generated": "arg_to_buffer", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_constructor": true, 
                                "_name": "ctor", 
                                "_typename": "example::nested::ExClass1"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "std::string", 
                                        "intent": "in", 
                                        "len_trim": "Lname", 
                                        "value": false
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "name", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "*"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "ExClass1"
                            ]
                        }, 
                        "decl": "ExClass1( const string *name )", 
                        "declgen": "ExClass1(const string * name +intent(in)+len_trim(Lname))", 
                        "doxygen": {
                            "brief": "constructor", 
                            "description": "longer description\nusually multiple lines\n", 
                            "return": "return new instance"
                        }, 
                        "format": {
                            "C_call_code": "example::\tnested::\tExClass1 * SHCXX_rv = new example::\tnested::\tExClass1(&SH_name);", 
                            "C_call_list": "&SH_name", 
                            "C_name": "AA_exclass1_ctor_1_bufferify", 
                            "C_post_call": "AA_exclass1 * SHC_rv = \tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_pre_call": "const std::string SH_name(name, Lname);", 
                            "C_prototype": "const char * name,\t int Lname", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "AA_exclass1 *", 
                            "F_C_name": "c_exclass1_ctor_1_bufferify", 
                            "c_const": "", 
                            "c_rv_decl": "AA_exclass1 * SHC_rv", 
                            "cxx_rv_decl": "example::\tnested::\tExClass1 * SHCXX_rv", 
                            "function_name": "ctor", 
                            "function_suffix": "_1_bufferify", 
                            "underscore_name": "ctor"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_function_index": 2, 
                        "ast": {
                            "attrs": {
                                "_destructor": true, 
                                "_name": "dtor", 
                                "_typename": "example::nested::ExClass1"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "ExClass1"
                            ]
                        }, 
                        "decl": "~ExClass1()", 
                        "declgen": "~ExClass1()", 
                        "doxygen": {
                            "brief": "destructor", 
                            "description": "longer description joined with previous line"
                        }, 
                        "format": {
                            "C_call_code": "delete SH_this;", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_dtor", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass1_dtor", 
                            "F_C_name": "c_exclass1_dtor", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass1_dtor(obj%voidptr)", 
                            "F_name_function": "delete", 
                            "F_name_generic": "dtor", 
                            "F_name_impl": "exclass1_dtor", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "dtor", 
                            "LUA_name_impl": "l_exclass1_dtor", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "dtor", 
                            "underscore_name": "dtor"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtargs": {
                            "incr": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "incr", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "incr"
                                }, 
                                "fmtf": {
                                    "c_var": "incr", 
                                    "f_var": "incr"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Lincr", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "incr", 
                                    "lua_var": "SH_Lua_incr"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "int incr", 
                                    "c_ptr": "", 
                                    "c_type": "int", 
                                    "c_var": "incr", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "int incr", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "incr", 
                                    "numpy_type": "NPY_INT", 
                                    "py_var": "SHPy_incr"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_INT", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 3, 
                        "ast": {
                            "attrs": {
                                "_typename": "int"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "incrementCount", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "incr", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "decl": "int incrementCount(int incr)", 
                        "declgen": "int incrementCount(int incr +intent(in)+value)", 
                        "format": {
                            "C_call_code": "int SHC_rv =\t SH_this->incrementCount(\tincr);", 
                            "C_call_list": "incr", 
                            "C_name": "AA_exclass1_increment_count", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self,\t int incr", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_exclass1_increment_count", 
                            "F_C_name": "c_exclass1_increment_count", 
                            "F_arg_c_call": "obj%voidptr,\t incr", 
                            "F_arguments": "obj,\t incr", 
                            "F_call_code": "SHT_rv = c_exclass1_increment_count(obj%voidptr,\t incr)", 
                            "F_name_function": "increment_count", 
                            "F_name_generic": "increment_count", 
                            "F_name_impl": "exclass1_increment_count", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "incrementCount", 
                            "LUA_name_impl": "l_exclass1_increment_count", 
                            "PY_name_impl": "PP_exclass1_incrementCount", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "int SHC_rv", 
                            "function_name": "incrementCount", 
                            "underscore_name": "increment_count"
                        }, 
                        "options": {}
                    }, 
                    {
                        "C_error_pattern": "C_invalid_name", 
                        "PY_error_pattern": "PY_invalid_name", 
                        "_PTR_F_C_index": 15, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "const char * SHC_rv", 
                                "c_val": "SHCXX_rv.c_str()", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 4, 
                        "ast": {
                            "attrs": {
                                "_typename": "std::string", 
                                "len": "aa_exclass1_get_name_length({F_this}%{F_derived_member})"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "getNameErrorPattern", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "string"
                            ]
                        }, 
                        "decl": "const string& getNameErrorPattern() const", 
                        "declgen": "const string & getNameErrorPattern() const +len(aa_exclass1_get_name_length({F_this}%{F_derived_member}))", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getNameErrorPattern(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_name_error_pattern", 
                            "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                            "C_post_call_pattern": "// C_error_pattern\nif (! isNameValid(SHCXX_rv)) {\n    return NULL;\n}\n", 
                            "C_pre_call": "const example::\tnested::\tExClass1 *SH_this = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "const char *", 
                            "F_C_call": "c_exclass1_get_name_error_pattern_bufferify", 
                            "F_C_name": "c_exclass1_get_name_error_pattern", 
                            "F_arg_c_call": "obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass1_get_name_error_pattern_bufferify(obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                            "F_name_function": "get_name_error_pattern", 
                            "F_name_generic": "get_name_error_pattern", 
                            "F_name_impl": "exclass1_get_name_error_pattern", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getNameErrorPattern", 
                            "LUA_name_impl": "l_exclass1_get_name_error_pattern", 
                            "PY_name_impl": "PP_exclass1_getNameErrorPattern", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "c_var_len": "aa_exclass1_get_name_length(obj%voidptr)", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getNameErrorPattern", 
                            "underscore_name": "get_name_error_pattern"
                        }, 
                        "options": {}
                    }, 
                    {
                        "C_error_pattern": "C_invalid_name", 
                        "PY_error_pattern": "PY_invalid_name", 
                        "_PTR_C_CXX_index": 4, 
                        "_fmtargs": {
                            "SHF_rv": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "SHF_rv", 
                                    "c_var_len": "NSHF_rv", 
                                    "cxx_addr": "&", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SHCXX_rv"
                                }, 
                                "fmtf": {
                                    "c_var": "SHT_rv", 
                                    "f_var": "SHT_rv"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 15, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void", 
                                "len": "aa_exclass1_get_name_length({F_this}%{F_derived_member})"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getNameErrorPattern", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "NSHF_rv"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "SHF_rv", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "const string& getNameErrorPattern() const", 
                        "declgen": "void getNameErrorPattern(string & SHF_rv +intent(out)+len(NSHF_rv)) const +len(aa_exclass1_get_name_length({F_this}%{F_derived_member}))", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getNameErrorPattern(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_name_error_pattern_bufferify", 
                            "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                            "C_pre_call": "const example::\tnested::\tExClass1 *SH_this = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass1 * self,\t char * SHF_rv,\t int NSHF_rv", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass1_get_name_error_pattern_bufferify", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getNameErrorPattern", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "get_name_error_pattern"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_INT", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 5, 
                        "ast": {
                            "attrs": {
                                "_typename": "int"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "GetNameLength", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "decl": "int GetNameLength() const", 
                        "declgen": "int GetNameLength() const", 
                        "doxygen": {
                            "brief": "helper function for Fortran to get length of name."
                        }, 
                        "format": {
                            "C_call_code": "int SHC_rv =\t SH_this->GetNameLength(\t);", 
                            "C_call_list": "", 
                            "C_code": "{C_pre_call}\nreturn {CXX_this}->getName().length();\n", 
                            "C_name": "AA_exclass1_get_name_length", 
                            "C_pre_call": "const example::\tnested::\tExClass1 *SH_this = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_exclass1_get_name_length", 
                            "F_C_name": "c_exclass1_get_name_length", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_exclass1_get_name_length(obj%voidptr)", 
                            "F_name_function": "get_name_length", 
                            "F_name_generic": "get_name_length", 
                            "F_name_impl": "exclass1_get_name_length", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "GetNameLength", 
                            "LUA_name_impl": "l_exclass1_get_name_length", 
                            "PY_name_impl": "PP_exclass1_GetNameLength", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "int SHC_rv", 
                            "function_name": "GetNameLength", 
                            "underscore_name": "get_name_length"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_F_C_index": 16, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "const char * SHC_rv", 
                                "c_val": "SHCXX_rv.c_str()", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 6, 
                        "ast": {
                            "attrs": {
                                "_typename": "std::string"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "getNameErrorCheck", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "string"
                            ]
                        }, 
                        "decl": "const string& getNameErrorCheck() const", 
                        "declgen": "const string & getNameErrorCheck() const", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getNameErrorCheck(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_name_error_check", 
                            "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                            "C_pre_call": "const example::\tnested::\tExClass1 *SH_this = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "const char *", 
                            "F_C_call": "c_exclass1_get_name_error_check_bufferify", 
                            "F_C_name": "c_exclass1_get_name_error_check", 
                            "F_arg_c_call": "obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass1_get_name_error_check_bufferify(obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                            "F_name_function": "get_name_error_check", 
                            "F_name_generic": "get_name_error_check", 
                            "F_name_impl": "exclass1_get_name_error_check", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getNameErrorCheck", 
                            "LUA_name_impl": "l_exclass1_get_name_error_check", 
                            "PY_name_impl": "PP_exclass1_getNameErrorCheck", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "c_var_len": "strlen_ptr(\tc_exclass1_get_name_error_check_bufferify(\tobj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)))", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getNameErrorCheck", 
                            "underscore_name": "get_name_error_check"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_C_CXX_index": 6, 
                        "_fmtargs": {
                            "SHF_rv": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "SHF_rv", 
                                    "c_var_len": "NSHF_rv", 
                                    "cxx_addr": "&", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SHCXX_rv"
                                }, 
                                "fmtf": {
                                    "c_var": "SHT_rv", 
                                    "f_var": "SHT_rv"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 16, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getNameErrorCheck", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "NSHF_rv"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "SHF_rv", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "const string& getNameErrorCheck() const", 
                        "declgen": "void getNameErrorCheck(string & SHF_rv +intent(out)+len(NSHF_rv)) const", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getNameErrorCheck(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_name_error_check_bufferify", 
                            "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                            "C_pre_call": "const example::\tnested::\tExClass1 *SH_this = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass1 * self,\t char * SHF_rv,\t int NSHF_rv", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass1_get_name_error_check_bufferify", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getNameErrorCheck", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "get_name_error_check"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "const char * SHC_rv", 
                                "c_val": "SHCXX_rv.c_str()", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 7, 
                        "ast": {
                            "attrs": {
                                "_typename": "std::string"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "getNameArg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "string"
                            ]
                        }, 
                        "decl": "const string& getNameArg() const", 
                        "declgen": "const string & getNameArg() const", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getNameArg(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_name_arg", 
                            "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                            "C_pre_call": "const example::\tnested::\tExClass1 *SH_this = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "const char *", 
                            "F_C_name": "c_exclass1_get_name_arg", 
                            "F_string_result_as_arg": "name", 
                            "LUA_name": "getNameArg", 
                            "LUA_name_impl": "l_exclass1_get_name_arg", 
                            "PY_name_impl": "PP_exclass1_getNameArg", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getNameArg", 
                            "underscore_name": "get_name_arg"
                        }, 
                        "options": {
                            "wrap_fortran": false
                        }
                    }, 
                    {
                        "_PTR_C_CXX_index": 7, 
                        "_fmtargs": {
                            "name": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "name", 
                                    "c_var_len": "Nname", 
                                    "cxx_addr": "&", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SHCXX_rv"
                                }, 
                                "fmtf": {
                                    "c_var": "name", 
                                    "f_var": "name"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 17, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getNameArg", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "Nname"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "name", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "const string& getNameArg() const", 
                        "declgen": "void getNameArg(string & name +intent(out)+len(Nname)) const", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getNameArg(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_name_arg_bufferify", 
                            "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(name, ' ', Nname);\n} else {\n    ShroudStrCopy(name, Nname, SHCXX_rv.c_str());\n}", 
                            "C_pre_call": "const example::\tnested::\tExClass1 *SH_this = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass1 * self,\t char * name,\t int Nname", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass1_get_name_arg_bufferify", 
                            "F_string_result_as_arg": "name", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getNameArg", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "get_name_arg"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_PTR_C_CXX_index": 7, 
                        "_PTR_F_C_index": 17, 
                        "_function_index": 18, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getNameArg", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "Nname"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "name", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "const string& getNameArg() const", 
                        "declgen": "void getNameArg(string & name +intent(out)+len(Nname)) const", 
                        "format": {
                            "F_C_call": "c_exclass1_get_name_arg_bufferify", 
                            "F_arg_c_call": "obj%voidptr,\t name,\t len(name, kind=C_INT)", 
                            "F_arguments": "obj,\t name", 
                            "F_call_code": "call c_exclass1_get_name_arg_bufferify(obj%voidptr,\t name,\t len(name, kind=C_INT))", 
                            "F_name_function": "get_name_arg", 
                            "F_name_generic": "get_name_arg", 
                            "F_name_impl": "exclass1_get_name_arg", 
                            "F_string_result_as_arg": "name", 
                            "F_subprogram": "subroutine", 
                            "function_name": "getNameArg", 
                            "function_suffix": "", 
                            "underscore_name": "get_name_arg"
                        }, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": true, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "*", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 8, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getRoot", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void *getRoot()", 
                        "declgen": "void * getRoot()", 
                        "format": {
                            "C_call_code": "void * SHC_rv =\t SH_this->getRoot(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_root", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "void *", 
                            "F_C_call": "c_exclass1_get_root", 
                            "F_C_name": "c_exclass1_get_root", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_exclass1_get_root(obj%voidptr)", 
                            "F_name_function": "get_root", 
                            "F_name_generic": "get_root", 
                            "F_name_impl": "exclass1_get_root", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getRoot", 
                            "LUA_name_impl": "l_exclass1_get_root", 
                            "PY_name_impl": "PP_exclass1_getRoot", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "void * SHC_rv", 
                            "function_name": "getRoot", 
                            "underscore_name": "get_root"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_cxx_overload": [
                            9, 
                            10
                        ], 
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "value"
                                }, 
                                "fmtf": {
                                    "c_var": "value", 
                                    "f_var": "value"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Lvalue", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "value", 
                                    "lua_var": "SH_Lua_value"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "int value", 
                                    "c_ptr": "", 
                                    "c_type": "int", 
                                    "c_var": "value", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "int value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "value", 
                                    "numpy_type": "NPY_INT", 
                                    "py_var": "SHPy_value"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_INT", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 9, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "int"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "decl": "int  getValue(int value)", 
                        "declgen": "int getValue(int value +intent(in)+value)", 
                        "format": {
                            "C_call_code": "int SHC_rv =\t SH_this->getValue(\tvalue);", 
                            "C_call_list": "value", 
                            "C_name": "AA_exclass1_get_value_from_int", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self,\t int value", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_exclass1_get_value_from_int", 
                            "F_C_name": "c_exclass1_get_value_from_int", 
                            "F_arg_c_call": "obj%voidptr,\t value", 
                            "F_arguments": "obj,\t value", 
                            "F_call_code": "SHT_rv = c_exclass1_get_value_from_int(obj%voidptr,\t value)", 
                            "F_name_function": "get_value_from_int", 
                            "F_name_generic": "get_value", 
                            "F_name_impl": "exclass1_get_value_from_int", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getValue", 
                            "LUA_name_impl": "l_exclass1_get_value", 
                            "PY_name_impl": "PP_exclass1_getValue_from_int", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "int SHC_rv", 
                            "function_name": "getValue", 
                            "function_suffix": "_from_int", 
                            "underscore_name": "get_value"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_cxx_overload": [
                            9, 
                            10
                        ], 
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "long", 
                                    "cxx_var": "value"
                                }, 
                                "fmtf": {
                                    "c_var": "value", 
                                    "f_var": "value"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Lvalue", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "long", 
                                    "cxx_var": "value", 
                                    "lua_var": "SH_Lua_value"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "long value", 
                                    "c_ptr": "", 
                                    "c_type": "long", 
                                    "c_var": "value", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "long value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "long", 
                                    "cxx_var": "value", 
                                    "numpy_type": "NPY_LONG", 
                                    "py_var": "SHPy_value"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_LONG", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 10, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "long"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "long", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "long"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "long"
                            ]
                        }, 
                        "decl": "long getValue(long value)", 
                        "declgen": "long getValue(long value +intent(in)+value)", 
                        "format": {
                            "C_call_code": "long SHC_rv =\t SH_this->getValue(\tvalue);", 
                            "C_call_list": "value", 
                            "C_name": "AA_exclass1_get_value_1", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self,\t long value", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "long", 
                            "F_C_call": "c_exclass1_get_value_1", 
                            "F_C_name": "c_exclass1_get_value_1", 
                            "F_arg_c_call": "obj%voidptr,\t value", 
                            "F_arguments": "obj,\t value", 
                            "F_call_code": "SHT_rv = c_exclass1_get_value_1(obj%voidptr,\t value)", 
                            "F_name_function": "get_value_1", 
                            "F_name_generic": "get_value", 
                            "F_name_impl": "exclass1_get_value_1", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "PY_name_impl": "PP_exclass1_getValue_1", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "long SHC_rv", 
                            "function_name": "getValue", 
                            "function_suffix": "_1", 
                            "underscore_name": "get_value"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "*", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 11, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getAddr", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void *getAddr()", 
                        "declgen": "void * getAddr()", 
                        "format": {
                            "C_call_code": "void * SHC_rv =\t SH_this->getAddr(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_get_addr", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "void *", 
                            "F_C_call": "c_exclass1_get_addr", 
                            "F_C_name": "c_exclass1_get_addr", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_exclass1_get_addr(obj%voidptr)", 
                            "F_name_function": "get_addr", 
                            "F_name_generic": "get_addr", 
                            "F_name_impl": "exclass1_get_addr", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getAddr", 
                            "LUA_name_impl": "l_exclass1_get_addr", 
                            "PY_name_impl": "PP_exclass1_getAddr", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "void * SHC_rv", 
                            "function_name": "getAddr", 
                            "underscore_name": "get_addr"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtargs": {
                            "in": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "in", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "bool", 
                                    "cxx_var": "in"
                                }, 
                                "fmtf": {
                                    "c_var": "SH_in", 
                                    "f_var": "in"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_toboolean(L, 1)", 
                                    "c_var_len": "Lin", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "bool", 
                                    "cxx_var": "in", 
                                    "lua_var": "SH_Lua_in"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "bool in", 
                                    "c_ptr": "", 
                                    "c_type": "bool", 
                                    "c_var": "in", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "bool in", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "bool", 
                                    "cxx_var": "in", 
                                    "numpy_type": "NPY_BOOL", 
                                    "py_type": "PyObject", 
                                    "py_var": "SHPy_in"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": "PyBool_Type", 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_BOOL", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 12, 
                        "ast": {
                            "attrs": {
                                "_typename": "bool"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "hasAddr", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "bool", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "in", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "bool"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        "decl": "bool hasAddr(bool in)", 
                        "declgen": "bool hasAddr(bool in +intent(in)+value)", 
                        "format": {
                            "C_call_code": "bool SHC_rv =\t SH_this->hasAddr(\tin);", 
                            "C_call_list": "in", 
                            "C_name": "AA_exclass1_has_addr", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self,\t bool in", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "bool", 
                            "F_C_call": "c_exclass1_has_addr", 
                            "F_C_name": "c_exclass1_has_addr", 
                            "F_arg_c_call": "obj%voidptr,\t SH_in", 
                            "F_arguments": "obj,\t in", 
                            "F_call_code": "SHT_rv = c_exclass1_has_addr(obj%voidptr,\t SH_in)", 
                            "F_name_function": "has_addr", 
                            "F_name_generic": "has_addr", 
                            "F_name_impl": "exclass1_has_addr", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "hasAddr", 
                            "LUA_name_impl": "l_exclass1_has_addr", 
                            "PY_name_impl": "PP_exclass1_hasAddr", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "bool SHC_rv", 
                            "function_name": "hasAddr", 
                            "underscore_name": "has_addr"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_function_index": 13, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SplicerSpecial", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void SplicerSpecial()", 
                        "declgen": "void SplicerSpecial()", 
                        "format": {
                            "C_call_code": "SH_this->SplicerSpecial(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass1_splicer_special", 
                            "C_pre_call": "example::\tnested::\tExClass1 *SH_this = \tstatic_cast<example::\tnested::\tExClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass1 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass1_splicer_special", 
                            "F_C_name": "c_exclass1_splicer_special", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_name_function": "splicer_special", 
                            "F_name_generic": "splicer_special", 
                            "F_name_impl": "exclass1_splicer_special", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "SplicerSpecial", 
                            "LUA_name_impl": "l_exclass1_splicer_special", 
                            "PY_name_impl": "PP_exclass1_SplicerSpecial", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "SplicerSpecial", 
                            "underscore_name": "splicer_special"
                        }, 
                        "options": {}
                    }
                ], 
                "name": "ExClass1", 
                "options": {}, 
                "python": {
                    "type": [
                        "init", 
                        "repr", 
                        "richcompare"
                    ]
                }, 
                "typedef_name": "example::nested::ExClass1"
            }, 
            {
                "cxx_header": "ExClass2.hpp", 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapExClass2.h", 
                    "C_impl_filename": "wrapExClass2.cpp", 
                    "C_type_name": "AA_exclass2", 
                    "F_derived_name": "exclass2", 
                    "F_impl_filename": "wrapfExClass2.f", 
                    "F_module_name": "exclass2_mod", 
                    "LUA_class_reg": "l_ExClass2_Reg", 
                    "LUA_ctor_name": "ExClass2", 
                    "LUA_metadata": "ExClass2.metatable", 
                    "LUA_this_call": "SH_this->self->", 
                    "LUA_userdata_member": "self", 
                    "LUA_userdata_type": "l_ExClass2_Type", 
                    "LUA_userdata_var": "SH_this", 
                    "PY_PyObject": "PP_ExClass2", 
                    "PY_PyTypeObject": "PP_ExClass2_Type", 
                    "PY_capsule_name": "PY_ExClass2_capsule_name", 
                    "PY_from_object_func": "PP_ExClass2_from_Object", 
                    "PY_this_call": "self->obj->", 
                    "PY_to_object_func": "PP_ExClass2_to_Object", 
                    "PY_type_filename": "pyExClass2type.cpp", 
                    "class_lower": "exclass2", 
                    "class_prefix": "exclass2_", 
                    "class_scope": "ExClass2::", 
                    "class_upper": "EXCLASS2", 
                    "cxx_class": "ExClass2"
                }, 
                "functions": [
                    {
                        "_PTR_F_C_index": 39, 
                        "_fmtargs": {
                            "name": {
                                "fmtc": {
                                    "c_const": "const ", 
                                    "c_ptr": "*", 
                                    "c_var": "name", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SH_name"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": " *", 
                                    "c_var": "lua_tostring(L, 1)", 
                                    "c_var_len": "Lname", 
                                    "cxx_deref": "->", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "name", 
                                    "lua_var": "SH_Lua_name"
                                }, 
                                "fmtpy": {
                                    "c_const": "const ", 
                                    "c_decl": "const char * name", 
                                    "c_ptr": " *", 
                                    "c_type": "char", 
                                    "c_var": "name", 
                                    "cxx_addr": "", 
                                    "cxx_decl": "const std::string * name", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SH_name", 
                                    "numpy_type": null, 
                                    "py_var": "SHPy_name"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_val": "\tstatic_cast<AA_exclass2 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "\tstatic_cast<AA_exclass2 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PP_ExClass2", 
                                "PyTypeObject": "PP_ExClass2_Type", 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 19, 
                        "ast": {
                            "attrs": {
                                "_constructor": true, 
                                "_name": "ctor", 
                                "_typename": "example::nested::ExClass2"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "std::string", 
                                        "intent": "in", 
                                        "len_trim": "trim_name", 
                                        "value": false
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "name", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "*"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "ExClass2"
                            ]
                        }, 
                        "decl": "ExClass2(const string *name)", 
                        "declgen": "ExClass2(const string * name +intent(in)+len_trim(trim_name))", 
                        "doxygen": {
                            "brief": "constructor"
                        }, 
                        "format": {
                            "C_call_code": "example::\tnested::\tExClass2 * SHCXX_rv = new example::\tnested::\tExClass2(&SH_name);", 
                            "C_call_list": "&SH_name", 
                            "C_name": "AA_exclass2_ctor", 
                            "C_post_call": "AA_exclass2 * SHC_rv = \tstatic_cast<AA_exclass2 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_pre_call": "const std::string SH_name(name);", 
                            "C_prototype": "const char * name", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "AA_exclass2 *", 
                            "F_C_call": "c_exclass2_ctor_bufferify", 
                            "F_C_name": "c_exclass2_ctor", 
                            "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)", 
                            "F_arguments": "name", 
                            "F_call_code": "SHT_rv%voidptr = c_exclass2_ctor_bufferify(name,\t len_trim(name, kind=C_INT))", 
                            "F_name_function": "ctor", 
                            "F_name_generic": "ctor", 
                            "F_name_impl": "exclass2_ctor", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "ctor", 
                            "LUA_name_impl": "l_exclass2_ctor", 
                            "PY_name_impl": "PP_ExClass2_tp_init", 
                            "PY_type_impl": "PP_ExClass2_tp_init", 
                            "PY_type_method": "tp_init", 
                            "c_const": "", 
                            "c_rv_decl": "AA_exclass2 * SHC_rv", 
                            "cxx_rv_decl": "example::\tnested::\tExClass2 * SHCXX_rv", 
                            "function_name": "ctor", 
                            "underscore_name": "ctor"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_C_CXX_index": 19, 
                        "_fmtargs": {
                            "name": {
                                "fmtc": {
                                    "c_const": "const ", 
                                    "c_ptr": "*", 
                                    "c_var": "name", 
                                    "c_var_trim": "trim_name", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SH_name"
                                }, 
                                "fmtf": {
                                    "c_var": "name", 
                                    "f_var": "name"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_val": "\tstatic_cast<AA_exclass2 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 39, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_constructor": true, 
                                "_name": "ctor", 
                                "_typename": "example::nested::ExClass2"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "std::string", 
                                        "intent": "in", 
                                        "len_trim": "trim_name", 
                                        "value": false
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "name", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "*"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "ExClass2"
                            ]
                        }, 
                        "decl": "ExClass2(const string *name)", 
                        "declgen": "ExClass2(const string * name +intent(in)+len_trim(trim_name))", 
                        "doxygen": {
                            "brief": "constructor"
                        }, 
                        "format": {
                            "C_call_code": "example::\tnested::\tExClass2 * SHCXX_rv = new example::\tnested::\tExClass2(&SH_name);", 
                            "C_call_list": "&SH_name", 
                            "C_name": "AA_exclass2_ctor_bufferify", 
                            "C_post_call": "AA_exclass2 * SHC_rv = \tstatic_cast<AA_exclass2 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_pre_call": "const std::string SH_name(name, trim_name);", 
                            "C_prototype": "const char * name,\t int trim_name", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "AA_exclass2 *", 
                            "F_C_name": "c_exclass2_ctor_bufferify", 
                            "c_const": "", 
                            "c_rv_decl": "AA_exclass2 * SHC_rv", 
                            "cxx_rv_decl": "example::\tnested::\tExClass2 * SHCXX_rv", 
                            "function_name": "ctor", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "ctor"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_function_index": 20, 
                        "ast": {
                            "attrs": {
                                "_destructor": true, 
                                "_name": "dtor", 
                                "_typename": "example::nested::ExClass2"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "ExClass2"
                            ]
                        }, 
                        "decl": "~ExClass2()", 
                        "declgen": "~ExClass2()", 
                        "doxygen": {
                            "brief": "destructor"
                        }, 
                        "format": {
                            "C_call_code": "delete SH_this;", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_dtor", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass2_dtor", 
                            "F_C_name": "c_exclass2_dtor", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass2_dtor(obj%voidptr)", 
                            "F_name_function": "delete", 
                            "F_name_generic": "dtor", 
                            "F_name_impl": "exclass2_dtor", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "dtor", 
                            "LUA_name_impl": "l_exclass2_dtor", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "dtor", 
                            "underscore_name": "dtor"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_F_C_index": 40, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "const char * SHC_rv", 
                                "c_val": "SHCXX_rv.c_str()", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 21, 
                        "ast": {
                            "attrs": {
                                "_typename": "std::string", 
                                "len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "getName", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "string"
                            ]
                        }, 
                        "decl": "const string& getName() const", 
                        "declgen": "const string & getName() const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getName(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name", 
                            "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                            "C_pre_call": "const example::\tnested::\tExClass2 *SH_this = \tstatic_cast<const example::\tnested::\tExClass2 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "const char *", 
                            "F_C_call": "c_exclass2_get_name_bufferify", 
                            "F_C_name": "c_exclass2_get_name", 
                            "F_arg_c_call": "obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass2_get_name_bufferify(obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                            "F_name_function": "get_name", 
                            "F_name_generic": "get_name", 
                            "F_name_impl": "exclass2_get_name", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getName", 
                            "LUA_name_impl": "l_exclass2_get_name", 
                            "PY_name_impl": "PP_exclass2_getName", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "c_var_len": "aa_exclass2_get_name_length(obj%voidptr)", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getName", 
                            "underscore_name": "get_name"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_C_CXX_index": 21, 
                        "_fmtargs": {
                            "SHF_rv": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "SHF_rv", 
                                    "c_var_len": "NSHF_rv", 
                                    "cxx_addr": "&", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SHCXX_rv"
                                }, 
                                "fmtf": {
                                    "c_var": "SHT_rv", 
                                    "f_var": "SHT_rv"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 40, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void", 
                                "len": "aa_exclass2_get_name_length({F_this}%{F_derived_member})"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getName", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "NSHF_rv"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "SHF_rv", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "const string& getName() const", 
                        "declgen": "void getName(string & SHF_rv +intent(out)+len(NSHF_rv)) const +len(aa_exclass2_get_name_length({F_this}%{F_derived_member}))", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getName(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name_bufferify", 
                            "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                            "C_pre_call": "const example::\tnested::\tExClass2 *SH_this = \tstatic_cast<const example::\tnested::\tExClass2 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass2 * self,\t char * SHF_rv,\t int NSHF_rv", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass2_get_name_bufferify", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getName", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "get_name"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_PTR_F_C_index": 41, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "const char * SHC_rv", 
                                "c_val": "SHCXX_rv.c_str()", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 22, 
                        "ast": {
                            "attrs": {
                                "_typename": "std::string"
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "getName2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "string"
                            ]
                        }, 
                        "decl": "const string& getName2()", 
                        "declgen": "const string & getName2()", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getName2(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name2", 
                            "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "const char *", 
                            "F_C_call": "c_exclass2_get_name2_bufferify", 
                            "F_C_name": "c_exclass2_get_name2", 
                            "F_arg_c_call": "obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass2_get_name2_bufferify(obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                            "F_name_function": "get_name2", 
                            "F_name_generic": "get_name2", 
                            "F_name_impl": "exclass2_get_name2", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getName2", 
                            "LUA_name_impl": "l_exclass2_get_name2", 
                            "PY_name_impl": "PP_exclass2_getName2", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "c_var_len": "strlen_ptr(\tc_exclass2_get_name2_bufferify(\tobj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)))", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getName2", 
                            "underscore_name": "get_name2"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_C_CXX_index": 22, 
                        "_fmtargs": {
                            "SHF_rv": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "SHF_rv", 
                                    "c_var_len": "NSHF_rv", 
                                    "cxx_addr": "&", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SHCXX_rv"
                                }, 
                                "fmtf": {
                                    "c_var": "SHT_rv", 
                                    "f_var": "SHT_rv"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 41, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getName2", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "NSHF_rv"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "SHF_rv", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "const string& getName2()", 
                        "declgen": "void getName2(string & SHF_rv +intent(out)+len(NSHF_rv))", 
                        "format": {
                            "C_call_code": "const std::string & SHCXX_rv =\t SH_this->getName2(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name2_bufferify", 
                            "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self,\t char * SHF_rv,\t int NSHF_rv", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass2_get_name2_bufferify", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "const std::string & SHCXX_rv", 
                            "function_name": "getName2", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "get_name2"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_PTR_F_C_index": 42, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "char * SHC_rv", 
                                "c_val": "SHCXX_rv.c_str()", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 23, 
                        "ast": {
                            "attrs": {
                                "_typename": "std::string"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getName3", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "string"
                            ]
                        }, 
                        "decl": "string& getName3() const", 
                        "declgen": "string & getName3() const", 
                        "format": {
                            "C_call_code": "std::string & SHCXX_rv =\t SH_this->getName3(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name3", 
                            "C_post_call": "char * SHC_rv = SHCXX_rv.c_str();", 
                            "C_pre_call": "const example::\tnested::\tExClass2 *SH_this = \tstatic_cast<const example::\tnested::\tExClass2 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "char *", 
                            "F_C_call": "c_exclass2_get_name3_bufferify", 
                            "F_C_name": "c_exclass2_get_name3", 
                            "F_arg_c_call": "obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass2_get_name3_bufferify(obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                            "F_name_function": "get_name3", 
                            "F_name_generic": "get_name3", 
                            "F_name_impl": "exclass2_get_name3", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getName3", 
                            "LUA_name_impl": "l_exclass2_get_name3", 
                            "PY_name_impl": "PP_exclass2_getName3", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "c_var_len": "strlen_ptr(\tc_exclass2_get_name3_bufferify(\tobj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)))", 
                            "cxx_rv_decl": "std::string & SHCXX_rv", 
                            "function_name": "getName3", 
                            "underscore_name": "get_name3"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_C_CXX_index": 23, 
                        "_fmtargs": {
                            "SHF_rv": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "SHF_rv", 
                                    "c_var_len": "NSHF_rv", 
                                    "cxx_addr": "&", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SHCXX_rv"
                                }, 
                                "fmtf": {
                                    "c_var": "SHT_rv", 
                                    "f_var": "SHT_rv"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 42, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getName3", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "NSHF_rv"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "SHF_rv", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "string& getName3() const", 
                        "declgen": "void getName3(string & SHF_rv +intent(out)+len(NSHF_rv)) const", 
                        "format": {
                            "C_call_code": "std::string & SHCXX_rv =\t SH_this->getName3(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name3_bufferify", 
                            "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                            "C_pre_call": "const example::\tnested::\tExClass2 *SH_this = \tstatic_cast<const example::\tnested::\tExClass2 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass2 * self,\t char * SHF_rv,\t int NSHF_rv", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass2_get_name3_bufferify", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "std::string & SHCXX_rv", 
                            "function_name": "getName3", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "get_name3"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_PTR_F_C_index": 43, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "char * SHC_rv", 
                                "c_val": "SHCXX_rv.c_str()", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv.c_str()", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 24, 
                        "ast": {
                            "attrs": {
                                "_typename": "std::string"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getName4", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "string"
                            ]
                        }, 
                        "decl": "string& getName4()", 
                        "declgen": "string & getName4()", 
                        "format": {
                            "C_call_code": "std::string & SHCXX_rv =\t SH_this->getName4(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name4", 
                            "C_post_call": "char * SHC_rv = SHCXX_rv.c_str();", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "char *", 
                            "F_C_call": "c_exclass2_get_name4_bufferify", 
                            "F_C_name": "c_exclass2_get_name4", 
                            "F_arg_c_call": "obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass2_get_name4_bufferify(obj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                            "F_name_function": "get_name4", 
                            "F_name_generic": "get_name4", 
                            "F_name_impl": "exclass2_get_name4", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getName4", 
                            "LUA_name_impl": "l_exclass2_get_name4", 
                            "PY_name_impl": "PP_exclass2_getName4", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "c_var_len": "strlen_ptr(\tc_exclass2_get_name4_bufferify(\tobj%voidptr,\t SHT_rv,\t len(SHT_rv, kind=C_INT)))", 
                            "cxx_rv_decl": "std::string & SHCXX_rv", 
                            "function_name": "getName4", 
                            "underscore_name": "get_name4"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_PTR_C_CXX_index": 24, 
                        "_fmtargs": {
                            "SHF_rv": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "SHF_rv", 
                                    "c_var_len": "NSHF_rv", 
                                    "cxx_addr": "&", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "std::string", 
                                    "cxx_var": "SHCXX_rv"
                                }, 
                                "fmtf": {
                                    "c_var": "SHT_rv", 
                                    "f_var": "SHT_rv"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }
                        }, 
                        "_function_index": 43, 
                        "_generated": "arg_to_buffer", 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getName4", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_is_result": true, 
                                        "_typename": "std::string", 
                                        "intent": "out", 
                                        "len": "NSHF_rv"
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "SHF_rv", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "string"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "string& getName4()", 
                        "declgen": "void getName4(string & SHF_rv +intent(out)+len(NSHF_rv))", 
                        "format": {
                            "C_call_code": "std::string & SHCXX_rv =\t SH_this->getName4(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_name4_bufferify", 
                            "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self,\t char * SHF_rv,\t int NSHF_rv", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass2_get_name4_bufferify", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "std::string & SHCXX_rv", 
                            "function_name": "getName4", 
                            "function_suffix": "_bufferify", 
                            "underscore_name": "get_name4"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_INT", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 25, 
                        "ast": {
                            "attrs": {
                                "_typename": "int"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "GetNameLength", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "decl": "int GetNameLength() const", 
                        "declgen": "int GetNameLength() const", 
                        "doxygen": {
                            "brief": "helper function for Fortran"
                        }, 
                        "format": {
                            "C_call_code": "int SHC_rv =\t SH_this->GetNameLength(\t);", 
                            "C_call_list": "", 
                            "C_code": "{C_pre_call}\nreturn {CXX_this}->getName().length();\n", 
                            "C_name": "AA_exclass2_get_name_length", 
                            "C_pre_call": "const example::\tnested::\tExClass2 *SH_this = \tstatic_cast<const example::\tnested::\tExClass2 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_exclass2_get_name_length", 
                            "F_C_name": "c_exclass2_get_name_length", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_exclass2_get_name_length(obj%voidptr)", 
                            "F_name_function": "get_name_length", 
                            "F_name_generic": "get_name_length", 
                            "F_name_impl": "exclass2_get_name_length", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "GetNameLength", 
                            "LUA_name_impl": "l_exclass2_get_name_length", 
                            "PY_name_impl": "PP_exclass2_GetNameLength", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "int SHC_rv", 
                            "function_name": "GetNameLength", 
                            "underscore_name": "get_name_length"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtargs": {
                            "in": {
                                "fmtc": {
                                    "c_const": "const ", 
                                    "c_ptr": "*", 
                                    "c_var": "in", 
                                    "cxx_decl": "const example::\tnested::\tExClass1 * SHCXX_in", 
                                    "cxx_deref": "->", 
                                    "cxx_type": "example::\tnested::\tExClass1", 
                                    "cxx_val": "\tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tin))", 
                                    "cxx_var": "SHCXX_in"
                                }, 
                                "fmtf": {
                                    "c_var": "in", 
                                    "f_var": "in"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": " *", 
                                    "c_var": "\t(l_ExClass2_Type *)\t luaL_checkudata(\tL, 1, \"ExClass2.metatable\")", 
                                    "c_var_len": "Lin", 
                                    "cxx_deref": "->", 
                                    "cxx_type": "example::\tnested::\tExClass1", 
                                    "cxx_var": "in", 
                                    "lua_var": "SH_Lua_in"
                                }, 
                                "fmtpy": {
                                    "c_const": "const ", 
                                    "c_decl": "AA_exclass1 in", 
                                    "c_ptr": "", 
                                    "c_type": "AA_exclass1", 
                                    "c_var": "in", 
                                    "cxx_addr": "", 
                                    "cxx_decl": "example::\tnested::\tExClass1 in", 
                                    "cxx_deref": "->", 
                                    "cxx_type": "example::\tnested::\tExClass1", 
                                    "cxx_var": "in", 
                                    "numpy_type": null, 
                                    "py_type": "PP_ExClass1", 
                                    "py_var": "SHPy_in"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "AA_exclass1 * SHC_rv", 
                                "c_val": "\tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "\tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PP_ExClass1", 
                                "PyTypeObject": "PP_ExClass1_Type", 
                                "c_ptr": "*", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": null, 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 26, 
                        "ast": {
                            "attrs": {
                                "_typename": "example::nested::ExClass1"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "get_class1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "example::nested::ExClass1", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "in", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "*"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "ExClass1"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "ExClass1"
                            ]
                        }, 
                        "decl": "ExClass1 *get_class1(const ExClass1 *in)", 
                        "declgen": "ExClass1 * get_class1(const ExClass1 * in +intent(in)+value)", 
                        "format": {
                            "C_call_code": "example::\tnested::\tExClass1 * SHCXX_rv =\t SH_this->get_class1(\tSHCXX_in);", 
                            "C_call_list": "SHCXX_in", 
                            "C_name": "AA_exclass2_get_class1", 
                            "C_post_call": "AA_exclass1 * SHC_rv = \tstatic_cast<AA_exclass1 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));\nconst example::\tnested::\tExClass1 * SHCXX_in = \tstatic_cast<const example::\tnested::\tExClass1 *>(\tstatic_cast<const void *>(\tin));", 
                            "C_prototype": "AA_exclass2 * self,\t const AA_exclass1 * in", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "AA_exclass1 *", 
                            "F_C_call": "c_exclass2_get_class1", 
                            "F_C_name": "c_exclass2_get_class1", 
                            "F_arg_c_call": "obj%voidptr,\t in%yadda()", 
                            "F_arguments": "obj,\t in", 
                            "F_call_code": "SHT_rv%voidptr = c_exclass2_get_class1(obj%voidptr,\t in%yadda())", 
                            "F_name_function": "get_class1", 
                            "F_name_generic": "get_class1", 
                            "F_name_impl": "exclass2_get_class1", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "get_class1", 
                            "LUA_name_impl": "l_exclass2_get_class1", 
                            "PY_name_impl": "PP_exclass2_get_class1", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "example::\tnested::\tExClass1 * SHCXX_rv", 
                            "function_name": "get_class1", 
                            "underscore_name": "get_class1"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtargs": {
                            "type": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "type", 
                                    "cxx_decl": "TypeID SHCXX_type", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "TypeID", 
                                    "cxx_val": "getTypeID(type)", 
                                    "cxx_var": "SHCXX_type"
                                }, 
                                "fmtf": {
                                    "c_var": "type", 
                                    "f_var": "type"
                                }
                            }
                        }, 
                        "_function_index": 32, 
                        "_generated": "has_default_arg", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "declare", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "TypeID", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "type", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "TypeID"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                        "declgen": "void * declare(TypeID type +intent(in)+value)", 
                        "format": {
                            "C_call_code": "SH_this->declare(\tSHCXX_type);", 
                            "C_call_list": "SHCXX_type", 
                            "C_name": "AA_exclass2_declare_0", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));\nTypeID SHCXX_type = getTypeID(type);", 
                            "C_prototype": "AA_exclass2 * self,\t int type", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass2_declare_0", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "declare", 
                            "function_suffix": "_0", 
                            "underscore_name": "declare"
                        }, 
                        "fortran_generic": {
                            "len": [
                                "int", 
                                "long"
                            ]
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }, 
                        "return_this": true
                    }, 
                    {
                        "_PTR_F_C_index": 32, 
                        "_function_index": 44, 
                        "_generated": "fortran_generic", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "declare", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "TypeID", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "type", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "TypeID"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                        "declgen": "void * declare(TypeID type +intent(in)+value)", 
                        "format": {
                            "F_C_call": "c_exclass2_declare_0", 
                            "F_arg_c_call": "obj%voidptr,\t type", 
                            "F_arguments": "obj,\t type", 
                            "F_call_code": "call c_exclass2_declare_0(obj%voidptr,\t type)", 
                            "F_name_function": "declare_0_int", 
                            "F_name_generic": "declare", 
                            "F_name_impl": "exclass2_declare_0_int", 
                            "F_subprogram": "subroutine", 
                            "function_name": "declare", 
                            "function_suffix": "_0_int", 
                            "underscore_name": "declare"
                        }, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": true, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }, 
                        "return_this": true
                    }, 
                    {
                        "_PTR_F_C_index": 32, 
                        "_function_index": 45, 
                        "_generated": "fortran_generic", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "declare", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "TypeID", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "type", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "TypeID"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                        "declgen": "void * declare(TypeID type +intent(in)+value)", 
                        "format": {
                            "F_C_call": "c_exclass2_declare_0", 
                            "F_arg_c_call": "obj%voidptr,\t type", 
                            "F_arguments": "obj,\t type", 
                            "F_call_code": "call c_exclass2_declare_0(obj%voidptr,\t type)", 
                            "F_name_function": "declare_0_long", 
                            "F_name_generic": "declare", 
                            "F_name_impl": "exclass2_declare_0_long", 
                            "F_subprogram": "subroutine", 
                            "function_name": "declare", 
                            "function_suffix": "_0_long", 
                            "underscore_name": "declare"
                        }, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": true, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }, 
                        "return_this": true
                    }, 
                    {
                        "_default_funcs": [
                            32
                        ], 
                        "_fmtargs": {
                            "len": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "len", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "SidreLength", 
                                    "cxx_var": "len"
                                }, 
                                "fmtf": {
                                    "c_var": "len", 
                                    "f_var": "len"
                                }, 
                                "fmtl": {
                                    "LUA_index": 2, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 2)", 
                                    "c_var_len": "Llen", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "SidreLength", 
                                    "cxx_var": "len", 
                                    "lua_var": "SH_Lua_len"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "SIDRE_SidreLength len", 
                                    "c_ptr": "", 
                                    "c_type": "SIDRE_SidreLength", 
                                    "c_var": "len", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "SidreLength len", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "SidreLength", 
                                    "cxx_var": "len", 
                                    "numpy_type": "NPY_LONG", 
                                    "py_var": "SHPy_len"
                                }
                            }, 
                            "type": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "type", 
                                    "cxx_decl": "TypeID SHCXX_type", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "TypeID", 
                                    "cxx_val": "getTypeID(type)", 
                                    "cxx_var": "SHCXX_type"
                                }, 
                                "fmtf": {
                                    "c_var": "type", 
                                    "f_var": "type"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Ltype", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "TypeID", 
                                    "cxx_var": "type", 
                                    "lua_var": "SH_Lua_type"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "int type", 
                                    "c_ptr": "", 
                                    "c_type": "int", 
                                    "c_var": "type", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "TypeID SH_type", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "TypeID", 
                                    "cxx_val": "getTypeID(type)", 
                                    "cxx_var": "SH_type", 
                                    "numpy_type": "NPY_INT", 
                                    "py_var": "SHPy_type"
                                }
                            }
                        }, 
                        "_function_index": 27, 
                        "_has_default_arg": true, 
                        "_nargs": [
                            1, 
                            2
                        ], 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "declare", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "TypeID", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "type", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "TypeID"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "SidreLength", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "len", 
                                        "pointer": []
                                    }, 
                                    "init": 1, 
                                    "specifier": [
                                        "SidreLength"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                        "declgen": "void * declare(TypeID type +intent(in)+value, SidreLength len=1 +intent(in)+value)", 
                        "format": {
                            "C_call_code": "SH_this->declare(\tSHCXX_type,\t len);", 
                            "C_call_list": "SHCXX_type,\t len", 
                            "C_name": "AA_exclass2_declare_1", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));\nTypeID SHCXX_type = getTypeID(type);", 
                            "C_prototype": "AA_exclass2 * self,\t int type,\t SIDRE_SidreLength len", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_name": "c_exclass2_declare_1", 
                            "LUA_name": "declare", 
                            "LUA_name_impl": "l_exclass2_declare", 
                            "PY_name_impl": "PP_exclass2_declare_1", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "declare", 
                            "function_suffix": "_1", 
                            "underscore_name": "declare"
                        }, 
                        "fortran_generic": {
                            "len": [
                                "int", 
                                "long"
                            ]
                        }, 
                        "options": {
                            "wrap_fortran": false
                        }, 
                        "return_this": true
                    }, 
                    {
                        "_PTR_F_C_index": 27, 
                        "_default_funcs": [
                            32
                        ], 
                        "_function_index": 46, 
                        "_generated": "fortran_generic", 
                        "_has_default_arg": true, 
                        "_nargs": [
                            1, 
                            2
                        ], 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "declare", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "TypeID", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "type", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "TypeID"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "len", 
                                        "pointer": []
                                    }, 
                                    "init": 1, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                        "declgen": "void * declare(TypeID type +intent(in)+value, int len=1 +intent(in)+value)", 
                        "format": {
                            "F_C_call": "c_exclass2_declare_1", 
                            "F_arg_c_call": "obj%voidptr,\t type,\t int(len, C_LONG)", 
                            "F_arguments": "obj,\t type,\t len", 
                            "F_call_code": "call c_exclass2_declare_1(obj%voidptr,\t type,\t int(len, C_LONG))", 
                            "F_name_function": "declare_1_int", 
                            "F_name_generic": "declare", 
                            "F_name_impl": "exclass2_declare_1_int", 
                            "F_subprogram": "subroutine", 
                            "function_name": "declare", 
                            "function_suffix": "_1_int", 
                            "underscore_name": "declare"
                        }, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": true, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }, 
                        "return_this": true
                    }, 
                    {
                        "_PTR_F_C_index": 27, 
                        "_default_funcs": [
                            32
                        ], 
                        "_function_index": 47, 
                        "_generated": "fortran_generic", 
                        "_has_default_arg": true, 
                        "_nargs": [
                            1, 
                            2
                        ], 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "declare", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "TypeID", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "type", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "TypeID"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "long", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "len", 
                                        "pointer": []
                                    }, 
                                    "init": 1, 
                                    "specifier": [
                                        "long"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                        "declgen": "void * declare(TypeID type +intent(in)+value, long len=1 +intent(in)+value)", 
                        "format": {
                            "F_C_call": "c_exclass2_declare_1", 
                            "F_arg_c_call": "obj%voidptr,\t type,\t int(len, C_LONG)", 
                            "F_arguments": "obj,\t type,\t len", 
                            "F_call_code": "call c_exclass2_declare_1(obj%voidptr,\t type,\t int(len, C_LONG))", 
                            "F_name_function": "declare_1_long", 
                            "F_name_generic": "declare", 
                            "F_name_impl": "exclass2_declare_1_long", 
                            "F_subprogram": "subroutine", 
                            "function_name": "declare", 
                            "function_suffix": "_1_long", 
                            "underscore_name": "declare"
                        }, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": true, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }, 
                        "return_this": true
                    }, 
                    {
                        "_function_index": 28, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "destroyall", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void destroyall()", 
                        "declgen": "void destroyall()", 
                        "format": {
                            "C_call_code": "SH_this->destroyall(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_destroyall", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass2_destroyall", 
                            "F_C_name": "c_exclass2_destroyall", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass2_destroyall(obj%voidptr)", 
                            "F_name_function": "destroyall", 
                            "F_name_generic": "destroyall", 
                            "F_name_impl": "exclass2_destroyall", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "destroyall", 
                            "LUA_name_impl": "l_exclass2_destroyall", 
                            "PY_name_impl": "PP_exclass2_destroyall", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "destroyall", 
                            "underscore_name": "destroyall"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "int SHC_rv", 
                                "c_val": "static_cast<int>(SHCXX_rv)", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "static_cast<int>(SHCXX_rv)", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "numpy_type": "NPY_INT", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 29, 
                        "ast": {
                            "attrs": {
                                "_typename": "TypeID"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getTypeID", 
                                "pointer": []
                            }, 
                            "func_const": true, 
                            "params": [], 
                            "specifier": [
                                "TypeID"
                            ]
                        }, 
                        "decl": "TypeID getTypeID() const", 
                        "declgen": "TypeID getTypeID() const", 
                        "format": {
                            "C_call_code": "TypeID SHCXX_rv =\t SH_this->getTypeID(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_type_id", 
                            "C_post_call": "int SHC_rv = static_cast<int>(SHCXX_rv);", 
                            "C_pre_call": "const example::\tnested::\tExClass2 *SH_this = \tstatic_cast<const example::\tnested::\tExClass2 *>(\tstatic_cast<const void *>(\tself));", 
                            "C_prototype": "const AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_exclass2_get_type_id", 
                            "F_C_name": "c_exclass2_get_type_id", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_exclass2_get_type_id(obj%voidptr)", 
                            "F_name_function": "get_type_id", 
                            "F_name_generic": "get_type_id", 
                            "F_name_impl": "exclass2_get_type_id", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getTypeID", 
                            "LUA_name_impl": "l_exclass2_get_type_id", 
                            "PY_name_impl": "PP_exclass2_getTypeID", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "TypeID SHCXX_rv", 
                            "function_name": "getTypeID", 
                            "underscore_name": "get_type_id"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_function_index": 30, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "setValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "ValueType", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "ValueType"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "cxx_template": {
                            "ValueType": [
                                "int", 
                                "long", 
                                "float", 
                                "double"
                            ]
                        }, 
                        "decl": "void setValue(ValueType value)", 
                        "declgen": "void setValue(ValueType value +intent(in)+value)", 
                        "format": {
                            "function_name": "setValue", 
                            "underscore_name": "set_value"
                        }, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "value"
                                }, 
                                "fmtf": {
                                    "c_var": "value", 
                                    "f_var": "value"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Lvalue", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "value", 
                                    "lua_var": "SH_Lua_value"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "int value", 
                                    "c_ptr": "", 
                                    "c_type": "int", 
                                    "c_var": "value", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "int value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "value", 
                                    "numpy_type": "NPY_INT", 
                                    "py_var": "SHPy_value"
                                }
                            }
                        }, 
                        "_function_index": 33, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "setValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void setValue(ValueType value)", 
                        "declgen": "void setValue(int value +intent(in)+value)", 
                        "format": {
                            "CXX_template": "<int>", 
                            "C_call_code": "SH_this->setValue<int>(\tvalue);", 
                            "C_call_list": "value", 
                            "C_name": "AA_exclass2_set_value_int", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self,\t int value", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass2_set_value_int", 
                            "F_C_name": "c_exclass2_set_value_int", 
                            "F_arg_c_call": "obj%voidptr,\t value", 
                            "F_arguments": "obj,\t value", 
                            "F_call_code": "call c_exclass2_set_value_int(obj%voidptr,\t value)", 
                            "F_name_function": "set_value_int", 
                            "F_name_generic": "set_value", 
                            "F_name_impl": "exclass2_set_value_int", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "setValue", 
                            "LUA_name_impl": "l_exclass2_set_value", 
                            "PY_name_impl": "PP_exclass2_setValue_int", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "setValue", 
                            "function_suffix": "_int", 
                            "underscore_name": "set_value"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": true, 
                            "wrap_python": true
                        }
                    }, 
                    {
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "long", 
                                    "cxx_var": "value"
                                }, 
                                "fmtf": {
                                    "c_var": "value", 
                                    "f_var": "value"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Lvalue", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "long", 
                                    "cxx_var": "value", 
                                    "lua_var": "SH_Lua_value"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "long value", 
                                    "c_ptr": "", 
                                    "c_type": "long", 
                                    "c_var": "value", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "long value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "long", 
                                    "cxx_var": "value", 
                                    "numpy_type": "NPY_LONG", 
                                    "py_var": "SHPy_value"
                                }
                            }
                        }, 
                        "_function_index": 34, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "setValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "long", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "long"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void setValue(ValueType value)", 
                        "declgen": "void setValue(long value +intent(in)+value)", 
                        "format": {
                            "CXX_template": "<long>", 
                            "C_call_code": "SH_this->setValue<long>(\tvalue);", 
                            "C_call_list": "value", 
                            "C_name": "AA_exclass2_set_value_long", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self,\t long value", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass2_set_value_long", 
                            "F_C_name": "c_exclass2_set_value_long", 
                            "F_arg_c_call": "obj%voidptr,\t value", 
                            "F_arguments": "obj,\t value", 
                            "F_call_code": "call c_exclass2_set_value_long(obj%voidptr,\t value)", 
                            "F_name_function": "set_value_long", 
                            "F_name_generic": "set_value", 
                            "F_name_impl": "exclass2_set_value_long", 
                            "F_subprogram": "subroutine", 
                            "PY_name_impl": "PP_exclass2_setValue_long", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "setValue", 
                            "function_suffix": "_long", 
                            "underscore_name": "set_value"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": true, 
                            "wrap_python": true
                        }
                    }, 
                    {
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "float", 
                                    "cxx_var": "value"
                                }, 
                                "fmtf": {
                                    "c_var": "value", 
                                    "f_var": "value"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tonumber(L, 1)", 
                                    "c_var_len": "Lvalue", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "float", 
                                    "cxx_var": "value", 
                                    "lua_var": "SH_Lua_value"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "float value", 
                                    "c_ptr": "", 
                                    "c_type": "float", 
                                    "c_var": "value", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "float value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "float", 
                                    "cxx_var": "value", 
                                    "numpy_type": "NPY_FLOAT", 
                                    "py_var": "SHPy_value"
                                }
                            }
                        }, 
                        "_function_index": 35, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "setValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "float", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "float"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void setValue(ValueType value)", 
                        "declgen": "void setValue(float value +intent(in)+value)", 
                        "format": {
                            "CXX_template": "<float>", 
                            "C_call_code": "SH_this->setValue<float>(\tvalue);", 
                            "C_call_list": "value", 
                            "C_name": "AA_exclass2_set_value_float", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self,\t float value", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass2_set_value_float", 
                            "F_C_name": "c_exclass2_set_value_float", 
                            "F_arg_c_call": "obj%voidptr,\t value", 
                            "F_arguments": "obj,\t value", 
                            "F_call_code": "call c_exclass2_set_value_float(obj%voidptr,\t value)", 
                            "F_name_function": "set_value_float", 
                            "F_name_generic": "set_value", 
                            "F_name_impl": "exclass2_set_value_float", 
                            "F_subprogram": "subroutine", 
                            "PY_name_impl": "PP_exclass2_setValue_float", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "setValue", 
                            "function_suffix": "_float", 
                            "underscore_name": "set_value"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": true, 
                            "wrap_python": true
                        }
                    }, 
                    {
                        "_fmtargs": {
                            "value": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "double", 
                                    "cxx_var": "value"
                                }, 
                                "fmtf": {
                                    "c_var": "value", 
                                    "f_var": "value"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tonumber(L, 1)", 
                                    "c_var_len": "Lvalue", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "double", 
                                    "cxx_var": "value", 
                                    "lua_var": "SH_Lua_value"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "double value", 
                                    "c_ptr": "", 
                                    "c_type": "double", 
                                    "c_var": "value", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "double value", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "double", 
                                    "cxx_var": "value", 
                                    "numpy_type": "NPY_DOUBLE", 
                                    "py_var": "SHPy_value"
                                }
                            }
                        }, 
                        "_function_index": 36, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "setValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "double", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "value", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "double"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void setValue(ValueType value)", 
                        "declgen": "void setValue(double value +intent(in)+value)", 
                        "format": {
                            "CXX_template": "<double>", 
                            "C_call_code": "SH_this->setValue<double>(\tvalue);", 
                            "C_call_list": "value", 
                            "C_name": "AA_exclass2_set_value_double", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self,\t double value", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass2_set_value_double", 
                            "F_C_name": "c_exclass2_set_value_double", 
                            "F_arg_c_call": "obj%voidptr,\t value", 
                            "F_arguments": "obj,\t value", 
                            "F_call_code": "call c_exclass2_set_value_double(obj%voidptr,\t value)", 
                            "F_name_function": "set_value_double", 
                            "F_name_generic": "set_value", 
                            "F_name_impl": "exclass2_set_value_double", 
                            "F_subprogram": "subroutine", 
                            "PY_name_impl": "PP_exclass2_setValue_double", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "setValue", 
                            "function_suffix": "_double", 
                            "underscore_name": "set_value"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": true, 
                            "wrap_python": true
                        }
                    }, 
                    {
                        "_function_index": 31, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "ValueType"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "ValueType"
                            ]
                        }, 
                        "cxx_template": {
                            "ValueType": [
                                "int", 
                                "double"
                            ]
                        }, 
                        "decl": "ValueType getValue()", 
                        "declgen": "ValueType getValue()", 
                        "format": {
                            "function_name": "getValue", 
                            "underscore_name": "get_value"
                        }, 
                        "options": {
                            "wrap_c": false, 
                            "wrap_fortran": false, 
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }, 
                    {
                        "_CXX_return_templated": true, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_INT", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 37, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "int"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "decl": "ValueType getValue()", 
                        "declgen": "int getValue()", 
                        "format": {
                            "CXX_template": "<int>", 
                            "C_call_code": "int SHC_rv =\t SH_this->getValue<int>(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_value_int", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_exclass2_get_value_int", 
                            "F_C_name": "c_exclass2_get_value_int", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_exclass2_get_value_int(obj%voidptr)", 
                            "F_name_function": "get_value_int", 
                            "F_name_generic": "get_value", 
                            "F_name_impl": "exclass2_get_value_int", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "getValue", 
                            "LUA_name_impl": "l_exclass2_get_value", 
                            "PY_name_impl": "PP_exclass2_getValue_int", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "int SHC_rv", 
                            "function_name": "getValue", 
                            "function_suffix": "_int", 
                            "underscore_name": "get_value"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": true, 
                            "wrap_python": true
                        }
                    }, 
                    {
                        "_CXX_return_templated": true, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_ptr": "", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "numpy_type": "NPY_DOUBLE", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 38, 
                        "_generated": "cxx_template", 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "double"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getValue", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        "decl": "ValueType getValue()", 
                        "declgen": "double getValue()", 
                        "format": {
                            "CXX_template": "<double>", 
                            "C_call_code": "double SHC_rv =\t SH_this->getValue<double>(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass2_get_value_double", 
                            "C_pre_call": "example::\tnested::\tExClass2 *SH_this = \tstatic_cast<example::\tnested::\tExClass2 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass2 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "double", 
                            "F_C_call": "c_exclass2_get_value_double", 
                            "F_C_name": "c_exclass2_get_value_double", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_exclass2_get_value_double(obj%voidptr)", 
                            "F_name_function": "get_value_double", 
                            "F_name_generic": "get_value", 
                            "F_name_impl": "exclass2_get_value_double", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "PY_name_impl": "PP_exclass2_getValue_double", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "double SHC_rv", 
                            "function_name": "getValue", 
                            "function_suffix": "_double", 
                            "underscore_name": "get_value"
                        }, 
                        "options": {
                            "wrap_c": true, 
                            "wrap_fortran": true, 
                            "wrap_lua": true, 
                            "wrap_python": true
                        }
                    }
                ], 
                "name": "ExClass2", 
                "options": {}, 
                "python": {
                    "type": [
                        "dealloc", 
                        "print", 
                        "compare", 
                        "getattr", 
                        "setattr", 
                        "getattro", 
                        "setattro", 
                        "repr", 
                        "hash", 
                        "call", 
                        "str", 
                        "init", 
                        "alloc", 
                        "new", 
                        "free", 
                        "del"
                    ]
                }, 
                "typedef_name": "example::nested::ExClass2"
            }, 
            {
                "cxx_header": "", 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapExClass3.h", 
                    "C_impl_filename": "wrapExClass3.cpp", 
                    "C_type_name": "AA_exclass3", 
                    "F_derived_name": "exclass3", 
                    "F_impl_filename": "wrapfExClass3.f", 
                    "F_module_name": "exclass3_mod", 
                    "LUA_class_reg": "l_ExClass3_Reg", 
                    "LUA_ctor_name": "ExClass3", 
                    "LUA_metadata": "ExClass3.metatable", 
                    "LUA_this_call": "SH_this->self->", 
                    "LUA_userdata_member": "self", 
                    "LUA_userdata_type": "l_ExClass3_Type", 
                    "LUA_userdata_var": "SH_this", 
                    "class_lower": "exclass3", 
                    "class_prefix": "exclass3_", 
                    "class_scope": "ExClass3::", 
                    "class_upper": "EXCLASS3", 
                    "cxx_class": "ExClass3"
                }, 
                "functions": [
                    {
                        "_cxx_overload": [
                            48, 
                            49
                        ], 
                        "_function_index": 48, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "exfunc", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void exfunc()", 
                        "declgen": "void exfunc()", 
                        "format": {
                            "C_call_code": "SH_this->exfunc(\t);", 
                            "C_call_list": "", 
                            "C_name": "AA_exclass3_exfunc_0", 
                            "C_pre_call": "example::\tnested::\tExClass3 *SH_this = \tstatic_cast<example::\tnested::\tExClass3 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass3 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass3_exfunc_0", 
                            "F_C_name": "c_exclass3_exfunc_0", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_exclass3_exfunc_0(obj%voidptr)", 
                            "F_name_function": "exfunc_0", 
                            "F_name_generic": "exfunc", 
                            "F_name_impl": "exclass3_exfunc_0", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "exfunc", 
                            "LUA_name_impl": "l_exclass3_exfunc", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "exfunc", 
                            "function_suffix": "_0", 
                            "underscore_name": "exfunc"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_cxx_overload": [
                            48, 
                            49
                        ], 
                        "_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "flag", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "flag"
                                }, 
                                "fmtf": {
                                    "c_var": "flag", 
                                    "f_var": "flag"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Lflag", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "flag", 
                                    "lua_var": "SH_Lua_flag"
                                }
                            }
                        }, 
                        "_function_index": 49, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {
                                "_typename": "void"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "exfunc", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "flag", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "decl": "void exfunc(int flag)", 
                        "declgen": "void exfunc(int flag +intent(in)+value)", 
                        "format": {
                            "C_call_code": "SH_this->exfunc(\tflag);", 
                            "C_call_list": "flag", 
                            "C_name": "AA_exclass3_exfunc_1", 
                            "C_pre_call": "example::\tnested::\tExClass3 *SH_this = \tstatic_cast<example::\tnested::\tExClass3 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "AA_exclass3 * self,\t int flag", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_exclass3_exfunc_1", 
                            "F_C_name": "c_exclass3_exfunc_1", 
                            "F_arg_c_call": "obj%voidptr,\t flag", 
                            "F_arguments": "obj,\t flag", 
                            "F_call_code": "call c_exclass3_exfunc_1(obj%voidptr,\t flag)", 
                            "F_name_function": "exfunc_1", 
                            "F_name_generic": "exfunc", 
                            "F_name_impl": "exclass3_exfunc_1", 
                            "F_subprogram": "subroutine", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "exfunc", 
                            "function_suffix": "_1", 
                            "underscore_name": "exfunc"
                        }, 
                        "options": {}
                    }
                ], 
                "name": "ExClass3", 
                "options": {
                    "wrap_python": false
                }, 
                "typedef_name": "example::nested::ExClass3"
            }
        ], 
        "copyright": [
            "Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.", 
            "Produced at the Lawrence Livermore National Laboratory", 
            "", 
            "LLNL-CODE-738041.", 
            "All rights reserved.", 
            "", 
            "This file is part of Shroud.  For details, see", 
            "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
            "", 
            "Redistribution and use in source and binary forms, with or without", 
            "modification, are permitted provided that the following conditions are", 
            "met:", 
            "", 
            "* Redistributions of source code must retain the above copyright", 
            "  notice, this list of conditions and the disclaimer below.", 
            "", 
            "* Redistributions in binary form must reproduce the above copyright", 
            "  notice, this list of conditions and the disclaimer (as noted below)", 
            "  in the documentation and/or other materials provided with the", 
            "  distribution.", 
            "", 
            "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
            "  may be used to endorse or promote products derived from this", 
            "  software without specific prior written permission.", 
            "", 
            "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
            "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
            "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
            "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
            "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
            "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
            "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
            "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
            "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
            "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
            "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
            "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "", 
            "#######################################################################"
        ], 
        "format": {
            "CXX_local": "SHCXX_", 
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "", 
            "C_argument": "SH_", 
            "C_bufferify_suffix": "_bufferify", 
            "C_custom_return_type": "", 
            "C_header_filename": "wrapUserLibrary.h", 
            "C_header_filename_suffix": "h", 
            "C_impl_filename": "wrapUserLibrary.cpp", 
            "C_impl_filename_suffix": "cpp", 
            "C_local": "SHC_", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "AA_", 
            "C_result": "rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_derived_member": "voidptr", 
            "F_filename_suffix": "f", 
            "F_impl_filename": "wrapfuserlibrary.f", 
            "F_module_name": "userlibrary_mod", 
            "F_name_associated": "associated", 
            "F_name_instance_get": "yadda", 
            "F_name_instance_set": null, 
            "F_pointer": "SHT_ptr", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename": "luaUserLibrarymodule.hpp", 
            "LUA_header_filename_suffix": "hpp", 
            "LUA_impl_filename_suffix": "cpp", 
            "LUA_metadata": "XXLUA_metadata", 
            "LUA_module_filename": "luaUserLibrarymodule.cpp", 
            "LUA_module_name": "userlibrary", 
            "LUA_module_reg": "l_UserLibrary_Reg", 
            "LUA_prefix": "l_", 
            "LUA_result": "rv", 
            "LUA_state_var": "L", 
            "LUA_this_call": "", 
            "LUA_used_param_state": false, 
            "LUA_userdata_type": "XXLUA_userdata_type", 
            "PY_PyObject": "PyObject", 
            "PY_extern_C_begin": "extern \"C\" ", 
            "PY_header_filename": "pyUserLibrarymodule.hpp", 
            "PY_header_filename_suffix": "hpp", 
            "PY_helper_filename": "pyUserLibraryhelper.cpp", 
            "PY_impl_filename_suffix": "cpp", 
            "PY_library_doc": "library documentation", 
            "PY_module_filename": "pyUserLibrarymodule.cpp", 
            "PY_module_name": "userlibrary", 
            "PY_numpy_array_capsule_name": "PP_array_dtor", 
            "PY_numpy_array_dtor_context": "PP_array_destructor_context", 
            "PY_numpy_array_dtor_function": "PP_array_destructor_function", 
            "PY_obj": "obj", 
            "PY_param_args": "args", 
            "PY_param_kwds": "kwds", 
            "PY_param_self": "self", 
            "PY_prefix": "PP_", 
            "PY_result": "SHTPy_rv", 
            "PY_this_call": "", 
            "PY_used_param_args": false, 
            "PY_used_param_kwds": false, 
            "PY_used_param_self": false, 
            "YAML_type_filename": "userlibrary_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "class_scope": "", 
            "cxx_class": "", 
            "function_suffix": "", 
            "library": "UserLibrary", 
            "library_lower": "userlibrary", 
            "library_upper": "USERLIBRARY", 
            "namespace_scope": "", 
            "stdlib": "std::"
        }, 
        "functions": [
            {
                "_function_index": 50, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "local_function1", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void local_function1()", 
                "declgen": "void local_function1()", 
                "format": {
                    "C_call_code": "example::\tnested::\tlocal_function1(\t);", 
                    "C_call_list": "", 
                    "C_name": "AA_local_function1", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_local_function1", 
                    "F_C_name": "local_function1", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "call c_local_function1()", 
                    "F_name_function": "local_function1", 
                    "F_name_generic": "local_function1", 
                    "F_name_impl": "local_function1", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "local_function1", 
                    "LUA_name_impl": "l_local_function1", 
                    "PY_name_impl": "PP_local_function1", 
                    "c_const": "", 
                    "function_name": "local_function1", 
                    "underscore_name": "local_function1"
                }, 
                "options": {}
            }, 
            {
                "_PTR_F_C_index": 72, 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 1)", 
                            "c_var_len": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "name", 
                            "lua_var": "SH_Lua_name"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * name", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "name", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name", 
                            "numpy_type": null, 
                            "py_var": "SHPy_name"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": "PyBool_Type", 
                        "c_ptr": "", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "numpy_type": "NPY_BOOL", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 51, 
                "ast": {
                    "attrs": {
                        "_typename": "bool"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "isNameValid", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "bool"
                    ]
                }, 
                "decl": "bool isNameValid(const std::string& name)", 
                "declgen": "bool isNameValid(const std::string & name +intent(in))", 
                "format": {
                    "C_call_code": "bool SHC_rv =\t example::\tnested::\tisNameValid(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_code": "return name != NULL;", 
                    "C_name": "AA_is_name_valid", 
                    "C_pre_call": "const std::string SH_name(name);", 
                    "C_prototype": "const char * name", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "bool", 
                    "F_C_call": "c_is_name_valid_bufferify", 
                    "F_C_name": "c_is_name_valid", 
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)", 
                    "F_arguments": "name", 
                    "F_code": "rv = name .ne. \" \"", 
                    "F_name_function": "is_name_valid", 
                    "F_name_generic": "is_name_valid", 
                    "F_name_impl": "is_name_valid", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "isNameValid", 
                    "LUA_name_impl": "l_is_name_valid", 
                    "PY_name_impl": "PP_isNameValid", 
                    "c_const": "", 
                    "cxx_rv_decl": "bool SHC_rv", 
                    "function_name": "isNameValid", 
                    "underscore_name": "is_name_valid"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 51, 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "c_var_trim": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtf": {
                            "c_var": "name", 
                            "f_var": "name"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 72, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "bool"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "isNameValid", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "len_trim": "Lname", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "bool"
                    ]
                }, 
                "decl": "bool isNameValid(const std::string& name)", 
                "declgen": "bool isNameValid(const std::string & name +intent(in)+len_trim(Lname))", 
                "format": {
                    "C_call_code": "bool SHC_rv =\t example::\tnested::\tisNameValid(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_code": "return name != NULL;", 
                    "C_name": "AA_is_name_valid_bufferify", 
                    "C_pre_call": "const std::string SH_name(name, Lname);", 
                    "C_prototype": "const char * name,\t int Lname", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "bool", 
                    "F_C_name": "c_is_name_valid_bufferify", 
                    "F_code": "rv = name .ne. \" \"", 
                    "c_const": "", 
                    "cxx_rv_decl": "bool SHC_rv", 
                    "function_name": "isNameValid", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "is_name_valid"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": "PyBool_Type", 
                        "c_ptr": "", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "numpy_type": "NPY_BOOL", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 52, 
                "ast": {
                    "attrs": {
                        "_typename": "bool"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "isInitialized", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "bool"
                    ]
                }, 
                "decl": "bool isInitialized()", 
                "declgen": "bool isInitialized()", 
                "format": {
                    "C_call_code": "bool SHC_rv =\t example::\tnested::\tisInitialized(\t);", 
                    "C_call_list": "", 
                    "C_name": "AA_is_initialized", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "bool", 
                    "F_C_call": "c_is_initialized", 
                    "F_C_name": "c_is_initialized", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = c_is_initialized()", 
                    "F_name_function": "is_initialized", 
                    "F_name_generic": "is_initialized", 
                    "F_name_impl": "is_initialized", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "isInitialized", 
                    "LUA_name_impl": "l_is_initialized", 
                    "PY_name_impl": "PP_isInitialized", 
                    "c_const": "", 
                    "cxx_rv_decl": "bool SHC_rv", 
                    "function_name": "isInitialized", 
                    "underscore_name": "is_initialized"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg1", 
                            "f_var": "arg1"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_toboolean(L, 1)", 
                            "c_var_len": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg1", 
                            "lua_var": "SH_Lua_arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "bool arg1", 
                            "c_ptr": "", 
                            "c_type": "bool", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "bool arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg1", 
                            "numpy_type": "NPY_BOOL", 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "arg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg2", 
                            "f_var": "arg2"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "c_var_len": "Larg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2", 
                            "lua_var": "SH_Lua_arg2"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": "PyBool_Type", 
                            "c_const": "", 
                            "c_decl": "bool arg2", 
                            "c_ptr": "", 
                            "c_type": "bool", 
                            "c_var": "arg2", 
                            "cxx_addr": "", 
                            "cxx_decl": "bool arg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2", 
                            "numpy_type": "NPY_BOOL", 
                            "py_var": "SHPy_arg2"
                        }
                    }, 
                    "arg3": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "arg3", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg3"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg3", 
                            "f_var": "arg3"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": " *", 
                            "c_var": "lua_toboolean(L, 2)", 
                            "c_var_len": "Larg3", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg3", 
                            "lua_var": "SH_Lua_arg3"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": "PyBool_Type", 
                            "c_const": "", 
                            "c_decl": "bool arg3", 
                            "c_ptr": "", 
                            "c_type": "bool", 
                            "c_var": "arg3", 
                            "cxx_addr": "", 
                            "cxx_decl": "bool arg3", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg3", 
                            "numpy_type": "NPY_BOOL", 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_arg3"
                        }
                    }
                }, 
                "_function_index": 53, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "checkBool", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "bool", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "bool", 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "bool", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg3", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void checkBool(bool arg1, bool * arg2+intent(out), bool * arg3+intent(inout))", 
                "declgen": "void checkBool(bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))", 
                "format": {
                    "C_call_code": "example::\tnested::\tcheckBool(\targ1,\t arg2,\t arg3);", 
                    "C_call_list": "arg1,\t arg2,\t arg3", 
                    "C_name": "AA_check_bool", 
                    "C_prototype": "bool arg1,\t bool * arg2,\t bool * arg3", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_check_bool", 
                    "F_C_name": "c_check_bool", 
                    "F_arg_c_call": "SH_arg1,\t SH_arg2,\t SH_arg3", 
                    "F_arguments": "arg1,\t arg2,\t arg3", 
                    "F_call_code": "call c_check_bool(SH_arg1,\t SH_arg2,\t SH_arg3)", 
                    "F_name_function": "check_bool", 
                    "F_name_generic": "check_bool", 
                    "F_name_impl": "check_bool", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "checkBool", 
                    "LUA_name_impl": "l_check_bool", 
                    "PY_name_impl": "PP_checkBool", 
                    "c_const": "", 
                    "function_name": "checkBool", 
                    "underscore_name": "check_bool"
                }, 
                "options": {}
            }, 
            {
                "_PTR_F_C_index": 73, 
                "_cxx_overload": [
                    54, 
                    55
                ], 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 1)", 
                            "c_var_len": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "name", 
                            "lua_var": "SH_Lua_name"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * name", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "name", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name", 
                            "numpy_type": null, 
                            "py_var": "SHPy_name"
                        }
                    }
                }, 
                "_function_index": 54, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "test_names", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void test_names(const std::string &name)", 
                "declgen": "void test_names(const std::string & name +intent(in))", 
                "format": {
                    "C_call_code": "example::\tnested::\ttest_names(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_name": "AA_test_names", 
                    "C_pre_call": "const std::string SH_name(name);", 
                    "C_prototype": "const char * name", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_test_names_bufferify", 
                    "F_C_name": "c_test_names", 
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)", 
                    "F_arguments": "name", 
                    "F_call_code": "call c_test_names_bufferify(name,\t len_trim(name, kind=C_INT))", 
                    "F_name_function": "test_names", 
                    "F_name_generic": "test_names", 
                    "F_name_impl": "test_names", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "test_names", 
                    "LUA_name_impl": "l_test_names", 
                    "PY_name_impl": "PP_test_names", 
                    "c_const": "", 
                    "function_name": "test_names", 
                    "function_suffix": "", 
                    "underscore_name": "test_names"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 54, 
                "_cxx_overload": [
                    54, 
                    55
                ], 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "c_var_trim": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtf": {
                            "c_var": "name", 
                            "f_var": "name"
                        }
                    }
                }, 
                "_function_index": 73, 
                "_generated": "arg_to_buffer", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "test_names", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "len_trim": "Lname", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void test_names(const std::string &name)", 
                "declgen": "void test_names(const std::string & name +intent(in)+len_trim(Lname))", 
                "format": {
                    "C_call_code": "example::\tnested::\ttest_names(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_name": "AA_test_names_bufferify", 
                    "C_pre_call": "const std::string SH_name(name, Lname);", 
                    "C_prototype": "const char * name,\t int Lname", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_test_names_bufferify", 
                    "c_const": "", 
                    "function_name": "test_names", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "test_names"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 74, 
                "_cxx_overload": [
                    54, 
                    55
                ], 
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "flag", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Lflag", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag", 
                            "lua_var": "SH_Lua_flag"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int flag", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "flag", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int flag", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_flag"
                        }
                    }, 
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 1)", 
                            "c_var_len": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "name", 
                            "lua_var": "SH_Lua_name"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * name", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "name", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name", 
                            "numpy_type": null, 
                            "py_var": "SHPy_name"
                        }
                    }
                }, 
                "_function_index": 55, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "test_names", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "flag", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void test_names(const std::string &name, int flag)", 
                "declgen": "void test_names(const std::string & name +intent(in), int flag +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\ttest_names(\tSH_name,\t flag);", 
                    "C_call_list": "SH_name,\t flag", 
                    "C_name": "AA_test_names_flag", 
                    "C_pre_call": "const std::string SH_name(name);", 
                    "C_prototype": "const char * name,\t int flag", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_test_names_flag_bufferify", 
                    "F_C_name": "c_test_names_flag", 
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t flag", 
                    "F_arguments": "name,\t flag", 
                    "F_call_code": "call c_test_names_flag_bufferify(name,\t len_trim(name, kind=C_INT),\t flag)", 
                    "F_name_function": "test_names_flag", 
                    "F_name_generic": "test_names", 
                    "F_name_impl": "test_names_flag", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PP_test_names_flag", 
                    "c_const": "", 
                    "function_name": "test_names", 
                    "function_suffix": "_flag", 
                    "underscore_name": "test_names"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 55, 
                "_cxx_overload": [
                    54, 
                    55
                ], 
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "flag", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag"
                        }, 
                        "fmtf": {
                            "c_var": "flag", 
                            "f_var": "flag"
                        }
                    }, 
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "c_var_trim": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtf": {
                            "c_var": "name", 
                            "f_var": "name"
                        }
                    }
                }, 
                "_function_index": 74, 
                "_generated": "arg_to_buffer", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "test_names", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::string", 
                                "intent": "in", 
                                "len_trim": "Lname", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "flag", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void test_names(const std::string &name, int flag)", 
                "declgen": "void test_names(const std::string & name +intent(in)+len_trim(Lname), int flag +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\ttest_names(\tSH_name,\t flag);", 
                    "C_call_list": "SH_name,\t flag", 
                    "C_name": "AA_test_names_flag_bufferify", 
                    "C_pre_call": "const std::string SH_name(name, Lname);", 
                    "C_prototype": "const char * name,\t int Lname,\t int flag", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_test_names_flag_bufferify", 
                    "c_const": "", 
                    "function_name": "test_names", 
                    "function_suffix": "_flag_bufferify", 
                    "underscore_name": "test_names"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_function_index": 70, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "testoptional", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void testoptional(int i = 1, long j=2)", 
                "declgen": "void testoptional()", 
                "format": {
                    "C_call_code": "example::\tnested::\ttestoptional(\t);", 
                    "C_call_list": "", 
                    "C_name": "AA_testoptional_0", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_testoptional_0", 
                    "F_C_name": "c_testoptional_0", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "call c_testoptional_0()", 
                    "F_name_function": "testoptional_0", 
                    "F_name_generic": "testoptional", 
                    "F_name_impl": "testoptional_0", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "testoptional", 
                    "function_suffix": "_0", 
                    "underscore_name": "testoptional"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "i", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "i"
                        }, 
                        "fmtf": {
                            "c_var": "i", 
                            "f_var": "i"
                        }
                    }
                }, 
                "_function_index": 71, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "testoptional", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "i", 
                                "pointer": []
                            }, 
                            "init": 1, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void testoptional(int i = 1, long j=2)", 
                "declgen": "void testoptional(int i=1 +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\ttestoptional(\ti);", 
                    "C_call_list": "i", 
                    "C_name": "AA_testoptional_1", 
                    "C_prototype": "int i", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_testoptional_1", 
                    "F_C_name": "c_testoptional_1", 
                    "F_arg_c_call": "i", 
                    "F_arguments": "i", 
                    "F_call_code": "call c_testoptional_1(i)", 
                    "F_name_function": "testoptional_1", 
                    "F_name_generic": "testoptional", 
                    "F_name_impl": "testoptional_1", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "testoptional", 
                    "function_suffix": "_1", 
                    "underscore_name": "testoptional"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_default_funcs": [
                    70, 
                    71
                ], 
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "i", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "i"
                        }, 
                        "fmtf": {
                            "c_var": "i", 
                            "f_var": "i"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 1)", 
                            "c_var_len": "Li", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "i", 
                            "lua_var": "SH_Lua_i"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int i", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "i", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int i", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "i", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_i"
                        }
                    }, 
                    "j": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "j", 
                            "cxx_deref": ".", 
                            "cxx_type": "long", 
                            "cxx_var": "j"
                        }, 
                        "fmtf": {
                            "c_var": "j", 
                            "f_var": "j"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Lj", 
                            "cxx_deref": ".", 
                            "cxx_type": "long", 
                            "cxx_var": "j", 
                            "lua_var": "SH_Lua_j"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "long j", 
                            "c_ptr": "", 
                            "c_type": "long", 
                            "c_var": "j", 
                            "cxx_addr": "&", 
                            "cxx_decl": "long j", 
                            "cxx_deref": ".", 
                            "cxx_type": "long", 
                            "cxx_var": "j", 
                            "numpy_type": "NPY_LONG", 
                            "py_var": "SHPy_j"
                        }
                    }
                }, 
                "_function_index": 56, 
                "_has_default_arg": true, 
                "_nargs": [
                    0, 
                    2
                ], 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "testoptional", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "i", 
                                "pointer": []
                            }, 
                            "init": 1, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "long", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "j", 
                                "pointer": []
                            }, 
                            "init": 2, 
                            "specifier": [
                                "long"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void testoptional(int i = 1, long j=2)", 
                "declgen": "void testoptional(int i=1 +intent(in)+value, long j=2 +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\ttestoptional(\ti,\t j);", 
                    "C_call_list": "i,\t j", 
                    "C_name": "AA_testoptional_2", 
                    "C_prototype": "int i,\t long j", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_testoptional_2", 
                    "F_C_name": "c_testoptional_2", 
                    "F_arg_c_call": "i,\t j", 
                    "F_arguments": "i,\t j", 
                    "F_call_code": "call c_testoptional_2(i,\t j)", 
                    "F_name_function": "testoptional_2", 
                    "F_name_generic": "testoptional", 
                    "F_name_impl": "testoptional_2", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "testoptional", 
                    "LUA_name_impl": "l_testoptional", 
                    "PY_name_impl": "PP_testoptional_2", 
                    "c_const": "", 
                    "function_name": "testoptional", 
                    "function_suffix": "_2", 
                    "underscore_name": "testoptional"
                }, 
                "options": {}
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_ptr": "", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "numpy_type": null, 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 57, 
                "ast": {
                    "attrs": {
                        "_typename": "size_t"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "test_size_t", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "size_t"
                    ]
                }, 
                "decl": "size_t test_size_t()", 
                "declgen": "size_t test_size_t()", 
                "format": {
                    "C_call_code": "size_t SHC_rv =\t example::\tnested::\ttest_size_t(\t);", 
                    "C_call_list": "", 
                    "C_name": "AA_test_size_t", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "size_t", 
                    "F_C_call": "c_test_size_t", 
                    "F_C_name": "test_size_t", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = c_test_size_t()", 
                    "F_name_function": "test_size_t", 
                    "F_name_generic": "test_size_t", 
                    "F_name_impl": "test_size_t", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "test_size_t", 
                    "LUA_name_impl": "l_test_size_t", 
                    "PY_name_impl": "PP_test_size_t", 
                    "c_const": "", 
                    "cxx_rv_decl": "size_t SHC_rv", 
                    "function_name": "test_size_t", 
                    "underscore_name": "test_size_t"
                }, 
                "options": {}
            }, 
            {
                "_cxx_overload": [
                    58, 
                    59
                ], 
                "_fmtargs": {
                    "comm": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "comm", 
                            "cxx_decl": "MPI_Comm SHCXX_comm", 
                            "cxx_deref": ".", 
                            "cxx_type": "MPI_Comm", 
                            "cxx_val": "MPI_Comm_f2c(comm)", 
                            "cxx_var": "SHCXX_comm"
                        }, 
                        "fmtf": {
                            "c_var": "comm", 
                            "f_var": "comm"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "POP", 
                            "c_var_len": "Lcomm", 
                            "cxx_deref": ".", 
                            "cxx_type": "MPI_Comm", 
                            "cxx_var": "comm", 
                            "lua_var": "SH_Lua_comm"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "MPI_Fint comm", 
                            "c_ptr": "", 
                            "c_type": "MPI_Fint", 
                            "c_var": "comm", 
                            "cxx_addr": "&", 
                            "cxx_decl": "MPI_Comm SH_comm", 
                            "cxx_deref": ".", 
                            "cxx_type": "MPI_Comm", 
                            "cxx_val": "MPI_Comm_f2c(comm)", 
                            "cxx_var": "SH_comm", 
                            "numpy_type": null, 
                            "py_var": "SHPy_comm"
                        }
                    }
                }, 
                "_function_index": 58, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "testmpi", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "MPI_Comm", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "comm", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "MPI_Comm"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void testmpi(MPI_Comm comm)", 
                "declgen": "void testmpi(MPI_Comm comm +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\ttestmpi(\tSHCXX_comm);", 
                    "C_call_list": "SHCXX_comm", 
                    "C_name": "AA_testmpi_mpi", 
                    "C_pre_call": "MPI_Comm SHCXX_comm = MPI_Comm_f2c(comm);", 
                    "C_prototype": "MPI_Fint comm", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_testmpi_mpi", 
                    "F_C_name": "c_testmpi_mpi", 
                    "F_arg_c_call": "comm", 
                    "F_arguments": "comm", 
                    "F_call_code": "call c_testmpi_mpi(comm)", 
                    "F_name_function": "testmpi_mpi", 
                    "F_name_generic": "testmpi", 
                    "F_name_impl": "testmpi_mpi", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "testmpi", 
                    "LUA_name_impl": "l_testmpi", 
                    "PY_name_impl": "PP_testmpi_mpi", 
                    "c_const": "", 
                    "function_name": "testmpi", 
                    "function_suffix": "_mpi", 
                    "underscore_name": "testmpi"
                }, 
                "options": {}
            }, 
            {
                "_cxx_overload": [
                    58, 
                    59
                ], 
                "_function_index": 59, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "testmpi", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void testmpi()", 
                "declgen": "void testmpi()", 
                "format": {
                    "C_call_code": "example::\tnested::\ttestmpi(\t);", 
                    "C_call_list": "", 
                    "C_name": "AA_testmpi_serial", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_testmpi_serial", 
                    "F_C_name": "c_testmpi_serial", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "call c_testmpi_serial()", 
                    "F_name_function": "testmpi_serial", 
                    "F_name_generic": "testmpi", 
                    "F_name_impl": "testmpi_serial", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PP_testmpi_serial", 
                    "c_const": "", 
                    "function_name": "testmpi", 
                    "function_suffix": "_serial", 
                    "underscore_name": "testmpi"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "grp": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "grp", 
                            "cxx_decl": "axom::sidre::Group * SHCXX_grp", 
                            "cxx_deref": "->", 
                            "cxx_type": "axom::sidre::Group", 
                            "cxx_val": "\tstatic_cast<axom::sidre::Group *>(\tstatic_cast<void *>(\tgrp))", 
                            "cxx_var": "SHCXX_grp"
                        }, 
                        "fmtf": {
                            "c_var": "grp", 
                            "f_var": "grp"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": " *", 
                            "c_var": "\t(XXLUA_userdata_type *)\t luaL_checkudata(\tL, 1, \"XXLUA_metadata\")", 
                            "c_var_len": "Lgrp", 
                            "cxx_deref": "->", 
                            "cxx_type": "axom::sidre::Group", 
                            "cxx_var": "grp", 
                            "lua_var": "SH_Lua_grp"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "SIDRE_group grp", 
                            "c_ptr": "", 
                            "c_type": "SIDRE_group", 
                            "c_var": "grp", 
                            "cxx_addr": "", 
                            "cxx_decl": "axom::sidre::Group grp", 
                            "cxx_deref": "->", 
                            "cxx_type": "axom::sidre::Group", 
                            "cxx_var": "grp", 
                            "numpy_type": null, 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_grp"
                        }
                    }
                }, 
                "_function_index": 60, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "testgroup1", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "axom::sidre::Group", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "grp", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "axom::sidre::Group"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void testgroup1(axom::sidre::Group * grp)", 
                "declgen": "void testgroup1(axom::sidre::Group * grp +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\ttestgroup1(\tSHCXX_grp);", 
                    "C_call_list": "SHCXX_grp", 
                    "C_name": "AA_testgroup1", 
                    "C_pre_call": "axom::sidre::Group * SHCXX_grp = \tstatic_cast<axom::sidre::Group *>(\tstatic_cast<void *>(\tgrp));", 
                    "C_prototype": "SIDRE_group * grp", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_testgroup1", 
                    "F_C_name": "c_testgroup1", 
                    "F_arg_c_call": "grp%get_instance()", 
                    "F_arguments": "grp", 
                    "F_call_code": "call c_testgroup1(grp%get_instance())", 
                    "F_name_function": "testgroup1", 
                    "F_name_generic": "testgroup1", 
                    "F_name_impl": "testgroup1", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "testgroup1", 
                    "LUA_name_impl": "l_testgroup1", 
                    "PY_name_impl": "PP_testgroup1", 
                    "c_const": "", 
                    "function_name": "testgroup1", 
                    "underscore_name": "testgroup1"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "grp": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "*", 
                            "c_var": "grp", 
                            "cxx_decl": "const axom::sidre::Group * SHCXX_grp", 
                            "cxx_deref": "->", 
                            "cxx_type": "axom::sidre::Group", 
                            "cxx_val": "\tstatic_cast<const axom::sidre::Group *>(\tstatic_cast<const void *>(\tgrp))", 
                            "cxx_var": "SHCXX_grp"
                        }, 
                        "fmtf": {
                            "c_var": "grp", 
                            "f_var": "grp"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": " *", 
                            "c_var": "\t(XXLUA_userdata_type *)\t luaL_checkudata(\tL, 1, \"XXLUA_metadata\")", 
                            "c_var_len": "Lgrp", 
                            "cxx_deref": "->", 
                            "cxx_type": "axom::sidre::Group", 
                            "cxx_var": "grp", 
                            "lua_var": "SH_Lua_grp"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "SIDRE_group grp", 
                            "c_ptr": "", 
                            "c_type": "SIDRE_group", 
                            "c_var": "grp", 
                            "cxx_addr": "", 
                            "cxx_decl": "axom::sidre::Group grp", 
                            "cxx_deref": "->", 
                            "cxx_type": "axom::sidre::Group", 
                            "cxx_var": "grp", 
                            "numpy_type": null, 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_grp"
                        }
                    }
                }, 
                "_function_index": 61, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "testgroup2", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "axom::sidre::Group", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "grp", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "axom::sidre::Group"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void testgroup2(const axom::sidre::Group * grp)", 
                "declgen": "void testgroup2(const axom::sidre::Group * grp +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\ttestgroup2(\tSHCXX_grp);", 
                    "C_call_list": "SHCXX_grp", 
                    "C_name": "AA_testgroup2", 
                    "C_pre_call": "const axom::sidre::Group * SHCXX_grp = \tstatic_cast<const axom::sidre::Group *>(\tstatic_cast<const void *>(\tgrp));", 
                    "C_prototype": "const SIDRE_group * grp", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_testgroup2", 
                    "F_C_name": "c_testgroup2", 
                    "F_arg_c_call": "grp%get_instance()", 
                    "F_arguments": "grp", 
                    "F_call_code": "call c_testgroup2(grp%get_instance())", 
                    "F_name_function": "testgroup2", 
                    "F_name_generic": "testgroup2", 
                    "F_name_impl": "testgroup2", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "testgroup2", 
                    "LUA_name_impl": "l_testgroup2", 
                    "PY_name_impl": "PP_testgroup2", 
                    "c_const": "", 
                    "function_name": "testgroup2", 
                    "underscore_name": "testgroup2"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "get": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "get", 
                            "cxx_deref": ".", 
                            "cxx_type": "void", 
                            "cxx_var": "get"
                        }, 
                        "fmtf": {
                            "c_var": "get", 
                            "f_var": "get"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "POP", 
                            "c_var_len": "Lget", 
                            "cxx_deref": ".", 
                            "cxx_type": "void", 
                            "cxx_var": "get", 
                            "lua_var": "SH_Lua_get"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "void ( * get)(\t)", 
                            "c_ptr": "", 
                            "c_type": "void", 
                            "c_var": "get", 
                            "cxx_addr": "&", 
                            "cxx_decl": "void ( * get)(\t)", 
                            "cxx_deref": ".", 
                            "cxx_type": "void", 
                            "cxx_var": "get", 
                            "numpy_type": null, 
                            "py_var": "SHPy_get"
                        }
                    }
                }, 
                "_function_index": 62, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "FuncPtr1", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "void", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "func": {
                                    "name": "get", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "*"
                                        }
                                    ]
                                }, 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "void"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void FuncPtr1(void (*get)());", 
                "declgen": "void FuncPtr1(void ( * get)() +intent(in)+value)", 
                "doxygen": {
                    "brief": "subroutine"
                }, 
                "format": {
                    "C_call_code": "example::\tnested::\tFuncPtr1(\tget);", 
                    "C_call_list": "get", 
                    "C_name": "AA_func_ptr1", 
                    "C_prototype": "void ( * get)(\t)", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_func_ptr1", 
                    "F_C_name": "func_ptr1", 
                    "F_arg_c_call": "get", 
                    "F_arguments": "get", 
                    "F_call_code": "call c_func_ptr1(get)", 
                    "F_name_function": "func_ptr1", 
                    "F_name_generic": "func_ptr1", 
                    "F_name_impl": "func_ptr1", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "FuncPtr1", 
                    "LUA_name_impl": "l_func_ptr1", 
                    "PY_name_impl": "PP_FuncPtr1", 
                    "c_const": "", 
                    "function_name": "FuncPtr1", 
                    "underscore_name": "func_ptr1"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "get": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "get", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "get"
                        }, 
                        "fmtf": {
                            "c_var": "get", 
                            "f_var": "get"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": " *", 
                            "c_var": "lua_tonumber(L, 1)", 
                            "c_var_len": "Lget", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "get", 
                            "lua_var": "SH_Lua_get"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double * ( * get)(\t)", 
                            "c_ptr": " *", 
                            "c_type": "double", 
                            "c_var": "get", 
                            "cxx_addr": "", 
                            "cxx_decl": "double * ( * get)(\t)", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "get", 
                            "numpy_type": "NPY_DOUBLE", 
                            "py_var": "SHPy_get"
                        }
                    }
                }, 
                "_function_index": 63, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "FuncPtr2", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "double", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "func": {
                                    "name": "get", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "*"
                                        }
                                    ]
                                }, 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void FuncPtr2(double * (*get)());", 
                "declgen": "void FuncPtr2(double * ( * get)() +intent(in))", 
                "doxygen": {
                    "brief": "return a pointer"
                }, 
                "format": {
                    "C_call_code": "example::\tnested::\tFuncPtr2(\tget);", 
                    "C_call_list": "get", 
                    "C_name": "AA_func_ptr2", 
                    "C_prototype": "double * ( * get)(\t)", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_func_ptr2", 
                    "F_C_name": "func_ptr2", 
                    "F_arg_c_call": "get", 
                    "F_arguments": "get", 
                    "F_call_code": "call c_func_ptr2(get)", 
                    "F_name_function": "func_ptr2", 
                    "F_name_generic": "func_ptr2", 
                    "F_name_impl": "func_ptr2", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "FuncPtr2", 
                    "LUA_name_impl": "l_func_ptr2", 
                    "PY_name_impl": "PP_FuncPtr2", 
                    "c_const": "", 
                    "function_name": "FuncPtr2", 
                    "underscore_name": "func_ptr2"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "get": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "get", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "get"
                        }, 
                        "fmtf": {
                            "c_var": "get", 
                            "f_var": "get"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tonumber(L, 1)", 
                            "c_var_len": "Lget", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "get", 
                            "lua_var": "SH_Lua_get"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double ( * get)(\tint i,\t int)", 
                            "c_ptr": "", 
                            "c_type": "double", 
                            "c_var": "get", 
                            "cxx_addr": "&", 
                            "cxx_decl": "double ( * get)(\tint i,\t int)", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "get", 
                            "numpy_type": "NPY_DOUBLE", 
                            "py_var": "SHPy_get"
                        }
                    }
                }, 
                "_function_index": 64, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "FuncPtr3", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "double", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "func": {
                                    "name": "get", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "*"
                                        }
                                    ]
                                }, 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "i", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void FuncPtr3(double (*get)(int i, int));", 
                "declgen": "void FuncPtr3(double ( * get)(int i +value, int +value) +intent(in)+value)", 
                "doxygen": {
                    "brief": "abstract argument"
                }, 
                "format": {
                    "C_call_code": "example::\tnested::\tFuncPtr3(\tget);", 
                    "C_call_list": "get", 
                    "C_name": "AA_func_ptr3", 
                    "C_prototype": "double ( * get)(\tint i,\t int)", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_func_ptr3", 
                    "F_C_name": "c_func_ptr3", 
                    "F_arg_c_call": "get", 
                    "F_arguments": "get", 
                    "F_call_code": "call c_func_ptr3(get)", 
                    "F_name_function": "func_ptr3", 
                    "F_name_generic": "func_ptr3", 
                    "F_name_impl": "func_ptr3", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "FuncPtr3", 
                    "LUA_name_impl": "l_func_ptr3", 
                    "PY_name_impl": "PP_FuncPtr3", 
                    "c_const": "", 
                    "function_name": "FuncPtr3", 
                    "underscore_name": "func_ptr3"
                }, 
                "options": {
                    "F_force_wrapper": true
                }
            }, 
            {
                "_fmtargs": {
                    "get": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "get", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "get"
                        }, 
                        "fmtf": {
                            "c_var": "get", 
                            "f_var": "get"
                        }
                    }
                }, 
                "_function_index": 65, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "FuncPtr4", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "double", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "func": {
                                    "name": "get", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "*"
                                        }
                                    ]
                                }, 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "double", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "specifier": [
                                        "double"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void FuncPtr4(double (*get)(double, int));", 
                "declgen": "void FuncPtr4(double ( * get)(double +value, int +value) +intent(in)+value)", 
                "doxygen": {
                    "brief": "abstract argument"
                }, 
                "format": {
                    "C_call_code": "example::\tnested::\tFuncPtr4(\tget);", 
                    "C_call_list": "get", 
                    "C_name": "AA_func_ptr4", 
                    "C_prototype": "double ( * get)(\tdouble,\t int)", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_func_ptr4", 
                    "F_C_name": "c_func_ptr4", 
                    "F_arg_c_call": "get", 
                    "F_arguments": "get", 
                    "F_call_code": "call c_func_ptr4(get)", 
                    "F_name_function": "func_ptr4", 
                    "F_name_generic": "func_ptr4", 
                    "F_name_impl": "func_ptr4", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "FuncPtr4", 
                    "underscore_name": "func_ptr4"
                }, 
                "options": {
                    "F_abstract_interface_argument_template": "XX{index}arg", 
                    "F_abstract_interface_subprogram_template": "custom_funptr", 
                    "F_force_wrapper": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "get": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "get", 
                            "cxx_deref": ".", 
                            "cxx_type": "void", 
                            "cxx_var": "get"
                        }, 
                        "fmtf": {
                            "c_var": "get", 
                            "f_var": "get"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "POP", 
                            "c_var_len": "Lget", 
                            "cxx_deref": ".", 
                            "cxx_type": "void", 
                            "cxx_var": "get", 
                            "lua_var": "SH_Lua_get"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "void ( * get)(\tint verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10)", 
                            "c_ptr": "", 
                            "c_type": "void", 
                            "c_var": "get", 
                            "cxx_addr": "&", 
                            "cxx_decl": "void ( * get)(\tint verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10)", 
                            "cxx_deref": ".", 
                            "cxx_type": "void", 
                            "cxx_var": "get", 
                            "numpy_type": null, 
                            "py_var": "SHPy_get"
                        }
                    }
                }, 
                "_function_index": 66, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "FuncPtr5", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "void", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "func": {
                                    "name": "get", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "*"
                                        }
                                    ]
                                }, 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname1", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname2", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname3", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname4", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname5", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname6", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname7", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname8", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname9", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }, 
                                {
                                    "attrs": {
                                        "_typename": "int", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "verylongname10", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "void"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void FuncPtr5(void (*get)(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10))", 
                "declgen": "void FuncPtr5(void ( * get)(int verylongname1 +value, int verylongname2 +value, int verylongname3 +value, int verylongname4 +value, int verylongname5 +value, int verylongname6 +value, int verylongname7 +value, int verylongname8 +value, int verylongname9 +value, int verylongname10 +value) +intent(in)+value)", 
                "format": {
                    "C_call_code": "example::\tnested::\tFuncPtr5(\tget);", 
                    "C_call_list": "get", 
                    "C_name": "AA_func_ptr5", 
                    "C_prototype": "void ( * get)(\tint verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10)", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_func_ptr5", 
                    "F_C_name": "func_ptr5", 
                    "F_arg_c_call": "get", 
                    "F_arguments": "get", 
                    "F_call_code": "call c_func_ptr5(get)", 
                    "F_name_function": "func_ptr5", 
                    "F_name_generic": "func_ptr5", 
                    "F_name_impl": "func_ptr5", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "FuncPtr5", 
                    "LUA_name_impl": "l_func_ptr5", 
                    "PY_name_impl": "PP_FuncPtr5", 
                    "c_const": "", 
                    "function_name": "FuncPtr5", 
                    "underscore_name": "func_ptr5"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "verylongname1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname1", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname1"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname1", 
                            "f_var": "verylongname1"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 1)", 
                            "c_var_len": "Lverylongname1", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname1", 
                            "lua_var": "SH_Lua_verylongname1"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname1", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname1", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname1", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname1", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname1"
                        }
                    }, 
                    "verylongname10": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname10", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname10"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname10", 
                            "f_var": "verylongname10"
                        }, 
                        "fmtl": {
                            "LUA_index": 10, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 10)", 
                            "c_var_len": "Lverylongname10", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname10", 
                            "lua_var": "SH_Lua_verylongname10"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname10", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname10", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname10", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname10", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname10"
                        }
                    }, 
                    "verylongname2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname2", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname2"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname2", 
                            "f_var": "verylongname2"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Lverylongname2", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname2", 
                            "lua_var": "SH_Lua_verylongname2"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname2", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname2", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname2", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname2", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname2"
                        }
                    }, 
                    "verylongname3": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname3", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname3"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname3", 
                            "f_var": "verylongname3"
                        }, 
                        "fmtl": {
                            "LUA_index": 3, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 3)", 
                            "c_var_len": "Lverylongname3", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname3", 
                            "lua_var": "SH_Lua_verylongname3"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname3", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname3", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname3", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname3", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname3"
                        }
                    }, 
                    "verylongname4": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname4", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname4"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname4", 
                            "f_var": "verylongname4"
                        }, 
                        "fmtl": {
                            "LUA_index": 4, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 4)", 
                            "c_var_len": "Lverylongname4", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname4", 
                            "lua_var": "SH_Lua_verylongname4"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname4", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname4", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname4", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname4", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname4"
                        }
                    }, 
                    "verylongname5": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname5", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname5"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname5", 
                            "f_var": "verylongname5"
                        }, 
                        "fmtl": {
                            "LUA_index": 5, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 5)", 
                            "c_var_len": "Lverylongname5", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname5", 
                            "lua_var": "SH_Lua_verylongname5"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname5", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname5", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname5", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname5", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname5"
                        }
                    }, 
                    "verylongname6": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname6", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname6"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname6", 
                            "f_var": "verylongname6"
                        }, 
                        "fmtl": {
                            "LUA_index": 6, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 6)", 
                            "c_var_len": "Lverylongname6", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname6", 
                            "lua_var": "SH_Lua_verylongname6"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname6", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname6", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname6", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname6", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname6"
                        }
                    }, 
                    "verylongname7": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname7", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname7"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname7", 
                            "f_var": "verylongname7"
                        }, 
                        "fmtl": {
                            "LUA_index": 7, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 7)", 
                            "c_var_len": "Lverylongname7", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname7", 
                            "lua_var": "SH_Lua_verylongname7"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname7", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname7", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname7", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname7", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname7"
                        }
                    }, 
                    "verylongname8": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname8", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname8"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname8", 
                            "f_var": "verylongname8"
                        }, 
                        "fmtl": {
                            "LUA_index": 8, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 8)", 
                            "c_var_len": "Lverylongname8", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname8", 
                            "lua_var": "SH_Lua_verylongname8"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname8", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname8", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname8", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname8", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname8"
                        }
                    }, 
                    "verylongname9": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "verylongname9", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname9"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname9", 
                            "f_var": "verylongname9"
                        }, 
                        "fmtl": {
                            "LUA_index": 9, 
                            "c_ptr": " *", 
                            "c_var": "lua_tointeger(L, 9)", 
                            "c_var_len": "Lverylongname9", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname9", 
                            "lua_var": "SH_Lua_verylongname9"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int verylongname9", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname9", 
                            "cxx_addr": "", 
                            "cxx_decl": "int verylongname9", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname9", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname9"
                        }
                    }
                }, 
                "_function_index": 67, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "verylongfunctionname1", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname3", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname4", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname5", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname6", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname7", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname8", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname9", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname10", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void verylongfunctionname1(int *verylongname1 +intent(inout), int *verylongname2 +intent(inout), int *verylongname3 +intent(inout), int *verylongname4 +intent(inout), int *verylongname5 +intent(inout), int *verylongname6 +intent(inout), int *verylongname7 +intent(inout), int *verylongname8 +intent(inout), int *verylongname9 +intent(inout), int *verylongname10 +intent(inout))", 
                "declgen": "void verylongfunctionname1(int * verylongname1 +intent(inout), int * verylongname2 +intent(inout), int * verylongname3 +intent(inout), int * verylongname4 +intent(inout), int * verylongname5 +intent(inout), int * verylongname6 +intent(inout), int * verylongname7 +intent(inout), int * verylongname8 +intent(inout), int * verylongname9 +intent(inout), int * verylongname10 +intent(inout))", 
                "format": {
                    "C_call_code": "example::\tnested::\tverylongfunctionname1(\tverylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10);", 
                    "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10", 
                    "C_name": "AA_verylongfunctionname1", 
                    "C_prototype": "int * verylongname1,\t int * verylongname2,\t int * verylongname3,\t int * verylongname4,\t int * verylongname5,\t int * verylongname6,\t int * verylongname7,\t int * verylongname8,\t int * verylongname9,\t int * verylongname10", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_verylongfunctionname1", 
                    "F_C_name": "c_verylongfunctionname1", 
                    "F_arg_c_call": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10", 
                    "F_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10", 
                    "F_call_code": "call c_verylongfunctionname1(verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10)", 
                    "F_name_function": "verylongfunctionname1", 
                    "F_name_generic": "verylongfunctionname1", 
                    "F_name_impl": "verylongfunctionname1", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "verylongfunctionname1", 
                    "LUA_name_impl": "l_verylongfunctionname1", 
                    "PY_name_impl": "PP_verylongfunctionname1", 
                    "c_const": "", 
                    "function_name": "verylongfunctionname1", 
                    "underscore_name": "verylongfunctionname1"
                }, 
                "options": {
                    "F_force_wrapper": true
                }
            }, 
            {
                "_fmtargs": {
                    "verylongname1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname1", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname1"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname1", 
                            "f_var": "verylongname1"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 1)", 
                            "c_var_len": "Lverylongname1", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname1", 
                            "lua_var": "SH_Lua_verylongname1"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname1", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname1", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname1", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname1"
                        }
                    }, 
                    "verylongname10": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname10", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname10"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname10", 
                            "f_var": "verylongname10"
                        }, 
                        "fmtl": {
                            "LUA_index": 10, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 10)", 
                            "c_var_len": "Lverylongname10", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname10", 
                            "lua_var": "SH_Lua_verylongname10"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname10", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname10", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname10", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname10", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname10"
                        }
                    }, 
                    "verylongname2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname2"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname2", 
                            "f_var": "verylongname2"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Lverylongname2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname2", 
                            "lua_var": "SH_Lua_verylongname2"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname2", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname2", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname2", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname2"
                        }
                    }, 
                    "verylongname3": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname3", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname3"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname3", 
                            "f_var": "verylongname3"
                        }, 
                        "fmtl": {
                            "LUA_index": 3, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 3)", 
                            "c_var_len": "Lverylongname3", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname3", 
                            "lua_var": "SH_Lua_verylongname3"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname3", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname3", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname3", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname3", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname3"
                        }
                    }, 
                    "verylongname4": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname4", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname4"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname4", 
                            "f_var": "verylongname4"
                        }, 
                        "fmtl": {
                            "LUA_index": 4, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 4)", 
                            "c_var_len": "Lverylongname4", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname4", 
                            "lua_var": "SH_Lua_verylongname4"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname4", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname4", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname4", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname4", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname4"
                        }
                    }, 
                    "verylongname5": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname5", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname5"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname5", 
                            "f_var": "verylongname5"
                        }, 
                        "fmtl": {
                            "LUA_index": 5, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 5)", 
                            "c_var_len": "Lverylongname5", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname5", 
                            "lua_var": "SH_Lua_verylongname5"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname5", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname5", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname5", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname5", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname5"
                        }
                    }, 
                    "verylongname6": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname6", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname6"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname6", 
                            "f_var": "verylongname6"
                        }, 
                        "fmtl": {
                            "LUA_index": 6, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 6)", 
                            "c_var_len": "Lverylongname6", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname6", 
                            "lua_var": "SH_Lua_verylongname6"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname6", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname6", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname6", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname6", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname6"
                        }
                    }, 
                    "verylongname7": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname7", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname7"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname7", 
                            "f_var": "verylongname7"
                        }, 
                        "fmtl": {
                            "LUA_index": 7, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 7)", 
                            "c_var_len": "Lverylongname7", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname7", 
                            "lua_var": "SH_Lua_verylongname7"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname7", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname7", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname7", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname7", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname7"
                        }
                    }, 
                    "verylongname8": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname8", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname8"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname8", 
                            "f_var": "verylongname8"
                        }, 
                        "fmtl": {
                            "LUA_index": 8, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 8)", 
                            "c_var_len": "Lverylongname8", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname8", 
                            "lua_var": "SH_Lua_verylongname8"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname8", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname8", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname8", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname8", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname8"
                        }
                    }, 
                    "verylongname9": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "verylongname9", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname9"
                        }, 
                        "fmtf": {
                            "c_var": "verylongname9", 
                            "f_var": "verylongname9"
                        }, 
                        "fmtl": {
                            "LUA_index": 9, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 9)", 
                            "c_var_len": "Lverylongname9", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname9", 
                            "lua_var": "SH_Lua_verylongname9"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int verylongname9", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "verylongname9", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int verylongname9", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "verylongname9", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_verylongname9"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_ptr": "", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "numpy_type": "NPY_INT", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 68, 
                "ast": {
                    "attrs": {
                        "_typename": "int"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "verylongfunctionname2", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname3", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname4", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname5", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname6", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname7", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname8", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname9", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "verylongname10", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int verylongfunctionname2(int verylongname1, int verylongname2, int verylongname3, int verylongname4, int verylongname5, int verylongname6, int verylongname7, int verylongname8, int verylongname9, int verylongname10)", 
                "declgen": "int verylongfunctionname2(int verylongname1 +intent(in)+value, int verylongname2 +intent(in)+value, int verylongname3 +intent(in)+value, int verylongname4 +intent(in)+value, int verylongname5 +intent(in)+value, int verylongname6 +intent(in)+value, int verylongname7 +intent(in)+value, int verylongname8 +intent(in)+value, int verylongname9 +intent(in)+value, int verylongname10 +intent(in)+value)", 
                "format": {
                    "C_call_code": "int SHC_rv =\t example::\tnested::\tverylongfunctionname2(\tverylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10);", 
                    "C_call_list": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10", 
                    "C_name": "AA_verylongfunctionname2", 
                    "C_prototype": "int verylongname1,\t int verylongname2,\t int verylongname3,\t int verylongname4,\t int verylongname5,\t int verylongname6,\t int verylongname7,\t int verylongname8,\t int verylongname9,\t int verylongname10", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_verylongfunctionname2", 
                    "F_C_name": "c_verylongfunctionname2", 
                    "F_arg_c_call": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10", 
                    "F_arguments": "verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10", 
                    "F_call_code": "SHT_rv = c_verylongfunctionname2(verylongname1,\t verylongname2,\t verylongname3,\t verylongname4,\t verylongname5,\t verylongname6,\t verylongname7,\t verylongname8,\t verylongname9,\t verylongname10)", 
                    "F_name_function": "verylongfunctionname2", 
                    "F_name_generic": "verylongfunctionname2", 
                    "F_name_impl": "verylongfunctionname2", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "verylongfunctionname2", 
                    "LUA_name_impl": "l_verylongfunctionname2", 
                    "PY_name_impl": "PP_verylongfunctionname2", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "verylongfunctionname2", 
                    "underscore_name": "verylongfunctionname2"
                }, 
                "options": {
                    "C_line_length": 0, 
                    "F_force_wrapper": true, 
                    "F_line_length": 0
                }
            }, 
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "in", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "in"
                        }, 
                        "fmtf": {
                            "c_var": "in", 
                            "f_var": "in"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": " *", 
                            "c_var": "lua_tonumber(L, 1)", 
                            "c_var_len": "Lin", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "in", 
                            "lua_var": "SH_Lua_in"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double * in", 
                            "c_ptr": " *", 
                            "c_type": "double", 
                            "c_var": "in", 
                            "cxx_addr": "", 
                            "cxx_decl": "double * in", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "in", 
                            "numpy_intent": "NPY_ARRAY_IN_ARRAY", 
                            "numpy_type": "NPY_DOUBLE", 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_in", 
                            "pytmp_var": "SHTPy_in"
                        }
                    }, 
                    "out": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "*", 
                            "c_var": "out", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "out"
                        }, 
                        "fmtf": {
                            "c_var": "out", 
                            "f_var": "out", 
                            "mold": "mold=in"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": " *", 
                            "c_var": "out", 
                            "c_var_len": "Lout", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "out", 
                            "lua_var": "SH_Lua_out"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "double * out", 
                            "c_ptr": " *", 
                            "c_type": "double", 
                            "c_var": "out", 
                            "cxx_addr": "", 
                            "cxx_decl": "double * out", 
                            "cxx_deref": "->", 
                            "cxx_type": "double", 
                            "cxx_var": "out", 
                            "numpy_type": "NPY_DOUBLE", 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_out"
                        }
                    }, 
                    "sizein": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "sizein", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "sizein"
                        }, 
                        "fmtf": {
                            "c_var": "sizein", 
                            "f_var": "sizein", 
                            "pre_call_intent": "size(in,kind=C_INT)"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Lsizein", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "sizein", 
                            "lua_var": "SH_Lua_sizein"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int sizein", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "sizein", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int sizein", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "sizein", 
                            "numpy_type": "NPY_INT", 
                            "pre_call_intent": "PyArray_SIZE(SHPy_in)", 
                            "py_var": "SHPy_sizein"
                        }
                    }
                }, 
                "_function_index": 69, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "cos_doubles", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "double", 
                                "dimension": ":,:", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "in", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "double", 
                                "allocatable": "mold=in", 
                                "dimension": ":,:", 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "out", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_typename": "int", 
                                "implied": "size(in)", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "sizein", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void cos_doubles( double * in   +intent(in)  +dimension(:,:), double * out  +intent(out) +dimension(:,:)+allocatable(mold=in), int      sizein +implied(size(in)))", 
                "declgen": "void cos_doubles(double * in +dimension(:,:)+intent(in), double * out +allocatable(mold=in)+dimension(:,:)+intent(out), int sizein +implied(size(in))+intent(in)+value)", 
                "doxygen": {
                    "brief": "Test multidimensional arrays with allocatable"
                }, 
                "format": {
                    "C_call_code": "example::\tnested::\tcos_doubles(\tin,\t out,\t sizein);", 
                    "C_call_list": "in,\t out,\t sizein", 
                    "C_name": "AA_cos_doubles", 
                    "C_prototype": "double * in,\t double * out,\t int sizein", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_cos_doubles", 
                    "F_C_name": "c_cos_doubles", 
                    "F_arg_c_call": "in,\t out,\t sizein", 
                    "F_arguments": "in,\t out", 
                    "F_call_code": "call c_cos_doubles(in,\t out,\t sizein)", 
                    "F_name_function": "cos_doubles", 
                    "F_name_generic": "cos_doubles", 
                    "F_name_impl": "cos_doubles", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "cos_doubles", 
                    "LUA_name_impl": "l_cos_doubles", 
                    "PY_name_impl": "PP_cos_doubles", 
                    "c_const": "", 
                    "function_name": "cos_doubles", 
                    "underscore_name": "cos_doubles"
                }, 
                "options": {
                    "F_standard": 2008
                }
            }
        ], 
        "language": "c++", 
        "options": {
            "C_enum_member_template": "{enum_member_name}", 
            "C_enum_template": "{C_prefix}{class_prefix}{enum_name}", 
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_line_length": 72, 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_abstract_interface_argument_template": "arg{index}", 
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}", 
            "F_enum_member_template": "{class_prefix}{enum_lower}_{enum_member_lower}", 
            "F_force_wrapper": false, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_line_length": 72, 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": true, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_return_fortran_pointer": true, 
            "F_standard": 2003, 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter", 
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}", 
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor", 
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context", 
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function", 
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr", 
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype", 
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": true, 
            "doxygen": true, 
            "return_scalar_pointer": "pointer", 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": true, 
            "wrap_python": true
        }
    }, 
    "typealias": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "integer(C_LONG_LONG)": "long_long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float"
    }, 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cxx": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cpp_if": "ifdef USE_MPI", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_kind": "C_INT", 
            "f_type": "integer"
        }, 
        "SidreLength": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONG", 
            "PY_ctor": "PyInt_FromLong({c_ptr}{c_var})", 
            "PY_format": "l", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_header": "sidre/SidreTypes.h", 
            "c_type": "SIDRE_SidreLength", 
            "cxx_type": "SidreLength", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)", 
            "typedef": "long"
        }, 
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_INT", 
            "PY_ctor": "PyInt_FromLong({c_ptr}{c_var})", 
            "PY_format": "i", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_header": "sidre/SidreTypes.h", 
            "c_to_cxx": "getTypeID({c_var})", 
            "c_type": "int", 
            "cxx_header": "sidre/SidreWrapperHelpers.hpp", 
            "cxx_to_c": "static_cast<int>({cxx_var})", 
            "cxx_type": "TypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "axom::sidre::Group": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyTypeObject": "FillInTypeForGroup", 
            "base": "shadow", 
            "c_header": "sidre/wrapGroup.h", 
            "c_to_cxx": "\tstatic_cast<{c_const}axom::sidre::Group *>(\tstatic_cast<{c_const}void *>(\t{c_var}))", 
            "c_type": "SIDRE_group", 
            "cxx_header": "sidre/Group.hpp", 
            "cxx_to_c": "\tstatic_cast<{c_const}SIDRE_group *>(\tstatic_cast<{c_const}void *>(\t{cxx_addr}{cxx_var}))", 
            "cxx_type": "axom::sidre::Group", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "datagroup", 
            "f_module": {
                "sidre_mod": [
                    "group"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(datagroup)", 
            "forward": "axom::sidre::Group", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}axom::sidre::Group * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}axom::sidre::Group * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PYN_typenum": "NPY_BOOL", 
            "PY_PyTypeObject": "PyBool_Type", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_kind": "C_BOOL", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_ptr}{c_var});"
                    ], 
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "(int) {cxx_var}", 
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)", 
            "PY_format": "c", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_DOUBLE", 
            "PY_ctor": "PyFloat_FromDouble({c_ptr}{c_var})", 
            "PY_format": "d", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "example::nested::ExClass1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PP_ExClass1", 
            "PY_PyTypeObject": "PP_ExClass1_Type", 
            "PY_from_object": "PP_ExClass1_from_Object", 
            "PY_to_object": "PP_ExClass1_to_Object", 
            "base": "shadow", 
            "c_to_cxx": "\tstatic_cast<{c_const}example::\tnested::\tExClass1 *>(\tstatic_cast<{c_const}void *>(\t{c_var}))", 
            "c_type": "AA_exclass1", 
            "cxx_to_c": "\tstatic_cast<{c_const}AA_exclass1 *>(\tstatic_cast<{c_const}void *>(\t{cxx_addr}{cxx_var}))", 
            "cxx_type": "example::\tnested::\tExClass1", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "exclass1", 
            "f_module": {
                "exclass1_mod": [
                    "exclass1"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%yadda()", 
            "f_type": "type(exclass1)", 
            "forward": "example::\tnested::\tExClass1", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}example::\tnested::\tExClass1 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}example::\tnested::\tExClass1 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "example::nested::ExClass2": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PP_ExClass2", 
            "PY_PyTypeObject": "PP_ExClass2_Type", 
            "PY_from_object": "PP_ExClass2_from_Object", 
            "PY_to_object": "PP_ExClass2_to_Object", 
            "base": "shadow", 
            "c_to_cxx": "\tstatic_cast<{c_const}example::\tnested::\tExClass2 *>(\tstatic_cast<{c_const}void *>(\t{c_var}))", 
            "c_type": "AA_exclass2", 
            "cxx_to_c": "\tstatic_cast<{c_const}AA_exclass2 *>(\tstatic_cast<{c_const}void *>(\t{cxx_addr}{cxx_var}))", 
            "cxx_type": "example::\tnested::\tExClass2", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "exclass2", 
            "f_module": {
                "exclass2_mod": [
                    "exclass2"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%yadda()", 
            "f_type": "type(exclass2)", 
            "forward": "example::\tnested::\tExClass2", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}example::\tnested::\tExClass2 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}example::\tnested::\tExClass2 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "example::nested::ExClass3": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "base": "shadow", 
            "c_to_cxx": "\tstatic_cast<{c_const}example::\tnested::\tExClass3 *>(\tstatic_cast<{c_const}void *>(\t{c_var}))", 
            "c_type": "AA_exclass3", 
            "cxx_to_c": "\tstatic_cast<{c_const}AA_exclass3 *>(\tstatic_cast<{c_const}void *>(\t{cxx_addr}{cxx_var}))", 
            "cxx_type": "example::\tnested::\tExClass3", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "exclass3", 
            "f_module": {
                "exclass3_mod": [
                    "exclass3"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%yadda()", 
            "f_type": "type(exclass3)", 
            "forward": "example::\tnested::\tExClass3", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}example::\tnested::\tExClass3 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}example::\tnested::\tExClass3 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_FLOAT", 
            "PY_ctor": "PyFloat_FromDouble({c_ptr}{c_var})", 
            "PY_format": "f", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_INT", 
            "PY_ctor": "PyInt_FromLong({c_ptr}{c_var})", 
            "PY_format": "i", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONG", 
            "PY_ctor": "PyInt_FromLong({c_ptr}{c_var})", 
            "PY_format": "l", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONGLONG", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_kind": "C_LONG_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromSize_t({c_ptr}{c_var})", 
            "c_header": "<stddef.h>", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "{cxx_var}{cxx_deref}c_str()", 
            "PY_ctor": "PyString_FromString({cxx_var}{cxx_deref}c_str())", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}{cxx_deref}empty()) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}{cxx_deref}c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_out": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        }, 
        "std::vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{+", 
                        "std::vector<{cxx_T}>::size_type+", 
                        "{c_temp}i = 0,", 
                        "{c_temp}n = {c_var_size};", 
                        "-{c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+", 
                        "{c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "-}}", 
                        "-}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> {cxx_var}(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{", 
                        "    std::vector<{cxx_T}>::size_type", 
                        "        {c_temp}i = 0,", 
                        "        {c_temp}n = {c_var_size};", 
                        "    {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "        {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "    }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t {cxx_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "std::string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "      {c_const}char * BBB = {c_var};", 
                            "      std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "    {c_const}char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            }, 
            "cxx_header": "<vector>", 
            "cxx_type": "std::vector<{cxx_T}>"
        }, 
        "stringout": {
            "base": "string", 
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        " post_call intent_out_buf"
                    ], 
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "post_call": [
                        "*{c_var} = {cxx_addr}{cxx_var};", 
                        "*{c_var_len} = {cxx_var}{cxx_deref}size();"
                    ]
                }
            }, 
            "c_type": "void", 
            "cxx_header": "<string>", 
            "cxx_to_c": "static_cast<void *>({cxx_var})", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_statements": {
                "result_buf": {
                    "f_helper": "copy_string", 
                    "need_wrapper": true, 
                    "post_call": [
                        "allocate(character(len={f_var_len}, kind=C_CHAR):: {f_var})", 
                        "call SHROUD_string_copy_and_free({f_cptr}, {f_var})"
                    ]
                }
            }, 
            "f_type": "type(C_PTR)YY"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}