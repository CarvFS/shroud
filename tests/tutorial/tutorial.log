Read yaml tutorial.yaml
Skipping std::string, unable to create C wrapper for function returning Function4a instance (must return a pointer or reference).
Read splicer ftutorialsplicer.f
Close tutorial_types.yaml
class Class1
C method Class1() +name(new)
C method Class1(int flag +intent(in)+value) +name(new)
C method ~Class1() +name(delete)
C method int Method1()
C method bool equivalent(const Class1 & obj2 +intent(in)) const
C method Class1 * returnThis()
C method Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +intent(in)+value)
C method Class1 * returnThisBuffer(std::string & name +intent(in)+len_trim(Lname), bool flag +intent(in)+value)
C method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
C method int getM_flag()
C method int getTest()
C method void setTest(int val +intent(in)+value)
Close wrapClass1.h
Close wrapClass1.cpp
class Singleton
C method static Singleton & getReference()
Close wrapSingleton.h
Close wrapSingleton.cpp
class struct1
C function void Function1()
C function double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
C function void Sum(size_t len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))
C function long long TypeLongLong(long long arg1 +intent(in)+value)
C function bool Function3(bool arg +intent(in)+value)
C function void Function3b(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))
C function void Function4a(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)
C function const std::string & Function4b(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(result_as_arg)
C function void Function4b(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string & output +intent(out)+len(Noutput))
C function const std::string & Function4c(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)
C function void Function4c(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), const stringout * * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C function const std::string * Function4d() +deref(allocatable)+owner(caller)
C function void Function4d(const stringout * * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)) +owner(caller)
C function double Function5()
C function double Function5(double arg1=3.1415 +intent(in)+value)
C function double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
C function void Function6(const std::string & name +intent(in))
C function void Function6(const std::string & name +intent(in)+len_trim(Lname))
C function void Function6(int indx +intent(in)+value)
C function void Function7(int arg +intent(in)+value)
C function void Function7(double arg +intent(in)+value)
C function int Function8()
C function double Function8()
C function void Function9(double arg +intent(in)+value)
C function void Function10()
C function void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)
C function void Function10(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)
C function int overload1(int num +intent(in)+value)
C function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value)
C function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C function int overload1(double type +intent(in)+value, int num +intent(in)+value)
C function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)
C function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C function TypeID typefunc(TypeID arg +intent(in)+value)
C function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
C function Color colorfunc(Color arg +intent(in)+value)
C function void getMinMax(int & min +intent(out), int & max +intent(out))
C function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
C function int useclass(const Class1 * arg1 +intent(in))
C function const Class1 * getclass2()
C function Class1 * getclass3()
C function Class1 getClassCopy(int flag +intent(in)+value)
C function int callback1(int in +intent(in)+value, int ( * incr)(int +value) +intent(in)+value)
C function struct1 returnStruct(int i +intent(in)+value, double d +intent(in)+value)
C function struct1 * returnStructPtr(int i +intent(in)+value, double d +intent(in)+value)
C function double acceptStructIn(struct1 arg +intent(in)+value)
C function double acceptStructInPtr(struct1 * arg +intent(in))
C function void acceptStructOutPtr(struct1 * arg +intent(out), int i +intent(in)+value, double d +intent(in)+value)
C function void acceptStructInOutPtr(struct1 * arg +intent(inout))
C function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
C function void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)
Close wrapTutorial.h
Close wrapTutorial.cpp
Close typesTutorial.h
class struct1
class Class1
C-interface, Fortran method Class1() +name(new)
C-interface, Fortran method Class1(int flag +intent(in)+value) +name(new)
C-interface, Fortran method ~Class1() +name(delete)
C-interface, Fortran method int Method1()
C-interface, Fortran method bool equivalent(const Class1 & obj2 +intent(in)) const
C-interface, Fortran method Class1 * returnThis()
C-interface, Fortran method Class1 * returnThisBuffer(std::string & name +intent(in), bool flag +intent(in)+value)
C-interface method Class1 * returnThisBuffer(std::string & name +intent(in)+len_trim(Lname), bool flag +intent(in)+value)
C-interface, Fortran method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
C-interface, Fortran method int getM_flag()
C-interface, Fortran method int getTest()
C-interface, Fortran method void setTest(int val +intent(in)+value)
class Singleton
C-interface, Fortran method static Singleton & getReference()
C-interface, Fortran function void Function1()
C-interface, Fortran function double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
C-interface, Fortran function void Sum(size_t len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))
C-interface, Fortran function long long TypeLongLong(long long arg1 +intent(in)+value)
C-interface, Fortran function bool Function3(bool arg +intent(in)+value)
C-interface, Fortran function void Function3b(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))
Fortran function const std::string Function4a(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(result_as_arg)+len(30)
C-interface function void Function4a(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)
C-interface function const std::string & Function4b(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(result_as_arg)
C-interface function void Function4b(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string & output +intent(out)+len(Noutput))
Fortran function void Function4b(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string & output +intent(out)+len(Noutput))
C-interface, Fortran function const std::string & Function4c(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)
C-interface function void Function4c(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), const stringout * * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out))
C-interface, Fortran function const std::string * Function4d() +deref(allocatable)+owner(caller)
C-interface function void Function4d(const stringout * * SHF_rv +context(DSHF_rv)+deref(allocatable)+intent(out)) +owner(caller)
C-interface, Fortran function double Function5()
C-interface, Fortran function double Function5(double arg1=3.1415 +intent(in)+value)
C-interface, Fortran function double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
C-interface, Fortran function void Function6(const std::string & name +intent(in))
C-interface function void Function6(const std::string & name +intent(in)+len_trim(Lname))
C-interface, Fortran function void Function6(int indx +intent(in)+value)
C-interface, Fortran function void Function7(int arg +intent(in)+value)
C-interface, Fortran function void Function7(double arg +intent(in)+value)
C-interface, Fortran function int Function8()
C-interface, Fortran function double Function8()
C-interface function void Function9(double arg +intent(in)+value)
Fortran function void Function9(float arg +intent(in)+value)
Fortran function void Function9(double arg +intent(in)+value)
C-interface, Fortran function void Function10()
C-interface function void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)
Fortran function void Function10(const std::string & name +intent(in), float arg2 +intent(in)+value)
Fortran function void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)
C-interface function void Function10(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)
C-interface, Fortran function int overload1(int num +intent(in)+value)
C-interface, Fortran function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value)
C-interface, Fortran function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C-interface, Fortran function int overload1(double type +intent(in)+value, int num +intent(in)+value)
C-interface, Fortran function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)
C-interface, Fortran function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
C-interface, Fortran function TypeID typefunc(TypeID arg +intent(in)+value)
C-interface, Fortran function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
C-interface, Fortran function Color colorfunc(Color arg +intent(in)+value)
C-interface, Fortran function void getMinMax(int & min +intent(out), int & max +intent(out))
C-interface, Fortran function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
C-interface, Fortran function int useclass(const Class1 * arg1 +intent(in))
C-interface, Fortran function const Class1 * getclass2()
C-interface, Fortran function Class1 * getclass3()
C-interface, Fortran function Class1 getClassCopy(int flag +intent(in)+value)
C-interface, Fortran function int callback1(int in +intent(in)+value, int ( * incr)(int +value) +intent(in)+value)
C-interface, Fortran function struct1 returnStruct(int i +intent(in)+value, double d +intent(in)+value)
C-interface, Fortran function struct1 * returnStructPtr(int i +intent(in)+value, double d +intent(in)+value)
C-interface, Fortran function double acceptStructIn(struct1 arg +intent(in)+value)
C-interface, Fortran function double acceptStructInPtr(struct1 * arg +intent(in))
C-interface, Fortran function void acceptStructOutPtr(struct1 * arg +intent(out), int i +intent(in)+value, double d +intent(in)+value)
C-interface, Fortran function void acceptStructInOutPtr(struct1 * arg +intent(inout))
C-interface, Fortran function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
C-interface function void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)
Close wrapftutorial.f
class Class1
Python method Class1() +name(new)
Python method Class1(int flag +intent(in)+value) +name(new)
Python method ~Class1() +name(delete)
Python method int Method1()
Python method bool equivalent(const Class1 & obj2 +intent(in)) const
Python method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
Close pyClass1type.cpp
class Singleton
Python method static Singleton & getReference()
Close pySingletontype.cpp
Python function void Function1()
Python function double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
Python function void Sum(size_t len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))
Python function long long TypeLongLong(long long arg1 +intent(in)+value)
Python function bool Function3(bool arg +intent(in)+value)
Python function const std::string Function4a(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(result_as_arg)+len(30)
Python function const std::string & Function4b(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(result_as_arg)
Python function const std::string & Function4c(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)
Python function const std::string * Function4d() +deref(allocatable)+owner(caller)
Python function double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Python function void Function6(const std::string & name +intent(in))
Python function void Function6(int indx +intent(in)+value)
Python function void Function7(int arg +intent(in)+value)
Python function void Function7(double arg +intent(in)+value)
Python function void Function9(double arg +intent(in)+value)
Python function void Function10()
Python function void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)
Python function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Python function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Python function TypeID typefunc(TypeID arg +intent(in)+value)
Python function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
Python function Color colorfunc(Color arg +intent(in)+value)
Python function void getMinMax(int & min +intent(out), int & max +intent(out))
Python function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
Python function int useclass(const Class1 * arg1 +intent(in))
Python function Class1 * getclass3()
Python function struct1 returnStruct(int i +intent(in)+value, double d +intent(in)+value)
Python function struct1 * returnStructPtr(int i +intent(in)+value, double d +intent(in)+value)
Python function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
Close pyTutorialhelper.cpp
Close pyTutorialmodule.hpp
Close pyTutorialmodule.cpp
Lua method Class1() +name(new)
Lua method Class1(int flag +intent(in)+value) +name(new)
Lua method ~Class1() +name(delete)
Lua method int Method1()
Lua method DIRECTION directionFunc(DIRECTION arg +intent(in)+value)
Lua function void Function1()
Lua function double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)
Lua function bool Function3(bool arg +intent(in)+value)
Lua function const std::string Function4a(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(result_as_arg)+len(30)
Lua function const std::string & Function4b(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(result_as_arg)
Lua function const std::string & Function4c(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +deref(allocatable)
Lua function const std::string * Function4d() +deref(allocatable)+owner(caller)
Lua function double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Lua function double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Lua function double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)
Lua function void Function6(const std::string & name +intent(in))
Lua function void Function6(int indx +intent(in)+value)
Lua function void Function7(int arg +intent(in)+value)
Lua function void Function7(double arg +intent(in)+value)
Lua function void Function9(double arg +intent(in)+value)
Lua function void Function10()
Lua function void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)
Lua function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)
Lua function TypeID typefunc(TypeID arg +intent(in)+value)
Lua function EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)
Lua function Color colorfunc(Color arg +intent(in)+value)
Lua function Class1::DIRECTION directionFunc(Class1::DIRECTION arg +intent(in)+value)
Lua function const std::string & LastFunctionCalled() +deref(result_as_arg)+len(30)
Close luaTutorialmodule.hpp
Close luaTutorialmodule.cpp
