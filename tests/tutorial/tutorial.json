{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.", 
    "library": {
        "classes": [
            {
                "cxx_header": "", 
                "enums": [
                    {
                        "_fmtmembers": {
                            "DOWN": {
                                "C_enum_member": "DOWN", 
                                "F_enum_member": "class1_direction_down", 
                                "enum_member_lower": "down", 
                                "enum_member_name": "DOWN", 
                                "enum_member_upper": "DOWN", 
                                "evalue": 3
                            }, 
                            "LEFT": {
                                "C_enum_member": "LEFT", 
                                "F_enum_member": "class1_direction_left", 
                                "cxx_value": "100", 
                                "enum_member_lower": "left", 
                                "enum_member_name": "LEFT", 
                                "enum_member_upper": "LEFT", 
                                "evalue": 100
                            }, 
                            "RIGHT": {
                                "C_enum_member": "RIGHT", 
                                "F_enum_member": "class1_direction_right", 
                                "enum_member_lower": "right", 
                                "enum_member_name": "RIGHT", 
                                "enum_member_upper": "RIGHT", 
                                "evalue": 101
                            }, 
                            "UP": {
                                "C_enum_member": "UP", 
                                "F_enum_member": "class1_direction_up", 
                                "cxx_value": "2", 
                                "enum_member_lower": "up", 
                                "enum_member_name": "UP", 
                                "enum_member_upper": "UP", 
                                "evalue": 2
                            }
                        }, 
                        "ast": {
                            "members": [
                                {
                                    "name": "UP", 
                                    "value": {
                                        "constant": "2"
                                    }
                                }, 
                                {
                                    "name": "DOWN"
                                }, 
                                {
                                    "name": "LEFT", 
                                    "value": {
                                        "constant": "100"
                                    }
                                }, 
                                {
                                    "name": "RIGHT"
                                }
                            ], 
                            "name": "DIRECTION"
                        }, 
                        "decl": "enum DIRECTION { UP = 2, DOWN, LEFT= 100, RIGHT };", 
                        "format": {
                            "C_enum": "TUT_class1_DIRECTION", 
                            "enum_lower": "direction", 
                            "enum_name": "DIRECTION", 
                            "enum_upper": "DIRECTION", 
                            "namespace_scope": "tutorial::\tClass1::"
                        }, 
                        "options": {}
                    }
                ], 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapClass1.h", 
                    "C_impl_filename": "wrapClass1.cpp", 
                    "C_type_name": "TUT_class1", 
                    "F_derived_name": "class1", 
                    "LUA_class_reg": "l_Class1_Reg", 
                    "LUA_ctor_name": "Class1", 
                    "LUA_metadata": "Class1.metatable", 
                    "LUA_this_call": "SH_this->self->", 
                    "LUA_userdata_member": "self", 
                    "LUA_userdata_type": "l_Class1_Type", 
                    "LUA_userdata_var": "SH_this", 
                    "PY_PyObject": "PY_Class1", 
                    "PY_PyTypeObject": "PY_Class1_Type", 
                    "PY_capsule_name": "PY_Class1_capsule_name", 
                    "PY_from_object_func": "PP_Class1_from_Object", 
                    "PY_this_call": "self->obj->", 
                    "PY_to_object_func": "PP_Class1_to_Object", 
                    "PY_type_filename": "pyClass1type.cpp", 
                    "class_lower": "class1", 
                    "class_prefix": "class1_", 
                    "class_upper": "CLASS1", 
                    "cxx_class": "Class1"
                }, 
                "functions": [
                    {
                        "_cxx_overload": [
                            0, 
                            1
                        ], 
                        "_fmtresult": {
                            "fmtc": {
                                "c_val": "\tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "\tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PY_Class1", 
                                "PyTypeObject": "PY_Class1_Type", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 0, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {}, 
                            "const": false, 
                            "fattrs": {
                                "_constructor": true, 
                                "_name": "ctor", 
                                "name": "new"
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "Class1"
                            ]
                        }, 
                        "decl": "Class1()         +name(new)", 
                        "declgen": "Class1() +name(new)", 
                        "format": {
                            "C_call_code": "tutorial::\tClass1 * SHCXX_rv = new tutorial::\tClass1();", 
                            "C_call_list": "", 
                            "C_name": "TUT_class1_new_default", 
                            "C_post_call": "TUT_class1 * SHC_rv = \tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_prototype": "", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "TUT_class1 *", 
                            "F_C_call": "c_class1_new_default", 
                            "F_C_name": "c_class1_new_default", 
                            "F_arg_c_call": "", 
                            "F_arguments": "", 
                            "F_call_code": "SHT_rv%voidptr = c_class1_new_default()", 
                            "F_name_function": "new_default", 
                            "F_name_generic": "new", 
                            "F_name_impl": "class1_new_default", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "new", 
                            "LUA_name_impl": "l_class1_new", 
                            "PY_name_impl": "PY_Class1_tp_init_default", 
                            "PY_type_impl": "PY_Class1_tp_init_default", 
                            "PY_type_method": "tp_init", 
                            "c_const": "", 
                            "c_rv_decl": "TUT_class1 * SHC_rv", 
                            "cxx_rv_decl": "tutorial::\tClass1 * SHCXX_rv", 
                            "function_name": "new", 
                            "function_suffix": "_default", 
                            "underscore_name": "new"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_cxx_overload": [
                            0, 
                            1
                        ], 
                        "_fmtargs": {
                            "flag": {
                                "fmtc": {
                                    "c_const": "", 
                                    "c_ptr": "", 
                                    "c_var": "flag", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "flag"
                                }, 
                                "fmtf": {
                                    "c_var": "flag", 
                                    "f_var": "flag"
                                }, 
                                "fmtl": {
                                    "LUA_index": 1, 
                                    "c_ptr": "", 
                                    "c_var": "lua_tointeger(L, 1)", 
                                    "c_var_len": "Lflag", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "flag", 
                                    "lua_var": "SH_Lua_flag"
                                }, 
                                "fmtpy": {
                                    "c_const": "", 
                                    "c_decl": "int flag", 
                                    "c_ptr": "", 
                                    "c_type": "int", 
                                    "c_var": "flag", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "int flag", 
                                    "cxx_deref": ".", 
                                    "cxx_type": "int", 
                                    "cxx_var": "flag", 
                                    "py_var": "SHPy_flag"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_val": "\tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtl": {
                                "c_var": "\tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                                "cxx_addr": "", 
                                "cxx_deref": "->", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PY_Class1", 
                                "PyTypeObject": "PY_Class1_Type", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 1, 
                        "_overloaded": true, 
                        "ast": {
                            "attrs": {}, 
                            "const": false, 
                            "fattrs": {
                                "_constructor": true, 
                                "_name": "ctor", 
                                "name": "new"
                            }, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "name": "flag", 
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "Class1"
                            ]
                        }, 
                        "decl": "Class1(int flag) +name(new)", 
                        "declgen": "Class1(int flag +intent(in)+value) +name(new)", 
                        "format": {
                            "C_call_code": "tutorial::\tClass1 * SHCXX_rv = new tutorial::\tClass1(flag);", 
                            "C_call_list": "flag", 
                            "C_name": "TUT_class1_new_flag", 
                            "C_post_call": "TUT_class1 * SHC_rv = \tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                            "C_prototype": "int flag", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "TUT_class1 *", 
                            "F_C_call": "c_class1_new_flag", 
                            "F_C_name": "c_class1_new_flag", 
                            "F_arg_c_call": "flag", 
                            "F_arguments": "flag", 
                            "F_call_code": "SHT_rv%voidptr = c_class1_new_flag(flag)", 
                            "F_name_function": "new_flag", 
                            "F_name_generic": "new", 
                            "F_name_impl": "class1_new_flag", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "PY_name_impl": "PY_Class1_tp_init_flag", 
                            "PY_type_impl": "PY_Class1_tp_init_flag", 
                            "PY_type_method": "tp_init", 
                            "c_const": "", 
                            "c_rv_decl": "TUT_class1 * SHC_rv", 
                            "cxx_rv_decl": "tutorial::\tClass1 * SHCXX_rv", 
                            "function_name": "new", 
                            "function_suffix": "_flag", 
                            "underscore_name": "new"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_function_index": 2, 
                        "ast": {
                            "attrs": {}, 
                            "const": false, 
                            "fattrs": {
                                "_destructor": true, 
                                "_name": "dtor", 
                                "name": "delete"
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "Class1"
                            ]
                        }, 
                        "decl": "~Class1()        +name(delete)", 
                        "declgen": "~Class1() +name(delete)", 
                        "format": {
                            "C_call_code": "delete SH_this;", 
                            "C_call_list": "", 
                            "C_name": "TUT_class1_delete", 
                            "C_pre_call": "tutorial::\tClass1 *SH_this = \tstatic_cast<tutorial::\tClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "TUT_class1 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_class1_delete", 
                            "F_C_name": "c_class1_delete", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_class1_delete(obj%voidptr)", 
                            "F_name_function": "delete", 
                            "F_name_generic": "delete", 
                            "F_name_impl": "class1_delete", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "delete", 
                            "LUA_name_impl": "l_class1_delete", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "delete", 
                            "underscore_name": "delete"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtl": {
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": null, 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 3, 
                        "ast": {
                            "attrs": {}, 
                            "const": false, 
                            "declarator": {
                                "name": "Method1", 
                                "pointer": []
                            }, 
                            "fattrs": {}, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "decl": "int Method1()", 
                        "declgen": "int Method1()", 
                        "doxygen": {
                            "brief": "returns the value of flag member"
                        }, 
                        "format": {
                            "C_call_code": "int SHC_rv =\t SH_this->Method1(\t);", 
                            "C_call_list": "", 
                            "C_name": "TUT_class1_method1", 
                            "C_pre_call": "tutorial::\tClass1 *SH_this = \tstatic_cast<tutorial::\tClass1 *>(\tstatic_cast<void *>(\tself));", 
                            "C_prototype": "TUT_class1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_class1_method1", 
                            "F_C_name": "c_class1_method1", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_class1_method1(obj%voidptr)", 
                            "F_name_function": "method1", 
                            "F_name_generic": "method1", 
                            "F_name_impl": "class1_method1", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "LUA_name": "Method1", 
                            "LUA_name_impl": "l_class1_method1", 
                            "PY_name_impl": "PY_class1_Method1", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "int SHC_rv", 
                            "function_name": "Method1", 
                            "underscore_name": "method1"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtargs": {
                            "obj2": {
                                "fmtc": {
                                    "c_const": "const ", 
                                    "c_ptr": "", 
                                    "c_var": "obj2", 
                                    "cxx_decl": "const tutorial::\tClass1 * SHCXX_obj2", 
                                    "cxx_deref": "->", 
                                    "cxx_type": "tutorial::\tClass1", 
                                    "cxx_val": "\tstatic_cast<const tutorial::\tClass1 *>(\tstatic_cast<const void *>(\tobj2))", 
                                    "cxx_var": "SHCXX_obj2"
                                }, 
                                "fmtf": {
                                    "c_var": "obj2", 
                                    "f_var": "obj2"
                                }, 
                                "fmtpy": {
                                    "c_const": "const ", 
                                    "c_decl": "TUT_class1 obj2", 
                                    "c_ptr": "", 
                                    "c_type": "TUT_class1", 
                                    "c_var": "obj2", 
                                    "cxx_addr": "&", 
                                    "cxx_decl": "tutorial::\tClass1 obj2", 
                                    "cxx_deref": "->", 
                                    "cxx_type": "tutorial::\tClass1", 
                                    "cxx_var": "obj2", 
                                    "py_type": "PY_Class1", 
                                    "py_var": "SHPy_obj2"
                                }
                            }
                        }, 
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PyObject", 
                                "PyTypeObject": "PyBool_Type", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHC_rv", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 4, 
                        "ast": {
                            "attrs": {}, 
                            "const": false, 
                            "declarator": {
                                "name": "equivalent", 
                                "pointer": []
                            }, 
                            "fattrs": {}, 
                            "func_const": true, 
                            "params": [
                                {
                                    "attrs": {
                                        "intent": "in", 
                                        "value": true
                                    }, 
                                    "const": true, 
                                    "declarator": {
                                        "name": "obj2", 
                                        "pointer": [
                                            {
                                                "const": false, 
                                                "ptr": "&"
                                            }
                                        ]
                                    }, 
                                    "specifier": [
                                        "Class1"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        "decl": "bool equivalent(Class1 const &obj2) const;", 
                        "declgen": "bool equivalent(const Class1 & obj2 +intent(in)+value) const", 
                        "doxygen": {
                            "brief": "Pass in reference to instance"
                        }, 
                        "format": {
                            "C_call_code": "bool SHC_rv =\t SH_this->equivalent(\t*SHCXX_obj2);", 
                            "C_call_list": "*SHCXX_obj2", 
                            "C_name": "TUT_class1_equivalent", 
                            "C_pre_call": "const tutorial::\tClass1 *SH_this = \tstatic_cast<const tutorial::\tClass1 *>(\tstatic_cast<const void *>(\tself));\nconst tutorial::\tClass1 * SHCXX_obj2 = \tstatic_cast<const tutorial::\tClass1 *>(\tstatic_cast<const void *>(\tobj2));", 
                            "C_prototype": "const TUT_class1 * self,\t const TUT_class1 * obj2", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "bool", 
                            "F_C_call": "c_class1_equivalent", 
                            "F_C_name": "c_class1_equivalent", 
                            "F_arg_c_call": "obj%voidptr,\t obj2%get_instance()", 
                            "F_arguments": "obj,\t obj2", 
                            "F_call_code": "SHT_rv = c_class1_equivalent(obj%voidptr,\t obj2%get_instance())", 
                            "F_name_function": "equivalent", 
                            "F_name_generic": "equivalent", 
                            "F_name_impl": "class1_equivalent", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "PY_name_impl": "PY_class1_equivalent", 
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "bool SHC_rv", 
                            "function_name": "equivalent", 
                            "underscore_name": "equivalent"
                        }, 
                        "options": {
                            "wrap_lua": false
                        }
                    }
                ], 
                "name": "Class1", 
                "options": {}
            }, 
            {
                "cxx_header": "", 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapSingleton.h", 
                    "C_impl_filename": "wrapSingleton.cpp", 
                    "C_type_name": "TUT_singleton", 
                    "F_derived_name": "singleton", 
                    "PY_PyObject": "PY_Singleton", 
                    "PY_PyTypeObject": "PY_Singleton_Type", 
                    "PY_capsule_name": "PY_Singleton_capsule_name", 
                    "PY_from_object_func": "PP_Singleton_from_Object", 
                    "PY_this_call": "self->obj->", 
                    "PY_to_object_func": "PP_Singleton_to_Object", 
                    "PY_type_filename": "pySingletontype.cpp", 
                    "class_lower": "singleton", 
                    "class_prefix": "singleton_", 
                    "class_upper": "SINGLETON", 
                    "cxx_class": "Singleton", 
                    "namespace_scope": ""
                }, 
                "functions": [
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_rv_decl": "TUT_singleton * SHC_rv", 
                                "c_val": "\tstatic_cast<TUT_singleton *>(\tstatic_cast<void *>(\t&SHCXX_rv))", 
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv"
                            }, 
                            "fmtpy": {
                                "PyObject": "PY_Singleton", 
                                "PyTypeObject": "PY_Singleton_Type", 
                                "c_var": "SHCXX_rv", 
                                "cxx_addr": "&", 
                                "cxx_deref": ".", 
                                "cxx_var": "SHCXX_rv", 
                                "py_var": "SHTPy_rv"
                            }
                        }, 
                        "_function_index": 5, 
                        "ast": {
                            "attrs": {}, 
                            "const": false, 
                            "declarator": {
                                "name": "getReference", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "fattrs": {}, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "Singleton"
                            ], 
                            "storage": [
                                "static"
                            ]
                        }, 
                        "decl": "static Singleton& getReference()", 
                        "declgen": "Singleton & getReference()", 
                        "format": {
                            "CXX_this_call": "Singleton::", 
                            "C_call_code": "Singleton & SHCXX_rv =\t Singleton::getReference(\t);", 
                            "C_call_list": "", 
                            "C_name": "TUT_singleton_get_reference", 
                            "C_post_call": "TUT_singleton * SHC_rv = \tstatic_cast<TUT_singleton *>(\tstatic_cast<void *>(\t&SHCXX_rv));", 
                            "C_prototype": "", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "TUT_singleton *", 
                            "F_C_call": "c_singleton_get_reference", 
                            "F_C_name": "c_singleton_get_reference", 
                            "F_arg_c_call": "", 
                            "F_arguments": "", 
                            "F_call_code": "SHT_rv%voidptr = c_singleton_get_reference()", 
                            "F_name_function": "get_reference", 
                            "F_name_generic": "get_reference", 
                            "F_name_impl": "singleton_get_reference", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "PY_name_impl": "PY_singleton_getReference", 
                            "PY_this_call": "Singleton::", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "cxx_rv_decl": "Singleton & SHCXX_rv", 
                            "function_name": "getReference", 
                            "underscore_name": "get_reference"
                        }, 
                        "options": {}
                    }
                ], 
                "name": "Singleton", 
                "namespace": "-none-", 
                "options": {
                    "wrap_lua": false
                }
            }
        ], 
        "copyright": [
            "#######################################################################", 
            "Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.", 
            "Produced at the Lawrence Livermore National Laboratory", 
            "", 
            "LLNL-CODE-738041.", 
            "All rights reserved.", 
            "", 
            "This file is part of Shroud.  For details, see", 
            "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
            "", 
            "Redistribution and use in source and binary forms, with or without", 
            "modification, are permitted provided that the following conditions are", 
            "met:", 
            "", 
            "* Redistributions of source code must retain the above copyright", 
            "  notice, this list of conditions and the disclaimer below.", 
            "", 
            "* Redistributions in binary form must reproduce the above copyright", 
            "  notice, this list of conditions and the disclaimer (as noted below)", 
            "  in the documentation and/or other materials provided with the", 
            "  distribution.", 
            "", 
            "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
            "  may be used to endorse or promote products derived from this", 
            "  software without specific prior written permission.", 
            "", 
            "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
            "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
            "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
            "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
            "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
            "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
            "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
            "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
            "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
            "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
            "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
            "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "", 
            "#######################################################################"
        ], 
        "cxx_header": "tutorial.hpp", 
        "enums": [
            {
                "_fmtmembers": {
                    "BLUE": {
                        "C_enum_member": "BLUE", 
                        "F_enum_member": "color_blue", 
                        "enum_member_lower": "blue", 
                        "enum_member_name": "BLUE", 
                        "enum_member_upper": "BLUE", 
                        "evalue": 1
                    }, 
                    "RED": {
                        "C_enum_member": "RED", 
                        "F_enum_member": "color_red", 
                        "enum_member_lower": "red", 
                        "enum_member_name": "RED", 
                        "enum_member_upper": "RED", 
                        "evalue": 0
                    }, 
                    "WHITE": {
                        "C_enum_member": "WHITE", 
                        "F_enum_member": "color_white", 
                        "enum_member_lower": "white", 
                        "enum_member_name": "WHITE", 
                        "enum_member_upper": "WHITE", 
                        "evalue": 2
                    }
                }, 
                "ast": {
                    "members": [
                        {
                            "name": "RED"
                        }, 
                        {
                            "name": "BLUE"
                        }, 
                        {
                            "name": "WHITE"
                        }
                    ], 
                    "name": "Color"
                }, 
                "decl": "enum Color {\n  RED,\n  BLUE,\n  WHITE\n};\n", 
                "format": {
                    "C_enum": "TUT_Color", 
                    "enum_lower": "color", 
                    "enum_name": "Color", 
                    "enum_upper": "COLOR"
                }, 
                "options": {
                    "bar": 4
                }
            }
        ], 
        "format": {
            "CXX_local": "SHCXX_", 
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "tutorial::\t", 
            "C_argument": "SH_", 
            "C_bufferify_suffix": "_bufferify", 
            "C_custom_return_type": "", 
            "C_header_filename": "wrapTutorial.h", 
            "C_header_filename_suffix": "h", 
            "C_impl_filename": "wrapTutorial.cpp", 
            "C_impl_filename_suffix": "cpp", 
            "C_local": "SHC_", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "TUT_", 
            "C_result": "rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_derived_member": "voidptr", 
            "F_filename_suffix": "f", 
            "F_impl_filename": "wrapftutorial.f", 
            "F_module_name": "tutorial_mod", 
            "F_name_associated": "associated", 
            "F_name_instance_get": "get_instance", 
            "F_name_instance_set": "set_instance", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename": "luaTutorialmodule.hpp", 
            "LUA_header_filename_suffix": "hpp", 
            "LUA_impl_filename_suffix": "cpp", 
            "LUA_metadata": "XXLUA_metadata", 
            "LUA_module_filename": "luaTutorialmodule.cpp", 
            "LUA_module_name": "tutorial", 
            "LUA_module_reg": "l_Tutorial_Reg", 
            "LUA_prefix": "l_", 
            "LUA_result": "rv", 
            "LUA_state_var": "L", 
            "LUA_this_call": "tutorial::\t", 
            "LUA_used_param_state": false, 
            "LUA_userdata_type": "XXLUA_userdata_type", 
            "PY_PyObject": "PyObject", 
            "PY_extern_C_begin": "extern \"C\" ", 
            "PY_header_filename": "pyTutorialmodule.hpp", 
            "PY_header_filename_suffix": "hpp", 
            "PY_helper_filename": "pyTutorialhelper.cpp", 
            "PY_impl_filename_suffix": "cpp", 
            "PY_library_doc": "library documentation", 
            "PY_module_filename": "pyTutorialmodule.cpp", 
            "PY_module_name": "tutorial", 
            "PY_obj": "obj", 
            "PY_param_args": "args", 
            "PY_param_kwds": "kwds", 
            "PY_param_self": "self", 
            "PY_prefix": "PY_", 
            "PY_result": "SHTPy_rv", 
            "PY_this_call": "tutorial::\t", 
            "PY_used_param_args": false, 
            "PY_used_param_kwds": false, 
            "PY_used_param_self": false, 
            "YAML_type_filename": "tutorial_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "function_suffix": "", 
            "library": "Tutorial", 
            "library_lower": "tutorial", 
            "library_upper": "TUTORIAL", 
            "namespace_scope": "tutorial::\t", 
            "stdlib": "std::"
        }, 
        "functions": [
            {
                "_function_index": 6, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function1()", 
                "declgen": "void Function1()", 
                "format": {
                    "C_call_code": "tutorial::\tFunction1(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_function1", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function1", 
                    "F_C_name": "function1", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "call c_function1()", 
                    "F_name_function": "function1", 
                    "F_name_generic": "function1", 
                    "F_name_impl": "function1", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "Function1", 
                    "LUA_name_impl": "l_function1", 
                    "PY_name_impl": "PY_Function1", 
                    "c_const": "", 
                    "function_name": "Function1", 
                    "underscore_name": "function1"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tonumber(L, 1)", 
                            "c_var_len": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1", 
                            "lua_var": "SH_Lua_arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double arg1", 
                            "c_ptr": "", 
                            "c_type": "double", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "double arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Larg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "arg2", 
                            "lua_var": "SH_Lua_arg2"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int arg2", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "arg2", 
                            "py_var": "SHPy_arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 7, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function2", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "double"
                    ]
                }, 
                "decl": "double Function2(double arg1, int arg2)", 
                "declgen": "double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)", 
                "format": {
                    "C_call_code": "double SHC_rv =\t tutorial::\tFunction2(\targ1,\t arg2);", 
                    "C_call_list": "arg1,\t arg2", 
                    "C_name": "TUT_function2", 
                    "C_prototype": "double arg1,\t int arg2", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "double", 
                    "F_C_call": "c_function2", 
                    "F_C_name": "function2", 
                    "F_arg_c_call": "arg1,\t arg2", 
                    "F_arguments": "arg1,\t arg2", 
                    "F_call_code": "SHT_rv = c_function2(arg1,\t arg2)", 
                    "F_name_function": "function2", 
                    "F_name_generic": "function2", 
                    "F_name_impl": "function2", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "Function2", 
                    "LUA_name_impl": "l_function2", 
                    "PY_name_impl": "PY_Function2", 
                    "c_const": "", 
                    "cxx_rv_decl": "double SHC_rv", 
                    "function_name": "Function2", 
                    "underscore_name": "function2"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "len", 
                            "cxx_deref": ".", 
                            "cxx_type": "size_t", 
                            "cxx_var": "len"
                        }, 
                        "fmtf": {
                            "c_var": "len", 
                            "f_var": "len", 
                            "pre_call_intent": "size(values,kind=C_SIZE_T)"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "size_t len", 
                            "c_ptr": "", 
                            "c_type": "size_t", 
                            "c_var": "len", 
                            "cxx_addr": "&", 
                            "cxx_decl": "size_t len", 
                            "cxx_deref": ".", 
                            "cxx_type": "size_t", 
                            "cxx_var": "len", 
                            "pre_call_intent": "PyArray_SIZE(SHPy_values)", 
                            "py_var": "SHPy_len"
                        }
                    }, 
                    "result": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "result", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "result"
                        }, 
                        "fmtf": {
                            "c_var": "result", 
                            "f_var": "result"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int result", 
                            "c_ptr": " *", 
                            "c_type": "int", 
                            "c_var": "result", 
                            "cxx_addr": "", 
                            "cxx_decl": "int result", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "result", 
                            "py_var": "SHPy_result"
                        }
                    }, 
                    "values": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "values", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "values"
                        }, 
                        "fmtf": {
                            "c_var": "values", 
                            "f_var": "values"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int * values", 
                            "c_ptr": " *", 
                            "c_type": "int", 
                            "c_var": "values", 
                            "cxx_addr": "", 
                            "cxx_decl": "int * values", 
                            "cxx_deref": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "values", 
                            "numpy_intent": "NPY_ARRAY_IN_ARRAY", 
                            "numpy_type": "NPY_INT", 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_values", 
                            "pytmp_var": "SHTPy_values"
                        }
                    }
                }, 
                "_function_index": 8, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Sum", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "implied": "size(values)", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "size_t"
                            ]
                        }, 
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "values", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "result", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Sum(size_t len  +implied(size(values)), int *values +dimension(:)+intent(in), int *result +intent(out))", 
                "declgen": "void Sum(size_t len +implied(size(values))+intent(in)+value, int * values +dimension(:)+intent(in), int * result +intent(out))", 
                "format": {
                    "C_call_code": "tutorial::\tSum(\tlen,\t values,\t result);", 
                    "C_call_list": "len,\t values,\t result", 
                    "C_name": "TUT_sum", 
                    "C_prototype": "size_t len,\t int * values,\t int * result", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_sum", 
                    "F_C_name": "c_sum", 
                    "F_arg_c_call": "len,\t values,\t result", 
                    "F_arguments": "values,\t result", 
                    "F_call_code": "call c_sum(len,\t values,\t result)", 
                    "F_name_function": "sum", 
                    "F_name_generic": "sum", 
                    "F_name_impl": "sum", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_Sum", 
                    "c_const": "", 
                    "function_name": "Sum", 
                    "underscore_name": "sum"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "long long", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "long long arg1", 
                            "c_ptr": "", 
                            "c_type": "long long", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "long long arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "long long", 
                            "cxx_var": "arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtpy": {
                        "PY_format": "L", 
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv", 
                        "vargs": "SHC_rv"
                    }
                }, 
                "_function_index": 9, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "TypeLongLong", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "long", 
                                "long"
                            ]
                        }
                    ], 
                    "specifier": [
                        "long", 
                        "long"
                    ]
                }, 
                "decl": "long long TypeLongLong(long long arg1)", 
                "declgen": "long long TypeLongLong(long long arg1 +intent(in)+value)", 
                "format": {
                    "C_call_code": "long long SHC_rv =\t tutorial::\tTypeLongLong(\targ1);", 
                    "C_call_list": "arg1", 
                    "C_name": "TUT_type_long_long", 
                    "C_prototype": "long long arg1", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "long long", 
                    "F_C_call": "c_type_long_long", 
                    "F_C_name": "type_long_long", 
                    "F_arg_c_call": "arg1", 
                    "F_arguments": "arg1", 
                    "F_call_code": "SHT_rv = c_type_long_long(arg1)", 
                    "F_name_function": "type_long_long", 
                    "F_name_generic": "type_long_long", 
                    "F_name_impl": "type_long_long", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_TypeLongLong", 
                    "c_const": "", 
                    "cxx_rv_decl": "long long SHC_rv", 
                    "function_name": "TypeLongLong", 
                    "underscore_name": "type_long_long"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg", 
                            "f_var": "arg"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_toboolean(L, 1)", 
                            "c_var_len": "Larg", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg", 
                            "lua_var": "SH_Lua_arg"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "bool arg", 
                            "c_ptr": "", 
                            "c_type": "bool", 
                            "c_var": "arg", 
                            "cxx_addr": "&", 
                            "cxx_decl": "bool arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg", 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": "PyBool_Type", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 10, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function3", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }
                    ], 
                    "specifier": [
                        "bool"
                    ]
                }, 
                "decl": "bool Function3(bool arg)", 
                "declgen": "bool Function3(bool arg +intent(in)+value)", 
                "format": {
                    "C_call_code": "bool SHC_rv =\t tutorial::\tFunction3(\targ);", 
                    "C_call_list": "arg", 
                    "C_name": "TUT_function3", 
                    "C_prototype": "bool arg", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "bool", 
                    "F_C_call": "c_function3", 
                    "F_C_name": "c_function3", 
                    "F_arg_c_call": "SH_arg", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_function3(SH_arg)", 
                    "F_name_function": "function3", 
                    "F_name_generic": "function3", 
                    "F_name_impl": "function3", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "Function3", 
                    "LUA_name_impl": "l_function3", 
                    "PY_name_impl": "PY_Function3", 
                    "c_const": "", 
                    "cxx_rv_decl": "bool SHC_rv", 
                    "function_name": "Function3", 
                    "underscore_name": "function3"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg1", 
                            "f_var": "arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg2", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg2", 
                            "f_var": "arg2"
                        }
                    }, 
                    "arg3": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "arg3", 
                            "cxx_deref": "->", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg3"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg3", 
                            "f_var": "arg3"
                        }
                    }
                }, 
                "_function_index": 11, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function3b", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "inout", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg3", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "bool"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function3b(const bool arg1, bool *arg2+intent(out), bool *arg3+intent(inout))", 
                "declgen": "void Function3b(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))", 
                "format": {
                    "C_call_code": "tutorial::\tFunction3b(\targ1,\t arg2,\t arg3);", 
                    "C_call_list": "arg1,\t arg2,\t arg3", 
                    "C_name": "TUT_function3b", 
                    "C_prototype": "const bool arg1,\t bool * arg2,\t bool * arg3", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function3b", 
                    "F_C_name": "c_function3b", 
                    "F_arg_c_call": "SH_arg1,\t SH_arg2,\t SH_arg3", 
                    "F_arguments": "arg1,\t arg2,\t arg3", 
                    "F_call_code": "call c_function3b(SH_arg1,\t SH_arg2,\t SH_arg3)", 
                    "F_name_function": "function3b", 
                    "F_name_generic": "function3b", 
                    "F_name_impl": "function3b", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "Function3b", 
                    "underscore_name": "function3b"
                }, 
                "options": {
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 48, 
                "_fmtargs": {
                    "arg1": {
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 1)", 
                            "c_var_len": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "arg1", 
                            "lua_var": "SH_Lua_arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * arg1", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 2)", 
                            "c_var_len": "Larg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "arg2", 
                            "lua_var": "SH_Lua_arg2"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * arg2", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg2", 
                            "py_var": "SHPy_arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 12, 
                "ast": {
                    "attrs": {}, 
                    "const": true, 
                    "declarator": {
                        "name": "Function4a", 
                        "pointer": []
                    }, 
                    "fattrs": {
                        "len": "30"
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "std::string"
                    ]
                }, 
                "decl": "const std::string Function4a( const std::string& arg1, const std::string& arg2 ) +len(30)", 
                "declgen": "const std::string Function4a(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in)) +len(30)", 
                "format": {
                    "F_C_call": "c_function4a_bufferify", 
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "arg1,\t arg2", 
                    "F_call_code": "call c_function4a_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "function4a", 
                    "F_name_generic": "function4a", 
                    "F_name_impl": "function4a", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "Function4a", 
                    "LUA_name_impl": "l_function4a", 
                    "PY_name_impl": "PY_Function4a", 
                    "c_var_len": "30", 
                    "function_name": "Function4a", 
                    "underscore_name": "function4a"
                }, 
                "options": {
                    "wrap_c": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 12, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }, 
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "c_var_trim": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "c_var_trim": "Larg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 48, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function4a", 
                        "pointer": []
                    }, 
                    "fattrs": {
                        "len": "30"
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg1", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg2", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string Function4a( const std::string& arg1, const std::string& arg2 ) +len(30)", 
                "declgen": "void Function4a(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string * SHF_rv +intent(out)+len(NSHF_rv)) +len(30)", 
                "format": {
                    "C_call_code": "const std::string SHCXX_rv =\t tutorial::\tFunction4a(\tSH_arg1,\t SH_arg2);", 
                    "C_call_list": "SH_arg1,\t SH_arg2", 
                    "C_name": "TUT_function4a_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                    "C_pre_call": "const std::string SH_arg1(arg1, Larg1);\nconst std::string SH_arg2(arg2, Larg2);", 
                    "C_prototype": "const char * arg1,\t int Larg1,\t const char * arg2,\t int Larg2,\t char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_function4a_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string SHCXX_rv", 
                    "function_name": "Function4a", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "function4a"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 1)", 
                            "c_var_len": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "arg1", 
                            "lua_var": "SH_Lua_arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * arg1", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg2"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 2)", 
                            "c_var_len": "Larg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "arg2", 
                            "lua_var": "SH_Lua_arg2"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * arg2", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg2", 
                            "py_var": "SHPy_arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv.c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 13, 
                "ast": {
                    "attrs": {}, 
                    "const": true, 
                    "declarator": {
                        "name": "Function4b", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "&"
                            }
                        ]
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "std::string"
                    ]
                }, 
                "decl": "const std::string& Function4b( const std::string& arg1, const std::string& arg2 )", 
                "declgen": "const std::string & Function4b(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in))", 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t tutorial::\tFunction4b(\tSH_arg1,\t SH_arg2);", 
                    "C_call_list": "SH_arg1,\t SH_arg2", 
                    "C_name": "TUT_function4b", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                    "C_pre_call": "const std::string SH_arg1(arg1);\nconst std::string SH_arg2(arg2);", 
                    "C_prototype": "const char * arg1,\t const char * arg2", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_name": "c_function4b", 
                    "F_string_result_as_arg": "output", 
                    "LUA_name": "Function4b", 
                    "LUA_name_impl": "l_function4b", 
                    "PY_name_impl": "PY_Function4b", 
                    "c_const": "const ", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "Function4b", 
                    "underscore_name": "function4b"
                }, 
                "options": {
                    "wrap_fortran": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 13, 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "c_var_trim": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "c_var_trim": "Larg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }
                    }, 
                    "output": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "output", 
                            "c_var_len": "Noutput", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "output", 
                            "f_var": "output"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 49, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function4b", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg1", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg2", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string& Function4b( const std::string& arg1, const std::string& arg2 )", 
                "declgen": "void Function4b(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string & output +intent(out)+len(Noutput))", 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t tutorial::\tFunction4b(\tSH_arg1,\t SH_arg2);", 
                    "C_call_list": "SH_arg1,\t SH_arg2", 
                    "C_name": "TUT_function4b_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(output, ' ', Noutput);\n} else {\n    ShroudStrCopy(output, Noutput, SHCXX_rv.c_str());\n}", 
                    "C_pre_call": "const std::string SH_arg1(arg1, Larg1);\nconst std::string SH_arg2(arg2, Larg2);", 
                    "C_prototype": "const char * arg1,\t int Larg1,\t const char * arg2,\t int Larg2,\t char * output,\t int Noutput", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_function4b_bufferify", 
                    "F_string_result_as_arg": "output", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "Function4b", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "function4b"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 13, 
                "_PTR_F_C_index": 49, 
                "_function_index": 50, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function4b", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg1", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Larg2", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "Noutput"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "output", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string& Function4b( const std::string& arg1, const std::string& arg2 )", 
                "declgen": "void Function4b(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string & output +intent(out)+len(Noutput))", 
                "format": {
                    "F_C_call": "c_function4b_bufferify", 
                    "F_arg_c_call": "arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t output,\t len(output, kind=C_INT)", 
                    "F_arguments": "arg1,\t arg2,\t output", 
                    "F_call_code": "call c_function4b_bufferify(arg1,\t len_trim(arg1, kind=C_INT),\t arg2,\t len_trim(arg2, kind=C_INT),\t output,\t len(output, kind=C_INT))", 
                    "F_name_function": "function4b", 
                    "F_name_generic": "function4b", 
                    "F_name_impl": "function4b", 
                    "F_string_result_as_arg": "output", 
                    "F_subprogram": "subroutine", 
                    "function_name": "Function4b", 
                    "function_suffix": "", 
                    "underscore_name": "function4b"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 38, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function5", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "double"
                    ]
                }, 
                "decl": "double Function5(double arg1 = 3.1415, bool arg2 = true)", 
                "declgen": "double Function5()", 
                "default_arg_suffix": [
                    "", 
                    "_arg1", 
                    "_arg1_arg2"
                ], 
                "format": {
                    "C_call_code": "double SHC_rv =\t tutorial::\tFunction5(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_function5", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "double", 
                    "F_C_call": "c_function5", 
                    "F_C_name": "c_function5", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = c_function5()", 
                    "F_name_function": "function5", 
                    "F_name_generic": "function5", 
                    "F_name_impl": "function5", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "double SHC_rv", 
                    "function_name": "Function5", 
                    "function_suffix": "", 
                    "underscore_name": "function5"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 39, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function5", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "init": 3.1415, 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "double"
                    ]
                }, 
                "decl": "double Function5(double arg1 = 3.1415, bool arg2 = true)", 
                "declgen": "double Function5(double arg1=3.1415 +intent(in)+value)", 
                "default_arg_suffix": [
                    "", 
                    "_arg1", 
                    "_arg1_arg2"
                ], 
                "format": {
                    "C_call_code": "double SHC_rv =\t tutorial::\tFunction5(\targ1);", 
                    "C_call_list": "arg1", 
                    "C_name": "TUT_function5_arg1", 
                    "C_prototype": "double arg1", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "double", 
                    "F_C_call": "c_function5_arg1", 
                    "F_C_name": "c_function5_arg1", 
                    "F_arg_c_call": "arg1", 
                    "F_arguments": "arg1", 
                    "F_call_code": "SHT_rv = c_function5_arg1(arg1)", 
                    "F_name_function": "function5_arg1", 
                    "F_name_generic": "function5", 
                    "F_name_impl": "function5_arg1", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "double SHC_rv", 
                    "function_name": "Function5", 
                    "function_suffix": "_arg1", 
                    "underscore_name": "function5"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_default_funcs": [
                    38, 
                    39
                ], 
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tonumber(L, 1)", 
                            "c_var_len": "Larg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1", 
                            "lua_var": "SH_Lua_arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double arg1", 
                            "c_ptr": "", 
                            "c_type": "double", 
                            "c_var": "arg1", 
                            "cxx_addr": "&", 
                            "cxx_decl": "double arg1", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg1", 
                            "py_var": "SHPy_arg1"
                        }
                    }, 
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "SH_arg2", 
                            "f_var": "arg2"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_toboolean(L, 2)", 
                            "c_var_len": "Larg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2", 
                            "lua_var": "SH_Lua_arg2"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "bool arg2", 
                            "c_ptr": "", 
                            "c_type": "bool", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_decl": "bool arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "bool", 
                            "cxx_var": "arg2", 
                            "py_type": "PyObject", 
                            "py_var": "SHPy_arg2"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 14, 
                "_has_default_arg": true, 
                "_nargs": [
                    0, 
                    2
                ], 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function5", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": []
                            }, 
                            "init": 3.1415, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "init": "true", 
                            "specifier": [
                                "bool"
                            ]
                        }
                    ], 
                    "specifier": [
                        "double"
                    ]
                }, 
                "decl": "double Function5(double arg1 = 3.1415, bool arg2 = true)", 
                "declgen": "double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)", 
                "default_arg_suffix": [
                    "", 
                    "_arg1", 
                    "_arg1_arg2"
                ], 
                "format": {
                    "C_call_code": "double SHC_rv =\t tutorial::\tFunction5(\targ1,\t arg2);", 
                    "C_call_list": "arg1,\t arg2", 
                    "C_name": "TUT_function5_arg1_arg2", 
                    "C_prototype": "double arg1,\t bool arg2", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "double", 
                    "F_C_call": "c_function5_arg1_arg2", 
                    "F_C_name": "c_function5_arg1_arg2", 
                    "F_arg_c_call": "arg1,\t SH_arg2", 
                    "F_arguments": "arg1,\t arg2", 
                    "F_call_code": "SHT_rv = c_function5_arg1_arg2(arg1,\t SH_arg2)", 
                    "F_name_function": "function5_arg1_arg2", 
                    "F_name_generic": "function5", 
                    "F_name_impl": "function5_arg1_arg2", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "Function5", 
                    "LUA_name_impl": "l_function5", 
                    "PY_name_impl": "PY_Function5_arg1_arg2", 
                    "c_const": "", 
                    "cxx_rv_decl": "double SHC_rv", 
                    "function_name": "Function5", 
                    "function_suffix": "_arg1_arg2", 
                    "underscore_name": "function5"
                }, 
                "options": {}
            }, 
            {
                "_PTR_F_C_index": 51, 
                "_cxx_overload": [
                    15, 
                    16
                ], 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 1)", 
                            "c_var_len": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "name", 
                            "lua_var": "SH_Lua_name"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * name", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "name", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name", 
                            "py_var": "SHPy_name"
                        }
                    }
                }, 
                "_function_index": 15, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function6", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function6(const std::string& name)", 
                "declgen": "void Function6(const std::string & name +intent(in))", 
                "format": {
                    "C_call_code": "tutorial::\tFunction6(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_name": "TUT_function6_from_name", 
                    "C_pre_call": "const std::string SH_name(name);", 
                    "C_prototype": "const char * name", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function6_from_name_bufferify", 
                    "F_C_name": "c_function6_from_name", 
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT)", 
                    "F_arguments": "name", 
                    "F_call_code": "call c_function6_from_name_bufferify(name,\t len_trim(name, kind=C_INT))", 
                    "F_name_function": "function6_from_name", 
                    "F_name_generic": "function6", 
                    "F_name_impl": "function6_from_name", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "Function6", 
                    "LUA_name_impl": "l_function6", 
                    "PY_name_impl": "PY_Function6_from_name", 
                    "c_const": "", 
                    "function_name": "Function6", 
                    "function_suffix": "_from_name", 
                    "underscore_name": "function6"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 15, 
                "_cxx_overload": [
                    15, 
                    16
                ], 
                "_fmtargs": {
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "c_var_trim": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtf": {
                            "c_var": "name", 
                            "f_var": "name"
                        }
                    }
                }, 
                "_function_index": 51, 
                "_generated": "arg_to_buffer", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function6", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Lname", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function6(const std::string& name)", 
                "declgen": "void Function6(const std::string & name +intent(in)+len_trim(Lname))", 
                "format": {
                    "C_call_code": "tutorial::\tFunction6(\tSH_name);", 
                    "C_call_list": "SH_name", 
                    "C_name": "TUT_function6_from_name_bufferify", 
                    "C_pre_call": "const std::string SH_name(name, Lname);", 
                    "C_prototype": "const char * name,\t int Lname", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_function6_from_name_bufferify", 
                    "c_const": "", 
                    "function_name": "Function6", 
                    "function_suffix": "_from_name_bufferify", 
                    "underscore_name": "function6"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_cxx_overload": [
                    15, 
                    16
                ], 
                "_fmtargs": {
                    "indx": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "indx", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "indx"
                        }, 
                        "fmtf": {
                            "c_var": "indx", 
                            "f_var": "indx"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 1)", 
                            "c_var_len": "Lindx", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "indx", 
                            "lua_var": "SH_Lua_indx"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int indx", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "indx", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int indx", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "indx", 
                            "py_var": "SHPy_indx"
                        }
                    }
                }, 
                "_function_index": 16, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function6", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "indx", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function6(int indx)", 
                "declgen": "void Function6(int indx +intent(in)+value)", 
                "format": {
                    "C_call_code": "tutorial::\tFunction6(\tindx);", 
                    "C_call_list": "indx", 
                    "C_name": "TUT_function6_from_index", 
                    "C_prototype": "int indx", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function6_from_index", 
                    "F_C_name": "c_function6_from_index", 
                    "F_arg_c_call": "indx", 
                    "F_arguments": "indx", 
                    "F_call_code": "call c_function6_from_index(indx)", 
                    "F_name_function": "function6_from_index", 
                    "F_name_generic": "function6", 
                    "F_name_impl": "function6_from_index", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_Function6_from_index", 
                    "c_const": "", 
                    "function_name": "Function6", 
                    "function_suffix": "_from_index", 
                    "underscore_name": "function6"
                }, 
                "options": {}
            }, 
            {
                "_function_index": 17, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function7", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "ArgType"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "cxx_template": {
                    "ArgType": [
                        "int", 
                        "double"
                    ]
                }, 
                "decl": "void Function7(ArgType arg)", 
                "declgen": "void Function7(ArgType arg +intent(in)+value)", 
                "format": {
                    "function_name": "Function7", 
                    "underscore_name": "function7"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 40, 
                "_generated": "cxx_template", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function7", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function7(ArgType arg)", 
                "declgen": "void Function7(int arg +intent(in)+value)", 
                "format": {
                    "CXX_template": "<int>", 
                    "C_call_code": "tutorial::\tFunction7<int>(\targ);", 
                    "C_call_list": "arg", 
                    "C_name": "TUT_function7_int", 
                    "C_prototype": "int arg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function7_int", 
                    "F_C_name": "c_function7_int", 
                    "F_arg_c_call": "arg", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_function7_int(arg)", 
                    "F_name_function": "function7_int", 
                    "F_name_generic": "function7", 
                    "F_name_impl": "function7_int", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "Function7", 
                    "function_suffix": "_int", 
                    "underscore_name": "function7"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 41, 
                "_generated": "cxx_template", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function7", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function7(ArgType arg)", 
                "declgen": "void Function7(double arg +intent(in)+value)", 
                "format": {
                    "CXX_template": "<double>", 
                    "C_call_code": "tutorial::\tFunction7<double>(\targ);", 
                    "C_call_list": "arg", 
                    "C_name": "TUT_function7_double", 
                    "C_prototype": "double arg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function7_double", 
                    "F_C_name": "c_function7_double", 
                    "F_arg_c_call": "arg", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_function7_double(arg)", 
                    "F_name_function": "function7_double", 
                    "F_name_generic": "function7", 
                    "F_name_impl": "function7_double", 
                    "F_subprogram": "subroutine", 
                    "c_const": "", 
                    "function_name": "Function7", 
                    "function_suffix": "_double", 
                    "underscore_name": "function7"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_function_index": 18, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function8", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "RetType"
                    ]
                }, 
                "cxx_template": {
                    "RetType": [
                        "int", 
                        "double"
                    ]
                }, 
                "decl": "RetType Function8()", 
                "declgen": "RetType Function8()", 
                "format": {
                    "function_name": "Function8", 
                    "underscore_name": "function8"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_CXX_return_templated": true, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 42, 
                "_generated": "cxx_template", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function8", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "RetType Function8()", 
                "declgen": "int Function8()", 
                "format": {
                    "CXX_template": "<int>", 
                    "C_call_code": "int SHC_rv =\t tutorial::\tFunction8<int>(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_function8_int", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_function8_int", 
                    "F_C_name": "c_function8_int", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = c_function8_int()", 
                    "F_name_function": "function8_int", 
                    "F_name_generic": "function8", 
                    "F_name_impl": "function8_int", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "Function8", 
                    "function_suffix": "_int", 
                    "underscore_name": "function8"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_CXX_return_templated": true, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 43, 
                "_generated": "cxx_template", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function8", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "double"
                    ]
                }, 
                "decl": "RetType Function8()", 
                "declgen": "double Function8()", 
                "format": {
                    "CXX_template": "<double>", 
                    "C_call_code": "double SHC_rv =\t tutorial::\tFunction8<double>(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_function8_double", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "double", 
                    "F_C_call": "c_function8_double", 
                    "F_C_name": "c_function8_double", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = c_function8_double()", 
                    "F_name_function": "function8_double", 
                    "F_name_generic": "function8", 
                    "F_name_impl": "function8_double", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "double SHC_rv", 
                    "function_name": "Function8", 
                    "function_suffix": "_double", 
                    "underscore_name": "function8"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tonumber(L, 1)", 
                            "c_var_len": "Larg", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg", 
                            "lua_var": "SH_Lua_arg"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double arg", 
                            "c_ptr": "", 
                            "c_type": "double", 
                            "c_var": "arg", 
                            "cxx_addr": "&", 
                            "cxx_decl": "double arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg", 
                            "py_var": "SHPy_arg"
                        }
                    }
                }, 
                "_function_index": 19, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function9", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function9(double arg)", 
                "declgen": "void Function9(double arg +intent(in)+value)", 
                "format": {
                    "C_call_code": "tutorial::\tFunction9(\targ);", 
                    "C_call_list": "arg", 
                    "C_name": "TUT_function9", 
                    "C_prototype": "double arg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_function9", 
                    "LUA_name": "Function9", 
                    "LUA_name_impl": "l_function9", 
                    "PY_name_impl": "PY_Function9", 
                    "c_const": "", 
                    "function_name": "Function9", 
                    "underscore_name": "function9"
                }, 
                "fortran_generic": {
                    "arg": [
                        "float", 
                        "double"
                    ]
                }, 
                "options": {
                    "wrap_fortran": false
                }
            }, 
            {
                "_PTR_F_C_index": 19, 
                "_function_index": 60, 
                "_generated": "fortran_generic", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function9", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "float"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function9(double arg)", 
                "declgen": "void Function9(float arg +intent(in)+value)", 
                "format": {
                    "F_C_call": "c_function9", 
                    "F_arg_c_call": "real(arg, C_DOUBLE)", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_function9(real(arg, C_DOUBLE))", 
                    "F_name_function": "function9_float", 
                    "F_name_generic": "function9", 
                    "F_name_impl": "function9_float", 
                    "F_subprogram": "subroutine", 
                    "function_name": "Function9", 
                    "function_suffix": "_float", 
                    "underscore_name": "function9"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 19, 
                "_function_index": 61, 
                "_generated": "fortran_generic", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function9", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function9(double arg)", 
                "declgen": "void Function9(double arg +intent(in)+value)", 
                "format": {
                    "F_C_call": "c_function9", 
                    "F_arg_c_call": "arg", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_function9(arg)", 
                    "F_name_function": "function9_double", 
                    "F_name_generic": "function9", 
                    "F_name_impl": "function9_double", 
                    "F_subprogram": "subroutine", 
                    "function_name": "Function9", 
                    "function_suffix": "_double", 
                    "underscore_name": "function9"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_cxx_overload": [
                    20, 
                    21
                ], 
                "_function_index": 20, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function10", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function10()", 
                "declgen": "void Function10()", 
                "format": {
                    "C_call_code": "tutorial::\tFunction10(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_function10_0", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_function10_0", 
                    "F_C_name": "c_function10_0", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "call c_function10_0()", 
                    "F_name_function": "function10_0", 
                    "F_name_generic": "function10", 
                    "F_name_impl": "function10_0", 
                    "F_subprogram": "subroutine", 
                    "LUA_name": "Function10", 
                    "LUA_name_impl": "l_function10", 
                    "PY_name_impl": "PY_Function10_0", 
                    "c_const": "", 
                    "function_name": "Function10", 
                    "function_suffix": "_0", 
                    "underscore_name": "function10"
                }, 
                "options": {}
            }, 
            {
                "_PTR_F_C_index": 52, 
                "_cxx_overload": [
                    20, 
                    21
                ], 
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tonumber(L, 2)", 
                            "c_var_len": "Larg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg2", 
                            "lua_var": "SH_Lua_arg2"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double arg2", 
                            "c_ptr": "", 
                            "c_type": "double", 
                            "c_var": "arg2", 
                            "cxx_addr": "&", 
                            "cxx_decl": "double arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg2", 
                            "py_var": "SHPy_arg2"
                        }
                    }, 
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tostring(L, 1)", 
                            "c_var_len": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "name", 
                            "lua_var": "SH_Lua_name"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "const char * name", 
                            "c_ptr": "", 
                            "c_type": "char", 
                            "c_var": "name", 
                            "cxx_addr": "&", 
                            "cxx_decl": "const std::string & name", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name", 
                            "py_var": "SHPy_name"
                        }
                    }
                }, 
                "_function_index": 21, 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function10", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function10(const std::string &name, double arg2)", 
                "declgen": "void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)", 
                "format": {
                    "C_call_code": "tutorial::\tFunction10(\tSH_name,\t arg2);", 
                    "C_call_list": "SH_name,\t arg2", 
                    "C_name": "TUT_function10_1", 
                    "C_pre_call": "const std::string SH_name(name);", 
                    "C_prototype": "const char * name,\t double arg2", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_function10_1", 
                    "PY_name_impl": "PY_Function10_1", 
                    "c_const": "", 
                    "function_name": "Function10", 
                    "function_suffix": "_1", 
                    "underscore_name": "function10"
                }, 
                "fortran_generic": {
                    "arg2": [
                        "float", 
                        "double"
                    ]
                }, 
                "options": {
                    "F_string_len_trim": true, 
                    "wrap_fortran": false
                }
            }, 
            {
                "_PTR_F_C_index": 21, 
                "_cxx_overload": [
                    20, 
                    21
                ], 
                "_function_index": 62, 
                "_generated": "fortran_generic", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function10", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "float"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function10(const std::string &name, double arg2)", 
                "declgen": "void Function10(const std::string & name +intent(in), float arg2 +intent(in)+value)", 
                "format": {
                    "F_C_call": "c_function10_1_bufferify", 
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t real(arg2, C_DOUBLE)", 
                    "F_arguments": "name,\t arg2", 
                    "F_call_code": "call c_function10_1_bufferify(name,\t len_trim(name, kind=C_INT),\t real(arg2, C_DOUBLE))", 
                    "F_name_function": "function10_1_float", 
                    "F_name_generic": "function10", 
                    "F_name_impl": "function10_1_float", 
                    "F_subprogram": "subroutine", 
                    "function_name": "Function10", 
                    "function_suffix": "_1_float", 
                    "underscore_name": "function10"
                }, 
                "options": {
                    "F_string_len_trim": true, 
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 21, 
                "_cxx_overload": [
                    20, 
                    21
                ], 
                "_function_index": 63, 
                "_generated": "fortran_generic", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function10", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function10(const std::string &name, double arg2)", 
                "declgen": "void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)", 
                "format": {
                    "F_C_call": "c_function10_1_bufferify", 
                    "F_arg_c_call": "name,\t len_trim(name, kind=C_INT),\t arg2", 
                    "F_arguments": "name,\t arg2", 
                    "F_call_code": "call c_function10_1_bufferify(name,\t len_trim(name, kind=C_INT),\t arg2)", 
                    "F_name_function": "function10_1_double", 
                    "F_name_generic": "function10", 
                    "F_name_impl": "function10_1_double", 
                    "F_subprogram": "subroutine", 
                    "function_name": "Function10", 
                    "function_suffix": "_1_double", 
                    "underscore_name": "function10"
                }, 
                "options": {
                    "F_string_len_trim": true, 
                    "wrap_c": false, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 21, 
                "_cxx_overload": [
                    20, 
                    21
                ], 
                "_fmtargs": {
                    "arg2": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg2", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "arg2"
                        }, 
                        "fmtf": {
                            "c_var": "arg2", 
                            "f_var": "arg2"
                        }
                    }, 
                    "name": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "name", 
                            "c_var_trim": "Lname", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_name"
                        }, 
                        "fmtf": {
                            "c_var": "name", 
                            "f_var": "name"
                        }
                    }
                }, 
                "_function_index": 52, 
                "_generated": "arg_to_buffer", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "Function10", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Lname", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "name", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg2", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void Function10(const std::string &name, double arg2)", 
                "declgen": "void Function10(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)", 
                "format": {
                    "C_call_code": "tutorial::\tFunction10(\tSH_name,\t arg2);", 
                    "C_call_list": "SH_name,\t arg2", 
                    "C_name": "TUT_function10_1_bufferify", 
                    "C_pre_call": "const std::string SH_name(name, Lname);", 
                    "C_prototype": "const char * name,\t int Lname,\t double arg2", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_function10_1_bufferify", 
                    "c_const": "", 
                    "function_name": "Function10", 
                    "function_suffix": "_1_bufferify", 
                    "underscore_name": "function10"
                }, 
                "fortran_generic": {
                    "arg2": [
                        "float", 
                        "double"
                    ]
                }, 
                "options": {
                    "F_string_len_trim": true, 
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_cxx_overload": [
                    22, 
                    23
                ], 
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num"
                        }, 
                        "fmtf": {
                            "c_var": "num", 
                            "f_var": "num"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 44, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "overload1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "num", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int overload1(int num, int offset = 0, int stride = 1)", 
                "declgen": "int overload1(int num +intent(in)+value)", 
                "default_arg_suffix": [
                    "_num", 
                    "_num_offset", 
                    "_num_offset_stride"
                ], 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\toverload1(\tnum);", 
                    "C_call_list": "num", 
                    "C_name": "TUT_overload1_num", 
                    "C_prototype": "int num", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_overload1_num", 
                    "F_C_name": "c_overload1_num", 
                    "F_arg_c_call": "num", 
                    "F_arguments": "num", 
                    "F_call_code": "SHT_rv = c_overload1_num(num)", 
                    "F_name_function": "overload1_num", 
                    "F_name_generic": "overload1", 
                    "F_name_impl": "overload1_num", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "overload1", 
                    "function_suffix": "_num", 
                    "underscore_name": "overload1"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_cxx_overload": [
                    22, 
                    23
                ], 
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num"
                        }, 
                        "fmtf": {
                            "c_var": "num", 
                            "f_var": "num"
                        }
                    }, 
                    "offset": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "offset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset"
                        }, 
                        "fmtf": {
                            "c_var": "offset", 
                            "f_var": "offset"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 45, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "overload1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "num", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "offset", 
                                "pointer": []
                            }, 
                            "init": 0, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int overload1(int num, int offset = 0, int stride = 1)", 
                "declgen": "int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value)", 
                "default_arg_suffix": [
                    "_num", 
                    "_num_offset", 
                    "_num_offset_stride"
                ], 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\toverload1(\tnum,\t offset);", 
                    "C_call_list": "num,\t offset", 
                    "C_name": "TUT_overload1_num_offset", 
                    "C_prototype": "int num,\t int offset", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_overload1_num_offset", 
                    "F_C_name": "c_overload1_num_offset", 
                    "F_arg_c_call": "num,\t offset", 
                    "F_arguments": "num,\t offset", 
                    "F_call_code": "SHT_rv = c_overload1_num_offset(num,\t offset)", 
                    "F_name_function": "overload1_num_offset", 
                    "F_name_generic": "overload1", 
                    "F_name_impl": "overload1_num_offset", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "overload1", 
                    "function_suffix": "_num_offset", 
                    "underscore_name": "overload1"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_cxx_overload": [
                    22, 
                    23
                ], 
                "_default_funcs": [
                    44, 
                    45
                ], 
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num"
                        }, 
                        "fmtf": {
                            "c_var": "num", 
                            "f_var": "num"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 1)", 
                            "c_var_len": "Lnum", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num", 
                            "lua_var": "SH_Lua_num"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int num", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "num", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num", 
                            "py_var": "SHPy_num"
                        }
                    }, 
                    "offset": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "offset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset"
                        }, 
                        "fmtf": {
                            "c_var": "offset", 
                            "f_var": "offset"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Loffset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset", 
                            "lua_var": "SH_Lua_offset"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int offset", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "offset", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int offset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset", 
                            "py_var": "SHPy_offset"
                        }
                    }, 
                    "stride": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "stride", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "stride"
                        }, 
                        "fmtf": {
                            "c_var": "stride", 
                            "f_var": "stride"
                        }, 
                        "fmtl": {
                            "LUA_index": 3, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 3)", 
                            "c_var_len": "Lstride", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "stride", 
                            "lua_var": "SH_Lua_stride"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int stride", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "stride", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int stride", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "stride", 
                            "py_var": "SHPy_stride"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 22, 
                "_has_default_arg": true, 
                "_nargs": [
                    1, 
                    3
                ], 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "overload1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "num", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "offset", 
                                "pointer": []
                            }, 
                            "init": 0, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "stride", 
                                "pointer": []
                            }, 
                            "init": 1, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int overload1(int num, int offset = 0, int stride = 1)", 
                "declgen": "int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)", 
                "default_arg_suffix": [
                    "_num", 
                    "_num_offset", 
                    "_num_offset_stride"
                ], 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\toverload1(\tnum,\t offset,\t stride);", 
                    "C_call_list": "num,\t offset,\t stride", 
                    "C_name": "TUT_overload1_num_offset_stride", 
                    "C_prototype": "int num,\t int offset,\t int stride", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_overload1_num_offset_stride", 
                    "F_C_name": "c_overload1_num_offset_stride", 
                    "F_arg_c_call": "num,\t offset,\t stride", 
                    "F_arguments": "num,\t offset,\t stride", 
                    "F_call_code": "SHT_rv = c_overload1_num_offset_stride(num,\t offset,\t stride)", 
                    "F_name_function": "overload1_num_offset_stride", 
                    "F_name_generic": "overload1", 
                    "F_name_impl": "overload1_num_offset_stride", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "overload1", 
                    "LUA_name_impl": "l_overload1", 
                    "PY_name_impl": "PY_overload1_num_offset_stride", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "overload1", 
                    "function_suffix": "_num_offset_stride", 
                    "underscore_name": "overload1"
                }, 
                "options": {}
            }, 
            {
                "_cxx_overload": [
                    22, 
                    23
                ], 
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num"
                        }, 
                        "fmtf": {
                            "c_var": "num", 
                            "f_var": "num"
                        }
                    }, 
                    "type": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "type", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "type"
                        }, 
                        "fmtf": {
                            "c_var": "type", 
                            "f_var": "type"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 46, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "overload1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "type", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "num", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int overload1(double type, int num, int offset = 0, int stride = 1)", 
                "declgen": "int overload1(double type +intent(in)+value, int num +intent(in)+value)", 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\toverload1(\ttype,\t num);", 
                    "C_call_list": "type,\t num", 
                    "C_name": "TUT_overload1_3", 
                    "C_prototype": "double type,\t int num", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_overload1_3", 
                    "F_C_name": "c_overload1_3", 
                    "F_arg_c_call": "type,\t num", 
                    "F_arguments": "type,\t num", 
                    "F_call_code": "SHT_rv = c_overload1_3(type,\t num)", 
                    "F_name_function": "overload1_3", 
                    "F_name_generic": "overload1", 
                    "F_name_impl": "overload1_3", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "overload1", 
                    "function_suffix": "_3", 
                    "underscore_name": "overload1"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_cxx_overload": [
                    22, 
                    23
                ], 
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num"
                        }, 
                        "fmtf": {
                            "c_var": "num", 
                            "f_var": "num"
                        }
                    }, 
                    "offset": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "offset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset"
                        }, 
                        "fmtf": {
                            "c_var": "offset", 
                            "f_var": "offset"
                        }
                    }, 
                    "type": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "type", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "type"
                        }, 
                        "fmtf": {
                            "c_var": "type", 
                            "f_var": "type"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 47, 
                "_generated": "has_default_arg", 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "overload1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "type", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "num", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "offset", 
                                "pointer": []
                            }, 
                            "init": 0, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int overload1(double type, int num, int offset = 0, int stride = 1)", 
                "declgen": "int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)", 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\toverload1(\ttype,\t num,\t offset);", 
                    "C_call_list": "type,\t num,\t offset", 
                    "C_name": "TUT_overload1_4", 
                    "C_prototype": "double type,\t int num,\t int offset", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_overload1_4", 
                    "F_C_name": "c_overload1_4", 
                    "F_arg_c_call": "type,\t num,\t offset", 
                    "F_arguments": "type,\t num,\t offset", 
                    "F_call_code": "SHT_rv = c_overload1_4(type,\t num,\t offset)", 
                    "F_name_function": "overload1_4", 
                    "F_name_generic": "overload1", 
                    "F_name_impl": "overload1_4", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "overload1", 
                    "function_suffix": "_4", 
                    "underscore_name": "overload1"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": true, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_cxx_overload": [
                    22, 
                    23
                ], 
                "_default_funcs": [
                    46, 
                    47
                ], 
                "_fmtargs": {
                    "num": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num"
                        }, 
                        "fmtf": {
                            "c_var": "num", 
                            "f_var": "num"
                        }, 
                        "fmtl": {
                            "LUA_index": 2, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 2)", 
                            "c_var_len": "Lnum", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num", 
                            "lua_var": "SH_Lua_num"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int num", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "num", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int num", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "num", 
                            "py_var": "SHPy_num"
                        }
                    }, 
                    "offset": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "offset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset"
                        }, 
                        "fmtf": {
                            "c_var": "offset", 
                            "f_var": "offset"
                        }, 
                        "fmtl": {
                            "LUA_index": 3, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 3)", 
                            "c_var_len": "Loffset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset", 
                            "lua_var": "SH_Lua_offset"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int offset", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "offset", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int offset", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "offset", 
                            "py_var": "SHPy_offset"
                        }
                    }, 
                    "stride": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "stride", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "stride"
                        }, 
                        "fmtf": {
                            "c_var": "stride", 
                            "f_var": "stride"
                        }, 
                        "fmtl": {
                            "LUA_index": 4, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 4)", 
                            "c_var_len": "Lstride", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "stride", 
                            "lua_var": "SH_Lua_stride"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int stride", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "stride", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int stride", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "stride", 
                            "py_var": "SHPy_stride"
                        }
                    }, 
                    "type": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "type", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "type"
                        }, 
                        "fmtf": {
                            "c_var": "type", 
                            "f_var": "type"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tonumber(L, 1)", 
                            "c_var_len": "Ltype", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "type", 
                            "lua_var": "SH_Lua_type"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "double type", 
                            "c_ptr": "", 
                            "c_type": "double", 
                            "c_var": "type", 
                            "cxx_addr": "&", 
                            "cxx_decl": "double type", 
                            "cxx_deref": ".", 
                            "cxx_type": "double", 
                            "cxx_var": "type", 
                            "py_var": "SHPy_type"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 23, 
                "_has_default_arg": true, 
                "_nargs": [
                    2, 
                    4
                ], 
                "_overloaded": true, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "overload1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "type", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "double"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "num", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "offset", 
                                "pointer": []
                            }, 
                            "init": 0, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "stride", 
                                "pointer": []
                            }, 
                            "init": 1, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int overload1(double type, int num, int offset = 0, int stride = 1)", 
                "declgen": "int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)", 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\toverload1(\ttype,\t num,\t offset,\t stride);", 
                    "C_call_list": "type,\t num,\t offset,\t stride", 
                    "C_name": "TUT_overload1_5", 
                    "C_prototype": "double type,\t int num,\t int offset,\t int stride", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_overload1_5", 
                    "F_C_name": "c_overload1_5", 
                    "F_arg_c_call": "type,\t num,\t offset,\t stride", 
                    "F_arguments": "type,\t num,\t offset,\t stride", 
                    "F_call_code": "SHT_rv = c_overload1_5(type,\t num,\t offset,\t stride)", 
                    "F_name_function": "overload1_5", 
                    "F_name_generic": "overload1", 
                    "F_name_impl": "overload1_5", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_overload1_5", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "overload1", 
                    "function_suffix": "_5", 
                    "underscore_name": "overload1"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "tutorial::TypeID", 
                            "cxx_var": "arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 1)", 
                            "c_var_len": "Larg", 
                            "cxx_deref": ".", 
                            "cxx_type": "tutorial::TypeID", 
                            "cxx_var": "arg", 
                            "lua_var": "SH_Lua_arg"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int arg", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "arg", 
                            "cxx_addr": "&", 
                            "cxx_decl": "tutorial::TypeID arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "tutorial::TypeID", 
                            "cxx_var": "arg", 
                            "py_var": "SHPy_arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 24, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "typefunc", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "TypeID"
                            ]
                        }
                    ], 
                    "specifier": [
                        "TypeID"
                    ]
                }, 
                "decl": "TypeID typefunc(TypeID arg)", 
                "declgen": "TypeID typefunc(TypeID arg +intent(in)+value)", 
                "format": {
                    "C_call_code": "tutorial::TypeID SHC_rv =\t tutorial::\ttypefunc(\targ);", 
                    "C_call_list": "arg", 
                    "C_name": "TUT_typefunc", 
                    "C_prototype": "int arg", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_typefunc", 
                    "F_C_name": "typefunc", 
                    "F_arg_c_call": "arg", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_typefunc(arg)", 
                    "F_name_function": "typefunc", 
                    "F_name_generic": "typefunc", 
                    "F_name_impl": "typefunc", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "typefunc", 
                    "LUA_name_impl": "l_typefunc", 
                    "PY_name_impl": "PY_typefunc", 
                    "c_const": "", 
                    "cxx_rv_decl": "tutorial::TypeID SHC_rv", 
                    "function_name": "typefunc", 
                    "underscore_name": "typefunc"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "cxx_decl": "tutorial::EnumTypeID SHCXX_arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "tutorial::EnumTypeID", 
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)", 
                            "cxx_var": "SHCXX_arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }, 
                        "fmtl": {
                            "LUA_index": 1, 
                            "c_ptr": "", 
                            "c_var": "lua_tointeger(L, 1)", 
                            "c_var_len": "Larg", 
                            "cxx_deref": ".", 
                            "cxx_type": "tutorial::EnumTypeID", 
                            "cxx_var": "arg", 
                            "lua_var": "SH_Lua_arg"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int arg", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "arg", 
                            "cxx_addr": "&", 
                            "cxx_decl": "tutorial::EnumTypeID SH_arg", 
                            "cxx_deref": ".", 
                            "cxx_type": "tutorial::EnumTypeID", 
                            "cxx_val": "static_cast<tutorial::EnumTypeID>(arg)", 
                            "cxx_var": "SH_arg", 
                            "py_var": "SHPy_arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "int SHC_rv", 
                        "c_val": "static_cast<int>(SHCXX_rv)", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtl": {
                        "c_var": "static_cast<int>(SHCXX_rv)", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 25, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "enumfunc", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "EnumTypeID"
                            ]
                        }
                    ], 
                    "specifier": [
                        "EnumTypeID"
                    ]
                }, 
                "decl": "EnumTypeID enumfunc(EnumTypeID arg)", 
                "declgen": "EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)", 
                "format": {
                    "C_call_code": "tutorial::EnumTypeID SHCXX_rv =\t tutorial::\tenumfunc(\tSHCXX_arg);", 
                    "C_call_list": "SHCXX_arg", 
                    "C_name": "TUT_enumfunc", 
                    "C_post_call": "int SHC_rv = static_cast<int>(SHCXX_rv);", 
                    "C_pre_call": "tutorial::EnumTypeID SHCXX_arg = static_cast<tutorial::EnumTypeID>(arg);", 
                    "C_prototype": "int arg", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_enumfunc", 
                    "F_C_name": "enumfunc", 
                    "F_arg_c_call": "arg", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_enumfunc(arg)", 
                    "F_name_function": "enumfunc", 
                    "F_name_generic": "enumfunc", 
                    "F_name_impl": "enumfunc", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "enumfunc", 
                    "LUA_name_impl": "l_enumfunc", 
                    "PY_name_impl": "PY_enumfunc", 
                    "c_const": "", 
                    "cxx_rv_decl": "tutorial::EnumTypeID SHCXX_rv", 
                    "function_name": "enumfunc", 
                    "underscore_name": "enumfunc"
                }, 
                "options": {}
            }, 
            {
                "_fmtargs": {
                    "max": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "max", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "max"
                        }, 
                        "fmtf": {
                            "c_var": "max", 
                            "f_var": "max"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int max", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "max", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int max", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "max", 
                            "py_var": "SHPy_max"
                        }
                    }, 
                    "min": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "min", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "min"
                        }, 
                        "fmtf": {
                            "c_var": "min", 
                            "f_var": "min"
                        }, 
                        "fmtpy": {
                            "PyObject": "PyObject", 
                            "PyTypeObject": null, 
                            "c_const": "", 
                            "c_decl": "int min", 
                            "c_ptr": "", 
                            "c_type": "int", 
                            "c_var": "min", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int min", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "min", 
                            "py_var": "SHPy_min"
                        }
                    }
                }, 
                "_function_index": 26, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "getMinMax", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "min", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "max", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void getMinMax(int &min +intent(out), int &max +intent(out))", 
                "declgen": "void getMinMax(int & min +intent(out), int & max +intent(out))", 
                "doxygen": {
                    "brief": "Pass in reference to scalar"
                }, 
                "format": {
                    "C_call_code": "tutorial::\tgetMinMax(\t*min,\t *max);", 
                    "C_call_list": "*min,\t *max", 
                    "C_name": "TUT_get_min_max", 
                    "C_prototype": "int * min,\t int * max", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_get_min_max", 
                    "F_C_name": "get_min_max", 
                    "F_arg_c_call": "min,\t max", 
                    "F_arguments": "min,\t max", 
                    "F_call_code": "call c_get_min_max(min,\t max)", 
                    "F_name_function": "get_min_max", 
                    "F_name_generic": "get_min_max", 
                    "F_name_impl": "get_min_max", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_getMinMax", 
                    "c_const": "", 
                    "function_name": "getMinMax", 
                    "underscore_name": "get_min_max"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg1": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": " *", 
                            "c_var": "arg1", 
                            "cxx_decl": "const tutorial::\tClass1 * SHCXX_arg1", 
                            "cxx_deref": "->", 
                            "cxx_type": "tutorial::\tClass1", 
                            "cxx_val": "\tstatic_cast<const tutorial::\tClass1 *>(\tstatic_cast<const void *>(\targ1))", 
                            "cxx_var": "SHCXX_arg1"
                        }, 
                        "fmtf": {
                            "c_var": "arg1", 
                            "f_var": "arg1"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_decl": "TUT_class1 arg1", 
                            "c_ptr": " *", 
                            "c_type": "TUT_class1", 
                            "c_var": "arg1", 
                            "cxx_addr": "", 
                            "cxx_decl": "tutorial::\tClass1 arg1", 
                            "cxx_deref": "->", 
                            "cxx_type": "tutorial::\tClass1", 
                            "cxx_var": "arg1", 
                            "py_type": "PY_Class1", 
                            "py_var": "SHPy_arg1"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 27, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "useclass", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg1", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "Class1"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int useclass(const Class1 *arg1)", 
                "declgen": "int useclass(const Class1 * arg1 +intent(in)+value)", 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\tuseclass(\tSHCXX_arg1);", 
                    "C_call_list": "SHCXX_arg1", 
                    "C_name": "TUT_useclass", 
                    "C_pre_call": "const tutorial::\tClass1 * SHCXX_arg1 = \tstatic_cast<const tutorial::\tClass1 *>(\tstatic_cast<const void *>(\targ1));", 
                    "C_prototype": "const TUT_class1 * arg1", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_useclass", 
                    "F_C_name": "c_useclass", 
                    "F_arg_c_call": "arg1%get_instance()", 
                    "F_arguments": "arg1", 
                    "F_call_code": "SHT_rv = c_useclass(arg1%get_instance())", 
                    "F_name_function": "useclass", 
                    "F_name_generic": "useclass", 
                    "F_name_impl": "useclass", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_useclass", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "useclass", 
                    "underscore_name": "useclass"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const TUT_class1 * SHC_rv", 
                        "c_val": "\tstatic_cast<const TUT_class1 *>(\tstatic_cast<const void *>(\tSHCXX_rv))", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 28, 
                "ast": {
                    "attrs": {}, 
                    "const": true, 
                    "declarator": {
                        "name": "getclass2", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "Class1"
                    ]
                }, 
                "decl": "const Class1 *getclass2()", 
                "declgen": "const Class1 * getclass2()", 
                "format": {
                    "C_call_code": "const tutorial::\tClass1 * SHCXX_rv =\t tutorial::\tgetclass2(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_getclass2", 
                    "C_post_call": "const TUT_class1 * SHC_rv = \tstatic_cast<const TUT_class1 *>(\tstatic_cast<const void *>(\tSHCXX_rv));", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const TUT_class1 *", 
                    "F_C_call": "c_getclass2", 
                    "F_C_name": "c_getclass2", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv%voidptr = c_getclass2()", 
                    "F_name_function": "getclass2", 
                    "F_name_generic": "getclass2", 
                    "F_name_impl": "getclass2", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "const ", 
                    "cxx_rv_decl": "const tutorial::\tClass1 * SHCXX_rv", 
                    "function_name": "getclass2", 
                    "underscore_name": "getclass2"
                }, 
                "options": {
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "TUT_class1 * SHC_rv", 
                        "c_val": "\tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv))", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PY_Class1", 
                        "PyTypeObject": "PY_Class1_Type", 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "", 
                        "cxx_deref": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 29, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "getclass3", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "Class1"
                    ]
                }, 
                "decl": "Class1 *getclass3()", 
                "declgen": "Class1 * getclass3()", 
                "format": {
                    "C_call_code": "tutorial::\tClass1 * SHCXX_rv =\t tutorial::\tgetclass3(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_getclass3", 
                    "C_post_call": "TUT_class1 * SHC_rv = \tstatic_cast<TUT_class1 *>(\tstatic_cast<void *>(\tSHCXX_rv));", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "TUT_class1 *", 
                    "F_C_call": "c_getclass3", 
                    "F_C_name": "c_getclass3", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv%voidptr = c_getclass3()", 
                    "F_name_function": "getclass3", 
                    "F_name_generic": "getclass3", 
                    "F_name_impl": "getclass3", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getclass3", 
                    "c_const": "", 
                    "cxx_rv_decl": "tutorial::\tClass1 * SHCXX_rv", 
                    "function_name": "getclass3", 
                    "underscore_name": "getclass3"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_PTR_F_C_index": 53, 
                "_function_index": 30, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_sum", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "in", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_sum(const std::vector<int> &arg)", 
                "declgen": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in))", 
                "format": {
                    "F_C_call": "c_vector_sum_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG)", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_vector_sum_bufferify(arg,\t size(arg, kind=C_LONG))", 
                    "F_name_function": "vector_sum", 
                    "F_name_generic": "vector_sum", 
                    "F_name_impl": "vector_sum", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "function_name": "vector_sum", 
                    "underscore_name": "vector_sum"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 30, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "int", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "SH_arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 53, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_sum", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "in", 
                                "size": "Sarg", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_sum(const std::vector<int> &arg)", 
                "declgen": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in)+size(Sarg))", 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\tvector_sum(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_name": "TUT_vector_sum_bufferify", 
                    "C_pre_call": "const std::vector<int> SH_arg(arg, arg + Sarg);", 
                    "C_prototype": "const int * arg,\t long Sarg", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_name": "c_vector_sum_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "vector_sum", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_sum"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 54, 
                "_function_index": 31, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_iota", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "out", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_iota(std::vector<int> &arg+intent(out))", 
                "declgen": "void vector_iota(std::vector<int> & arg +dimension(:)+intent(out))", 
                "format": {
                    "F_C_call": "c_vector_iota_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG)", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_vector_iota_bufferify(arg,\t size(arg, kind=C_LONG))", 
                    "F_name_function": "vector_iota", 
                    "F_name_generic": "vector_iota", 
                    "F_name_impl": "vector_iota", 
                    "F_subprogram": "subroutine", 
                    "function_name": "vector_iota", 
                    "underscore_name": "vector_iota"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 31, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "int", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "SH_arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 54, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_iota", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "out", 
                                "size": "Sarg", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_iota(std::vector<int> &arg+intent(out))", 
                "declgen": "void vector_iota(std::vector<int> & arg +dimension(:)+intent(out)+size(Sarg))", 
                "format": {
                    "C_call_code": "tutorial::\tvector_iota(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_name": "TUT_vector_iota_bufferify", 
                    "C_post_call": "{\n    std::vector<int>::size_type\n        SHT_i = 0,\n        SHT_n = Sarg;\n    SHT_n = std::min(SH_arg.size(), SHT_n);\n    for(; SHT_i < SHT_n; SHT_i++) {\n        arg[SHT_i] = SH_arg[SHT_i];\n    }\n}", 
                    "C_pre_call": "std::vector<int>\t SH_arg(Sarg);", 
                    "C_prototype": "int * arg,\t long Sarg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_vector_iota_bufferify", 
                    "c_const": "", 
                    "function_name": "vector_iota", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_iota"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 55, 
                "_function_index": 32, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_increment", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "inout", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_increment(std::vector<int> &arg)", 
                "declgen": "void vector_increment(std::vector<int> & arg +dimension(:)+intent(inout))", 
                "format": {
                    "F_C_call": "c_vector_increment_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG)", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_vector_increment_bufferify(arg,\t size(arg, kind=C_LONG))", 
                    "F_name_function": "vector_increment", 
                    "F_name_generic": "vector_increment", 
                    "F_name_impl": "vector_increment", 
                    "F_subprogram": "subroutine", 
                    "function_name": "vector_increment", 
                    "underscore_name": "vector_increment"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 32, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "int", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "SH_arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 55, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_increment", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "inout", 
                                "size": "Sarg", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_increment(std::vector<int> &arg)", 
                "declgen": "void vector_increment(std::vector<int> & arg +dimension(:)+intent(inout)+size(Sarg))", 
                "format": {
                    "C_call_code": "tutorial::\tvector_increment(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_name": "TUT_vector_increment_bufferify", 
                    "C_post_call": "{+\nstd::vector<int>::size_type+\nSHT_i = 0,\nSHT_n = Sarg;\n-SHT_n = std::min(SH_arg.size(), SHT_n);\nfor(; SHT_i < SHT_n; SHT_i++) {+\narg[SHT_i] = SH_arg[SHT_i];\n-}\n-}", 
                    "C_pre_call": "std::vector<int> SH_arg(\targ, arg + Sarg);", 
                    "C_prototype": "int * arg,\t long Sarg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_vector_increment_bufferify", 
                    "c_const": "", 
                    "function_name": "vector_increment", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_increment"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 56, 
                "_function_index": 33, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_count", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "in", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_string_count(const std::vector< std::string > &arg)", 
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in))", 
                "doxygen": {
                    "brief": "count number of underscore in vector of strings", 
                    "decription": "The input will be copied in order to create the C++ argument\n"
                }, 
                "format": {
                    "F_C_call": "c_vector_string_count_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT)", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_vector_string_count_bufferify(arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT))", 
                    "F_name_function": "vector_string_count", 
                    "F_name_generic": "vector_string_count", 
                    "F_name_impl": "vector_string_count", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "function_name": "vector_string_count", 
                    "underscore_name": "vector_string_count"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 33, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "c_var_len": "Narg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "std::string", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 56, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_count", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "in", 
                                "len": "Narg", 
                                "size": "Sarg", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_string_count(const std::vector< std::string > &arg)", 
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in)+len(Narg)+size(Sarg))", 
                "doxygen": {
                    "brief": "count number of underscore in vector of strings", 
                    "decription": "The input will be copied in order to create the C++ argument\n"
                }, 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\tvector_string_count(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_name": "TUT_vector_string_count_bufferify", 
                    "C_pre_call": "std::vector<std::string> SH_arg;\n{\n      const char * BBB = arg;\n      std::vector<std::string>::size_type\n        SHT_i = 0,\n        SHT_n = Sarg;\n    for(; SHT_i < SHT_n; SHT_i++) {\n        SH_arg.push_back(std::string(BBB,ShroudLenTrim(BBB, Narg)));\n        BBB += Narg;\n    }\n}", 
                    "C_prototype": "const char * arg,\t long Sarg,\t int Narg", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_name": "c_vector_string_count_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "vector_string_count", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_string_count"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 57, 
                "_function_index": 34, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_fill", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "out", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))", 
                "declgen": "void vector_string_fill(std::vector<std::string> & arg +dimension(:)+intent(out))", 
                "doxygen": {
                    "brief": "Fill in arg with some animal names", 
                    "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
                }, 
                "format": {
                    "C_custom_return_type": "int", 
                    "C_return_code": "return SH_arg.size();", 
                    "C_return_type": "int", 
                    "F_C_call": "c_vector_string_fill_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT)", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_vector_string_fill_bufferify(arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT))", 
                    "F_name_function": "vector_string_fill", 
                    "F_name_generic": "vector_string_fill", 
                    "F_name_impl": "vector_string_fill", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "function_name": "vector_string_fill", 
                    "underscore_name": "vector_string_fill"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 34, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "c_var_len": "Narg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "std::string", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 57, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_fill", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "out", 
                                "len": "Narg", 
                                "size": "Sarg", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))", 
                "declgen": "void vector_string_fill(std::vector<std::string> & arg +dimension(:)+intent(out)+len(Narg)+size(Sarg))", 
                "doxygen": {
                    "brief": "Fill in arg with some animal names", 
                    "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
                }, 
                "format": {
                    "C_call_code": "tutorial::\tvector_string_fill(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_custom_return_type": "int", 
                    "C_name": "TUT_vector_string_fill_bufferify", 
                    "C_post_call": "{\n    char * BBB = arg;\n    std::vector<std::string>::size_type\n        SHT_i = 0,\n        SHT_n = Sarg;\n    SHT_n = std::min(SH_arg.size(),SHT_n);\n    for(; SHT_i < SHT_n; SHT_i++) {\n        ShroudStrCopy(BBB, Narg, SH_arg[SHT_i].c_str());\n        BBB += Narg;\n    }\n}", 
                    "C_pre_call": "std::vector<std::string> SH_arg;", 
                    "C_prototype": "char * arg,\t long Sarg,\t int Narg", 
                    "C_return_code": "return SH_arg.size();", 
                    "C_return_type": "int", 
                    "F_C_name": "c_vector_string_fill_bufferify", 
                    "c_const": "", 
                    "function_name": "vector_string_fill", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_string_fill"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 58, 
                "_function_index": 35, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_append", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "inout", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))", 
                "declgen": "void vector_string_append(std::vector<std::string> & arg +dimension(:)+intent(inout))", 
                "doxygen": {
                    "brief": "append '-like' to names."
                }, 
                "format": {
                    "F_C_call": "c_vector_string_append_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT)", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_vector_string_append_bufferify(arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT))", 
                    "F_name_function": "vector_string_append", 
                    "F_name_generic": "vector_string_append", 
                    "F_name_impl": "vector_string_append", 
                    "F_subprogram": "subroutine", 
                    "function_name": "vector_string_append", 
                    "underscore_name": "vector_string_append"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 35, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "arg", 
                            "c_var_len": "Narg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "std::string", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg"
                        }, 
                        "fmtf": {
                            "c_var": "arg", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 58, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_append", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "dimension": ":", 
                                "intent": "inout", 
                                "len": "Narg", 
                                "size": "Sarg", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))", 
                "declgen": "void vector_string_append(std::vector<std::string> & arg +dimension(:)+intent(inout)+len(Narg)+size(Sarg))", 
                "doxygen": {
                    "brief": "append '-like' to names."
                }, 
                "format": {
                    "C_call_code": "tutorial::\tvector_string_append(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_name": "TUT_vector_string_append_bufferify", 
                    "C_post_call": "{\n    char * BBB = arg;\n    std::vector<std::string>::size_type\n        SHT_i = 0,\n        SHT_n = Sarg;\n    SHT_n = std::min(SH_arg.size(),SHT_n);\n    for(; SHT_i < SHT_n; SHT_i++) {\n        ShroudStrCopy(BBB, Narg, SH_arg[SHT_i].c_str());\n        BBB += Narg;\n    }\n}", 
                    "C_pre_call": "std::vector<std::string> SH_arg;\n{\n    char * BBB = arg;\n    std::vector<std::string>::size_type\n        SHT_i = 0,\n        SHT_n = Sarg;\n    for(; SHT_i < SHT_n; SHT_i++) {\n        SH_arg.push_back(std::string(BBB,ShroudLenTrim(BBB, Narg)));\n        BBB += Narg;\n    }\n}", 
                    "C_prototype": "char * arg,\t long Sarg,\t int Narg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_vector_string_append_bufferify", 
                    "c_const": "", 
                    "function_name": "vector_string_append", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_string_append"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "in": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "in", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "in"
                        }, 
                        "fmtf": {
                            "c_var": "in", 
                            "f_var": "in"
                        }
                    }, 
                    "incr": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "incr", 
                            "cxx_deref": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "incr"
                        }, 
                        "fmtf": {
                            "c_var": "incr", 
                            "f_var": "incr"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 36, 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "callback1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "in", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "func": {
                                    "name": "incr", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "*"
                                        }
                                    ]
                                }, 
                                "pointer": []
                            }, 
                            "fattrs": {}, 
                            "func_const": false, 
                            "params": [
                                {
                                    "attrs": {
                                        "value": true
                                    }, 
                                    "const": false, 
                                    "declarator": {
                                        "pointer": []
                                    }, 
                                    "specifier": [
                                        "int"
                                    ]
                                }
                            ], 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int callback1(int in, int (*incr)(int));", 
                "declgen": "int callback1(int in +intent(in)+value, int ( * incr) +intent(in)+value(int +value))", 
                "format": {
                    "C_call_code": "int SHC_rv =\t tutorial::\tcallback1(\tin,\t incr);", 
                    "C_call_list": "in,\t incr", 
                    "C_name": "TUT_callback1", 
                    "C_prototype": "int in,\t int ( * incr)(\tint)", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_callback1", 
                    "F_C_name": "callback1", 
                    "F_arg_c_call": "in,\t incr", 
                    "F_arguments": "in,\t incr", 
                    "F_call_code": "SHT_rv = c_callback1(in,\t incr)", 
                    "F_name_function": "callback1", 
                    "F_name_generic": "callback1", 
                    "F_name_impl": "callback1", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "callback1", 
                    "underscore_name": "callback1"
                }, 
                "options": {
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 59, 
                "_fmtresult": {
                    "fmtc": {
                        "c_rv_decl": "const char * SHC_rv", 
                        "c_val": "SHCXX_rv.c_str()", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtl": {
                        "c_var": "SHCXX_rv.c_str()", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 37, 
                "ast": {
                    "attrs": {}, 
                    "const": true, 
                    "declarator": {
                        "name": "LastFunctionCalled", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "&"
                            }
                        ]
                    }, 
                    "fattrs": {
                        "len": "30"
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "std::string"
                    ]
                }, 
                "decl": "const std::string& LastFunctionCalled() +len(30)", 
                "declgen": "const std::string & LastFunctionCalled() +len(30)", 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t tutorial::\tLastFunctionCalled(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_last_function_called", 
                    "C_post_call": "const char * SHC_rv = SHCXX_rv.c_str();", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "const char *", 
                    "F_C_call": "c_last_function_called_bufferify", 
                    "F_C_name": "c_last_function_called", 
                    "F_arg_c_call": "SHT_rv,\t len(SHT_rv, kind=C_INT)", 
                    "F_arguments": "", 
                    "F_call_code": "call c_last_function_called_bufferify(SHT_rv,\t len(SHT_rv, kind=C_INT))", 
                    "F_name_function": "last_function_called", 
                    "F_name_generic": "last_function_called", 
                    "F_name_impl": "last_function_called", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "LUA_name": "LastFunctionCalled", 
                    "LUA_name_impl": "l_last_function_called", 
                    "PY_name_impl": "PY_LastFunctionCalled", 
                    "c_const": "const ", 
                    "c_var_len": "30", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "LastFunctionCalled", 
                    "underscore_name": "last_function_called"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 37, 
                "_fmtargs": {
                    "SHF_rv": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "SHF_rv", 
                            "c_var_len": "NSHF_rv", 
                            "cxx_addr": "&", 
                            "cxx_deref": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SHCXX_rv"
                        }, 
                        "fmtf": {
                            "c_var": "SHT_rv", 
                            "f_var": "SHT_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_deref": ".", 
                        "cxx_var": "SHCXX_rv"
                    }
                }, 
                "_function_index": 59, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "LastFunctionCalled", 
                        "pointer": []
                    }, 
                    "fattrs": {
                        "len": "30"
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_is_result": true, 
                                "intent": "out", 
                                "len": "NSHF_rv"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "SHF_rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "const std::string& LastFunctionCalled() +len(30)", 
                "declgen": "void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +len(30)", 
                "format": {
                    "C_call_code": "const std::string & SHCXX_rv =\t tutorial::\tLastFunctionCalled(\t);", 
                    "C_call_list": "", 
                    "C_name": "TUT_last_function_called_bufferify", 
                    "C_post_call": "if (SHCXX_rv.empty()) {\n    std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n    ShroudStrCopy(SHF_rv, NSHF_rv, SHCXX_rv.c_str());\n}", 
                    "C_prototype": "char * SHF_rv,\t int NSHF_rv", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_last_function_called_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "const std::string & SHCXX_rv", 
                    "function_name": "LastFunctionCalled", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "last_function_called"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }
        ], 
        "language": "c++", 
        "namespace": "tutorial", 
        "options": {
            "C_enum_member_template": "{enum_member_name}", 
            "C_enum_template": "{C_prefix}{class_prefix}{enum_name}", 
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_line_length": 72, 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_abstract_interface_argument_template": "arg{index}", 
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}", 
            "F_enum_member_template": "{class_prefix}{enum_lower}_{enum_member_lower}", 
            "F_force_wrapper": false, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_line_length": 72, 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": false, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_standard": 2003, 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_enum_member_getter_template": "{PY_prefix}{class_prefix}{enum_name}_{enum_member_name}", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": true, 
            "doxygen": true, 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": true, 
            "wrap_python": true
        }
    }, 
    "typealias": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "integer(C_LONG_LONG)": "long_long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float", 
        "std::string": "string", 
        "std::vector": "vector"
    }, 
    "types": {
        "Class1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PY_Class1", 
            "PY_PyTypeObject": "PY_Class1_Type", 
            "PY_from_object": "PP_Class1_from_Object", 
            "PY_to_object": "PP_Class1_to_Object", 
            "base": "shadow", 
            "c_to_cxx": "\tstatic_cast<{c_const}tutorial::\tClass1 *>(\tstatic_cast<{c_const}void *>(\t{c_var}))", 
            "c_type": "TUT_class1", 
            "cxx_to_c": "\tstatic_cast<{c_const}TUT_class1 *>(\tstatic_cast<{c_const}void *>(\t{cxx_addr}{cxx_var}))", 
            "cxx_type": "tutorial::\tClass1", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "class1", 
            "f_module": {
                "tutorial_mod": [
                    "class1"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(class1)", 
            "forward": "tutorial::\tClass1", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}tutorial::\tClass1 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}tutorial::\tClass1 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "EnumTypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "i", 
            "c_to_cxx": "static_cast<tutorial::EnumTypeID>({c_var})", 
            "c_type": "int", 
            "cxx_to_c": "static_cast<int>({cxx_var})", 
            "cxx_type": "tutorial::EnumTypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cxx": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_kind": "C_INT", 
            "f_type": "integer"
        }, 
        "Singleton": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PY_Singleton", 
            "PY_PyTypeObject": "PY_Singleton_Type", 
            "PY_from_object": "PP_Singleton_from_Object", 
            "PY_to_object": "PP_Singleton_to_Object", 
            "base": "shadow", 
            "c_to_cxx": "\tstatic_cast<{c_const}Singleton *>(\tstatic_cast<{c_const}void *>(\t{c_var}))", 
            "c_type": "TUT_singleton", 
            "cxx_to_c": "\tstatic_cast<{c_const}TUT_singleton *>(\tstatic_cast<{c_const}void *>(\t{cxx_addr}{cxx_var}))", 
            "cxx_type": "Singleton", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "singleton", 
            "f_module": {
                "tutorial_mod": [
                    "singleton"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(singleton)", 
            "forward": "Singleton", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}Singleton * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}Singleton * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "i", 
            "c_type": "int", 
            "cxx_type": "tutorial::TypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_kind": "C_BOOL", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_var});"
                    ], 
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "(int) {cxx_var}", 
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)", 
            "PY_format": "c", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyFloat_FromDouble({c_var})", 
            "PY_format": "d", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyFloat_FromDouble({c_var})", 
            "PY_format": "f", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "i", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "PY_format": "l", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_kind": "C_LONG_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromSize_t({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "{cxx_var}{cxx_deref}c_str()", 
            "PY_ctor": "PyString_FromString({cxx_var}{cxx_deref}c_str())", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}{cxx_deref}empty()) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_deref}c_str());", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}{cxx_deref}c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_out": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        }, 
        "stringout": {
            "base": "string", 
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        " post_call intent_out_buf"
                    ], 
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "post_call": [
                        "*{c_var} = {cxx_addr}{cxx_var};", 
                        "*{c_var_len} = {cxx_var}{cxx_deref}size();"
                    ]
                }
            }, 
            "c_type": "void", 
            "cxx_header": "<string>", 
            "cxx_to_c": "static_cast<void *>({cxx_var})", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_statements": {
                "result_buf": {
                    "f_helper": "copy_string", 
                    "need_wrapper": true, 
                    "post_call": [
                        "allocate(character(len={f_var_len}, kind=C_CHAR):: {f_var})", 
                        "call SHROUD_string_copy_and_free({f_cptr}, {f_var})"
                    ]
                }
            }, 
            "f_type": "type(C_PTR)YY"
        }, 
        "vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{+", 
                        "std::vector<{cxx_T}>::size_type+", 
                        "{c_temp}i = 0,", 
                        "{c_temp}n = {c_var_size};", 
                        "-{c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+", 
                        "{c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "-}}", 
                        "-}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> {cxx_var}(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{", 
                        "    std::vector<{cxx_T}>::size_type", 
                        "        {c_temp}i = 0,", 
                        "        {c_temp}n = {c_var_size};", 
                        "    {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "        {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "    }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t {cxx_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "      {c_const}char * BBB = {c_var};", 
                            "      std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "    {c_const}char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            }, 
            "cxx_header": "<vector>", 
            "cxx_type": "std::vector<{cxx_T}>"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}