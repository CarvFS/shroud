{
    "F_module_dependencies": [], 
    "_fmt": {
        "BBB": "BBB", 
        "CPP_template": "", 
        "CPP_this": "SH_this", 
        "CPP_this_call": "", 
        "C_header_filename": "wrapTutorial.h", 
        "C_header_filename_suffix": "h", 
        "C_impl_filename": "wrapTutorial.cpp", 
        "C_impl_filename_suffix": "cpp", 
        "C_post_call": "", 
        "C_pre_call": "", 
        "C_prefix": "TUT_", 
        "C_result": "SHT_rv", 
        "C_string_result_as_arg": "SHF_rv", 
        "C_this": "self", 
        "F_C_prefix": "c_", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_filename_suffix": "f", 
        "F_impl_filename": "wrapftutorial.f", 
        "F_module_name": "tutorial_mod", 
        "F_pure_clause": "", 
        "F_result": "SHT_rv", 
        "F_result_clause": "", 
        "F_string_result_as_arg": "", 
        "F_this": "obj", 
        "LUA_header_filename": "luaTutorialmodule.hpp", 
        "LUA_header_filename_suffix": "hpp", 
        "LUA_impl_filename_suffix": "cpp", 
        "LUA_module_filename": "luaTutorialmodule.cpp", 
        "LUA_module_name": "tutorial", 
        "LUA_module_reg": "l_Tutorial_Reg", 
        "LUA_prefix": "l_", 
        "LUA_result": "rv", 
        "LUA_state_var": "L", 
        "LUA_used_param_state": false, 
        "PY_PyObject": "PyObject", 
        "PY_header_filename": "pyTutorialmodule.hpp", 
        "PY_header_filename_suffix": "hpp", 
        "PY_helper_filename": "pyTutorialhelper.cpp", 
        "PY_impl_filename_suffix": "cpp", 
        "PY_library_doc": "library documentation", 
        "PY_module_filename": "pyTutorialmodule.cpp", 
        "PY_module_name": "tutorial", 
        "PY_param_args": "args", 
        "PY_param_kwds": "kwds", 
        "PY_param_self": "self", 
        "PY_prefix": "PY_", 
        "PY_result": "rv", 
        "PY_used_param_args": false, 
        "PY_used_param_kwds": false, 
        "PY_used_param_self": false, 
        "YAML_type_filename": "tutorial_types.yaml", 
        "c_temp": "SHT_", 
        "class_prefix": "", 
        "function_suffix": "", 
        "library": "Tutorial", 
        "library_lower": "tutorial", 
        "library_upper": "TUTORIAL", 
        "namespace_scope": "tutorial::", 
        "stdlib": "std::"
    }, 
    "classes": [
        {
            "_fmt": {
                "CPP_this_call": "SH_this->", 
                "C_header_filename": "wrapClass1.h", 
                "C_impl_filename": "wrapClass1.cpp", 
                "C_type_name": "TUT_class1", 
                "F_derived_name": "class1", 
                "LUA_class_reg": "l_Class1_Reg", 
                "LUA_ctor_name": "Class1", 
                "LUA_metadata": "Class1.metatable", 
                "LUA_userdata_member": "self", 
                "LUA_userdata_type": "l_Class1_Type", 
                "LUA_userdata_var": "SH_this", 
                "PY_PyObject": "PY_Class1", 
                "PY_PyTypeObject": "PY_Class1_Type", 
                "PY_capsule_name": "PY_Class1_capsule_name", 
                "PY_from_object_func": "PP_Class1_from_Object", 
                "PY_to_object_func": "PP_Class1_to_Object", 
                "PY_type_filename": "pyClass1type.cpp", 
                "class_lower": "class1", 
                "class_prefix": "class1_", 
                "class_upper": "CLASS1", 
                "cpp_class": "Class1"
            }, 
            "cpp_header": "", 
            "methods": [
                {
                    "_ast": {
                        "args": [], 
                        "attrs": {}, 
                        "const": false, 
                        "declarator": {
                            "name": "new", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "*"
                                }
                            ]
                        }, 
                        "fattrs": {
                            "constructor": true
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "Class1"
                        ], 
                        "storage": []
                    }, 
                    "_decl": "Class1 * new() +constructor", 
                    "_fmt": {
                        "C_call_code": "Class1 * SHT_rv = new Class1();", 
                        "C_call_list": "", 
                        "C_name": "TUT_class1_new", 
                        "C_prototype": "", 
                        "C_return_code": "return static_cast<TUT_class1 *>(static_cast<void *>(SHT_rv));", 
                        "C_return_type": "TUT_class1 *", 
                        "F_C_call": "c_class1_new", 
                        "F_C_name": "c_class1_new", 
                        "F_arg_c_call": "", 
                        "F_arg_c_call_tab": "\t", 
                        "F_arguments": "", 
                        "F_call_code": "SHT_rv%voidptr = c_class1_new(\t)", 
                        "F_name_function": "new", 
                        "F_name_generic": "new", 
                        "F_name_impl": "class1_new", 
                        "F_result_clause": " result(SHT_rv)", 
                        "F_subprogram": "function", 
                        "LUA_name": "new", 
                        "LUA_name_impl": "l_class1_new", 
                        "c_const": "", 
                        "function_name": "new", 
                        "underscore_name": "new"
                    }, 
                    "_fmtargs": {}, 
                    "_fmtresult": {
                        "fmtc": {
                            "cpp_rv_decl": "Class1 * SHT_rv", 
                            "cpp_var": "SHT_rv"
                        }
                    }, 
                    "_function_index": 0, 
                    "_subprogram": "function", 
                    "decl": "Class1 *new()  +constructor", 
                    "options": {}
                }, 
                {
                    "_ast": {
                        "args": [], 
                        "attrs": {}, 
                        "const": false, 
                        "declarator": {
                            "name": "delete", 
                            "pointer": []
                        }, 
                        "fattrs": {
                            "destructor": true
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "void"
                        ], 
                        "storage": []
                    }, 
                    "_decl": "void delete() +destructor", 
                    "_fmt": {
                        "C_call_code": "delete SH_this;", 
                        "C_call_list": "", 
                        "C_name": "TUT_class1_delete", 
                        "C_pre_call": "Class1 *SH_this = static_cast<Class1 *>(static_cast<void *>(self));", 
                        "C_prototype": "TUT_class1 * self", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_class1_delete", 
                        "F_C_name": "c_class1_delete", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_class1_delete(\tobj%voidptr)", 
                        "F_name_function": "delete", 
                        "F_name_generic": "delete", 
                        "F_name_impl": "class1_delete", 
                        "F_subprogram": "subroutine", 
                        "LUA_name": "delete", 
                        "LUA_name_impl": "l_class1_delete", 
                        "PY_name_impl": "PY_class1_delete", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "delete", 
                        "underscore_name": "delete"
                    }, 
                    "_fmtargs": {}, 
                    "_function_index": 1, 
                    "_subprogram": "subroutine", 
                    "decl": "void delete()  +destructor", 
                    "options": {}
                }, 
                {
                    "_ast": {
                        "args": [], 
                        "attrs": {}, 
                        "const": false, 
                        "declarator": {
                            "name": "Method1", 
                            "pointer": []
                        }, 
                        "fattrs": {}, 
                        "func_const": false, 
                        "specifier": [
                            "void"
                        ], 
                        "storage": []
                    }, 
                    "_decl": "void Method1()", 
                    "_fmt": {
                        "C_call_code": "SH_this->Method1();", 
                        "C_call_list": "", 
                        "C_name": "TUT_class1_method1", 
                        "C_pre_call": "Class1 *SH_this = static_cast<Class1 *>(static_cast<void *>(self));", 
                        "C_prototype": "TUT_class1 * self", 
                        "C_return_code": "return;", 
                        "C_return_type": "void", 
                        "F_C_call": "c_class1_method1", 
                        "F_C_name": "c_class1_method1", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_call_code": "call c_class1_method1(\tobj%voidptr)", 
                        "F_name_function": "method1", 
                        "F_name_generic": "method1", 
                        "F_name_impl": "class1_method1", 
                        "F_subprogram": "subroutine", 
                        "LUA_name": "Method1", 
                        "LUA_name_impl": "l_class1_method1", 
                        "PY_name_impl": "PY_class1_method1", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "function_name": "Method1", 
                        "underscore_name": "method1"
                    }, 
                    "_fmtargs": {}, 
                    "_function_index": 2, 
                    "_subprogram": "subroutine", 
                    "decl": "void Method1()", 
                    "options": {}
                }
            ], 
            "name": "Class1", 
            "options": {}
        }
    ], 
    "copyright": [
        "#######################################################################", 
        "Copyright (c) 2017, Lawrence Livermore National Security, LLC.", 
        "Produced at the Lawrence Livermore National Laboratory", 
        null, 
        "LLNL-CODE-738041.", 
        "All rights reserved.", 
        null, 
        "This file is part of Shroud.  For details, see", 
        "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
        null, 
        "Redistribution and use in source and binary forms, with or without", 
        "modification, are permitted provided that the following conditions are", 
        "met:", 
        null, 
        "* Redistributions of source code must retain the above copyright", 
        "  notice, this list of conditions and the disclaimer below.", 
        null, 
        "* Redistributions in binary form must reproduce the above copyright", 
        "  notice, this list of conditions and the disclaimer (as noted below)", 
        "  in the documentation and/or other materials provided with the", 
        "  distribution.", 
        null, 
        "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
        "  may be used to endorse or promote products derived from this", 
        "  software without specific prior written permission.", 
        null, 
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
        "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
        "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
        "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
        "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
        "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
        "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
        "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
        "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
        "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
        null, 
        "#######################################################################"
    ], 
    "cpp_header": "tutorial.hpp", 
    "functions": [
        {
            "_ast": {
                "args": [], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function1", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function1()", 
            "_fmt": {
                "C_call_code": "Function1();", 
                "C_call_list": "", 
                "C_name": "TUT_function1", 
                "C_prototype": "", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function1", 
                "F_C_name": "function1", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "call c_function1(\t)", 
                "F_name_function": "function1", 
                "F_name_generic": "function1", 
                "F_name_impl": "function1", 
                "F_subprogram": "subroutine", 
                "LUA_name": "Function1", 
                "LUA_name_impl": "l_function1", 
                "PY_name_impl": "PY_function1", 
                "c_const": "", 
                "function_name": "Function1", 
                "underscore_name": "function1"
            }, 
            "_fmtargs": {}, 
            "_function_index": 3, 
            "_subprogram": "subroutine", 
            "decl": "void Function1()", 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function2", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "double"
                ], 
                "storage": []
            }, 
            "_decl": "double Function2(double arg1 +intent(in)+value, int arg2 +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "double SHT_rv = Function2(arg1, arg2);", 
                "C_call_list": "arg1, arg2", 
                "C_name": "TUT_function2", 
                "C_prototype": "double arg1, int arg2", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "double", 
                "F_C_call": "c_function2", 
                "F_C_name": "function2", 
                "F_arg_c_call": "arg1, arg2", 
                "F_arg_c_call_tab": "\targ1\targ2", 
                "F_arguments": "arg1, arg2", 
                "F_call_code": "SHT_rv = c_function2(\targ1\targ2)", 
                "F_name_function": "function2", 
                "F_name_generic": "function2", 
                "F_name_impl": "function2", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "Function2", 
                "LUA_name_impl": "l_function2", 
                "PY_name_impl": "PY_function2", 
                "c_const": "", 
                "function_name": "Function2", 
                "underscore_name": "function2"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "double", 
                        "cpp_var": "arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tonumber(L, 1)", 
                        "c_var_len": "Larg1", 
                        "cpp_type": "double", 
                        "cpp_var": "arg1", 
                        "lua_var": "SH_Lua_arg1", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "double", 
                        "cpp_var": "arg1", 
                        "py_var": "SH_Py_arg1"
                    }
                }, 
                "arg2": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "int", 
                        "cpp_var": "arg2"
                    }, 
                    "fmtf": {
                        "c_var": "arg2", 
                        "f_var": "arg2"
                    }, 
                    "fmtl": {
                        "LUA_index": 2, 
                        "c_var": "lua_tointeger(L, 2)", 
                        "c_var_len": "Larg2", 
                        "cpp_type": "int", 
                        "cpp_var": "arg2", 
                        "lua_var": "SH_Lua_arg2", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "int", 
                        "cpp_var": "arg2", 
                        "py_var": "SH_Py_arg2"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "double SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 4, 
            "_subprogram": "function", 
            "decl": "double Function2(double arg1, int arg2)", 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "len", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "dimension": "(len)", 
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "values", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "*"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "out", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "result", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "*"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Sum", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Sum(int len +intent(in)+value, int * values +dimension(len)+intent(in), int * result +intent(out))", 
            "_fmt": {
                "C_call_code": "Sum(len, values, result);", 
                "C_call_list": "len, values, result", 
                "C_name": "TUT_sum", 
                "C_prototype": "int len, int * values, int * result", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_sum", 
                "F_C_name": "sum", 
                "F_arg_c_call": "len, values, result", 
                "F_arg_c_call_tab": "\tlen\tvalues\tresult", 
                "F_arguments": "len, values, result", 
                "F_call_code": "call c_sum(\tlen\tvalues\tresult)", 
                "F_name_function": "sum", 
                "F_name_generic": "sum", 
                "F_name_impl": "sum", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_name": "Sum", 
                "underscore_name": "sum"
            }, 
            "_fmtargs": {
                "len": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "len", 
                        "cpp_type": "int", 
                        "cpp_var": "len"
                    }, 
                    "fmtf": {
                        "c_var": "len", 
                        "f_var": "len"
                    }
                }, 
                "result": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "result", 
                        "cpp_type": "int", 
                        "cpp_var": "result"
                    }, 
                    "fmtf": {
                        "c_var": "result", 
                        "f_var": "result"
                    }
                }, 
                "values": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "values", 
                        "cpp_type": "int", 
                        "cpp_var": "values"
                    }, 
                    "fmtf": {
                        "c_var": "values", 
                        "f_var": "values"
                    }
                }
            }, 
            "_function_index": 5, 
            "_subprogram": "subroutine", 
            "decl": "void Sum(int len, int *values+dimension(len)+intent(in), int *result+intent(out))", 
            "options": {
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "bool"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function3", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "bool"
                ], 
                "storage": []
            }, 
            "_decl": "bool Function3(bool arg +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "bool SHT_rv = Function3(arg);", 
                "C_call_list": "arg", 
                "C_name": "TUT_function3", 
                "C_prototype": "bool arg", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "bool", 
                "F_C_call": "c_function3", 
                "F_C_name": "c_function3", 
                "F_arg_c_call": "SH_arg", 
                "F_arg_c_call_tab": "\tSH_arg", 
                "F_arguments": "arg", 
                "F_call_code": "SHT_rv = c_function3(\tSH_arg)", 
                "F_name_function": "function3", 
                "F_name_generic": "function3", 
                "F_name_impl": "function3", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "Function3", 
                "LUA_name_impl": "l_function3", 
                "PY_name_impl": "PY_function3", 
                "c_const": "", 
                "function_name": "Function3", 
                "underscore_name": "function3"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg", 
                        "f_var": "arg"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_toboolean(L, 1)", 
                        "c_var_len": "Larg", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg", 
                        "lua_var": "SH_Lua_arg", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg", 
                        "py_var": "SH_Py_arg"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "bool SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 6, 
            "_subprogram": "function", 
            "decl": "bool Function3(bool arg)", 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "bool"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "out", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "*"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "bool"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "inout", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg3", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "*"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "bool"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function3b", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function3b(const bool arg1 +intent(in)+value, bool * arg2 +intent(out), bool * arg3 +intent(inout))", 
            "_fmt": {
                "C_call_code": "Function3b(arg1, arg2, arg3);", 
                "C_call_list": "arg1, arg2, arg3", 
                "C_name": "TUT_function3b", 
                "C_prototype": "const bool arg1, bool * arg2, bool * arg3", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function3b", 
                "F_C_name": "c_function3b", 
                "F_arg_c_call": "SH_arg1, SH_arg2, SH_arg3", 
                "F_arg_c_call_tab": "\tSH_arg1\tSH_arg2\tSH_arg3", 
                "F_arguments": "arg1, arg2, arg3", 
                "F_call_code": "call c_function3b(\tSH_arg1\tSH_arg2\tSH_arg3)", 
                "F_name_function": "function3b", 
                "F_name_generic": "function3b", 
                "F_name_impl": "function3b", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_name": "Function3b", 
                "underscore_name": "function3b"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg1"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg1", 
                        "f_var": "arg1"
                    }
                }, 
                "arg2": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "arg2", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg2"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg2", 
                        "f_var": "arg2"
                    }
                }, 
                "arg3": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "arg3", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg3"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg3", 
                        "f_var": "arg3"
                    }
                }
            }, 
            "_function_index": 7, 
            "_subprogram": "subroutine", 
            "decl": "void Function3b(const bool arg1, bool *arg2+intent(out), bool *arg3+intent(inout))", 
            "options": {
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_F_C_index": 40, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {
                    "len": "30"
                }, 
                "const": true, 
                "declarator": {
                    "name": "Function4a", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "std::string"
                ], 
                "storage": []
            }, 
            "_decl": "const std::string Function4a +len(30)(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in))", 
            "_fmt": {
                "F_C_call": "c_function4a_bufferify", 
                "F_arg_c_call": "arg1, len_trim(arg1, kind=C_INT), arg2, len_trim(arg2, kind=C_INT), SHT_rv, len(SHT_rv, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ1\tlen_trim(arg1, kind=C_INT)\targ2\tlen_trim(arg2, kind=C_INT)\tSHT_rv\tlen(SHT_rv, kind=C_INT)", 
                "F_arguments": "arg1, arg2", 
                "F_call_code": "call c_function4a_bufferify(\targ1\tlen_trim(arg1, kind=C_INT)\targ2\tlen_trim(arg2, kind=C_INT)\tSHT_rv\tlen(SHT_rv, kind=C_INT))", 
                "F_name_function": "function4a", 
                "F_name_generic": "function4a", 
                "F_name_impl": "function4a", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "Function4a", 
                "LUA_name_impl": "l_function4a", 
                "PY_name_impl": "PY_function4a", 
                "c_var_len": "30", 
                "function_name": "Function4a", 
                "underscore_name": "function4a"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tostring(L, 1)", 
                        "c_var_len": "Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "arg1", 
                        "lua_var": "SH_Lua_arg1", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1", 
                        "py_var": "SH_Py_arg1"
                    }
                }, 
                "arg2": {
                    "fmtl": {
                        "LUA_index": 2, 
                        "c_var": "lua_tostring(L, 2)", 
                        "c_var_len": "Larg2", 
                        "cpp_type": "std::string", 
                        "cpp_var": "arg2", 
                        "lua_var": "SH_Lua_arg2", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg2", 
                        "py_var": "SH_Py_arg2"
                    }
                }
            }, 
            "_function_index": 8, 
            "_subprogram": "function", 
            "decl": "const std::string Function4a+len(30)( const std::string& arg1, const std::string& arg2 )", 
            "options": {
                "wrap_c": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 8, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg1", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg2", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "args": [
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "value": false
                                }, 
                                "const": true, 
                                "declarator": {
                                    "name": "arg1", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "&"
                                        }
                                    ]
                                }, 
                                "func_const": false, 
                                "specifier": [
                                    "std::string"
                                ], 
                                "storage": []
                            }, 
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "value": false
                                }, 
                                "const": true, 
                                "declarator": {
                                    "name": "arg2", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "&"
                                        }
                                    ]
                                }, 
                                "func_const": false, 
                                "specifier": [
                                    "std::string"
                                ], 
                                "storage": []
                            }
                        ], 
                        "attrs": {
                            "_is_result": true, 
                            "intent": "out", 
                            "len": "NSHF_rv"
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "SHF_rv", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "*"
                                }
                            ]
                        }, 
                        "fattrs": {}, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {
                    "len": "30"
                }, 
                "const": false, 
                "declarator": {
                    "name": "Function4a", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function4a +len(30)(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string * SHF_rv +intent(out)+len(NSHF_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "const std::string SHT_rv = Function4a(SH_arg1, SH_arg2);", 
                "C_call_list": "SH_arg1, SH_arg2", 
                "C_name": "TUT_function4a_bufferify", 
                "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                "C_pre_call": "const std::string SH_arg1(arg1, Larg1);\nconst std::string SH_arg2(arg2, Larg2);", 
                "C_prototype": "const char * arg1, int Larg1, const char * arg2, int Larg2, char * SHF_rv, int NSHF_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_function4a_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "SHF_rv": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "SHF_rv", 
                        "c_var_len": "NSHF_rv", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SHT_rv.c_str()", 
                        "cpp_var": "SHT_rv"
                    }, 
                    "fmtf": {
                        "c_var": "SHT_rv", 
                        "f_var": "SHT_rv"
                    }
                }, 
                "arg1": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "c_var_trim": "Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }
                }, 
                "arg2": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "c_var_trim": "Larg2", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg2"
                    }, 
                    "fmtf": {
                        "c_var": "arg2", 
                        "f_var": "arg2"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "const std::string SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 40, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "const std::string Function4a+len(30)( const std::string& arg1, const std::string& arg2 )", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": true, 
                "declarator": {
                    "name": "Function4b", 
                    "pointer": [
                        {
                            "const": false, 
                            "ptr": "&"
                        }
                    ]
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "std::string"
                ], 
                "storage": []
            }, 
            "_decl": "const std::string & Function4b(const std::string & arg1 +intent(in), const std::string & arg2 +intent(in))", 
            "_fmt": {
                "C_call_code": "const std::string & SHT_rv = Function4b(SH_arg1, SH_arg2);", 
                "C_call_list": "SH_arg1, SH_arg2", 
                "C_name": "TUT_function4b", 
                "C_pre_call": "const std::string SH_arg1(arg1);\nconst std::string SH_arg2(arg2);", 
                "C_prototype": "const char * arg1, const char * arg2", 
                "C_return_code": "return XSHT_rv;", 
                "C_return_type": "const char *", 
                "F_C_name": "c_function4b", 
                "F_string_result_as_arg": "output", 
                "LUA_name": "Function4b", 
                "LUA_name_impl": "l_function4b", 
                "PY_name_impl": "PY_function4b", 
                "c_const": "const ", 
                "function_name": "Function4b", 
                "underscore_name": "function4b"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tostring(L, 1)", 
                        "c_var_len": "Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "arg1", 
                        "lua_var": "SH_Lua_arg1", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1", 
                        "py_var": "SH_Py_arg1"
                    }
                }, 
                "arg2": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg2"
                    }, 
                    "fmtl": {
                        "LUA_index": 2, 
                        "c_var": "lua_tostring(L, 2)", 
                        "c_var_len": "Larg2", 
                        "cpp_type": "std::string", 
                        "cpp_var": "arg2", 
                        "lua_var": "SH_Lua_arg2", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg2", 
                        "py_var": "SH_Py_arg2"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "c_rv_decl": "const char * XSHT_rv", 
                    "c_val": "SHT_rv.c_str()", 
                    "c_var": "XSHT_rv", 
                    "cpp_rv_decl": "const std::string & SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 9, 
            "_subprogram": "function", 
            "decl": "const std::string& Function4b( const std::string& arg1, const std::string& arg2 )", 
            "options": {
                "F_string_result_as_arg": "output", 
                "wrap_fortran": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 9, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg1", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg2", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "args": [
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "value": false
                                }, 
                                "const": true, 
                                "declarator": {
                                    "name": "arg1", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "&"
                                        }
                                    ]
                                }, 
                                "func_const": false, 
                                "specifier": [
                                    "std::string"
                                ], 
                                "storage": []
                            }, 
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "value": false
                                }, 
                                "const": true, 
                                "declarator": {
                                    "name": "arg2", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "&"
                                        }
                                    ]
                                }, 
                                "func_const": false, 
                                "specifier": [
                                    "std::string"
                                ], 
                                "storage": []
                            }
                        ], 
                        "attrs": {
                            "_is_result": true, 
                            "intent": "out", 
                            "len": "Noutput"
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "output", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "fattrs": {}, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function4b", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function4b(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string & output +intent(out)+len(Noutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "const std::string & SHT_rv = Function4b(SH_arg1, SH_arg2);", 
                "C_call_list": "SH_arg1, SH_arg2", 
                "C_name": "TUT_function4b_bufferify", 
                "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(output, ' ', Noutput);\n} else {\n  ShroudStrCopy(output, Noutput, SHT_rv.c_str());\n}", 
                "C_pre_call": "const std::string SH_arg1(arg1, Larg1);\nconst std::string SH_arg2(arg2, Larg2);", 
                "C_prototype": "const char * arg1, int Larg1, const char * arg2, int Larg2, char * output, int Noutput", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_function4b_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "c_var_trim": "Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }
                }, 
                "arg2": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "c_var_trim": "Larg2", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg2"
                    }, 
                    "fmtf": {
                        "c_var": "arg2", 
                        "f_var": "arg2"
                    }
                }, 
                "output": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "output", 
                        "c_var_len": "Noutput", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SHT_rv.c_str()", 
                        "cpp_var": "SHT_rv"
                    }, 
                    "fmtf": {
                        "c_var": "output", 
                        "f_var": "output"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "const std::string & SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 41, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "const std::string& Function4b( const std::string& arg1, const std::string& arg2 )", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 9, 
            "_PTR_F_C_index": 41, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg1", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Larg2", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "args": [
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "value": false
                                }, 
                                "const": true, 
                                "declarator": {
                                    "name": "arg1", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "&"
                                        }
                                    ]
                                }, 
                                "func_const": false, 
                                "specifier": [
                                    "std::string"
                                ], 
                                "storage": []
                            }, 
                            {
                                "attrs": {
                                    "intent": "in", 
                                    "value": false
                                }, 
                                "const": true, 
                                "declarator": {
                                    "name": "arg2", 
                                    "pointer": [
                                        {
                                            "const": false, 
                                            "ptr": "&"
                                        }
                                    ]
                                }, 
                                "func_const": false, 
                                "specifier": [
                                    "std::string"
                                ], 
                                "storage": []
                            }
                        ], 
                        "attrs": {
                            "_is_result": true, 
                            "intent": "out", 
                            "len": "Noutput"
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "output", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "fattrs": {}, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function4b", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function4b(const std::string & arg1 +intent(in)+len_trim(Larg1), const std::string & arg2 +intent(in)+len_trim(Larg2), std::string & output +intent(out)+len(Noutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "F_C_call": "c_function4b_bufferify", 
                "F_arg_c_call": "arg1, len_trim(arg1, kind=C_INT), arg2, len_trim(arg2, kind=C_INT), output, len(output, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ1\tlen_trim(arg1, kind=C_INT)\targ2\tlen_trim(arg2, kind=C_INT)\toutput\tlen(output, kind=C_INT)", 
                "F_arguments": "arg1, arg2, output", 
                "F_call_code": "call c_function4b_bufferify(\targ1\tlen_trim(arg1, kind=C_INT)\targ2\tlen_trim(arg2, kind=C_INT)\toutput\tlen(output, kind=C_INT))", 
                "F_name_function": "function4b", 
                "F_name_generic": "function4b", 
                "F_name_impl": "function4b", 
                "F_subprogram": "subroutine", 
                "function_suffix": ""
            }, 
            "_function_index": 42, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "const std::string& Function4b( const std::string& arg1, const std::string& arg2 )", 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function5", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "double"
                ], 
                "storage": []
            }, 
            "_decl": "double Function5()", 
            "_fmt": {
                "C_call_code": "double SHT_rv = Function5();", 
                "C_call_list": "", 
                "C_name": "TUT_function5", 
                "C_prototype": "", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "double", 
                "F_C_call": "c_function5", 
                "F_C_name": "c_function5", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "SHT_rv = c_function5(\t)", 
                "F_name_function": "function5", 
                "F_name_generic": "function5", 
                "F_name_impl": "function5", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": ""
            }, 
            "_fmtargs": {}, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "double SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 30, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "double Function5(double arg1 = 3.1415, bool arg2 = true)", 
            "default_arg_suffix": [
                "", 
                "_arg1", 
                "_arg1_arg2"
            ], 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 3.1415, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function5", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "double"
                ], 
                "storage": []
            }, 
            "_decl": "double Function5(double arg1=3.1415 +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "double SHT_rv = Function5(arg1);", 
                "C_call_list": "arg1", 
                "C_name": "TUT_function5_arg1", 
                "C_prototype": "double arg1", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "double", 
                "F_C_call": "c_function5_arg1", 
                "F_C_name": "c_function5_arg1", 
                "F_arg_c_call": "arg1", 
                "F_arg_c_call_tab": "\targ1", 
                "F_arguments": "arg1", 
                "F_call_code": "SHT_rv = c_function5_arg1(\targ1)", 
                "F_name_function": "function5_arg1", 
                "F_name_generic": "function5", 
                "F_name_impl": "function5_arg1", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": "_arg1"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "double", 
                        "cpp_var": "arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "double SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 31, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "double Function5(double arg1 = 3.1415, bool arg2 = true)", 
            "default_arg_suffix": [
                "", 
                "_arg1", 
                "_arg1_arg2"
            ], 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 3.1415, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": "true", 
                        "specifier": [
                            "bool"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function5", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "double"
                ], 
                "storage": []
            }, 
            "_decl": "double Function5(double arg1=3.1415 +intent(in)+value, bool arg2=true +intent(in)+value)", 
            "_default_funcs": [
                30, 
                31
            ], 
            "_fmt": {
                "C_call_code": "double SHT_rv = Function5(arg1, arg2);", 
                "C_call_list": "arg1, arg2", 
                "C_name": "TUT_function5_arg1_arg2", 
                "C_prototype": "double arg1, bool arg2", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "double", 
                "F_C_call": "c_function5_arg1_arg2", 
                "F_C_name": "c_function5_arg1_arg2", 
                "F_arg_c_call": "arg1, SH_arg2", 
                "F_arg_c_call_tab": "\targ1\tSH_arg2", 
                "F_arguments": "arg1, arg2", 
                "F_call_code": "SHT_rv = c_function5_arg1_arg2(\targ1\tSH_arg2)", 
                "F_name_function": "function5_arg1_arg2", 
                "F_name_generic": "function5", 
                "F_name_impl": "function5_arg1_arg2", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "Function5", 
                "LUA_name_impl": "l_function5", 
                "PY_name_impl": "PY_function5_arg1_arg2", 
                "c_const": "", 
                "function_name": "Function5", 
                "function_suffix": "_arg1_arg2", 
                "underscore_name": "function5"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "double", 
                        "cpp_var": "arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tonumber(L, 1)", 
                        "c_var_len": "Larg1", 
                        "cpp_type": "double", 
                        "cpp_var": "arg1", 
                        "lua_var": "SH_Lua_arg1", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "double", 
                        "cpp_var": "arg1", 
                        "py_var": "SH_Py_arg1"
                    }
                }, 
                "arg2": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg2"
                    }, 
                    "fmtf": {
                        "c_var": "SH_arg2", 
                        "f_var": "arg2"
                    }, 
                    "fmtl": {
                        "LUA_index": 2, 
                        "c_var": "lua_toboolean(L, 2)", 
                        "c_var_len": "Larg2", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg2", 
                        "lua_var": "SH_Lua_arg2", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "bool", 
                        "cpp_var": "arg2", 
                        "py_var": "SH_Py_arg2"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "double SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 10, 
            "_has_default_arg": true, 
            "_nargs": [
                0, 
                2
            ], 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "double Function5(double arg1 = 3.1415, bool arg2 = true)", 
            "default_arg_suffix": [
                "", 
                "_arg1", 
                "_arg1_arg2"
            ], 
            "options": {}
        }, 
        {
            "_PTR_F_C_index": 43, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "name", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function6", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                11, 
                12
            ], 
            "_decl": "void Function6(const std::string & name +intent(in))", 
            "_fmt": {
                "C_call_code": "Function6(SH_name);", 
                "C_call_list": "SH_name", 
                "C_name": "TUT_function6_from_name", 
                "C_pre_call": "const std::string SH_name(name);", 
                "C_prototype": "const char * name", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function6_from_name_bufferify", 
                "F_C_name": "c_function6_from_name", 
                "F_arg_c_call": "name, len_trim(name, kind=C_INT)", 
                "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)", 
                "F_arguments": "name", 
                "F_call_code": "call c_function6_from_name_bufferify(\tname\tlen_trim(name, kind=C_INT))", 
                "F_name_function": "function6_from_name", 
                "F_name_generic": "function6", 
                "F_name_impl": "function6_from_name", 
                "F_subprogram": "subroutine", 
                "LUA_name": "Function6", 
                "LUA_name_impl": "l_function6", 
                "PY_name_impl": "PY_function6_from_name", 
                "c_const": "", 
                "function_name": "Function6", 
                "function_suffix": "_from_name", 
                "underscore_name": "function6"
            }, 
            "_fmtargs": {
                "name": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tostring(L, 1)", 
                        "c_var_len": "Lname", 
                        "cpp_type": "std::string", 
                        "cpp_var": "name", 
                        "lua_var": "SH_Lua_name", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name", 
                        "py_var": "SH_Py_name"
                    }
                }
            }, 
            "_function_index": 11, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function6(const std::string& name)", 
            "function_suffix": "_from_name", 
            "options": {}
        }, 
        {
            "_PTR_C_CPP_index": 11, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Lname", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "name", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function6", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                11, 
                12
            ], 
            "_decl": "void Function6(const std::string & name +intent(in)+len_trim(Lname))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "Function6(SH_name);", 
                "C_call_list": "SH_name", 
                "C_name": "TUT_function6_from_name_bufferify", 
                "C_pre_call": "const std::string SH_name(name, Lname);", 
                "C_prototype": "const char * name, int Lname", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_function6_from_name_bufferify", 
                "c_const": "", 
                "function_suffix": "_from_name_bufferify"
            }, 
            "_fmtargs": {
                "name": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "c_var_trim": "Lname", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtf": {
                        "c_var": "name", 
                        "f_var": "name"
                    }
                }
            }, 
            "_function_index": 43, 
            "_generated": "arg_to_buffer", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function6(const std::string& name)", 
            "function_suffix": "_from_name", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "indx", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function6", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                11, 
                12
            ], 
            "_decl": "void Function6(int indx +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "Function6(indx);", 
                "C_call_list": "indx", 
                "C_name": "TUT_function6_from_index", 
                "C_prototype": "int indx", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function6_from_index", 
                "F_C_name": "c_function6_from_index", 
                "F_arg_c_call": "indx", 
                "F_arg_c_call_tab": "\tindx", 
                "F_arguments": "indx", 
                "F_call_code": "call c_function6_from_index(\tindx)", 
                "F_name_function": "function6_from_index", 
                "F_name_generic": "function6", 
                "F_name_impl": "function6_from_index", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_function6_from_index", 
                "c_const": "", 
                "function_name": "Function6", 
                "function_suffix": "_from_index", 
                "underscore_name": "function6"
            }, 
            "_fmtargs": {
                "indx": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "indx", 
                        "cpp_type": "int", 
                        "cpp_var": "indx"
                    }, 
                    "fmtf": {
                        "c_var": "indx", 
                        "f_var": "indx"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tointeger(L, 1)", 
                        "c_var_len": "Lindx", 
                        "cpp_type": "int", 
                        "cpp_var": "indx", 
                        "lua_var": "SH_Lua_indx", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "indx", 
                        "cpp_type": "int", 
                        "cpp_var": "indx", 
                        "py_var": "SH_Py_indx"
                    }
                }
            }, 
            "_function_index": 12, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function6(int indx)", 
            "function_suffix": "_from_index", 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "ArgType"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function7", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function7(ArgType arg +intent(in)+value)", 
            "_fmt": {
                "function_name": "Function7", 
                "underscore_name": "function7"
            }, 
            "_function_index": 13, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "cpp_template": {
                "ArgType": [
                    "int", 
                    "double"
                ]
            }, 
            "decl": "void Function7(ArgType arg)", 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function7", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function7(int arg +intent(in)+value)", 
            "_fmt": {
                "CPP_template": "<int>", 
                "C_call_code": "Function7<int>(arg);", 
                "C_call_list": "arg", 
                "C_name": "TUT_function7_int", 
                "C_prototype": "int arg", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function7_int", 
                "F_C_name": "c_function7_int", 
                "F_arg_c_call": "arg", 
                "F_arg_c_call_tab": "\targ", 
                "F_arguments": "arg", 
                "F_call_code": "call c_function7_int(\targ)", 
                "F_name_function": "function7_int", 
                "F_name_generic": "function7", 
                "F_name_impl": "function7_int", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_suffix": "_int"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "int", 
                        "cpp_var": "arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_function_index": 32, 
            "_generated": "cpp_template", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function7(ArgType arg)", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function7", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function7(double arg +intent(in)+value)", 
            "_fmt": {
                "CPP_template": "<double>", 
                "C_call_code": "Function7<double>(arg);", 
                "C_call_list": "arg", 
                "C_name": "TUT_function7_double", 
                "C_prototype": "double arg", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function7_double", 
                "F_C_name": "c_function7_double", 
                "F_arg_c_call": "arg", 
                "F_arg_c_call_tab": "\targ", 
                "F_arguments": "arg", 
                "F_call_code": "call c_function7_double(\targ)", 
                "F_name_function": "function7_double", 
                "F_name_generic": "function7", 
                "F_name_impl": "function7_double", 
                "F_subprogram": "subroutine", 
                "c_const": "", 
                "function_suffix": "_double"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "double", 
                        "cpp_var": "arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_function_index": 33, 
            "_generated": "cpp_template", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function7(ArgType arg)", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function8", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "RetType"
                ], 
                "storage": []
            }, 
            "_decl": "RetType Function8()", 
            "_fmt": {
                "function_name": "Function8", 
                "underscore_name": "function8"
            }, 
            "_function_index": 14, 
            "_overloaded": true, 
            "_subprogram": "function", 
            "cpp_template": {
                "RetType": [
                    "int", 
                    "double"
                ]
            }, 
            "decl": "RetType Function8()", 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_CPP_return_templated": true, 
            "_ast": {
                "args": [], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function8", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_decl": "int Function8()", 
            "_fmt": {
                "CPP_template": "<int>", 
                "C_call_code": "int SHT_rv = Function8<int>();", 
                "C_call_list": "", 
                "C_name": "TUT_function8_int", 
                "C_prototype": "", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_function8_int", 
                "F_C_name": "c_function8_int", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "SHT_rv = c_function8_int(\t)", 
                "F_name_function": "function8_int", 
                "F_name_generic": "function8", 
                "F_name_impl": "function8_int", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": "_int"
            }, 
            "_fmtargs": {}, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 34, 
            "_generated": "cpp_template", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "RetType Function8()", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_CPP_return_templated": true, 
            "_ast": {
                "args": [], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function8", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "double"
                ], 
                "storage": []
            }, 
            "_decl": "double Function8()", 
            "_fmt": {
                "CPP_template": "<double>", 
                "C_call_code": "double SHT_rv = Function8<double>();", 
                "C_call_list": "", 
                "C_name": "TUT_function8_double", 
                "C_prototype": "", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "double", 
                "F_C_call": "c_function8_double", 
                "F_C_name": "c_function8_double", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "SHT_rv = c_function8_double(\t)", 
                "F_name_function": "function8_double", 
                "F_name_generic": "function8", 
                "F_name_impl": "function8_double", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": "_double"
            }, 
            "_fmtargs": {}, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "double SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 35, 
            "_generated": "cpp_template", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "RetType Function8()", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function9", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function9(double arg +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "Function9(arg);", 
                "C_call_list": "arg", 
                "C_name": "TUT_function9", 
                "C_prototype": "double arg", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_function9", 
                "LUA_name": "Function9", 
                "LUA_name_impl": "l_function9", 
                "PY_name_impl": "PY_function9", 
                "c_const": "", 
                "function_name": "Function9", 
                "underscore_name": "function9"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "double", 
                        "cpp_var": "arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tonumber(L, 1)", 
                        "c_var_len": "Larg", 
                        "cpp_type": "double", 
                        "cpp_var": "arg", 
                        "lua_var": "SH_Lua_arg", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "double", 
                        "cpp_var": "arg", 
                        "py_var": "SH_Py_arg"
                    }
                }
            }, 
            "_function_index": 15, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function9(double arg)", 
            "fortran_generic": {
                "arg": [
                    "float", 
                    "double"
                ]
            }, 
            "options": {
                "wrap_fortran": false
            }
        }, 
        {
            "_PTR_F_C_index": 15, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "float"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function9", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function9(float arg +intent(in)+value)", 
            "_fmt": {
                "F_C_call": "c_function9", 
                "F_arg_c_call": "real(arg, C_DOUBLE)", 
                "F_arg_c_call_tab": "\treal(arg, C_DOUBLE)", 
                "F_arguments": "arg", 
                "F_call_code": "call c_function9(\treal(arg, C_DOUBLE))", 
                "F_name_function": "function9_float", 
                "F_name_generic": "function9", 
                "F_name_impl": "function9_float", 
                "F_subprogram": "subroutine", 
                "function_suffix": "_float"
            }, 
            "_function_index": 52, 
            "_generated": "fortran_generic", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function9(double arg)", 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_F_C_index": 15, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function9", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void Function9(double arg +intent(in)+value)", 
            "_fmt": {
                "F_C_call": "c_function9", 
                "F_arg_c_call": "arg", 
                "F_arg_c_call_tab": "\targ", 
                "F_arguments": "arg", 
                "F_call_code": "call c_function9(\targ)", 
                "F_name_function": "function9_double", 
                "F_name_generic": "function9", 
                "F_name_impl": "function9_double", 
                "F_subprogram": "subroutine", 
                "function_suffix": "_double"
            }, 
            "_function_index": 53, 
            "_generated": "fortran_generic", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function9(double arg)", 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function10", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                16, 
                17
            ], 
            "_decl": "void Function10()", 
            "_fmt": {
                "C_call_code": "Function10();", 
                "C_call_list": "", 
                "C_name": "TUT_function10_0", 
                "C_prototype": "", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_function10_0", 
                "F_C_name": "c_function10_0", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "call c_function10_0(\t)", 
                "F_name_function": "function10_0", 
                "F_name_generic": "function10", 
                "F_name_impl": "function10_0", 
                "F_subprogram": "subroutine", 
                "LUA_name": "Function10", 
                "LUA_name_impl": "l_function10", 
                "PY_name_impl": "PY_function10_0", 
                "c_const": "", 
                "function_name": "Function10", 
                "function_suffix": "_0", 
                "underscore_name": "function10"
            }, 
            "_fmtargs": {}, 
            "_function_index": 16, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function10()", 
            "options": {}
        }, 
        {
            "_PTR_F_C_index": 44, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "name", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function10", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                16, 
                17
            ], 
            "_decl": "void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "Function10(SH_name, arg2);", 
                "C_call_list": "SH_name, arg2", 
                "C_name": "TUT_function10_1", 
                "C_pre_call": "const std::string SH_name(name);", 
                "C_prototype": "const char * name, double arg2", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_function10_1", 
                "PY_name_impl": "PY_function10_1", 
                "c_const": "", 
                "function_name": "Function10", 
                "function_suffix": "_1", 
                "underscore_name": "function10"
            }, 
            "_fmtargs": {
                "arg2": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "double", 
                        "cpp_var": "arg2"
                    }, 
                    "fmtl": {
                        "LUA_index": 2, 
                        "c_var": "lua_tonumber(L, 2)", 
                        "c_var_len": "Larg2", 
                        "cpp_type": "double", 
                        "cpp_var": "arg2", 
                        "lua_var": "SH_Lua_arg2", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "double", 
                        "cpp_var": "arg2", 
                        "py_var": "SH_Py_arg2"
                    }
                }, 
                "name": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tostring(L, 1)", 
                        "c_var_len": "Lname", 
                        "cpp_type": "std::string", 
                        "cpp_var": "name", 
                        "lua_var": "SH_Lua_name", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name", 
                        "py_var": "SH_Py_name"
                    }
                }
            }, 
            "_function_index": 17, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function10(const std::string &name, double arg2)", 
            "fortran_generic": {
                "arg2": [
                    "float", 
                    "double"
                ]
            }, 
            "options": {
                "F_string_len_trim": true, 
                "wrap_fortran": false
            }
        }, 
        {
            "_PTR_F_C_index": 17, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "name", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "float"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function10", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                16, 
                17
            ], 
            "_decl": "void Function10(const std::string & name +intent(in), float arg2 +intent(in)+value)", 
            "_fmt": {
                "F_C_call": "c_function10_1_bufferify", 
                "F_arg_c_call": "name, len_trim(name, kind=C_INT), real(arg2, C_DOUBLE)", 
                "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)\treal(arg2, C_DOUBLE)", 
                "F_arguments": "name, arg2", 
                "F_call_code": "call c_function10_1_bufferify(\tname\tlen_trim(name, kind=C_INT)\treal(arg2, C_DOUBLE))", 
                "F_name_function": "function10_1_float", 
                "F_name_generic": "function10", 
                "F_name_impl": "function10_1_float", 
                "F_subprogram": "subroutine", 
                "function_suffix": "_1_float"
            }, 
            "_function_index": 54, 
            "_generated": "fortran_generic", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function10(const std::string &name, double arg2)", 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_F_C_index": 17, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "name", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function10", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                16, 
                17
            ], 
            "_decl": "void Function10(const std::string & name +intent(in), double arg2 +intent(in)+value)", 
            "_fmt": {
                "F_C_call": "c_function10_1_bufferify", 
                "F_arg_c_call": "name, len_trim(name, kind=C_INT), arg2", 
                "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)\targ2", 
                "F_arguments": "name, arg2", 
                "F_call_code": "call c_function10_1_bufferify(\tname\tlen_trim(name, kind=C_INT)\targ2)", 
                "F_name_function": "function10_1_double", 
                "F_name_generic": "function10", 
                "F_name_impl": "function10_1_double", 
                "F_subprogram": "subroutine", 
                "function_suffix": "_1_double"
            }, 
            "_function_index": 55, 
            "_generated": "fortran_generic", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function10(const std::string &name, double arg2)", 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 17, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "len_trim": "Lname", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "name", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg2", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "Function10", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                16, 
                17
            ], 
            "_decl": "void Function10(const std::string & name +intent(in)+len_trim(Lname), double arg2 +intent(in)+value)", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "Function10(SH_name, arg2);", 
                "C_call_list": "SH_name, arg2", 
                "C_name": "TUT_function10_1_bufferify", 
                "C_pre_call": "const std::string SH_name(name, Lname);", 
                "C_prototype": "const char * name, int Lname, double arg2", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_function10_1_bufferify", 
                "c_const": "", 
                "function_suffix": "_1_bufferify"
            }, 
            "_fmtargs": {
                "arg2": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg2", 
                        "cpp_type": "double", 
                        "cpp_var": "arg2"
                    }, 
                    "fmtf": {
                        "c_var": "arg2", 
                        "f_var": "arg2"
                    }
                }, 
                "name": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "name", 
                        "c_var_trim": "Lname", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtf": {
                        "c_var": "name", 
                        "f_var": "name"
                    }
                }
            }, 
            "_function_index": 44, 
            "_generated": "arg_to_buffer", 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "decl": "void Function10(const std::string &name, double arg2)", 
            "fortran_generic": {
                "arg2": [
                    "float", 
                    "double"
                ]
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "num", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "overload1", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                18, 
                19
            ], 
            "_decl": "int overload1(int num +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "int SHT_rv = overload1(num);", 
                "C_call_list": "num", 
                "C_name": "TUT_overload1_num", 
                "C_prototype": "int num", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_overload1_num", 
                "F_C_name": "c_overload1_num", 
                "F_arg_c_call": "num", 
                "F_arg_c_call_tab": "\tnum", 
                "F_arguments": "num", 
                "F_call_code": "SHT_rv = c_overload1_num(\tnum)", 
                "F_name_function": "overload1_num", 
                "F_name_generic": "overload1", 
                "F_name_impl": "overload1_num", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": "_num"
            }, 
            "_fmtargs": {
                "num": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num"
                    }, 
                    "fmtf": {
                        "c_var": "num", 
                        "f_var": "num"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 36, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "int overload1(int num, int offset = 0, int stride = 1)", 
            "default_arg_suffix": [
                "_num", 
                "_num_offset", 
                "_num_offset_stride"
            ], 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "num", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "offset", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 0, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "overload1", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                18, 
                19
            ], 
            "_decl": "int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "int SHT_rv = overload1(num, offset);", 
                "C_call_list": "num, offset", 
                "C_name": "TUT_overload1_num_offset", 
                "C_prototype": "int num, int offset", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_overload1_num_offset", 
                "F_C_name": "c_overload1_num_offset", 
                "F_arg_c_call": "num, offset", 
                "F_arg_c_call_tab": "\tnum\toffset", 
                "F_arguments": "num, offset", 
                "F_call_code": "SHT_rv = c_overload1_num_offset(\tnum\toffset)", 
                "F_name_function": "overload1_num_offset", 
                "F_name_generic": "overload1", 
                "F_name_impl": "overload1_num_offset", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": "_num_offset"
            }, 
            "_fmtargs": {
                "num": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num"
                    }, 
                    "fmtf": {
                        "c_var": "num", 
                        "f_var": "num"
                    }
                }, 
                "offset": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "offset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset"
                    }, 
                    "fmtf": {
                        "c_var": "offset", 
                        "f_var": "offset"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 37, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "int overload1(int num, int offset = 0, int stride = 1)", 
            "default_arg_suffix": [
                "_num", 
                "_num_offset", 
                "_num_offset_stride"
            ], 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "num", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "offset", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 0, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "stride", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 1, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "overload1", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                18, 
                19
            ], 
            "_decl": "int overload1(int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)", 
            "_default_funcs": [
                36, 
                37
            ], 
            "_fmt": {
                "C_call_code": "int SHT_rv = overload1(num, offset, stride);", 
                "C_call_list": "num, offset, stride", 
                "C_name": "TUT_overload1_num_offset_stride", 
                "C_prototype": "int num, int offset, int stride", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_overload1_num_offset_stride", 
                "F_C_name": "c_overload1_num_offset_stride", 
                "F_arg_c_call": "num, offset, stride", 
                "F_arg_c_call_tab": "\tnum\toffset\tstride", 
                "F_arguments": "num, offset, stride", 
                "F_call_code": "SHT_rv = c_overload1_num_offset_stride(\tnum\toffset\tstride)", 
                "F_name_function": "overload1_num_offset_stride", 
                "F_name_generic": "overload1", 
                "F_name_impl": "overload1_num_offset_stride", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "overload1", 
                "LUA_name_impl": "l_overload1", 
                "PY_name_impl": "PY_overload1_num_offset_stride", 
                "c_const": "", 
                "function_name": "overload1", 
                "function_suffix": "_num_offset_stride", 
                "underscore_name": "overload1"
            }, 
            "_fmtargs": {
                "num": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num"
                    }, 
                    "fmtf": {
                        "c_var": "num", 
                        "f_var": "num"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tointeger(L, 1)", 
                        "c_var_len": "Lnum", 
                        "cpp_type": "int", 
                        "cpp_var": "num", 
                        "lua_var": "SH_Lua_num", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num", 
                        "py_var": "SH_Py_num"
                    }
                }, 
                "offset": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "offset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset"
                    }, 
                    "fmtf": {
                        "c_var": "offset", 
                        "f_var": "offset"
                    }, 
                    "fmtl": {
                        "LUA_index": 2, 
                        "c_var": "lua_tointeger(L, 2)", 
                        "c_var_len": "Loffset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset", 
                        "lua_var": "SH_Lua_offset", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "offset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset", 
                        "py_var": "SH_Py_offset"
                    }
                }, 
                "stride": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "stride", 
                        "cpp_type": "int", 
                        "cpp_var": "stride"
                    }, 
                    "fmtf": {
                        "c_var": "stride", 
                        "f_var": "stride"
                    }, 
                    "fmtl": {
                        "LUA_index": 3, 
                        "c_var": "lua_tointeger(L, 3)", 
                        "c_var_len": "Lstride", 
                        "cpp_type": "int", 
                        "cpp_var": "stride", 
                        "lua_var": "SH_Lua_stride", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "stride", 
                        "cpp_type": "int", 
                        "cpp_var": "stride", 
                        "py_var": "SH_Py_stride"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 18, 
            "_has_default_arg": true, 
            "_nargs": [
                1, 
                3
            ], 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "int overload1(int num, int offset = 0, int stride = 1)", 
            "default_arg_suffix": [
                "_num", 
                "_num_offset", 
                "_num_offset_stride"
            ], 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "type", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "num", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "overload1", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                18, 
                19
            ], 
            "_decl": "int overload1(double type +intent(in)+value, int num +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "int SHT_rv = overload1(type, num);", 
                "C_call_list": "type, num", 
                "C_name": "TUT_overload1_3", 
                "C_prototype": "double type, int num", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_overload1_3", 
                "F_C_name": "c_overload1_3", 
                "F_arg_c_call": "type, num", 
                "F_arg_c_call_tab": "\ttype\tnum", 
                "F_arguments": "type, num", 
                "F_call_code": "SHT_rv = c_overload1_3(\ttype\tnum)", 
                "F_name_function": "overload1_3", 
                "F_name_generic": "overload1", 
                "F_name_impl": "overload1_3", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": "_3"
            }, 
            "_fmtargs": {
                "num": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num"
                    }, 
                    "fmtf": {
                        "c_var": "num", 
                        "f_var": "num"
                    }
                }, 
                "type": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "type", 
                        "cpp_type": "double", 
                        "cpp_var": "type"
                    }, 
                    "fmtf": {
                        "c_var": "type", 
                        "f_var": "type"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 38, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "int overload1(double type, int num, int offset = 0, int stride = 1)", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "type", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "num", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "offset", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 0, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "overload1", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                18, 
                19
            ], 
            "_decl": "int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "int SHT_rv = overload1(type, num, offset);", 
                "C_call_list": "type, num, offset", 
                "C_name": "TUT_overload1_4", 
                "C_prototype": "double type, int num, int offset", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_overload1_4", 
                "F_C_name": "c_overload1_4", 
                "F_arg_c_call": "type, num, offset", 
                "F_arg_c_call_tab": "\ttype\tnum\toffset", 
                "F_arguments": "type, num, offset", 
                "F_call_code": "SHT_rv = c_overload1_4(\ttype\tnum\toffset)", 
                "F_name_function": "overload1_4", 
                "F_name_generic": "overload1", 
                "F_name_impl": "overload1_4", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "c_const": "", 
                "function_suffix": "_4"
            }, 
            "_fmtargs": {
                "num": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num"
                    }, 
                    "fmtf": {
                        "c_var": "num", 
                        "f_var": "num"
                    }
                }, 
                "offset": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "offset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset"
                    }, 
                    "fmtf": {
                        "c_var": "offset", 
                        "f_var": "offset"
                    }
                }, 
                "type": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "type", 
                        "cpp_type": "double", 
                        "cpp_var": "type"
                    }, 
                    "fmtf": {
                        "c_var": "type", 
                        "f_var": "type"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 39, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "int overload1(double type, int num, int offset = 0, int stride = 1)", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "type", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "double"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "num", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "offset", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 0, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }, 
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "stride", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "init": 1, 
                        "specifier": [
                            "int"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "overload1", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_cpp_overload": [
                18, 
                19
            ], 
            "_decl": "int overload1(double type +intent(in)+value, int num +intent(in)+value, int offset=0 +intent(in)+value, int stride=1 +intent(in)+value)", 
            "_default_funcs": [
                38, 
                39
            ], 
            "_fmt": {
                "C_call_code": "int SHT_rv = overload1(type, num, offset, stride);", 
                "C_call_list": "type, num, offset, stride", 
                "C_name": "TUT_overload1_5", 
                "C_prototype": "double type, int num, int offset, int stride", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_overload1_5", 
                "F_C_name": "c_overload1_5", 
                "F_arg_c_call": "type, num, offset, stride", 
                "F_arg_c_call_tab": "\ttype\tnum\toffset\tstride", 
                "F_arguments": "type, num, offset, stride", 
                "F_call_code": "SHT_rv = c_overload1_5(\ttype\tnum\toffset\tstride)", 
                "F_name_function": "overload1_5", 
                "F_name_generic": "overload1", 
                "F_name_impl": "overload1_5", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PY_overload1_5", 
                "c_const": "", 
                "function_name": "overload1", 
                "function_suffix": "_5", 
                "underscore_name": "overload1"
            }, 
            "_fmtargs": {
                "num": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num"
                    }, 
                    "fmtf": {
                        "c_var": "num", 
                        "f_var": "num"
                    }, 
                    "fmtl": {
                        "LUA_index": 2, 
                        "c_var": "lua_tointeger(L, 2)", 
                        "c_var_len": "Lnum", 
                        "cpp_type": "int", 
                        "cpp_var": "num", 
                        "lua_var": "SH_Lua_num", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "num", 
                        "cpp_type": "int", 
                        "cpp_var": "num", 
                        "py_var": "SH_Py_num"
                    }
                }, 
                "offset": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "offset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset"
                    }, 
                    "fmtf": {
                        "c_var": "offset", 
                        "f_var": "offset"
                    }, 
                    "fmtl": {
                        "LUA_index": 3, 
                        "c_var": "lua_tointeger(L, 3)", 
                        "c_var_len": "Loffset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset", 
                        "lua_var": "SH_Lua_offset", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "offset", 
                        "cpp_type": "int", 
                        "cpp_var": "offset", 
                        "py_var": "SH_Py_offset"
                    }
                }, 
                "stride": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "stride", 
                        "cpp_type": "int", 
                        "cpp_var": "stride"
                    }, 
                    "fmtf": {
                        "c_var": "stride", 
                        "f_var": "stride"
                    }, 
                    "fmtl": {
                        "LUA_index": 4, 
                        "c_var": "lua_tointeger(L, 4)", 
                        "c_var_len": "Lstride", 
                        "cpp_type": "int", 
                        "cpp_var": "stride", 
                        "lua_var": "SH_Lua_stride", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "stride", 
                        "cpp_type": "int", 
                        "cpp_var": "stride", 
                        "py_var": "SH_Py_stride"
                    }
                }, 
                "type": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "type", 
                        "cpp_type": "double", 
                        "cpp_var": "type"
                    }, 
                    "fmtf": {
                        "c_var": "type", 
                        "f_var": "type"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tonumber(L, 1)", 
                        "c_var_len": "Ltype", 
                        "cpp_type": "double", 
                        "cpp_var": "type", 
                        "lua_var": "SH_Lua_type", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "type", 
                        "cpp_type": "double", 
                        "cpp_var": "type", 
                        "py_var": "SH_Py_type"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 19, 
            "_has_default_arg": true, 
            "_nargs": [
                2, 
                4
            ], 
            "_overloaded": true, 
            "_subprogram": "function", 
            "decl": "int overload1(double type, int num, int offset = 0, int stride = 1)", 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "TypeID"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "typefunc", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "TypeID"
                ], 
                "storage": []
            }, 
            "_decl": "TypeID typefunc(TypeID arg +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "TypeID SHT_rv = typefunc(arg);", 
                "C_call_list": "arg", 
                "C_name": "TUT_typefunc", 
                "C_prototype": "int arg", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_typefunc", 
                "F_C_name": "typefunc", 
                "F_arg_c_call": "arg", 
                "F_arg_c_call_tab": "\targ", 
                "F_arguments": "arg", 
                "F_call_code": "SHT_rv = c_typefunc(\targ)", 
                "F_name_function": "typefunc", 
                "F_name_generic": "typefunc", 
                "F_name_impl": "typefunc", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "typefunc", 
                "LUA_name_impl": "l_typefunc", 
                "PY_name_impl": "PY_typefunc", 
                "c_const": "", 
                "function_name": "typefunc", 
                "underscore_name": "typefunc"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "TypeID", 
                        "cpp_var": "arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tointeger(L, 1)", 
                        "c_var_len": "Larg", 
                        "cpp_type": "TypeID", 
                        "cpp_var": "arg", 
                        "lua_var": "SH_Lua_arg", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "TypeID", 
                        "cpp_var": "arg", 
                        "py_var": "SH_Py_arg"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "TypeID SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 20, 
            "_subprogram": "function", 
            "decl": "TypeID typefunc(TypeID arg)", 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": []
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "EnumTypeID"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "enumfunc", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "EnumTypeID"
                ], 
                "storage": []
            }, 
            "_decl": "EnumTypeID enumfunc(EnumTypeID arg +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "EnumTypeID SHT_rv = enumfunc(static_cast<EnumTypeID>(arg));", 
                "C_call_list": "static_cast<EnumTypeID>(arg)", 
                "C_name": "TUT_enumfunc", 
                "C_prototype": "int arg", 
                "C_return_code": "return XSHT_rv;", 
                "C_return_type": "int", 
                "F_C_call": "c_enumfunc", 
                "F_C_name": "enumfunc", 
                "F_arg_c_call": "arg", 
                "F_arg_c_call_tab": "\targ", 
                "F_arguments": "arg", 
                "F_call_code": "SHT_rv = c_enumfunc(\targ)", 
                "F_name_function": "enumfunc", 
                "F_name_generic": "enumfunc", 
                "F_name_impl": "enumfunc", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "enumfunc", 
                "LUA_name_impl": "l_enumfunc", 
                "PY_name_impl": "PY_enumfunc", 
                "c_const": "", 
                "function_name": "enumfunc", 
                "underscore_name": "enumfunc"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "EnumTypeID", 
                        "cpp_var": "arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }, 
                    "fmtl": {
                        "LUA_index": 1, 
                        "c_var": "lua_tointeger(L, 1)", 
                        "c_var_len": "Larg", 
                        "cpp_type": "EnumTypeID", 
                        "cpp_var": "arg", 
                        "lua_var": "SH_Lua_arg", 
                        "ptr": ""
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "cpp_type": "EnumTypeID", 
                        "cpp_var": "arg", 
                        "py_var": "SH_Py_arg"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "c_rv_decl": "int XSHT_rv", 
                    "c_val": "static_cast<int>(SHT_rv)", 
                    "c_var": "XSHT_rv", 
                    "cpp_rv_decl": "EnumTypeID SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 21, 
            "_subprogram": "function", 
            "decl": "EnumTypeID enumfunc(EnumTypeID arg)", 
            "options": {}
        }, 
        {
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "intent": "in", 
                            "value": true
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg1", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "*"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "Class1"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "useclass", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void useclass(const Class1 * arg1 +intent(in)+value)", 
            "_fmt": {
                "C_call_code": "useclass(static_cast<const Class1 *>(static_cast<const void *>(arg1)));", 
                "C_call_list": "static_cast<const Class1 *>(static_cast<const void *>(arg1))", 
                "C_name": "TUT_useclass", 
                "C_prototype": "const TUT_class1 * arg1", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_useclass", 
                "F_C_name": "c_useclass", 
                "F_arg_c_call": "arg1%get_instance()", 
                "F_arg_c_call_tab": "\targ1%get_instance()", 
                "F_arguments": "arg1", 
                "F_call_code": "call c_useclass(\targ1%get_instance())", 
                "F_name_function": "useclass", 
                "F_name_generic": "useclass", 
                "F_name_impl": "useclass", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_useclass", 
                "c_const": "", 
                "function_name": "useclass", 
                "underscore_name": "useclass"
            }, 
            "_fmtargs": {
                "arg1": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "arg1", 
                        "cpp_type": "Class1", 
                        "cpp_var": "arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "arg1", 
                        "cpp_type": "Class1", 
                        "cpp_var": "arg1", 
                        "py_var": "SH_Py_arg1"
                    }
                }
            }, 
            "_function_index": 22, 
            "_subprogram": "subroutine", 
            "decl": "void useclass(const Class1 *arg1)", 
            "options": {
                "wrap_lua": false
            }
        }, 
        {
            "_PTR_F_C_index": 45, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "in", 
                            "template": "int", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_sum", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_decl": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in))", 
            "_fmt": {
                "F_C_call": "c_vector_sum_bufferify", 
                "F_arg_c_call": "arg, size(arg, kind=C_LONG)", 
                "F_arg_c_call_tab": "\targ\tsize(arg, kind=C_LONG)", 
                "F_arguments": "arg", 
                "F_call_code": "SHT_rv = c_vector_sum_bufferify(\targ\tsize(arg, kind=C_LONG))", 
                "F_name_function": "vector_sum", 
                "F_name_generic": "vector_sum", 
                "F_name_impl": "vector_sum", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "function_name": "vector_sum", 
                "underscore_name": "vector_sum"
            }, 
            "_function_index": 23, 
            "_subprogram": "function", 
            "decl": "int vector_sum(const std::vector<int> &arg)", 
            "options": {
                "wrap_c": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 23, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "in", 
                            "size": "Sarg", 
                            "template": "int", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_sum", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_decl": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in)+size(Sarg))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "int SHT_rv = vector_sum(SH_arg);", 
                "C_call_list": "SH_arg", 
                "C_name": "TUT_vector_sum_bufferify", 
                "C_pre_call": "const std::vector<int> SH_arg(arg, arg + Sarg);", 
                "C_prototype": "const int * arg, long Sarg", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_name": "c_vector_sum_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "c_var_size": "Sarg", 
                        "cpp_T": "int", 
                        "cpp_type": "int", 
                        "cpp_var": "SH_arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 45, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "function", 
            "decl": "int vector_sum(const std::vector<int> &arg)", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_F_C_index": 46, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "out", 
                            "template": "int", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_iota", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_iota(std::vector<int> & arg +dimension(:)+intent(out))", 
            "_fmt": {
                "F_C_call": "c_vector_iota_bufferify", 
                "F_arg_c_call": "arg, size(arg, kind=C_LONG)", 
                "F_arg_c_call_tab": "\targ\tsize(arg, kind=C_LONG)", 
                "F_arguments": "arg", 
                "F_call_code": "call c_vector_iota_bufferify(\targ\tsize(arg, kind=C_LONG))", 
                "F_name_function": "vector_iota", 
                "F_name_generic": "vector_iota", 
                "F_name_impl": "vector_iota", 
                "F_subprogram": "subroutine", 
                "function_name": "vector_iota", 
                "underscore_name": "vector_iota"
            }, 
            "_function_index": 24, 
            "_subprogram": "subroutine", 
            "decl": "void vector_iota(std::vector<int> &arg+intent(out))", 
            "options": {
                "wrap_c": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 24, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "out", 
                            "size": "Sarg", 
                            "template": "int", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_iota", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_iota(std::vector<int> & arg +dimension(:)+intent(out)+size(Sarg))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "vector_iota(SH_arg);", 
                "C_call_list": "SH_arg", 
                "C_name": "TUT_vector_iota_bufferify", 
                "C_post_call": "{\n  std::vector<int>::size_type\n    SHT_i = 0,\n    SHT_n = Sarg;\n  SHT_n = std::min(SH_arg.size(), SHT_n);\n  for(; SHT_i < SHT_n; SHT_i++) {\n    arg[SHT_i] = SH_arg[SHT_i];\n  }\n}", 
                "C_pre_call": "std::vector<int> SH_arg(Sarg);", 
                "C_prototype": "int * arg, long Sarg", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_vector_iota_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "c_var_size": "Sarg", 
                        "cpp_T": "int", 
                        "cpp_type": "int", 
                        "cpp_val": "SH_arg", 
                        "cpp_var": "SH_arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_function_index": 46, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "void vector_iota(std::vector<int> &arg+intent(out))", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_F_C_index": 47, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "inout", 
                            "template": "int", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_increment", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_increment(std::vector<int> & arg +dimension(:)+intent(inout))", 
            "_fmt": {
                "F_C_call": "c_vector_increment_bufferify", 
                "F_arg_c_call": "arg, size(arg, kind=C_LONG)", 
                "F_arg_c_call_tab": "\targ\tsize(arg, kind=C_LONG)", 
                "F_arguments": "arg", 
                "F_call_code": "call c_vector_increment_bufferify(\targ\tsize(arg, kind=C_LONG))", 
                "F_name_function": "vector_increment", 
                "F_name_generic": "vector_increment", 
                "F_name_impl": "vector_increment", 
                "F_subprogram": "subroutine", 
                "function_name": "vector_increment", 
                "underscore_name": "vector_increment"
            }, 
            "_function_index": 25, 
            "_subprogram": "subroutine", 
            "decl": "void vector_increment(std::vector<int> &arg)", 
            "options": {
                "wrap_c": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 25, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "inout", 
                            "size": "Sarg", 
                            "template": "int", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_increment", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_increment(std::vector<int> & arg +dimension(:)+intent(inout)+size(Sarg))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "vector_increment(SH_arg);", 
                "C_call_list": "SH_arg", 
                "C_name": "TUT_vector_increment_bufferify", 
                "C_post_call": "{\n  std::vector<int>::size_type\n    SHT_i = 0,\n    SHT_n = Sarg;\n  SHT_n = std::min(SH_arg.size(), SHT_n);\n  for(; SHT_i < SHT_n; SHT_i++) {\n      arg[SHT_i] = SH_arg[SHT_i];\n  }\n}", 
                "C_pre_call": "std::vector<int> SH_arg(arg, arg + Sarg);", 
                "C_prototype": "int * arg, long Sarg", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_vector_increment_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "c_var_size": "Sarg", 
                        "cpp_T": "int", 
                        "cpp_type": "int", 
                        "cpp_val": "SH_arg", 
                        "cpp_var": "SH_arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_function_index": 47, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "void vector_increment(std::vector<int> &arg)", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_F_C_index": 48, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "in", 
                            "template": "std::string", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_string_count", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_decl": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in))", 
            "_fmt": {
                "F_C_call": "c_vector_string_count_bufferify", 
                "F_arg_c_call": "arg, size(arg, kind=C_LONG), len(arg, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ\tsize(arg, kind=C_LONG)\tlen(arg, kind=C_INT)", 
                "F_arguments": "arg", 
                "F_call_code": "SHT_rv = c_vector_string_count_bufferify(\targ\tsize(arg, kind=C_LONG)\tlen(arg, kind=C_INT))", 
                "F_name_function": "vector_string_count", 
                "F_name_generic": "vector_string_count", 
                "F_name_impl": "vector_string_count", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "function_name": "vector_string_count", 
                "underscore_name": "vector_string_count"
            }, 
            "_function_index": 26, 
            "_subprogram": "function", 
            "decl": "int vector_string_count(const std::vector< std::string > &arg)", 
            "doxygen": {
                "brief": "count number of underscore in vector of strings", 
                "decription": "The input will be copied in order to create the C++ argument\n"
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 26, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "in", 
                            "len": "Narg", 
                            "size": "Sarg", 
                            "template": "std::string", 
                            "value": false
                        }, 
                        "const": true, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_string_count", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "int"
                ], 
                "storage": []
            }, 
            "_decl": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in)+len(Narg)+size(Sarg))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "int SHT_rv = vector_string_count(SH_arg);", 
                "C_call_list": "SH_arg", 
                "C_name": "TUT_vector_string_count_bufferify", 
                "C_pre_call": "std::vector<std::string> SH_arg;\n{\n  const char * BBB = arg;\n  std::vector<std::string>::size_type\n    SHT_i = 0,\n    SHT_n = Sarg;\n  for(; SHT_i < SHT_n; SHT_i++) {\n    SH_arg.push_back(std::string(BBB,ShroudLenTrim(BBB, Narg)));\n    BBB += Narg;\n  }\n}", 
                "C_prototype": "const char * arg, long Sarg, int Narg", 
                "C_return_code": "return SHT_rv;", 
                "C_return_type": "int", 
                "F_C_name": "c_vector_string_count_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "c_var_len": "Narg", 
                        "c_var_size": "Sarg", 
                        "cpp_T": "std::string", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "int SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 48, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "function", 
            "decl": "int vector_string_count(const std::vector< std::string > &arg)", 
            "doxygen": {
                "brief": "count number of underscore in vector of strings", 
                "decription": "The input will be copied in order to create the C++ argument\n"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "C_return_code": "return SH_arg.size();", 
            "C_return_type": "int", 
            "_PTR_F_C_index": 49, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "out", 
                            "template": "std::string", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_string_fill", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_string_fill(std::vector<std::string> & arg +dimension(:)+intent(out))", 
            "_fmt": {
                "F_C_call": "c_vector_string_fill_bufferify", 
                "F_arg_c_call": "arg, size(arg, kind=C_LONG), len(arg, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ\tsize(arg, kind=C_LONG)\tlen(arg, kind=C_INT)", 
                "F_arguments": "arg", 
                "F_call_code": "SHT_rv = c_vector_string_fill_bufferify(\targ\tsize(arg, kind=C_LONG)\tlen(arg, kind=C_INT))", 
                "F_name_function": "vector_string_fill", 
                "F_name_generic": "vector_string_fill", 
                "F_name_impl": "vector_string_fill", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "function_name": "vector_string_fill", 
                "underscore_name": "vector_string_fill"
            }, 
            "_function_index": 27, 
            "_subprogram": "subroutine", 
            "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))", 
            "doxygen": {
                "brief": "Fill in arg with some animal names", 
                "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "C_return_code": "return SH_arg.size();", 
            "C_return_type": "int", 
            "_PTR_C_CPP_index": 27, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "out", 
                            "len": "Narg", 
                            "size": "Sarg", 
                            "template": "std::string", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_string_fill", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_string_fill(std::vector<std::string> & arg +dimension(:)+intent(out)+len(Narg)+size(Sarg))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "vector_string_fill(SH_arg);", 
                "C_call_list": "SH_arg", 
                "C_name": "TUT_vector_string_fill_bufferify", 
                "C_post_call": "{\n  char * BBB = arg;\n  std::vector<std::string>::size_type\n    SHT_i = 0,\n    SHT_n = Sarg;\n  SHT_n = std::min(SH_arg.size(),SHT_n);\n  for(; SHT_i < SHT_n; SHT_i++) {\n    ShroudStrCopy(BBB, Narg, SH_arg[SHT_i].c_str());\n    BBB += Narg;\n  }\n}", 
                "C_pre_call": "std::vector<std::string> SH_arg;", 
                "C_prototype": "char * arg, long Sarg, int Narg", 
                "C_return_code": "return SH_arg.size();", 
                "C_return_type": "int", 
                "F_C_name": "c_vector_string_fill_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "c_var_len": "Narg", 
                        "c_var_size": "Sarg", 
                        "cpp_T": "std::string", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_arg.c_str()", 
                        "cpp_var": "SH_arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_function_index": 49, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))", 
            "doxygen": {
                "brief": "Fill in arg with some animal names", 
                "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_F_C_index": 50, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "inout", 
                            "template": "std::string", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_string_append", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_string_append(std::vector<std::string> & arg +dimension(:)+intent(inout))", 
            "_fmt": {
                "F_C_call": "c_vector_string_append_bufferify", 
                "F_arg_c_call": "arg, size(arg, kind=C_LONG), len(arg, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ\tsize(arg, kind=C_LONG)\tlen(arg, kind=C_INT)", 
                "F_arguments": "arg", 
                "F_call_code": "call c_vector_string_append_bufferify(\targ\tsize(arg, kind=C_LONG)\tlen(arg, kind=C_INT))", 
                "F_name_function": "vector_string_append", 
                "F_name_generic": "vector_string_append", 
                "F_name_impl": "vector_string_append", 
                "F_subprogram": "subroutine", 
                "function_name": "vector_string_append", 
                "underscore_name": "vector_string_append"
            }, 
            "_function_index": 28, 
            "_subprogram": "subroutine", 
            "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))", 
            "doxygen": {
                "brief": "append '-like' to names."
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_PTR_C_CPP_index": 28, 
            "_ast": {
                "args": [
                    {
                        "attrs": {
                            "dimension": "(:)", 
                            "intent": "inout", 
                            "len": "Narg", 
                            "size": "Sarg", 
                            "template": "std::string", 
                            "value": false
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "arg", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::vector"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "vector_string_append", 
                    "pointer": []
                }, 
                "fattrs": {}, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void vector_string_append(std::vector<std::string> & arg +dimension(:)+intent(inout)+len(Narg)+size(Sarg))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "vector_string_append(SH_arg);", 
                "C_call_list": "SH_arg", 
                "C_name": "TUT_vector_string_append_bufferify", 
                "C_post_call": "{\n  char * BBB = arg;\n  std::vector<std::string>::size_type\n    SHT_i = 0,\n    SHT_n = Sarg;\n  SHT_n = std::min(SH_arg.size(),SHT_n);\n  for(; SHT_i < SHT_n; SHT_i++) {\n    ShroudStrCopy(BBB, Narg, SH_arg[SHT_i].c_str());\n    BBB += Narg;\n  }\n}", 
                "C_pre_call": "std::vector<std::string> SH_arg;\n{\n  char * BBB = arg;\n  std::vector<std::string>::size_type\n    SHT_i = 0,\n    SHT_n = Sarg;\n  for(; SHT_i < SHT_n; SHT_i++) {\n    SH_arg.push_back(std::string(BBB,ShroudLenTrim(BBB, Narg)));\n    BBB += Narg;\n  }\n}", 
                "C_prototype": "char * arg, long Sarg, int Narg", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_vector_string_append_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "arg": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg", 
                        "c_var_len": "Narg", 
                        "c_var_size": "Sarg", 
                        "cpp_T": "std::string", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_arg.c_str()", 
                        "cpp_var": "SH_arg"
                    }, 
                    "fmtf": {
                        "c_var": "arg", 
                        "f_var": "arg"
                    }
                }
            }, 
            "_function_index": 50, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))", 
            "doxygen": {
                "brief": "append '-like' to names."
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }, 
        {
            "_ast": {
                "args": [], 
                "attrs": {}, 
                "const": true, 
                "declarator": {
                    "name": "LastFunctionCalled", 
                    "pointer": [
                        {
                            "const": false, 
                            "ptr": "&"
                        }
                    ]
                }, 
                "fattrs": {
                    "pure": true
                }, 
                "func_const": false, 
                "specifier": [
                    "std::string"
                ], 
                "storage": []
            }, 
            "_decl": "const std::string & LastFunctionCalled() +pure", 
            "_fmt": {
                "C_call_code": "const std::string & SHT_rv = LastFunctionCalled();", 
                "C_call_list": "", 
                "C_name": "TUT_last_function_called", 
                "C_prototype": "", 
                "C_return_code": "return XSHT_rv;", 
                "C_return_type": "const char *", 
                "F_C_call": "c_last_function_called", 
                "F_C_name": "c_last_function_called", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "SHT_rv = fstr_ptr(c_last_function_called(\t))", 
                "F_name_function": "last_function_called", 
                "F_name_generic": "last_function_called", 
                "F_name_impl": "last_function_called", 
                "F_result_clause": " result(SHT_rv)", 
                "F_subprogram": "function", 
                "LUA_name": "LastFunctionCalled", 
                "LUA_name_impl": "l_last_function_called", 
                "PY_name_impl": "PY_last_function_called", 
                "c_const": "const ", 
                "c_var_len": "strlen_ptr(c_last_function_called(\t))", 
                "function_name": "LastFunctionCalled", 
                "underscore_name": "last_function_called"
            }, 
            "_fmtargs": {}, 
            "_fmtresult": {
                "fmtc": {
                    "c_rv_decl": "const char * XSHT_rv", 
                    "c_val": "SHT_rv.c_str()", 
                    "c_var": "XSHT_rv", 
                    "cpp_rv_decl": "const std::string & SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 29, 
            "_subprogram": "function", 
            "decl": "const std::string& LastFunctionCalled() +pure", 
            "options": {}
        }, 
        {
            "_PTR_C_CPP_index": 29, 
            "_ast": {
                "args": [
                    {
                        "args": [], 
                        "attrs": {
                            "_is_result": true, 
                            "intent": "out", 
                            "len": "NSHF_rv"
                        }, 
                        "const": false, 
                        "declarator": {
                            "name": "SHF_rv", 
                            "pointer": [
                                {
                                    "const": false, 
                                    "ptr": "&"
                                }
                            ]
                        }, 
                        "fattrs": {
                            "pure": true
                        }, 
                        "func_const": false, 
                        "specifier": [
                            "std::string"
                        ], 
                        "storage": []
                    }
                ], 
                "attrs": {}, 
                "const": false, 
                "declarator": {
                    "name": "LastFunctionCalled", 
                    "pointer": []
                }, 
                "fattrs": {
                    "pure": true
                }, 
                "func_const": false, 
                "specifier": [
                    "void"
                ], 
                "storage": []
            }, 
            "_decl": "void LastFunctionCalled(std::string & SHF_rv +intent(out)+len(NSHF_rv)) +pure", 
            "_error_pattern_suffix": "_as_buffer", 
            "_fmt": {
                "C_call_code": "const std::string & SHT_rv = LastFunctionCalled();", 
                "C_call_list": "", 
                "C_name": "TUT_last_function_called_bufferify", 
                "C_post_call": "if (SHT_rv.empty()) {\n  std::memset(SHF_rv, ' ', NSHF_rv);\n} else {\n  ShroudStrCopy(SHF_rv, NSHF_rv, SHT_rv.c_str());\n}", 
                "C_prototype": "char * SHF_rv, int NSHF_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_last_function_called_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "_fmtargs": {
                "SHF_rv": {
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "SHF_rv", 
                        "c_var_len": "NSHF_rv", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SHT_rv.c_str()", 
                        "cpp_var": "SHT_rv"
                    }
                }
            }, 
            "_fmtresult": {
                "fmtc": {
                    "cpp_rv_decl": "const std::string & SHT_rv", 
                    "cpp_var": "SHT_rv"
                }
            }, 
            "_function_index": 51, 
            "_generated": "arg_to_buffer", 
            "_subprogram": "subroutine", 
            "decl": "const std::string& LastFunctionCalled() +pure", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }
        }
    ], 
    "language": "c++", 
    "library": "Tutorial", 
    "namespace": "tutorial", 
    "options": {
        "C_bufferify_suffix": "_bufferify", 
        "C_header_filename_class_template": "wrap{cpp_class}.{C_header_filename_suffix}", 
        "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
        "C_impl_filename_class_template": "wrap{cpp_class}.{C_impl_filename_suffix}", 
        "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
        "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "C_var_len_template": "N{c_var}", 
        "C_var_size_template": "S{c_var}", 
        "C_var_trim_template": "L{c_var}", 
        "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "F_C_prefix": "c_", 
        "F_force_wrapper": false, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.{F_filename_suffix}", 
        "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
        "F_module_name_class_template": "{class_lower}_mod", 
        "F_module_name_library_template": "{library_lower}_mod", 
        "F_module_per_class": false, 
        "F_name_associated": "associated", 
        "F_name_function_template": "{underscore_name}{function_suffix}", 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
        "F_name_instance_get": "get_instance", 
        "F_name_instance_set": "set_instance", 
        "F_string_len_trim": true, 
        "LUA_class_reg_template": "{LUA_prefix}{cpp_class}_Reg", 
        "LUA_ctor_name_template": "{cpp_class}", 
        "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
        "LUA_metadata_template": "{cpp_class}.metatable", 
        "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
        "LUA_module_name_template": "{library_lower}", 
        "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
        "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
        "LUA_name_template": "{function_name}", 
        "LUA_userdata_member_template": "self", 
        "LUA_userdata_type_template": "{LUA_prefix}{cpp_class}_Type", 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
        "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
        "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
        "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "PY_type_filename_template": "py{cpp_class}type.{PY_impl_filename_suffix}", 
        "YAML_type_filename_template": "{library_lower}_types.yaml", 
        "class_prefix_template": "{class_lower}_", 
        "debug": true, 
        "doxygen": true, 
        "show_splicer_comments": true, 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_lua": true, 
        "wrap_python": true
    }, 
    "patterns": [], 
    "splicer": {
        "f": [
            "ftutorialsplicer.f"
        ]
    }, 
    "type_aliases": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float", 
        "std::string": "string", 
        "std::vector": "vector"
    }, 
    "types": {
        "Class1": {
            "LUA_pop": "({LUA_userdata_type} *)luaL_checkudata({LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PY_Class1", 
            "PY_PyTypeObject": "PY_Class1_Type", 
            "PY_from_object": "PP_Class1_from_Object", 
            "PY_to_object": "PP_Class1_to_Object", 
            "base": "wrapped", 
            "c_to_cpp": "static_cast<{c_const}Class1{c_ptr}>(static_cast<{c_const}void *>({c_var}))", 
            "c_type": "TUT_class1", 
            "cpp_to_c": "static_cast<{c_const}TUT_class1 *>(static_cast<{c_const}void *>({cpp_var}))", 
            "cpp_type": "Class1", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "class1", 
            "f_module": {
                "tutorial_mod": [
                    "class1"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call_tab})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(class1)", 
            "forward": "Class1", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = {py_var} ? {py_var}->{BBB} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{BBB} = {cpp_var};"
                    ]
                }
            }
        }, 
        "EnumTypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_to_cpp": "static_cast<EnumTypeID>({c_var})", 
            "c_type": "int", 
            "cpp_to_c": "static_cast<int>({cpp_var})", 
            "cpp_type": "EnumTypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cpp": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cpp_to_c": "MPI_Comm_c2f({cpp_var})", 
            "cpp_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "TypeID": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "TypeID", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)", 
            "typedef": "int"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({c_var})", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = PyObject_IsTrue({py_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cpp_header": "<stdlib.h> <cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<stdlib.h> <cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<stdlib.h>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "free({cpp_var});"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "if ({cpp_var} == NULL) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cpp_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cpp_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cpp_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cpp_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "      {c_var}[{c_temp}i] = {cpp_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cpp_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cpp_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cpp_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "    {c_var}[{c_temp}i] = {cpp_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cpp_local_var": true, 
                        "pre_call": [
                            "std::vector<{cpp_T}> {cpp_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cpp_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cpp_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cpp_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cpp_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cpp_T}> {cpp_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cpp_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cpp_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cpp_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cpp_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cpp_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cpp_T}> {cpp_var};"
                        ]
                    }
                }
            }, 
            "cpp_header": "<vector>", 
            "cpp_type": "std::vector<{cpp_T}>"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cpp_var}, NULL, NULL)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}