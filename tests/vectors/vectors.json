{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.", 
    "library": {
        "copyright": [
            "#######################################################################", 
            "Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.", 
            "Produced at the Lawrence Livermore National Laboratory", 
            "", 
            "LLNL-CODE-738041.", 
            "All rights reserved.", 
            "", 
            "This file is part of Shroud.  For details, see", 
            "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
            "", 
            "Redistribution and use in source and binary forms, with or without", 
            "modification, are permitted provided that the following conditions are", 
            "met:", 
            "", 
            "* Redistributions of source code must retain the above copyright", 
            "  notice, this list of conditions and the disclaimer below.", 
            "", 
            "* Redistributions in binary form must reproduce the above copyright", 
            "  notice, this list of conditions and the disclaimer (as noted below)", 
            "  in the documentation and/or other materials provided with the", 
            "  distribution.", 
            "", 
            "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
            "  may be used to endorse or promote products derived from this", 
            "  software without specific prior written permission.", 
            "", 
            "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
            "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
            "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
            "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
            "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
            "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
            "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
            "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
            "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
            "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
            "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
            "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "", 
            "#######################################################################"
        ], 
        "cxx_header": "vectors.hpp", 
        "format": {
            "CXX_local": "SHCXX_", 
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "", 
            "C_argument": "SH_", 
            "C_bufferify_suffix": "_bufferify", 
            "C_capsule_data_type": "SHROUD_capsule_data", 
            "C_custom_return_type": "", 
            "C_header_filename": "wrapvectors.h", 
            "C_header_filename_suffix": "h", 
            "C_impl_filename": "wrapvectors.cpp", 
            "C_impl_filename_suffix": "cpp", 
            "C_local": "SHC_", 
            "C_memory_dtor_function": "VEC_SHROUD_array_destructor_function", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "VEC_", 
            "C_result": "rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_capsule_data_type": "SHROUD_capsule_data", 
            "F_capsule_final_function": "SHROUD_capsule_final", 
            "F_capsule_type": "SHROUD_capsule", 
            "F_derived_member": "voidptr", 
            "F_filename_suffix": "f", 
            "F_impl_filename": "wrapfvectors.f", 
            "F_module_name": "vectors_mod", 
            "F_name_associated": "associated", 
            "F_name_instance_get": "get_instance", 
            "F_name_instance_set": "set_instance", 
            "F_pointer": "SHT_ptr", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename_suffix": "hpp", 
            "LUA_impl_filename_suffix": "cpp", 
            "LUA_prefix": "l_", 
            "LUA_result": "rv", 
            "LUA_state_var": "L", 
            "LUA_this_call": "", 
            "PY_module_name": "vectors", 
            "PY_numpy_array_capsule_name": "PY_array_dtor", 
            "PY_numpy_array_dtor_context": "PY_array_destructor_context", 
            "PY_numpy_array_dtor_function": "PY_array_destructor_function", 
            "PY_prefix": "PY_", 
            "PY_result": "SHTPy_rv", 
            "PY_this_call": "", 
            "YAML_type_filename": "vectors_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "class_scope": "", 
            "cxx_class": "", 
            "function_suffix": "", 
            "library": "vectors", 
            "library_lower": "vectors", 
            "library_upper": "VECTORS", 
            "namespace_scope": "", 
            "stdlib": "std::"
        }, 
        "functions": [
            {
                "_PTR_F_C_index": 6, 
                "_function_index": 0, 
                "ast": {
                    "attrs": {
                        "_typename": "int"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_sum", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "dimension": ":", 
                                "intent": "in", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_sum(const std::vector<int> &arg)", 
                "declgen": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in))", 
                "format": {
                    "F_C_call": "c_vector_sum_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG)", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_vector_sum_bufferify(arg,\t size(arg, kind=C_LONG))", 
                    "F_name_function": "vector_sum", 
                    "F_name_generic": "vector_sum", 
                    "F_name_impl": "vector_sum", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "function_name": "vector_sum", 
                    "underscore_name": "vector_sum"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_context_type": "SHROUD_vector_context", 
                            "c_deref": "", 
                            "c_var": "arg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "int", 
                            "cxx_member": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "SH_arg", 
                            "f_context_type": "SHROUD_vector_context"
                        }, 
                        "fmtf": {
                            "c_context_type": "SHROUD_vector_context", 
                            "c_var": "arg", 
                            "cxx_T": "int", 
                            "f_context_type": "SHROUD_vector_context", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_member": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 6, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "int"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_sum", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "dimension": ":", 
                                "intent": "in", 
                                "size": "Sarg", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_sum(const std::vector<int> &arg)", 
                "declgen": "int vector_sum(const std::vector<int> & arg +dimension(:)+intent(in)+size(Sarg))", 
                "format": {
                    "C_call_code": "int SHC_rv =\t vector_sum(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_name": "VEC_vector_sum_bufferify", 
                    "C_pre_call": "const std::vector<int> SH_arg(arg, arg + Sarg);", 
                    "C_prototype": "const int * arg,\t long Sarg", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_name": "c_vector_sum_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "vector_sum", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_sum"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 7, 
                "_function_index": 1, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_iota", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "dimension": ":", 
                                "intent": "out", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_iota(std::vector<int> &arg+intent(out))", 
                "declgen": "void vector_iota(std::vector<int> & arg +dimension(:)+intent(out))", 
                "format": {
                    "F_C_call": "c_vector_iota_bufferify", 
                    "F_arg_c_call": "Carg%mem,\t Darg", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_vector_iota_bufferify(Carg%mem,\t Darg)", 
                    "F_name_function": "vector_iota", 
                    "F_name_generic": "vector_iota", 
                    "F_name_impl": "vector_iota", 
                    "F_subprogram": "subroutine", 
                    "function_name": "vector_iota", 
                    "underscore_name": "vector_iota"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 1, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_context_type": "SHROUD_vector_context", 
                            "c_deref": "", 
                            "c_var": "arg", 
                            "c_var_capsule": "Carg", 
                            "c_var_context": "Darg", 
                            "cxx_T": "int", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "SH_arg", 
                            "f_context_type": "SHROUD_vector_context", 
                            "idtor": "1"
                        }, 
                        "fmtf": {
                            "c_context_type": "SHROUD_vector_context", 
                            "c_var": "arg", 
                            "c_var_capsule": "Carg", 
                            "c_var_context": "Darg", 
                            "cxx_T": "int", 
                            "f_context_type": "SHROUD_vector_context", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 7, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_iota", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "capsule": "Carg", 
                                "context": "Darg", 
                                "dimension": ":", 
                                "intent": "out", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_iota(std::vector<int> &arg+intent(out))", 
                "declgen": "void vector_iota(std::vector<int> & arg +capsule(Carg)+context(Darg)+dimension(:)+intent(out))", 
                "format": {
                    "C_call_code": "vector_iota(\t*SH_arg);", 
                    "C_call_list": "*SH_arg", 
                    "C_name": "VEC_vector_iota_bufferify", 
                    "C_post_call": "Darg->addr = SH_arg->empty() ? NULL : &SH_arg->front();\nDarg->size = SH_arg->size();", 
                    "C_pre_call": "std::vector<int>\t *SH_arg = new std::vector<int>;\nCarg->addr = static_cast<void *>(SH_arg);\nCarg->idtor = 1;  // index of destructor", 
                    "C_prototype": "SHROUD_capsule_data *Carg,\t SHROUD_vector_context *Darg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_vector_iota_bufferify", 
                    "c_const": "", 
                    "function_name": "vector_iota", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_iota"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 8, 
                "_function_index": 2, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_increment", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "dimension": ":", 
                                "intent": "inout", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_increment(std::vector<int> &arg)", 
                "declgen": "void vector_increment(std::vector<int> & arg +dimension(:)+intent(inout))", 
                "format": {
                    "F_C_call": "c_vector_increment_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG),\t Carg%mem,\t Darg", 
                    "F_arguments": "arg", 
                    "F_call_code": "call c_vector_increment_bufferify(arg,\t size(arg, kind=C_LONG),\t Carg%mem,\t Darg)", 
                    "F_name_function": "vector_increment", 
                    "F_name_generic": "vector_increment", 
                    "F_name_impl": "vector_increment", 
                    "F_subprogram": "subroutine", 
                    "function_name": "vector_increment", 
                    "underscore_name": "vector_increment"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 2, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "", 
                            "c_context_type": "SHROUD_vector_context", 
                            "c_deref": "", 
                            "c_var": "arg", 
                            "c_var_capsule": "Carg", 
                            "c_var_context": "Darg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "int", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "SH_arg", 
                            "f_context_type": "SHROUD_vector_context"
                        }, 
                        "fmtf": {
                            "c_context_type": "SHROUD_vector_context", 
                            "c_var": "arg", 
                            "c_var_capsule": "Carg", 
                            "c_var_context": "Darg", 
                            "cxx_T": "int", 
                            "f_context_type": "SHROUD_vector_context", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_function_index": 8, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_increment", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "capsule": "Carg", 
                                "context": "Darg", 
                                "dimension": ":", 
                                "intent": "inout", 
                                "size": "Sarg", 
                                "template": "int", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_increment(std::vector<int> &arg)", 
                "declgen": "void vector_increment(std::vector<int> & arg +capsule(Carg)+context(Darg)+dimension(:)+intent(inout)+size(Sarg))", 
                "format": {
                    "C_call_code": "vector_increment(\t*SH_arg);", 
                    "C_call_list": "*SH_arg", 
                    "C_name": "VEC_vector_increment_bufferify", 
                    "C_post_call": "Darg->addr = SH_arg->empty() ? NULL : &SH_arg->front();\nDarg->size = SH_arg->size();", 
                    "C_pre_call": "std::vector<int> *SH_arg = \tnew std::vector<int>\t(\targ, arg + Sarg);\nCarg->addr = static_cast<void *>(SH_arg);\nCarg->idtor = 0;  // index of destructor", 
                    "C_prototype": "int * arg,\t long Sarg,\t SHROUD_capsule_data *Carg,\t SHROUD_vector_context *Darg", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_name": "c_vector_increment_bufferify", 
                    "c_const": "", 
                    "function_name": "vector_increment", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_increment"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_F_C_index": 9, 
                "_function_index": 3, 
                "ast": {
                    "attrs": {
                        "_typename": "int"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_count", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "dimension": ":", 
                                "intent": "in", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_string_count(const std::vector< std::string > &arg)", 
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in))", 
                "doxygen": {
                    "brief": "count number of underscore in vector of strings", 
                    "decription": "The input will be copied in order to create the C++ argument\n"
                }, 
                "format": {
                    "F_C_call": "c_vector_string_count_bufferify", 
                    "F_arg_c_call": "arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT)", 
                    "F_arguments": "arg", 
                    "F_call_code": "SHT_rv = c_vector_string_count_bufferify(arg,\t size(arg, kind=C_LONG),\t len(arg, kind=C_INT))", 
                    "F_name_function": "vector_string_count", 
                    "F_name_generic": "vector_string_count", 
                    "F_name_impl": "vector_string_count", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "function_name": "vector_string_count", 
                    "underscore_name": "vector_string_count"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_PTR_C_CXX_index": 3, 
                "_fmtargs": {
                    "arg": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_context_type": "SHROUD_vector_context", 
                            "c_deref": "", 
                            "c_var": "arg", 
                            "c_var_len": "Narg", 
                            "c_var_size": "Sarg", 
                            "cxx_T": "std::string", 
                            "cxx_member": ".", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_arg", 
                            "f_context_type": "SHROUD_vector_context"
                        }, 
                        "fmtf": {
                            "c_context_type": "SHROUD_vector_context", 
                            "c_var": "arg", 
                            "cxx_T": "std::string", 
                            "f_context_type": "SHROUD_vector_context", 
                            "f_var": "arg"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "&", 
                        "cxx_member": ".", 
                        "cxx_var": "SHC_rv"
                    }
                }, 
                "_function_index": 9, 
                "_generated": "arg_to_buffer", 
                "ast": {
                    "attrs": {
                        "_typename": "int"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_count", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "dimension": ":", 
                                "intent": "in", 
                                "len": "Narg", 
                                "size": "Sarg", 
                                "template": "std::string", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int vector_string_count(const std::vector< std::string > &arg)", 
                "declgen": "int vector_string_count(const std::vector<std::string> & arg +dimension(:)+intent(in)+len(Narg)+size(Sarg))", 
                "doxygen": {
                    "brief": "count number of underscore in vector of strings", 
                    "decription": "The input will be copied in order to create the C++ argument\n"
                }, 
                "format": {
                    "C_call_code": "int SHC_rv =\t vector_string_count(\tSH_arg);", 
                    "C_call_list": "SH_arg", 
                    "C_name": "VEC_vector_string_count_bufferify", 
                    "C_pre_call": "std::vector<std::string> SH_arg;\n{\n      const char * BBB = arg;\n      std::vector<std::string>::size_type\n        SHT_i = 0,\n        SHT_n = Sarg;\n    for(; SHT_i < SHT_n; SHT_i++) {\n        SH_arg.push_back(std::string(BBB,ShroudLenTrim(BBB, Narg)));\n        BBB += Narg;\n    }\n}", 
                    "C_prototype": "const char * arg,\t long Sarg,\t int Narg", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_name": "c_vector_string_count_bufferify", 
                    "c_const": "", 
                    "cxx_rv_decl": "int SHC_rv", 
                    "function_name": "vector_string_count", 
                    "function_suffix": "_bufferify", 
                    "underscore_name": "vector_string_count"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_function_index": 4, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_fill", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "intent": "out", 
                                "template": "std::string"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_string_fill(std::vector< std::string > &arg+intent(out))", 
                "declgen": "void vector_string_fill(std::vector<std::string> & arg +intent(out))", 
                "doxygen": {
                    "brief": "Fill in arg with some animal names", 
                    "description": "The C++ function returns void. But the C and Fortran wrappers return\nan int with the number of items added to arg.\n"
                }, 
                "format": {
                    "C_custom_return_type": "int", 
                    "C_return_code": "return SH_arg.size();", 
                    "C_return_type": "int", 
                    "function_name": "vector_string_fill", 
                    "underscore_name": "vector_string_fill"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_function_index": 5, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "vector_string_append", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "std::vector", 
                                "intent": "inout", 
                                "template": "std::string"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "arg", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::vector"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void vector_string_append(std::vector< std::string > &arg+intent(inout))", 
                "declgen": "void vector_string_append(std::vector<std::string> & arg +intent(inout))", 
                "doxygen": {
                    "brief": "append '-like' to names."
                }, 
                "format": {
                    "function_name": "vector_string_append", 
                    "underscore_name": "vector_string_append"
                }, 
                "options": {
                    "wrap_c": false, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }
        ], 
        "language": "c++", 
        "options": {
            "C_enum_member_template": "{enum_member_name}", 
            "C_enum_template": "{C_prefix}{class_prefix}{enum_name}", 
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_line_length": 72, 
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_array_destructor_function", 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_capsule_template": "C{c_var}", 
            "C_var_context_template": "D{c_var}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_abstract_interface_argument_template": "arg{index}", 
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}", 
            "F_enum_member_template": "{class_prefix}{enum_lower}_{enum_member_lower}", 
            "F_force_wrapper": false, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_line_length": 72, 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": true, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_return_fortran_pointer": true, 
            "F_standard": 2003, 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter", 
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}", 
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor", 
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context", 
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function", 
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr", 
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype", 
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": true, 
            "doxygen": true, 
            "return_scalar_pointer": "pointer", 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": false, 
            "wrap_python": false
        }
    }, 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cxx": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_kind": "C_INT", 
            "f_type": "integer"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PYN_typenum": "NPY_BOOL", 
            "PY_PyTypeObject": "PyBool_Type", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_kind": "C_BOOL", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_deref}{c_var});"
                    ], 
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "(int) {cxx_var}", 
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)", 
            "PY_format": "c", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_DOUBLE", 
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})", 
            "PY_format": "d", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_FLOAT", 
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})", 
            "PY_format": "f", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_INT", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "i", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONG", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "l", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONGLONG", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_kind": "C_LONG_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})", 
            "c_header": "<stddef.h>", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "{cxx_var}{cxx_member}c_str()", 
            "PY_ctor": "PyString_FromString({cxx_var}{cxx_member}c_str())", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}{cxx_member}empty()) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_member}c_str());", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}{cxx_member}c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_out": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        }, 
        "std::vector": {
            "base": "vector", 
            "c_statements": {
                "AAAintent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{+", 
                        "std::vector<{cxx_T}>::size_type+", 
                        "{c_temp}i = 0,", 
                        "{c_temp}n = {c_var_size};", 
                        "-{c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+", 
                        "{c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "-}}", 
                        "-}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> {cxx_var}(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "AAAintent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{", 
                        "    std::vector<{cxx_T}>::size_type", 
                        "        {c_temp}i = 0,", 
                        "        {c_temp}n = {c_var_size};", 
                        "    {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "        {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "    }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t {cxx_var}({c_var_size});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "size", 
                        "capsule", 
                        "context"
                    ], 
                    "cxx_local_var": "pointer", 
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);", 
                        "delete cxx_ptr;"
                    ], 
                    "destructor_name": "std_vector_{cxx_T}", 
                    "post_call": [
                        "{c_var_context}->addr = {cxx_var}->empty() ? NULL : &{cxx_var}->front();", 
                        "{c_var_context}->size = {cxx_var}->size();"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> *{cxx_var} = \tnew std::vector<{cxx_T}>\t(\t{c_var}, {c_var} + {c_var_size});", 
                        "{c_var_capsule}->addr = static_cast<void *>({cxx_var});", 
                        "{c_var_capsule}->idtor = 0;  // index of destructor"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "capsule", 
                        "context"
                    ], 
                    "c_helper": "capsule_data vector_context vector_copy_{cxx_T}", 
                    "cxx_local_var": "pointer", 
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);", 
                        "delete cxx_ptr;"
                    ], 
                    "destructor_name": "std_vector_{cxx_T}", 
                    "post_call": [
                        "{c_var_context}->addr = {cxx_var}->empty() ? NULL : &{cxx_var}->front();", 
                        "{c_var_context}->size = {cxx_var}->size();"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;", 
                        "{c_var_capsule}->addr = static_cast<void *>({cxx_var});", 
                        "{c_var_capsule}->idtor = {idtor};  // index of destructor"
                    ]
                }
            }, 
            "c_templates": {
                "std::string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "arg", 
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "      {c_const}char * BBB = {c_var};", 
                            "      std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "arg", 
                            "size", 
                            "len"
                        ], 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "    {c_const}char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "arg", 
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            }, 
            "cxx_header": "<vector>", 
            "cxx_type": "std::vector<{cxx_T}>", 
            "f_statements": {
                "intent_inout_buf": {
                    "f_helper": "capsule_data vector_context vector_copy_{cxx_T}", 
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    }, 
                    "post_call": [
                        "call SHROUD_vector_copy_{cxx_T}({c_var_capsule}%mem, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                }, 
                "intent_out_buf": {
                    "f_helper": "capsule_data vector_context vector_copy_{cxx_T}", 
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    }, 
                    "post_call": [
                        "call SHROUD_vector_copy_{cxx_T}({c_var_capsule}%mem, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                }
            }, 
            "format": {
                "c_context_type": "SHROUD_vector_context", 
                "f_context_type": "SHROUD_vector_context"
            }
        }, 
        "stringout": {
            "base": "string", 
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        " post_call intent_out_buf"
                    ], 
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "post_call": [
                        "*{c_var} = {cxx_addr}{cxx_var};", 
                        "*{c_var_len} = {cxx_var}{cxx_member}size();"
                    ]
                }
            }, 
            "c_type": "void", 
            "cxx_header": "<string>", 
            "cxx_to_c": "static_cast<void *>({cxx_var})", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_statements": {
                "result_buf": {
                    "f_helper": "copy_string", 
                    "need_wrapper": true, 
                    "post_call": [
                        "allocate(character(len={f_var_len}, kind=C_CHAR):: {f_var})", 
                        "call SHROUD_string_copy_and_free({f_cptr}, {f_var})"
                    ]
                }
            }, 
            "f_type": "type(C_PTR)YY"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}