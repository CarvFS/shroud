{
    "__NOTICE__": "This file is generated by Shroud and is useful for debugging.", 
    "library": {
        "classes": [
            {
                "cxx_header": "", 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapClass1.h", 
                    "C_impl_filename": "wrapClass1.cpp", 
                    "C_type_name": "OWN_class1", 
                    "F_derived_name": "class1", 
                    "LUA_class_reg": "l_Class1_Reg", 
                    "LUA_ctor_name": "Class1", 
                    "LUA_metadata": "Class1.metatable", 
                    "LUA_this_call": "SH_this->self->", 
                    "LUA_userdata_member": "self", 
                    "LUA_userdata_type": "l_Class1_Type", 
                    "LUA_userdata_var": "SH_this", 
                    "PY_PyObject": "PY_Class1", 
                    "PY_PyTypeObject": "PY_Class1_Type", 
                    "PY_capsule_name": "PY_Class1_capsule_name", 
                    "PY_from_object_func": "PP_Class1_from_Object", 
                    "PY_this_call": "self->obj->", 
                    "PY_to_object_func": "PP_Class1_to_Object", 
                    "PY_type_filename": "pyClass1type.cpp", 
                    "class_lower": "class1", 
                    "class_prefix": "class1_", 
                    "class_scope": "Class1::", 
                    "class_upper": "CLASS1", 
                    "cxx_class": "Class1"
                }, 
                "functions": [
                    {
                        "_function_index": 0, 
                        "ast": {
                            "attrs": {
                                "_destructor": true, 
                                "_name": "dtor", 
                                "_typename": "Class1"
                            }, 
                            "const": false, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "Class1"
                            ]
                        }, 
                        "decl": "~Class1()", 
                        "declgen": "~Class1()", 
                        "format": {
                            "C_call_code": "delete SH_this;", 
                            "C_call_list": "", 
                            "C_name": "OWN_class1_dtor", 
                            "C_pre_call": "Class1 *SH_this = \tstatic_cast<Class1 *>(self->addr);", 
                            "C_prototype": "OWN_class1 * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "c_class1_dtor", 
                            "F_C_name": "c_class1_dtor", 
                            "F_arg_c_call": "obj%cxxmem", 
                            "F_arguments": "obj", 
                            "F_call_code": "call c_class1_dtor(obj%cxxmem)", 
                            "F_name_function": "dtor", 
                            "F_name_generic": "dtor", 
                            "F_name_impl": "class1_dtor", 
                            "F_subprogram": "subroutine", 
                            "LUA_name": "dtor", 
                            "LUA_name_impl": "l_class1_dtor", 
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "self", 
                            "function_name": "dtor", 
                            "underscore_name": "dtor"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_fmtresult": {
                            "fmtc": {
                                "c_var": "SHC_rv", 
                                "cxx_addr": "&", 
                                "cxx_member": ".", 
                                "cxx_var": "SHC_rv", 
                                "idtor": "0"
                            }
                        }, 
                        "_function_index": 1, 
                        "ast": {
                            "attrs": {
                                "_typename": "int"
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "getFlag", 
                                "pointer": []
                            }, 
                            "func_const": false, 
                            "params": [], 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "decl": "int getFlag()", 
                        "declgen": "int getFlag()", 
                        "format": {
                            "C_call_code": "int SHC_rv =\t SH_this->getFlag(\t);", 
                            "C_call_list": "", 
                            "C_code": "{C_pre_call}\nreturn SH_this->m_flag;", 
                            "C_name": "OWN_class1_get_flag", 
                            "C_pre_call": "Class1 *SH_this = \tstatic_cast<Class1 *>(self->addr);", 
                            "C_prototype": "OWN_class1 * self", 
                            "C_return_code": "return SHC_rv;", 
                            "C_return_type": "int", 
                            "F_C_call": "c_class1_get_flag", 
                            "F_C_name": "c_class1_get_flag", 
                            "F_arg_c_call": "obj%cxxmem", 
                            "F_arguments": "obj", 
                            "F_call_code": "SHT_rv = c_class1_get_flag(obj%cxxmem)", 
                            "F_name_function": "get_flag", 
                            "F_name_generic": "get_flag", 
                            "F_name_impl": "class1_get_flag", 
                            "F_result_clause": "\fresult(SHT_rv)", 
                            "F_subprogram": "function", 
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "self", 
                            "cxx_rv_decl": "int SHC_rv", 
                            "function_name": "getFlag", 
                            "underscore_name": "get_flag"
                        }, 
                        "options": {
                            "wrap_lua": false, 
                            "wrap_python": false
                        }
                    }
                ], 
                "name": "Class1", 
                "options": {}, 
                "typemap_name": "Class1", 
                "variables": [
                    {
                        "ast": {
                            "attrs": {
                                "_typename": "int", 
                                "name": "flag", 
                                "readonly": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "m_flag", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }, 
                        "format": {
                            "PY_getter": "PY_Class1_flag_getter", 
                            "PY_setter": "NULL", 
                            "field_name": "m_flag", 
                            "variable_lower": "flag", 
                            "variable_name": "flag", 
                            "variable_upper": "FLAG"
                        }, 
                        "name": "flag", 
                        "options": {}
                    }
                ]
            }
        ], 
        "copyright": [
            "#######################################################################", 
            "Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.", 
            "Produced at the Lawrence Livermore National Laboratory", 
            "", 
            "LLNL-CODE-738041.", 
            "All rights reserved.", 
            "", 
            "This file is part of Shroud.  For details, see", 
            "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
            "", 
            "Redistribution and use in source and binary forms, with or without", 
            "modification, are permitted provided that the following conditions are", 
            "met:", 
            "", 
            "* Redistributions of source code must retain the above copyright", 
            "  notice, this list of conditions and the disclaimer below.", 
            "", 
            "* Redistributions in binary form must reproduce the above copyright", 
            "  notice, this list of conditions and the disclaimer (as noted below)", 
            "  in the documentation and/or other materials provided with the", 
            "  distribution.", 
            "", 
            "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
            "  may be used to endorse or promote products derived from this", 
            "  software without specific prior written permission.", 
            "", 
            "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
            "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
            "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
            "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
            "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
            "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
            "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
            "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
            "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
            "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
            "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
            "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "", 
            "#######################################################################"
        ], 
        "cxx_header": "ownership.hpp", 
        "format": {
            "CXX_local": "SHCXX_", 
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "", 
            "C_argument": "SH_", 
            "C_array_type": "OWN_SHROUD_array", 
            "C_bufferify_suffix": "_bufferify", 
            "C_capsule_data_type": "OWN_SHROUD_capsule_data", 
            "C_custom_return_type": "", 
            "C_header_filename": "wrapownership.h", 
            "C_header_filename_suffix": "h", 
            "C_header_helper": "typesownership.h", 
            "C_impl_filename": "wrapownership.cpp", 
            "C_impl_filename_suffix": "cpp", 
            "C_local": "SHC_", 
            "C_memory_dtor_function": "OWN_SHROUD_memory_destructor", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "OWN_", 
            "C_result": "rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_array_type": "SHROUD_array", 
            "F_capsule_data_type": "SHROUD_capsule_data", 
            "F_capsule_final_function": "SHROUD_capsule_final", 
            "F_capsule_type": "SHROUD_capsule", 
            "F_derived_member": "cxxmem", 
            "F_filename_suffix": "f", 
            "F_impl_filename": "wrapfownership.f", 
            "F_module_name": "ownership_mod", 
            "F_name_assign": "assign", 
            "F_name_associated": "associated", 
            "F_name_final": "final", 
            "F_name_instance_get": "get_instance", 
            "F_name_instance_set": "set_instance", 
            "F_pointer": "SHT_ptr", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename": "luaownershipmodule.hpp", 
            "LUA_header_filename_suffix": "hpp", 
            "LUA_impl_filename_suffix": "cpp", 
            "LUA_metadata": "XXLUA_metadata", 
            "LUA_module_filename": "luaownershipmodule.cpp", 
            "LUA_module_name": "ownership", 
            "LUA_module_reg": "l_ownership_Reg", 
            "LUA_prefix": "l_", 
            "LUA_result": "rv", 
            "LUA_state_var": "L", 
            "LUA_this_call": "", 
            "LUA_used_param_state": false, 
            "LUA_userdata_type": "XXLUA_userdata_type", 
            "PY_PyObject": "PyObject", 
            "PY_extern_C_begin": "extern \"C\" ", 
            "PY_header_filename": "pyownershipmodule.hpp", 
            "PY_header_filename_suffix": "hpp", 
            "PY_helper_filename": "pyownershiphelper.cpp", 
            "PY_impl_filename_suffix": "cpp", 
            "PY_library_doc": "library documentation", 
            "PY_module_filename": "pyownershipmodule.cpp", 
            "PY_module_name": "ownership", 
            "PY_numpy_array_capsule_name": "PY_array_dtor", 
            "PY_numpy_array_dtor_context": "PY_array_destructor_context", 
            "PY_numpy_array_dtor_function": "PY_array_destructor_function", 
            "PY_obj": "obj", 
            "PY_param_args": "args", 
            "PY_param_kwds": "kwds", 
            "PY_param_self": "self", 
            "PY_prefix": "PY_", 
            "PY_result": "SHTPy_rv", 
            "PY_this_call": "", 
            "PY_used_param_args": false, 
            "PY_used_param_kwds": false, 
            "PY_used_param_self": false, 
            "YAML_type_filename": "ownership_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "class_scope": "", 
            "cxx_class": "", 
            "function_suffix": "", 
            "library": "ownership", 
            "library_lower": "ownership", 
            "library_upper": "OWNERSHIP", 
            "namespace_scope": "", 
            "stdlib": "std::"
        }, 
        "functions": [
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }
                }, 
                "_function_index": 2, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "raw"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrRaw", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "return_pointer_as": "raw", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrRaw()", 
                "declgen": "int * ReturnIntPtrRaw() +deref(raw)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrRaw(\t);", 
                    "C_call_list": "", 
                    "C_name": "OWN_return_int_ptr_raw", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_name": "c_return_int_ptr_raw", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrRaw", 
                    "underscore_name": "return_int_ptr_raw"
                }, 
                "options": {
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "npy_dims": "NULL", 
                        "npy_ndims": "0", 
                        "numpy_type": "NPY_INT", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 3, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "pointer"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtr", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "return_pointer_as": "pointer", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtr()", 
                "declgen": "int * ReturnIntPtr() +deref(pointer)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtr(\t);", 
                    "C_call_list": "", 
                    "C_name": "OWN_return_int_ptr", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_call": "c_return_int_ptr", 
                    "F_C_name": "c_return_int_ptr", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_ptr = c_return_int_ptr()", 
                    "F_name_function": "return_int_ptr", 
                    "F_name_generic": "return_int_ptr", 
                    "F_name_impl": "return_int_ptr", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_ReturnIntPtr", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtr", 
                    "underscore_name": "return_int_ptr"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "numpy_type": "NPY_INT", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 4, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "scalar"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrScalar", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "return_pointer_as": "scalar", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrScalar()", 
                "declgen": "int * ReturnIntPtrScalar() +deref(scalar)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrScalar(\t);", 
                    "C_call_list": "", 
                    "C_name": "OWN_return_int_ptr_scalar", 
                    "C_prototype": "", 
                    "C_return_code": "return *SHC_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "c_return_int_ptr_scalar", 
                    "F_C_name": "return_int_ptr_scalar", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv = c_return_int_ptr_scalar()", 
                    "F_name_function": "return_int_ptr_scalar", 
                    "F_name_generic": "return_int_ptr_scalar", 
                    "F_name_impl": "return_int_ptr_scalar", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_ReturnIntPtrScalar", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrScalar", 
                    "underscore_name": "return_int_ptr_scalar"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }
                }, 
                "_function_index": 5, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "raw", 
                        "dimension": "len"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDimRaw", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "raw", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDimRaw(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDimRaw(int * len +hidden+intent(out)) +deref(raw)+dimension(len)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDimRaw(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim_raw", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_name": "c_return_int_ptr_dim_raw", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDimRaw", 
                    "underscore_name": "return_int_ptr_dim_raw"
                }, 
                "options": {
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }, 
                        "fmtf": {
                            "c_var": "len", 
                            "f_var": "len"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int len", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_decl": "int len", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "npy_dims": "SHD_ReturnIntPtrDim", 
                        "npy_ndims": "1", 
                        "numpy_type": "NPY_INT", 
                        "pointer_shape": "len", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 6, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "dimension": "len"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDim", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "pointer", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDim(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDim(int * len +hidden+intent(out)) +dimension(len)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDim(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_call": "c_return_int_ptr_dim", 
                    "F_C_name": "c_return_int_ptr_dim", 
                    "F_arg_c_call": "len", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_ptr = c_return_int_ptr_dim(len)", 
                    "F_name_function": "return_int_ptr_dim", 
                    "F_name_generic": "return_int_ptr_dim", 
                    "F_name_impl": "return_int_ptr_dim", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_ReturnIntPtrDim", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDim", 
                    "pointer_shape": "len", 
                    "underscore_name": "return_int_ptr_dim"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }, 
                        "fmtf": {
                            "c_var": "len", 
                            "f_var": "len"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int len", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_decl": "int len", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "npy_dims": "SHD_ReturnIntPtrDimPointer", 
                        "npy_ndims": "1", 
                        "numpy_type": "NPY_INT", 
                        "pointer_shape": "len", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 7, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "pointer", 
                        "dimension": "len"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDimPointer", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "pointer", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDimPointer(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDimPointer(int * len +hidden+intent(out)) +deref(pointer)+dimension(len)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDimPointer(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim_pointer", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_call": "c_return_int_ptr_dim_pointer", 
                    "F_C_name": "c_return_int_ptr_dim_pointer", 
                    "F_arg_c_call": "len", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_ptr = c_return_int_ptr_dim_pointer(len)", 
                    "F_name_function": "return_int_ptr_dim_pointer", 
                    "F_name_generic": "return_int_ptr_dim_pointer", 
                    "F_name_impl": "return_int_ptr_dim_pointer", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_ReturnIntPtrDimPointer", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDimPointer", 
                    "pointer_shape": "len", 
                    "underscore_name": "return_int_ptr_dim_pointer"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int len", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_decl": "int len", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "npy_dims": "SHD_ReturnIntPtrDimAlloc", 
                        "npy_ndims": "1", 
                        "numpy_type": "NPY_INT", 
                        "pointer_shape": "len", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 8, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "allocatable", 
                        "dimension": "len"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDimAlloc", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "allocatable", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDimAlloc(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDimAlloc(int * len +hidden+intent(out)) +deref(allocatable)+dimension(len)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDimAlloc(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim_alloc", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_name": "c_return_int_ptr_dim_alloc", 
                    "PY_name_impl": "PY_ReturnIntPtrDimAlloc", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDimAlloc", 
                    "underscore_name": "return_int_ptr_dim_alloc"
                }, 
                "options": {
                    "wrap_fortran": false, 
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }
                }, 
                "_function_index": 9, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "dimension": "len", 
                        "owner": "caller"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDimRawNew", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "pointer", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDimRawNew(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDimRawNew(int * len +hidden+intent(out)) +dimension(len)+owner(caller)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDimRawNew(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim_raw_new", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_name": "c_return_int_ptr_dim_raw_new", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDimRawNew", 
                    "underscore_name": "return_int_ptr_dim_raw_new"
                }, 
                "options": {
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }, 
                        "fmtf": {
                            "c_var": "len", 
                            "f_var": "len"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int len", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_decl": "int len", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "npy_dims": "SHD_ReturnIntPtrDimNew", 
                        "npy_ndims": "1", 
                        "numpy_type": "NPY_INT", 
                        "pointer_shape": "len", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 10, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "dimension": "len", 
                        "owner": "caller"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDimNew", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "pointer", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDimNew(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDimNew(int * len +hidden+intent(out)) +dimension(len)+owner(caller)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDimNew(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim_new", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_call": "c_return_int_ptr_dim_new", 
                    "F_C_name": "c_return_int_ptr_dim_new", 
                    "F_arg_c_call": "len", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_ptr = c_return_int_ptr_dim_new(len)", 
                    "F_name_function": "return_int_ptr_dim_new", 
                    "F_name_generic": "return_int_ptr_dim_new", 
                    "F_name_impl": "return_int_ptr_dim_new", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_ReturnIntPtrDimNew", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDimNew", 
                    "pointer_shape": "len", 
                    "underscore_name": "return_int_ptr_dim_new"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }, 
                        "fmtf": {
                            "c_var": "len", 
                            "f_var": "len"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int len", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_decl": "int len", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "npy_dims": "SHD_ReturnIntPtrDimPointerNew", 
                        "npy_ndims": "1", 
                        "numpy_type": "NPY_INT", 
                        "pointer_shape": "len", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 11, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "pointer", 
                        "dimension": "len", 
                        "owner": "caller"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDimPointerNew", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "pointer", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDimPointerNew(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDimPointerNew(int * len +hidden+intent(out)) +deref(pointer)+dimension(len)+owner(caller)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDimPointerNew(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim_pointer_new", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_call": "c_return_int_ptr_dim_pointer_new", 
                    "F_C_name": "c_return_int_ptr_dim_pointer_new", 
                    "F_arg_c_call": "len", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_ptr = c_return_int_ptr_dim_pointer_new(len)", 
                    "F_name_function": "return_int_ptr_dim_pointer_new", 
                    "F_name_generic": "return_int_ptr_dim_pointer_new", 
                    "F_name_impl": "return_int_ptr_dim_pointer_new", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_ReturnIntPtrDimPointerNew", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDimPointerNew", 
                    "pointer_shape": "len", 
                    "underscore_name": "return_int_ptr_dim_pointer_new"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "len": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "*", 
                            "c_member": "->", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(len)", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int len", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "len", 
                            "cxx_addr": "", 
                            "cxx_decl": "int len", 
                            "cxx_member": "->", 
                            "cxx_type": "int", 
                            "cxx_var": "len", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_len"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_deref": "*", 
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHC_rv", 
                        "npy_dims": "SHD_ReturnIntPtrDimAllocNew", 
                        "npy_ndims": "1", 
                        "numpy_type": "NPY_INT", 
                        "pointer_shape": "len", 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 12, 
                "ast": {
                    "attrs": {
                        "_typename": "int", 
                        "deref": "allocatable", 
                        "dimension": "len", 
                        "owner": "caller"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "ReturnIntPtrDimAllocNew", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "hidden": true, 
                                "intent": "out", 
                                "value": false
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "len", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "*"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "return_pointer_as": "allocatable", 
                    "specifier": [
                        "int"
                    ]
                }, 
                "decl": "int * ReturnIntPtrDimAllocNew(int *len+intent(out)+hidden)", 
                "declgen": "int * ReturnIntPtrDimAllocNew(int * len +hidden+intent(out)) +deref(allocatable)+dimension(len)+owner(caller)", 
                "format": {
                    "C_call_code": "int * SHC_rv =\t ReturnIntPtrDimAllocNew(\tlen);", 
                    "C_call_list": "len", 
                    "C_name": "OWN_return_int_ptr_dim_alloc_new", 
                    "C_prototype": "int * len", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "int *", 
                    "F_C_name": "c_return_int_ptr_dim_alloc_new", 
                    "PY_name_impl": "PY_ReturnIntPtrDimAllocNew", 
                    "c_const": "", 
                    "cxx_rv_decl": "int * SHC_rv", 
                    "function_name": "ReturnIntPtrDimAllocNew", 
                    "underscore_name": "return_int_ptr_dim_alloc_new"
                }, 
                "options": {
                    "wrap_fortran": false, 
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "", 
                            "c_member": ".", 
                            "c_var": "flag", 
                            "cxx_addr": "&", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&flag)", 
                            "cxx_member": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag"
                        }, 
                        "fmtf": {
                            "c_var": "flag", 
                            "f_var": "flag"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int flag", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "flag", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int flag", 
                            "cxx_member": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_flag"
                        }
                    }
                }, 
                "_function_index": 13, 
                "ast": {
                    "attrs": {
                        "_typename": "void"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "createClassStatic", 
                        "pointer": []
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "flag", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "void"
                    ]
                }, 
                "decl": "void createClassStatic(int flag)", 
                "declgen": "void createClassStatic(int flag +intent(in)+value)", 
                "format": {
                    "C_call_code": "createClassStatic(\tflag);", 
                    "C_call_list": "flag", 
                    "C_name": "OWN_create_class_static", 
                    "C_prototype": "int flag", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "c_create_class_static", 
                    "F_C_name": "create_class_static", 
                    "F_arg_c_call": "flag", 
                    "F_arguments": "flag", 
                    "F_call_code": "call c_create_class_static(flag)", 
                    "F_name_function": "create_class_static", 
                    "F_name_generic": "create_class_static", 
                    "F_name_impl": "create_class_static", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_createClassStatic", 
                    "c_const": "", 
                    "function_name": "createClassStatic", 
                    "underscore_name": "create_class_static"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)", 
                        "cxx_member": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PY_Class1", 
                        "PyTypeObject": "PY_Class1_Type", 
                        "c_deref": "*", 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "numpy_type": null, 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 14, 
                "ast": {
                    "attrs": {
                        "_typename": "Class1", 
                        "owner": "library"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getClassStatic", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [], 
                    "specifier": [
                        "Class1"
                    ]
                }, 
                "decl": "Class1 * getClassStatic() +owner(library)", 
                "declgen": "Class1 * getClassStatic() +owner(library)", 
                "format": {
                    "C_call_code": "Class1 * SHCXX_rv =\t getClassStatic(\t);", 
                    "C_call_list": "", 
                    "C_name": "OWN_get_class_static", 
                    "C_post_call": "OWN_class1 SHC_rv;\nSHC_rv.addr = static_cast<void *>(SHCXX_rv);\nSHC_rv.idtor = 0;", 
                    "C_prototype": "", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "OWN_class1", 
                    "F_C_call": "c_get_class_static", 
                    "F_C_name": "c_get_class_static", 
                    "F_arg_c_call": "", 
                    "F_arguments": "", 
                    "F_call_code": "SHT_rv%cxxmem = c_get_class_static()", 
                    "F_name_function": "get_class_static", 
                    "F_name_generic": "get_class_static", 
                    "F_name_impl": "get_class_static", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getClassStatic", 
                    "c_const": "", 
                    "cxx_rv_decl": "Class1 * SHCXX_rv", 
                    "function_name": "getClassStatic", 
                    "underscore_name": "get_class_static"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }, 
            {
                "_fmtargs": {
                    "flag": {
                        "fmtc": {
                            "c_const": "", 
                            "c_deref": "", 
                            "c_member": ".", 
                            "c_var": "flag", 
                            "cxx_addr": "&", 
                            "cxx_cast_to_void_ptr": "static_cast<void *>(&flag)", 
                            "cxx_member": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag"
                        }, 
                        "fmtf": {
                            "c_var": "flag", 
                            "f_var": "flag"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_decl": "int flag", 
                            "c_deref": "", 
                            "c_type": "int", 
                            "c_var": "flag", 
                            "cxx_addr": "&", 
                            "cxx_decl": "int flag", 
                            "cxx_member": ".", 
                            "cxx_type": "int", 
                            "cxx_var": "flag", 
                            "numpy_type": "NPY_INT", 
                            "py_var": "SHPy_flag"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "c_var": "SHC_rv", 
                        "cxx_addr": "", 
                        "cxx_cast_to_void_ptr": "static_cast<void *>(SHCXX_rv)", 
                        "cxx_member": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "idtor": "0"
                    }, 
                    "fmtpy": {
                        "PyObject": "PY_Class1", 
                        "PyTypeObject": "PY_Class1_Type", 
                        "c_deref": "*", 
                        "c_var": "SHCXX_rv", 
                        "cxx_addr": "", 
                        "cxx_member": "->", 
                        "cxx_var": "SHCXX_rv", 
                        "numpy_type": null, 
                        "py_var": "SHTPy_rv"
                    }
                }, 
                "_function_index": 15, 
                "ast": {
                    "attrs": {
                        "_typename": "Class1", 
                        "owner": "caller"
                    }, 
                    "const": false, 
                    "declarator": {
                        "name": "getClassNew", 
                        "pointer": [
                            {
                                "const": false, 
                                "ptr": "*"
                            }
                        ]
                    }, 
                    "func_const": false, 
                    "params": [
                        {
                            "attrs": {
                                "_typename": "int", 
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "flag", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "specifier": [
                        "Class1"
                    ]
                }, 
                "decl": "Class1 * getClassNew(int flag) +owner(caller)", 
                "declgen": "Class1 * getClassNew(int flag +intent(in)+value) +owner(caller)", 
                "doxygen": {
                    "brief": "Return pointer to new Class1 instance."
                }, 
                "format": {
                    "C_call_code": "Class1 * SHCXX_rv =\t getClassNew(\tflag);", 
                    "C_call_list": "flag", 
                    "C_name": "OWN_get_class_new", 
                    "C_post_call": "OWN_class1 SHC_rv;\nSHC_rv.addr = static_cast<void *>(SHCXX_rv);\nSHC_rv.idtor = 0;", 
                    "C_prototype": "int flag", 
                    "C_return_code": "return SHC_rv;", 
                    "C_return_type": "OWN_class1", 
                    "F_C_call": "c_get_class_new", 
                    "F_C_name": "c_get_class_new", 
                    "F_arg_c_call": "flag", 
                    "F_arguments": "flag", 
                    "F_call_code": "SHT_rv%cxxmem = c_get_class_new(flag)", 
                    "F_name_function": "get_class_new", 
                    "F_name_generic": "get_class_new", 
                    "F_name_impl": "get_class_new", 
                    "F_result_clause": "\fresult(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_getClassNew", 
                    "c_const": "", 
                    "cxx_rv_decl": "Class1 * SHCXX_rv", 
                    "function_name": "getClassNew", 
                    "underscore_name": "get_class_new"
                }, 
                "options": {
                    "wrap_lua": false
                }
            }
        ], 
        "language": "c++", 
        "options": {
            "C_enum_member_template": "{enum_member_name}", 
            "C_enum_template": "{C_prefix}{class_prefix}{enum_name}", 
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_header_helper_template": "types{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_line_length": 72, 
            "C_memory_dtor_function_template": "{C_prefix}SHROUD_memory_destructor", 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_capsule_template": "C{c_var}", 
            "C_var_context_template": "D{c_var}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_abstract_interface_argument_template": "arg{index}", 
            "F_abstract_interface_subprogram_template": "{underscore_name}_{argname}", 
            "F_auto_reference_count": false, 
            "F_enum_member_template": "{class_prefix}{enum_lower}_{enum_member_lower}", 
            "F_force_wrapper": false, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_line_length": 72, 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": false, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_return_fortran_pointer": true, 
            "F_standard": 2003, 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_member_getter_template": "{PY_prefix}{cxx_class}_{variable_name}_getter", 
            "PY_member_setter_template": "{PY_prefix}{cxx_class}_{variable_name}_setter", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{function_name}{function_suffix}", 
            "PY_numpy_array_capsule_name_template": "{PY_prefix}array_dtor", 
            "PY_numpy_array_dtor_context_template": "{PY_prefix}array_destructor_context", 
            "PY_numpy_array_dtor_function_template": "{PY_prefix}array_destructor_function", 
            "PY_struct_array_descr_create_template": "{PY_prefix}{cxx_class}_create_array_descr", 
            "PY_struct_array_descr_name_template": "{cxx_class}_dtype", 
            "PY_struct_array_descr_variable_template": "{PY_prefix}{cxx_class}_array_descr", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "PY_type_impl_template": "{PY_prefix}{cxx_class}_{PY_type_method}{function_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": true, 
            "doxygen": true, 
            "return_scalar_pointer": "pointer", 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": true, 
            "wrap_python": true
        }
    }, 
    "types": {
        "Class1": {
            "LUA_pop": "\t({LUA_userdata_type} *)\t luaL_checkudata(\t{LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PY_Class1", 
            "PY_PyTypeObject": "PY_Class1_Type", 
            "PY_from_object": "PP_Class1_from_Object", 
            "PY_to_object": "PP_Class1_to_Object", 
            "base": "shadow", 
            "c_statements": {
                "intent_in": {
                    "buf_args": [
                        "shadow"
                    ]
                }, 
                "result": {
                    "c_header": "<stdlib.h>", 
                    "cxx_header": "<stdlib.h>", 
                    "post_call": [
                        "OWN_class1 {c_var};", 
                        "{c_var}.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var}.idtor = {idtor};"
                    ]
                }
            }, 
            "c_to_cxx": "\tstatic_cast<{c_const}Class1 *>({c_var}{c_member}addr)", 
            "c_type": "OWN_class1", 
            "cxx_to_c": "static_cast<{c_const}void *>(\t{cxx_addr}{cxx_var})", 
            "cxx_type": "Class1", 
            "f_c_module": {
                "--import--": [
                    "SHROUD_capsule_data"
                ]
            }, 
            "f_c_type": "type(SHROUD_capsule_data)", 
            "f_derived_type": "class1", 
            "f_module": {
                "ownership_mod": [
                    "class1"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%cxxmem", 
            "f_type": "type(class1)", 
            "forward": "Class1", 
            "idtor": "1", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}Class1 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "pointer", 
                    "post_parse": [
                        "{c_const}Class1 * {cxx_var} = {py_var} ? {py_var}->{PY_obj} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{PY_obj} = {cxx_addr}{cxx_var};"
                    ]
                }
            }
        }, 
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cxx": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_kind": "C_INT", 
            "f_type": "integer"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PYN_typenum": "NPY_BOOL", 
            "PY_PyTypeObject": "PyBool_Type", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_kind": "C_BOOL", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_inout": {
                    "post_call": [
                        "{py_var} = PyBool_FromLong({c_deref}{c_var});"
                    ], 
                    "pre_call": [
                        "bool {cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "{PyObject} * {py_var} = PyBool_FromLong({c_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h>", 
                    "cxx_local_var": "pointer", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "(int) {cxx_var}", 
            "PY_ctor": "PyString_FromStringAndSize(&{c_var}, 1)", 
            "PY_format": "c", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_DOUBLE", 
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})", 
            "PY_format": "d", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_FLOAT", 
            "PY_ctor": "PyFloat_FromDouble({c_deref}{c_var})", 
            "PY_format": "f", 
            "PY_get": "PyFloat_AsDouble({py_var})", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_INT", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "i", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONG", 
            "PY_ctor": "PyInt_FromLong({c_deref}{c_var})", 
            "PY_format": "l", 
            "PY_get": "PyInt_AsLong({py_var})", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PYN_typenum": "NPY_LONGLONG", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_kind": "C_LONG_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromSize_t({c_deref}{c_var})", 
            "c_header": "<stddef.h>", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_build_arg": "{cxx_var}{cxx_member}c_str()", 
            "PY_ctor": "PyString_FromString({cxx_var}{cxx_member}c_str())", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len},\t {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "strcpy({c_var}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_member}c_str());"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "arg", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}{cxx_member}empty()) {{", 
                        "    {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "    ShroudStrCopy({c_var}, {c_var_len}, {cxx_var}{cxx_member}c_str());", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}{cxx_member}c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_kind": "C_CHAR", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_out": {
                    "cxx_local_var": "scalar", 
                    "post_parse": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }
            }
        }, 
        "std::vector": {
            "base": "vector", 
            "c_statements": {
                "AAAintent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{+", 
                        "std::vector<{cxx_T}>::size_type+", 
                        "{c_temp}i = 0,", 
                        "{c_temp}n = {c_var_size};", 
                        "-{c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{+", 
                        "{c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "-}}", 
                        "-}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> {cxx_var}(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "AAAintent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        "{{", 
                        "    std::vector<{cxx_T}>::size_type", 
                        "        {c_temp}i = 0,", 
                        "        {c_temp}n = {c_var_size};", 
                        "    {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "        {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "    }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t {cxx_var}({c_var_size});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "arg", 
                        "size"
                    ], 
                    "cxx_local_var": "scalar", 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "arg", 
                        "size", 
                        "context"
                    ], 
                    "cxx_local_var": "pointer", 
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);", 
                        "delete cxx_ptr;"
                    ], 
                    "destructor_name": "std_vector_{cxx_T}", 
                    "post_call": [
                        "{c_var_context}->cxx.addr  = static_cast<void *>({cxx_var});", 
                        "{c_var_context}->cxx.idtor = 0;", 
                        "{c_var_context}->addr.cvoidp = {cxx_var}->empty() ? NULL : &{cxx_var}->front();", 
                        "{c_var_context}->len = sizeof({cxx_T});", 
                        "{c_var_context}->size = {cxx_var}->size();"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> *{cxx_var} = \tnew std::vector<{cxx_T}>\t(\t{c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "context"
                    ], 
                    "c_helper": "capsule_data_helper array_copy", 
                    "cxx_local_var": "pointer", 
                    "destructor": [
                        "std::vector<{cxx_T}> *cxx_ptr = \treinterpret_cast<std::vector<{cxx_T}> *>(ptr);", 
                        "delete cxx_ptr;"
                    ], 
                    "destructor_name": "std_vector_{cxx_T}", 
                    "post_call": [
                        "{c_var_context}->cxx.addr  = static_cast<void *>({cxx_var});", 
                        "{c_var_context}->cxx.idtor = 0;", 
                        "{c_var_context}->addr.cvoidp = {cxx_var}->empty() ? NULL : &{cxx_var}->front();", 
                        "{c_var_context}->len = sizeof({cxx_T});", 
                        "{c_var_context}->size = {cxx_var}->size();"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}>\t *{cxx_var} = new std::vector<{cxx_T}>;"
                    ]
                }
            }, 
            "c_templates": {
                "std::string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "arg", 
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "      {c_const}char * BBB = {c_var};", 
                            "      std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "arg", 
                            "size", 
                            "len"
                        ], 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "    {c_const}char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "arg", 
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": "scalar", 
                        "post_call": [
                            "{{", 
                            "    char * BBB = {c_var};", 
                            "    std::vector<{cxx_T}>::size_type", 
                            "        {c_temp}i = 0,", 
                            "        {c_temp}n = {c_var_size};", 
                            "    {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "    for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "        ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "        BBB += {c_var_len};", 
                            "    }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            }, 
            "cxx_header": "<vector>", 
            "cxx_type": "std::vector<{cxx_T}>", 
            "f_statements": {
                "intent_inout": {
                    "f_helper": "array_copy_{cxx_T}", 
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    }, 
                    "post_call": [
                        "call SHROUD_array_copy_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                }, 
                "intent_out": {
                    "f_helper": "array_copy_{cxx_T}", 
                    "f_module": {
                        "iso_c_binding": [
                            "C_SIZE_T"
                        ]
                    }, 
                    "post_call": [
                        "call SHROUD_array_copy_{cxx_T}({c_var_context}, {f_var}, size({f_var},kind=C_SIZE_T))"
                    ]
                }
            }
        }, 
        "stringout": {
            "base": "string", 
            "c_statements": {
                "intent_out_buf": {
                    "buf_args": [
                        "arg", 
                        "lenout"
                    ], 
                    "c_helper": "copy_string", 
                    "cxx_local_var": "scalar", 
                    "post_call": [
                        " post_call intent_out_buf"
                    ], 
                    "pre_call": [
                        "std::string * {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "context"
                    ], 
                    "c_helper": "copy_string", 
                    "post_call": [
                        "{c_var_context}->cxx.addr = {cxx_cast_to_void_ptr};", 
                        "{c_var_context}->cxx.idtor = 0;", 
                        "{c_var_context}->addr.ccharp = {cxx_var}{cxx_member}data();", 
                        "{c_var_context}->len = {cxx_var}{cxx_member}size();"
                    ]
                }
            }, 
            "c_type": "void", 
            "cxx_header": "<string>", 
            "cxx_to_c": "static_cast<void *>({cxx_var})", 
            "cxx_type": "std::string", 
            "f_statements": {
                "result": {
                    "f_helper": "copy_string", 
                    "need_wrapper": true, 
                    "post_call": [
                        "allocate(character(len={c_var_context}%len, kind=C_CHAR):: {f_var})", 
                        "call SHROUD_string_copy_and_free({c_var_context}, {f_var}, {c_var_context}%len)"
                    ]
                }
            }, 
            "f_type": "type(C_PTR)YY"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}