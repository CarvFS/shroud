# test template options

copyright:
- '#######################################################################'
- 'Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.'
- 'Produced at the Lawrence Livermore National Laboratory'
-
- 'LLNL-CODE-738041.'
- 'All rights reserved.'
-
- 'This file is part of Shroud.  For details, see'
- 'https://github.com/LLNL/shroud. Please also read shroud/LICENSE.'
-
- 'Redistribution and use in source and binary forms, with or without'
- 'modification, are permitted provided that the following conditions are'
- 'met:'
-
- '* Redistributions of source code must retain the above copyright'
- '  notice, this list of conditions and the disclaimer below.'
- 
- '* Redistributions in binary form must reproduce the above copyright'
- '  notice, this list of conditions and the disclaimer (as noted below)'
- '  in the documentation and/or other materials provided with the'
- '  distribution.'
-
- '* Neither the name of the LLNS/LLNL nor the names of its contributors'
- '  may be used to endorse or promote products derived from this'
- '  software without specific prior written permission.'
-
- 'THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS'
- '"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
- 'LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR'
- 'A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE'
- 'LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR'
- 'CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,'
- 'EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,'
- 'PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR'
- 'PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF'
- 'LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING'
- 'NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS'
- 'SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
-
- '#######################################################################'

library: testnames

options:
  debug: True

  # always create wrappers to demonstrate name generation
  F_force_wrapper: True
  wrap_python: True

format:
  C_argument: ARG_
  C_header_filename_suffix: hh
  C_impl_filename_suffix: cc
  F_filename_suffix: F

  C_header_filename: top.h
  C_impl_filename: top.cpp
  F_module_name: top_module
  F_impl_filename: top.f
  LUA_module_name: lua_module_name

declarations:
- decl: |
      enum Color {
        RED,
        BLUE,
        WHITE
      };
  options:
     bar: 4
  format:
     baz: 4  



- decl: class Names
  options:
    none: foo
    C_name_template: XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}
    F_C_name_template: XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}
  format:
    C_header_filename: foo.h
    C_impl_filename: foo.cpp
    F_module_name: name_module
    F_impl_filename: foo.f
    F_derived_name: FNames

  declarations:
  - decl: void method1()
    format:
      F_name_function: type_method1
  - decl: void method2()
    format:
      C_this: self2
      CXX_this: SH_this2
      F_this:  obj2

# test file suffix
- decl: class Names2
  declarations: []

- block: True
  options:
    C_name_template: YYY_{C_prefix}{underscore_name}{function_suffix}
    F_C_name_template: YYY_{C_prefix}{underscore_name}{function_suffix}
    F_name_impl_template: "{library}_{class_prefix}{underscore_name}{function_suffix}"
  declarations:
  - decl: void function1()
  - decl: void function2()
    format:
      C_name: c_name_special
      F_C_name: f_c_name_special
      F_name_impl: f_name_special

  # test generic/overloaded functions
  - decl: void function3a(int i)
    format:
      F_name_generic: generic3
      F_name_impl: F_name_function3a_int
  - decl: void function3a(long i)
    format:
      F_name_generic: generic3
      F_name_impl: F_name_function3a_long

  # test F_result
  # test C_result  with arg rv
  - decl: int function4(const std::string &rv)

  - decl: void function5() +name(fiveplus)

- namespace: ns1
  options:
    # test options in namespace
    F_name_impl_template: "{library_lower}_{class_prefix}{underscore_name}{function_suffix}"
  declarations:
  - decl: void init_ns1()

# Test explicit splicers
# class Name2 has no methods by default it would not be written.
splicer_code:
   c:
     CXX_definitions:
       - // Add some text from splicer
       - // And another line
     class:
       Names2:
         C_definitions:
           - int write_file;
