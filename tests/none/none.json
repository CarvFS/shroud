{
    "classes": [], 
    "cpp_header": "", 
    "fmt": {
        "CPP_template": "", 
        "CPP_this": "SH_this", 
        "CPP_this_call": "", 
        "C_header_filename": "wrapdefault_library.h", 
        "C_header_filename_suffix": "h", 
        "C_impl_filename": "wrapdefault_library.cpp", 
        "C_impl_filename_suffix": "cpp", 
        "C_post_call": "", 
        "C_pre_call": "", 
        "C_prefix": "DEF_", 
        "C_result": "SH_rv", 
        "C_string_result_as_arg": "SH_F_rv", 
        "C_this": "self", 
        "F_C_prefix": "c_", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_filename_suffix": "f", 
        "F_impl_filename": "wrapfdefault_library.f", 
        "F_module_name": "default_library_mod", 
        "F_pure_clause": "", 
        "F_result": "SH_rv", 
        "F_result_clause": "", 
        "F_string_result_as_arg": "", 
        "F_this": "obj", 
        "LUA_header_filename_suffix": "hpp", 
        "LUA_impl_filename_suffix": "cpp", 
        "LUA_result": "rv", 
        "PY_header_filename_suffix": "hpp", 
        "PY_impl_filename_suffix": "cpp", 
        "PY_result": "rv", 
        "YAML_type_filename": "default_library_types.yaml", 
        "class_prefix": "", 
        "function_suffix": "", 
        "library": "default_library", 
        "library_lower": "default_library", 
        "library_upper": "DEFAULT_LIBRARY", 
        "namespace_scope": ""
    }, 
    "functions": [], 
    "library": "default_library", 
    "namespace": "", 
    "options": {
        "C_bufferify_suffix": "_bufferify", 
        "C_header_filename_class_template": "wrap{cpp_class}.{C_header_filename_suffix}", 
        "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
        "C_impl_filename_class_template": "wrap{cpp_class}.{C_impl_filename_suffix}", 
        "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
        "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "C_var_len_template": "N{c_var}", 
        "C_var_size_template": "S{c_var}", 
        "C_var_trim_template": "L{c_var}", 
        "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "F_C_prefix": "c_", 
        "F_force_wrapper": false, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.{F_filename_suffix}", 
        "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
        "F_module_name_class_template": "{class_lower}_mod", 
        "F_module_name_library_template": "{library_lower}_mod", 
        "F_module_per_class": true, 
        "F_name_associated": "associated", 
        "F_name_function_template": "{underscore_name}{function_suffix}", 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
        "F_name_instance_get": "get_instance", 
        "F_name_instance_set": "set_instance", 
        "F_string_len_trim": true, 
        "LUA_class_reg_template": "{LUA_prefix}{cpp_class}_Reg", 
        "LUA_ctor_name_template": "{cpp_class}", 
        "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
        "LUA_metadata_template": "{cpp_class}.metatable", 
        "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
        "LUA_module_name_template": "{library_lower}", 
        "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
        "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
        "LUA_name_template": "{function_name}", 
        "LUA_userdata_member_template": "self", 
        "LUA_userdata_type_template": "{LUA_prefix}{cpp_class}_Type", 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
        "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
        "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
        "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "PY_type_filename_template": "py{cpp_class}type.{PY_impl_filename_suffix}", 
        "YAML_type_filename_template": "{library_lower}_types.yaml", 
        "class_prefix_template": "{class_lower}_", 
        "debug": false, 
        "doxygen": true, 
        "show_splicer_comments": true, 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_lua": false, 
        "wrap_python": false
    }, 
    "patterns": [], 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cpp": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cpp_to_c": "MPI_Comm_c2f({cpp_var})", 
            "cpp_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({c_var})", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = PyObject_IsTrue({py_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = new char [{c_var_trim} + 1];", 
                        "std::strncpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = new char [{c_var_len} + 1];", 
                        "std::strncpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = new char [{c_var_len} + 1];"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var} == NULL) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "c_statements": {
                "result_buf": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "std::memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cpp_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_INT)": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_LONG)": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "real(C_DOUBLE)": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "real(C_FLOAT)": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var};"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "std::vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_local_var": true, 
                    "post_call": [
                        "for(std::vector<{cpp_T}>::size_type i = 0; i < std::min({cpp_var}.size(),static_cast<std::vector<{cpp_T}>::size_type>({c_var_size})); i++) {{", 
                        "    {c_var}[i] = {cpp_var}[i];", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var_size});"
                    ]
                }, 
                "result_buf": {
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "cpp_header": "<vector>", 
            "cpp_type": "std::vector<{cpp_T}>"
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var};"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "string_result_fstr": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cpp_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ], 
                    "pre_call": [
                        "std::string {cpp_var};"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_helper": {
                "f_return_code": {
                    "fstr": true
                }
            }, 
            "f_return_code": "{F_result} = fstr({F_C_call}({F_arg_c_call_tab}))", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_local_var": true, 
                    "post_call": [
                        "for(std::vector<{cpp_T}>::size_type i = 0; i < std::min({cpp_var}.size(),static_cast<std::vector<{cpp_T}>::size_type>({c_var_size})); i++) {{", 
                        "    {c_var}[i] = {cpp_var}[i];", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cpp_T}> {cpp_var}({c_var_size});"
                    ]
                }, 
                "result_buf": {
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "cpp_header": "<vector>", 
            "cpp_type": "std::vector<{cpp_T}>"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cpp_var}, NULL, NULL)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}