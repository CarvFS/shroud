
XXXXXXXXXXXXXXXXXXXX
# create_std
XXXX CODE

XXXX PRINT_NODE

XXXX AST
stmts: []
XXXX SymbolTable
cls: Global
symbols:
  MPI_Comm:
    cls: Typedef
    typemap: MPI_Comm
  int16_t:
    cls: Typedef
    typemap: int16_t
  int32_t:
    cls: Typedef
    typemap: int32_t
  int64_t:
    cls: Typedef
    typemap: int64_t
  int8_t:
    cls: Typedef
    typemap: int8_t
  size_t:
    cls: Typedef
    typemap: size_t
  std:
    cls: Namespace
    symbols:
      string:
        cls: Typedef
        typemap: std::string
      vector:
        cls: Typedef
        typemap: std::vector
  uint16_t:
    cls: Typedef
    typemap: uint16_t
  uint32_t:
    cls: Typedef
    typemap: uint32_t
  uint64_t:
    cls: Typedef
    typemap: uint64_t
  uint8_t:
    cls: Typedef
    typemap: uint8_t

XXXXXXXXXXXXXXXXXXXX
# variable declarations
XXXX CODE
int i;
const double d;
XXXX PRINT_NODE
int i;
const double d;

XXXX AST
stmts:
- _ast: Declaration
  declarator:
    name: i
  specifier:
  - int
  typemap_name: int
- _ast: Declaration
  const: true
  declarator:
    name: d
  specifier:
  - double
  typemap_name: double
XXXX SymbolTable
cls: Global

XXXXXXXXXXXXXXXXXXXX
# variable pointer declarations
XXXX CODE
int *i1;
int **i2;
int &i3;
XXXX PRINT_NODE
int * i1;
int * * i2;
int & i3;

XXXX AST
stmts:
- _ast: Declaration
  declarator:
    name: i1
    pointer:
    - ptr: '*'
  specifier:
  - int
  typemap_name: int
- _ast: Declaration
  declarator:
    name: i2
    pointer:
    - ptr: '*'
    - ptr: '*'
  specifier:
  - int
  typemap_name: int
- _ast: Declaration
  declarator:
    name: i3
    pointer:
    - ptr: '&'
  specifier:
  - int
  typemap_name: int
XXXX SymbolTable
cls: Global

XXXXXXXXXXXXXXXXXXXX
# Class statement
XXXX CODE
class Class1;
XXXX PRINT_NODE
class Class1;

XXXX AST
stmts:
- _ast: Declaration
  class_specifier:
    _ast: CXXClass
    name: Class1
  specifier:
  - class Class1
  typemap_name: Class1
XXXX SymbolTable
cls: Global
symbols:
  Class1:
    cls: CXXClass
    typemap: Class1

XXXXXXXXXXXXXXXXXXXX
# Structure for C++
XXXX CODE
struct Point { int x; int y;};
struct Point end;
Point start;
void func1(struct Point arg1, Point arg2);
XXXX PRINT_NODE
struct Point{
int x;
int y;
}
;
struct Point end;
Point start;
void func1(struct Point arg1,Point arg2);

XXXX AST
stmts:
- _ast: Declaration
  class_specifier:
    _ast: Struct
    members:
    - _ast: Declaration
      declarator:
        name: x
      specifier:
      - int
      typemap_name: int
    - _ast: Declaration
      declarator:
        name: y
      specifier:
      - int
      typemap_name: int
    name: Point
    typemap_name: Point
  specifier:
  - struct Point
  typemap_name: Point
- _ast: Declaration
  declarator:
    name: end
  specifier:
  - struct Point
  typemap_name: Point
- _ast: Declaration
  declarator:
    name: start
  specifier:
  - Point
  typemap_name: Point
- _ast: Declaration
  declarator:
    name: func1
  params:
  - _ast: Declaration
    declarator:
      name: arg1
    specifier:
    - struct Point
    typemap_name: Point
  - _ast: Declaration
    declarator:
      name: arg2
    specifier:
    - Point
    typemap_name: Point
  specifier:
  - void
  typemap_name: void
XXXX SymbolTable
cls: Global
symbols:
  Point:
    cls: Struct
    typemap: Point
  struct-Point:
    cls: Struct
    typemap: Point

XXXXXXXXXXXXXXXXXXXX
# Recursive structure
# language=c
#  } listvar;
XXXX CODE
struct list_s {
  struct list_s *next;
};
struct list_s var1;
XXXX PRINT_NODE
struct list_s{
struct list_s * next;
}
;
struct list_s var1;

XXXX AST
stmts:
- _ast: Declaration
  class_specifier:
    _ast: Struct
    members:
    - _ast: Declaration
      declarator:
        name: next
        pointer:
        - ptr: '*'
      specifier:
      - struct list_s
      typemap_name: list_s
    name: list_s
    typemap_name: list_s
  specifier:
  - struct list_s
  typemap_name: list_s
- _ast: Declaration
  declarator:
    name: var1
  specifier:
  - struct list_s
  typemap_name: list_s
XXXX SymbolTable
cls: Global
symbols:
  struct-list_s:
    cls: Struct
    typemap: list_s

XXXXXXXXXXXXXXXXXXXX
# Recursive structure
# Error: C does not automatically declare a type for structs
# language=c
#  } listvar;
XXXX CODE
struct list_s {
  list_s *prev;
};
Parse Error:
  list_s *prev;
  ^
line 2: Expected TYPE_SPECIFIER, found ID 'list_s'

XXXXXXXXXXXXXXXXXXXX
# Recursive structure
#  } listvar;
XXXX CODE
struct list_s {
  struct list_s *next;
  list_s *prev;
};
XXXX PRINT_NODE
struct list_s{
struct list_s * next;
list_s * prev;
}
;

XXXX AST
stmts:
- _ast: Declaration
  class_specifier:
    _ast: Struct
    members:
    - _ast: Declaration
      declarator:
        name: next
        pointer:
        - ptr: '*'
      specifier:
      - struct list_s
      typemap_name: list_s
    - _ast: Declaration
      declarator:
        name: prev
        pointer:
        - ptr: '*'
      specifier:
      - list_s
      typemap_name: list_s
    name: list_s
    typemap_name: list_s
  specifier:
  - struct list_s
  typemap_name: list_s
XXXX SymbolTable
cls: Global
symbols:
  list_s:
    cls: Struct
    typemap: list_s
  struct-list_s:
    cls: Struct
    typemap: list_s

XXXXXXXXXXXXXXXXXXXX
# enumerations
# language=c
XXXX CODE
enum Color {RED, WHITE, BLUE};
enum Color global;
XXXX PRINT_NODE
enum Color { RED, WHITE, BLUE };;
enum Color global;

XXXX AST
stmts:
- _ast: Declaration
  enum_specifier:
    _ast: Enum
    members:
    - name: RED
    - name: WHITE
    - name: BLUE
    name: Color
  specifier:
  - enum Color
  typemap_name: Color
- _ast: Declaration
  declarator:
    name: global
  specifier:
  - enum Color
  typemap_name: Color
XXXX SymbolTable
cls: Global
symbols:
  enum-Color:
    cls: Enum
    typemap: Color

XXXXXXXXXXXXXXXXXXXX
# enumerations
# Error: C does not automatically declare a type for enums
# language=c
XXXX CODE
enum Color {RED, WHITE, BLUE};
Color flag = RED;
Parse Error:
Color flag = RED;
^
line 2: Expected TYPE_SPECIFIER, found ID 'Color'

XXXXXXXXXXXXXXXXXXXX
# enumerations C++
XXXX CODE
enum Color {RED, WHITE, BLUE};
enum Color global;
Color flag = RED;
void func1(enum Color arg1, Color arg2);
XXXX PRINT_NODE
enum Color { RED, WHITE, BLUE };;
enum Color global;
Color flag=RED;
void func1(enum Color arg1,Color arg2);

XXXX AST
stmts:
- _ast: Declaration
  enum_specifier:
    _ast: Enum
    members:
    - name: RED
    - name: WHITE
    - name: BLUE
    name: Color
  specifier:
  - enum Color
  typemap_name: Color
- _ast: Declaration
  declarator:
    name: global
  specifier:
  - enum Color
  typemap_name: Color
- _ast: Declaration
  declarator:
    name: flag
  init: RED
  specifier:
  - Color
  typemap_name: Color
- _ast: Declaration
  declarator:
    name: func1
  params:
  - _ast: Declaration
    declarator:
      name: arg1
    specifier:
    - enum Color
    typemap_name: Color
  - _ast: Declaration
    declarator:
      name: arg2
    specifier:
    - Color
    typemap_name: Color
  specifier:
  - void
  typemap_name: void
XXXX SymbolTable
cls: Global
symbols:
  Color:
    cls: Enum
    typemap: Color
  enum-Color:
    cls: Enum
    typemap: Color

XXXXXXXXXXXXXXXXXXXX
# template
XXXX CODE
template<T> class user {
  template<U> void nested(T arg1, U arg2 );
};
user<int> returnUserType(void);
XXXX PRINT_NODE
template<T>  class user{
template<U>  void nested(T arg1,U arg2);
}
;
user returnUserType();

XXXX AST
stmts:
- _ast: Template
  decl:
    _ast: Declaration
    class_specifier:
      _ast: CXXClass
      members:
      - _ast: Template
        decl:
          _ast: Declaration
          declarator:
            name: nested
          params:
          - _ast: Declaration
            declarator:
              name: arg1
            specifier:
            - T
            template_argument: T
          - _ast: Declaration
            declarator:
              name: arg2
            specifier:
            - U
            template_argument: U
          specifier:
          - void
          typemap_name: void
        parameters:
        - name: U
      name: user
    specifier:
    - class user
    typemap_name: user
  parameters:
  - name: T
- _ast: Declaration
  declarator:
    name: returnUserType
  params: []
  specifier:
  - user
  template_arguments:
  - _ast: Declaration
    specifier:
    - int
    typemap_name: int
  typemap_name: user
XXXX SymbolTable
cls: Global
symbols:
  user:
    cls: CXXClass
    typemap: user

XXXXXXXXXXXXXXXXXXXX
# nested namespace
# XXX - fix printing
XXXX CODE
namespace ns1 {
  int i;
  namespace ns2 {
    int j;
  }
}
XXXX PRINT_NODE
namespace ns1;

XXXX AST
stmts:
- _ast: Namespace
  name: ns1
  ~group:
  - _ast: Declaration
    declarator:
      name: i
    specifier:
    - int
    typemap_name: int
  - _ast: Namespace
    name: ns2
    ~group:
    - _ast: Declaration
      declarator:
        name: j
      specifier:
      - int
      typemap_name: int
XXXX SymbolTable
cls: Global
symbols:
  ns1:
    cls: Namespace
    symbols:
      ns2:
        cls: Namespace

XXXXXXXXXXXXXXXXXXXX
# class in namespace
XXXX CODE
namespace ns {
  class name {
     int imem;
  };
}
XXXX PRINT_NODE
namespace ns;

XXXX AST
stmts:
- _ast: Namespace
  name: ns
  ~group:
  - _ast: Declaration
    class_specifier:
      _ast: CXXClass
      members:
      - _ast: Declaration
        declarator:
          name: imem
        specifier:
        - int
        typemap_name: int
      name: name
    specifier:
    - class name
    typemap_name: ns::name
XXXX SymbolTable
cls: Global
symbols:
  ns:
    cls: Namespace
    symbols:
      name:
        cls: CXXClass
        typemap: ns::name
