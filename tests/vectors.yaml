copyright:
- '#######################################################################'
- 'Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.'
- 'Produced at the Lawrence Livermore National Laboratory'
-
- 'LLNL-CODE-738041.'
- 'All rights reserved.'
-
- 'This file is part of Shroud.  For details, see'
- 'https://github.com/LLNL/shroud. Please also read shroud/LICENSE.'
-
- 'Redistribution and use in source and binary forms, with or without'
- 'modification, are permitted provided that the following conditions are'
- 'met:'
-
- '* Redistributions of source code must retain the above copyright'
- '  notice, this list of conditions and the disclaimer below.'
- 
- '* Redistributions in binary form must reproduce the above copyright'
- '  notice, this list of conditions and the disclaimer (as noted below)'
- '  in the documentation and/or other materials provided with the'
- '  distribution.'
-
- '* Neither the name of the LLNS/LLNL nor the names of its contributors'
- '  may be used to endorse or promote products derived from this'
- '  software without specific prior written permission.'
-
- 'THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS'
- '"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
- 'LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR'
- 'A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE'
- 'LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR'
- 'CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,'
- 'EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,'
- 'PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR'
- 'PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF'
- 'LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING'
- 'NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS'
- 'SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
-
- '#######################################################################'

# test std::vector

library: vectors
cxx_header: vectors.hpp

options:
  debug: True

declarations:

# const implies intent(in)
- decl: int vector_sum(const std::vector<int> &arg)
  options:
    wrap_python: False
    wrap_lua: False

- decl: void vector_iota(std::vector<int> &arg+intent(out))
  doxygen:
    brief: Copy vector into Fortran input array
  options:
    wrap_python: False
    wrap_lua: False

- decl: void vector_iota_alloc(std::vector<int> &arg+intent(out)+deref(allocatable))
  doxygen:
    brief: Copy vector into Fortran allocatable array
  options:
    wrap_c: False
    wrap_fortran: False
    wrap_python: False
    wrap_lua: False

# defaults to intent(inout)
- decl: void vector_increment(std::vector<int> &arg)
  options:
    wrap_python: False
    wrap_lua: False
  
# does multidimensional make sense?  Need to call shape
#- decl: void vector1XXX(std::vector<int> &arg+dimension(:,:))
  
- decl: int vector_string_count(const std::vector< std::string > &arg)
  doxygen:
    brief: count number of underscore in vector of strings
    decription: |
      The input will be copied in order to create the C++ argument
 
- decl: void vector_string_fill(std::vector< std::string > &arg+intent(out))
  options:
    wrap_c: False
    wrap_fortran: False
    wrap_python: False
    wrap_lua: False
  format:
    C_return_type: int
    C_return_code: return SH_arg.size();
  doxygen:
    brief: Fill in arg with some animal names
    description: |
      The C++ function returns void. But the C and Fortran wrappers return
      an int with the number of items added to arg.

- decl: void vector_string_append(std::vector< std::string > &arg+intent(inout))
  options:
    wrap_c: False
    wrap_fortran: False
    wrap_python: False
    wrap_lua: False
  doxygen:
    brief: append '-like' to names.
