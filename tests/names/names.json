{
    "library": {
        "classes": [
            {
                "cxx_header": "", 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "foo.h", 
                    "C_impl_filename": "foo.cpp", 
                    "C_type_name": "TES_names", 
                    "F_derived_name": "FNames", 
                    "F_impl_filename": "foo.f", 
                    "F_module_name": "name_module", 
                    "PY_PyObject": "PY_Names", 
                    "PY_PyTypeObject": "PY_Names_Type", 
                    "PY_capsule_name": "PY_Names_capsule_name", 
                    "PY_from_object_func": "PP_Names_from_Object", 
                    "PY_to_object_func": "PP_Names_to_Object", 
                    "PY_type_filename": "pyNamestype.cpp", 
                    "class_lower": "names", 
                    "class_prefix": "names_", 
                    "class_upper": "NAMES", 
                    "cxx_class": "Names"
                }, 
                "methods": [
                    {
                        "_ast": {
                            "args": [], 
                            "attrs": {}, 
                            "const": false, 
                            "declarator": {
                                "name": "method1", 
                                "pointer": []
                            }, 
                            "fattrs": {}, 
                            "func_const": false, 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "_decl": "void method1()", 
                        "_function_index": 0, 
                        "_subprogram": "subroutine", 
                        "decl": "void method1()", 
                        "format": {
                            "C_call_code": "SH_this->method1();", 
                            "C_call_list": "", 
                            "C_name": "XXX_TES_names_method1", 
                            "C_pre_call": "Names *SH_this = static_cast<Names *>(static_cast<void *>(self));", 
                            "C_prototype": "TES_names * self", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "F_C_call": "xxx_tes_names_method1", 
                            "F_C_name": "xxx_tes_names_method1", 
                            "F_arg_c_call": "obj%voidptr", 
                            "F_arg_c_call_tab": "\tobj%voidptr", 
                            "F_arguments": "obj", 
                            "F_call_code": "call xxx_tes_names_method1(\tobj%voidptr)", 
                            "F_name_function": "type_method1", 
                            "F_name_generic": "method1", 
                            "F_name_impl": "names_method1", 
                            "F_subprogram": "subroutine", 
                            "PY_name_impl": "PY_names_method1", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self", 
                            "function_name": "method1", 
                            "underscore_name": "method1"
                        }, 
                        "options": {}
                    }, 
                    {
                        "_ast": {
                            "args": [], 
                            "attrs": {}, 
                            "const": false, 
                            "declarator": {
                                "name": "method2", 
                                "pointer": []
                            }, 
                            "fattrs": {}, 
                            "func_const": false, 
                            "specifier": [
                                "void"
                            ]
                        }, 
                        "_decl": "void method2()", 
                        "_function_index": 1, 
                        "_subprogram": "subroutine", 
                        "decl": "void method2()", 
                        "format": {
                            "CXX_this": "SH_this2", 
                            "C_call_code": "SH_this->method2();", 
                            "C_call_list": "", 
                            "C_name": "XXX_TES_names_method2", 
                            "C_pre_call": "Names *SH_this2 = static_cast<Names *>(static_cast<void *>(self2));", 
                            "C_prototype": "TES_names * self2", 
                            "C_return_code": "return;", 
                            "C_return_type": "void", 
                            "C_this": "self2", 
                            "F_C_call": "xxx_tes_names_method2", 
                            "F_C_name": "xxx_tes_names_method2", 
                            "F_arg_c_call": "obj2%voidptr", 
                            "F_arg_c_call_tab": "\tobj2%voidptr", 
                            "F_arguments": "obj2", 
                            "F_call_code": "call xxx_tes_names_method2(\tobj2%voidptr)", 
                            "F_name_function": "method2", 
                            "F_name_generic": "method2", 
                            "F_name_impl": "names_method2", 
                            "F_subprogram": "subroutine", 
                            "F_this": "obj2", 
                            "PY_name_impl": "PY_names_method2", 
                            "c_const": "", 
                            "c_ptr": " *", 
                            "c_var": "self2", 
                            "function_name": "method2", 
                            "underscore_name": "method2"
                        }, 
                        "options": {}
                    }
                ], 
                "name": "Names", 
                "options": {
                    "C_name_template": "XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
                    "F_C_name_template": "XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
                    "none": "foo"
                }
            }, 
            {
                "cxx_header": "", 
                "format": {
                    "CXX_this_call": "SH_this->", 
                    "C_header_filename": "wrapNames2.hh", 
                    "C_impl_filename": "wrapNames2.cc", 
                    "C_type_name": "TES_names2", 
                    "F_derived_name": "names2", 
                    "F_impl_filename": "wrapfNames2.F", 
                    "F_module_name": "names2_mod", 
                    "PY_PyObject": "PY_Names2", 
                    "PY_PyTypeObject": "PY_Names2_Type", 
                    "PY_capsule_name": "PY_Names2_capsule_name", 
                    "PY_from_object_func": "PP_Names2_from_Object", 
                    "PY_to_object_func": "PP_Names2_to_Object", 
                    "PY_type_filename": "pyNames2type.cpp", 
                    "class_lower": "names2", 
                    "class_prefix": "names2_", 
                    "class_upper": "NAMES2", 
                    "cxx_class": "Names2"
                }, 
                "methods": [], 
                "name": "Names2", 
                "options": {}
            }
        ], 
        "copyright": [
            "#######################################################################", 
            "Copyright (c) 2017, Lawrence Livermore National Security, LLC.", 
            "Produced at the Lawrence Livermore National Laboratory", 
            null, 
            "LLNL-CODE-738041.", 
            "All rights reserved.", 
            null, 
            "This file is part of Shroud.  For details, see", 
            "https://github.com/LLNL/shroud. Please also read shroud/LICENSE.", 
            null, 
            "Redistribution and use in source and binary forms, with or without", 
            "modification, are permitted provided that the following conditions are", 
            "met:", 
            null, 
            "* Redistributions of source code must retain the above copyright", 
            "  notice, this list of conditions and the disclaimer below.", 
            null, 
            "* Redistributions in binary form must reproduce the above copyright", 
            "  notice, this list of conditions and the disclaimer (as noted below)", 
            "  in the documentation and/or other materials provided with the", 
            "  distribution.", 
            null, 
            "* Neither the name of the LLNS/LLNL nor the names of its contributors", 
            "  may be used to endorse or promote products derived from this", 
            "  software without specific prior written permission.", 
            null, 
            "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS", 
            "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT", 
            "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR", 
            "A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL LAWRENCE", 
            "LIVERMORE NATIONAL SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR", 
            "CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,", 
            "EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,", 
            "PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR", 
            "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF", 
            "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING", 
            "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS", 
            "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            null, 
            "#######################################################################"
        ], 
        "format": {
            "BBB": "BBB", 
            "CXX_template": "", 
            "CXX_this": "SH_this", 
            "CXX_this_call": "", 
            "C_bufferify_suffix": "_bufferify", 
            "C_header_filename": "top.h", 
            "C_header_filename_suffix": "hh", 
            "C_impl_filename": "top.cpp", 
            "C_impl_filename_suffix": "cc", 
            "C_post_call": "", 
            "C_pre_call": "", 
            "C_prefix": "TES_", 
            "C_result": "SHT_rv", 
            "C_string_result_as_arg": "SHF_rv", 
            "C_this": "self", 
            "F_C_prefix": "c_", 
            "F_C_pure_clause": "", 
            "F_C_result_clause": "", 
            "F_derived_member": "voidptr", 
            "F_filename_suffix": "F", 
            "F_impl_filename": "top.f", 
            "F_module_name": "top_module", 
            "F_name_associated": "associated", 
            "F_name_instance_get": "get_instance", 
            "F_name_instance_set": "set_instance", 
            "F_pure_clause": "", 
            "F_result": "SHT_rv", 
            "F_result_clause": "", 
            "F_string_result_as_arg": "", 
            "F_this": "obj", 
            "LUA_header_filename_suffix": "hpp", 
            "LUA_impl_filename_suffix": "cpp", 
            "LUA_module_name": "lua_module_name", 
            "LUA_result": "rv", 
            "PY_PyObject": "PyObject", 
            "PY_header_filename": "pytestnamesmodule.hpp", 
            "PY_header_filename_suffix": "hpp", 
            "PY_helper_filename": "pytestnameshelper.cpp", 
            "PY_impl_filename_suffix": "cpp", 
            "PY_library_doc": "library documentation", 
            "PY_module_filename": "pytestnamesmodule.cpp", 
            "PY_module_name": "testnames", 
            "PY_param_args": "args", 
            "PY_param_kwds": "kwds", 
            "PY_param_self": "self", 
            "PY_prefix": "PY_", 
            "PY_result": "rv", 
            "PY_used_param_args": false, 
            "PY_used_param_kwds": false, 
            "PY_used_param_self": false, 
            "YAML_type_filename": "testnames_types.yaml", 
            "c_temp": "SHT_", 
            "class_prefix": "", 
            "function_suffix": "", 
            "library": "testnames", 
            "library_lower": "testnames", 
            "library_upper": "TESTNAMES", 
            "namespace_scope": "", 
            "stdlib": "std::"
        }, 
        "functions": [
            {
                "_ast": {
                    "args": [], 
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "function1", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "specifier": [
                        "void"
                    ]
                }, 
                "_decl": "void function1()", 
                "_function_index": 2, 
                "_subprogram": "subroutine", 
                "decl": "void function1()", 
                "format": {
                    "C_call_code": "function1();", 
                    "C_call_list": "", 
                    "C_name": "YYY_TES_function1", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "yyy_tes_function1", 
                    "F_C_name": "yyy_tes_function1", 
                    "F_arg_c_call": "", 
                    "F_arg_c_call_tab": "\t", 
                    "F_arguments": "", 
                    "F_call_code": "call yyy_tes_function1(\t)", 
                    "F_name_function": "function1", 
                    "F_name_generic": "function1", 
                    "F_name_impl": "testnames_function1", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_function1", 
                    "c_const": "", 
                    "function_name": "function1", 
                    "underscore_name": "function1"
                }, 
                "options": {}
            }, 
            {
                "_ast": {
                    "args": [], 
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "function2", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "specifier": [
                        "void"
                    ]
                }, 
                "_decl": "void function2()", 
                "_function_index": 3, 
                "_subprogram": "subroutine", 
                "decl": "void function2()", 
                "format": {
                    "C_call_code": "function2();", 
                    "C_call_list": "", 
                    "C_name": "c_name_special", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "f_c_name_special", 
                    "F_C_name": "f_c_name_special", 
                    "F_arg_c_call": "", 
                    "F_arg_c_call_tab": "\t", 
                    "F_arguments": "", 
                    "F_call_code": "call f_c_name_special(\t)", 
                    "F_name_function": "function2", 
                    "F_name_generic": "function2", 
                    "F_name_impl": "f_name_special", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_function2", 
                    "c_const": "", 
                    "function_name": "function2", 
                    "underscore_name": "function2"
                }, 
                "options": {}
            }, 
            {
                "_ast": {
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "i", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "int"
                            ]
                        }
                    ], 
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "function3a", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "specifier": [
                        "void"
                    ]
                }, 
                "_cxx_overload": [
                    4, 
                    5
                ], 
                "_decl": "void function3a(int i +intent(in)+value)", 
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "i", 
                            "cxx_type": "int", 
                            "cxx_var": "i"
                        }, 
                        "fmtf": {
                            "c_var": "i", 
                            "f_var": "i"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "i", 
                            "cxx_type": "int", 
                            "cxx_var": "i", 
                            "py_var": "SH_Py_i"
                        }
                    }
                }, 
                "_function_index": 4, 
                "_overloaded": true, 
                "_subprogram": "subroutine", 
                "decl": "void function3a(int i)", 
                "format": {
                    "C_call_code": "function3a(i);", 
                    "C_call_list": "i", 
                    "C_name": "YYY_TES_function3a_0", 
                    "C_prototype": "int i", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "yyy_tes_function3a_0", 
                    "F_C_name": "yyy_tes_function3a_0", 
                    "F_arg_c_call": "i", 
                    "F_arg_c_call_tab": "\ti", 
                    "F_arguments": "i", 
                    "F_call_code": "call yyy_tes_function3a_0(\ti)", 
                    "F_name_function": "function3a_0", 
                    "F_name_generic": "generic3", 
                    "F_name_impl": "F_name_function3a_int", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_function3a_0", 
                    "c_const": "", 
                    "function_name": "function3a", 
                    "function_suffix": "_0", 
                    "underscore_name": "function3a"
                }, 
                "options": {}
            }, 
            {
                "_ast": {
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "const": false, 
                            "declarator": {
                                "name": "i", 
                                "pointer": []
                            }, 
                            "specifier": [
                                "long"
                            ]
                        }
                    ], 
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "function3a", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "specifier": [
                        "void"
                    ]
                }, 
                "_cxx_overload": [
                    4, 
                    5
                ], 
                "_decl": "void function3a(long i +intent(in)+value)", 
                "_fmtargs": {
                    "i": {
                        "fmtc": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "i", 
                            "cxx_type": "long", 
                            "cxx_var": "i"
                        }, 
                        "fmtf": {
                            "c_var": "i", 
                            "f_var": "i"
                        }, 
                        "fmtpy": {
                            "c_const": "", 
                            "c_ptr": "", 
                            "c_var": "i", 
                            "cxx_type": "long", 
                            "cxx_var": "i", 
                            "py_var": "SH_Py_i"
                        }
                    }
                }, 
                "_function_index": 5, 
                "_overloaded": true, 
                "_subprogram": "subroutine", 
                "decl": "void function3a(long i)", 
                "format": {
                    "C_call_code": "function3a(i);", 
                    "C_call_list": "i", 
                    "C_name": "YYY_TES_function3a_1", 
                    "C_prototype": "long i", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "yyy_tes_function3a_1", 
                    "F_C_name": "yyy_tes_function3a_1", 
                    "F_arg_c_call": "i", 
                    "F_arg_c_call_tab": "\ti", 
                    "F_arguments": "i", 
                    "F_call_code": "call yyy_tes_function3a_1(\ti)", 
                    "F_name_function": "function3a_1", 
                    "F_name_generic": "generic3", 
                    "F_name_impl": "F_name_function3a_long", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_function3a_1", 
                    "c_const": "", 
                    "function_name": "function3a", 
                    "function_suffix": "_1", 
                    "underscore_name": "function3a"
                }, 
                "options": {}
            }, 
            {
                "_PTR_F_C_index": 8, 
                "_ast": {
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "function4", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "specifier": [
                        "int"
                    ]
                }, 
                "_decl": "int function4(const std::string & rv +intent(in))", 
                "_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "rv", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_rv"
                        }, 
                        "fmtpy": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "rv", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_rv", 
                            "py_var": "SH_Py_rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "cxx_rv_decl": "int SHT_rv", 
                        "cxx_var": "SHT_rv"
                    }
                }, 
                "_function_index": 6, 
                "_subprogram": "function", 
                "decl": "int function4(const std::string &rv)", 
                "format": {
                    "C_call_code": "int SHT_rv = function4(SH_rv);", 
                    "C_call_list": "SH_rv", 
                    "C_name": "YYY_TES_function4", 
                    "C_pre_call": "const std::string SH_rv(rv);", 
                    "C_prototype": "const char * rv", 
                    "C_return_code": "return SHT_rv;", 
                    "C_return_type": "int", 
                    "F_C_call": "yyy_tes_function4_bufferify", 
                    "F_C_name": "yyy_tes_function4", 
                    "F_arg_c_call": "rv, len_trim(rv, kind=C_INT)", 
                    "F_arg_c_call_tab": "\trv\tlen_trim(rv, kind=C_INT)", 
                    "F_arguments": "rv", 
                    "F_call_code": "SHT_rv = yyy_tes_function4_bufferify(\trv\tlen_trim(rv, kind=C_INT))", 
                    "F_name_function": "function4", 
                    "F_name_generic": "function4", 
                    "F_name_impl": "testnames_function4", 
                    "F_result_clause": " result(SHT_rv)", 
                    "F_subprogram": "function", 
                    "PY_name_impl": "PY_function4", 
                    "c_const": "", 
                    "function_name": "function4", 
                    "underscore_name": "function4"
                }, 
                "options": {}
            }, 
            {
                "_PTR_C_CXX_index": 6, 
                "_ast": {
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "len_trim": "Lrv", 
                                "value": false
                            }, 
                            "const": true, 
                            "declarator": {
                                "name": "rv", 
                                "pointer": [
                                    {
                                        "const": false, 
                                        "ptr": "&"
                                    }
                                ]
                            }, 
                            "specifier": [
                                "std::string"
                            ]
                        }
                    ], 
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "function4", 
                        "pointer": []
                    }, 
                    "fattrs": {}, 
                    "func_const": false, 
                    "specifier": [
                        "int"
                    ]
                }, 
                "_decl": "int function4(const std::string & rv +intent(in)+len_trim(Lrv))", 
                "_error_pattern_suffix": "_as_buffer", 
                "_fmtargs": {
                    "rv": {
                        "fmtc": {
                            "c_const": "const ", 
                            "c_ptr": "", 
                            "c_var": "rv", 
                            "c_var_trim": "Lrv", 
                            "cxx_type": "std::string", 
                            "cxx_var": "SH_rv"
                        }, 
                        "fmtf": {
                            "c_var": "rv", 
                            "f_var": "rv"
                        }
                    }
                }, 
                "_fmtresult": {
                    "fmtc": {
                        "cxx_rv_decl": "int SHT_rv", 
                        "cxx_var": "SHT_rv"
                    }
                }, 
                "_function_index": 8, 
                "_generated": "arg_to_buffer", 
                "_subprogram": "function", 
                "decl": "int function4(const std::string &rv)", 
                "format": {
                    "C_call_code": "int SHT_rv = function4(SH_rv);", 
                    "C_call_list": "SH_rv", 
                    "C_name": "YYY_TES_function4_bufferify", 
                    "C_pre_call": "const std::string SH_rv(rv, Lrv);", 
                    "C_prototype": "const char * rv, int Lrv", 
                    "C_return_code": "return SHT_rv;", 
                    "C_return_type": "int", 
                    "F_C_name": "yyy_tes_function4_bufferify", 
                    "c_const": "", 
                    "function_suffix": "_bufferify"
                }, 
                "options": {
                    "wrap_c": true, 
                    "wrap_fortran": false, 
                    "wrap_lua": false, 
                    "wrap_python": false
                }
            }, 
            {
                "_ast": {
                    "args": [], 
                    "attrs": {}, 
                    "const": false, 
                    "declarator": {
                        "name": "function5", 
                        "pointer": []
                    }, 
                    "fattrs": {
                        "name": "fiveplus"
                    }, 
                    "func_const": false, 
                    "specifier": [
                        "void"
                    ]
                }, 
                "_decl": "void function5() +name(fiveplus)", 
                "_function_index": 7, 
                "_subprogram": "subroutine", 
                "decl": "void function5() +name(fiveplus)", 
                "format": {
                    "C_call_code": "fiveplus();", 
                    "C_call_list": "", 
                    "C_name": "YYY_TES_fiveplus", 
                    "C_prototype": "", 
                    "C_return_code": "return;", 
                    "C_return_type": "void", 
                    "F_C_call": "yyy_tes_fiveplus", 
                    "F_C_name": "yyy_tes_fiveplus", 
                    "F_arg_c_call": "", 
                    "F_arg_c_call_tab": "\t", 
                    "F_arguments": "", 
                    "F_call_code": "call yyy_tes_fiveplus(\t)", 
                    "F_name_function": "fiveplus", 
                    "F_name_generic": "fiveplus", 
                    "F_name_impl": "testnames_fiveplus", 
                    "F_subprogram": "subroutine", 
                    "PY_name_impl": "PY_fiveplus", 
                    "c_const": "", 
                    "function_name": "fiveplus", 
                    "underscore_name": "fiveplus"
                }, 
                "options": {}
            }
        ], 
        "language": "c++", 
        "options": {
            "C_header_filename_class_template": "wrap{cxx_class}.{C_header_filename_suffix}", 
            "C_header_filename_library_template": "wrap{library}.{C_header_filename_suffix}", 
            "C_impl_filename_class_template": "wrap{cxx_class}.{C_impl_filename_suffix}", 
            "C_impl_filename_library_template": "wrap{library}.{C_impl_filename_suffix}", 
            "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "C_var_len_template": "N{c_var}", 
            "C_var_size_template": "S{c_var}", 
            "C_var_trim_template": "L{c_var}", 
            "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "F_force_wrapper": true, 
            "F_impl_filename_class_template": "wrapf{cxx_class}.{F_filename_suffix}", 
            "F_impl_filename_library_template": "wrapf{library_lower}.{F_filename_suffix}", 
            "F_module_name_class_template": "{class_lower}_mod", 
            "F_module_name_library_template": "{library_lower}_mod", 
            "F_module_per_class": true, 
            "F_name_function_template": "{underscore_name}{function_suffix}", 
            "F_name_generic_template": "{underscore_name}", 
            "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
            "F_string_len_trim": true, 
            "LUA_class_reg_template": "{LUA_prefix}{cxx_class}_Reg", 
            "LUA_ctor_name_template": "{cxx_class}", 
            "LUA_header_filename_template": "lua{library}module.{LUA_header_filename_suffix}", 
            "LUA_metadata_template": "{cxx_class}.metatable", 
            "LUA_module_filename_template": "lua{library}module.{LUA_impl_filename_suffix}", 
            "LUA_module_name_template": "{library_lower}", 
            "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
            "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
            "LUA_name_template": "{function_name}", 
            "LUA_userdata_member_template": "self", 
            "LUA_userdata_type_template": "{LUA_prefix}{cxx_class}_Type", 
            "PY_PyObject_template": "{PY_prefix}{cxx_class}", 
            "PY_PyTypeObject_template": "{PY_prefix}{cxx_class}_Type", 
            "PY_header_filename_template": "py{library}module.{PY_header_filename_suffix}", 
            "PY_helper_filename_template": "py{library}helper.{PY_impl_filename_suffix}", 
            "PY_module_filename_template": "py{library}module.{PY_impl_filename_suffix}", 
            "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
            "PY_type_filename_template": "py{cxx_class}type.{PY_impl_filename_suffix}", 
            "YAML_type_filename_template": "{library_lower}_types.yaml", 
            "class_prefix_template": "{class_lower}_", 
            "debug": true, 
            "doxygen": true, 
            "show_splicer_comments": true, 
            "wrap_c": true, 
            "wrap_fortran": true, 
            "wrap_lua": false, 
            "wrap_python": true
        }
    }, 
    "typealias": {
        "integer(C_INT)": "int", 
        "integer(C_LONG)": "long", 
        "integer(C_LONG_LONG)": "long_long", 
        "real(C_DOUBLE)": "double", 
        "real(C_FLOAT)": "float", 
        "std::string": "string", 
        "std::vector": "vector"
    }, 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cpp": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cxx_to_c": "MPI_Comm_c2f({cxx_var})", 
            "cxx_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "Names": {
            "LUA_pop": "({LUA_userdata_type} *)luaL_checkudata({LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PY_Names", 
            "PY_PyTypeObject": "PY_Names_Type", 
            "PY_from_object": "PP_Names_from_Object", 
            "PY_to_object": "PP_Names_to_Object", 
            "base": "wrapped", 
            "c_to_cpp": "static_cast<{c_const}Names{c_ptr}>(static_cast<{c_const}void *>({c_var}))", 
            "c_type": "TES_names", 
            "cxx_to_c": "static_cast<{c_const}TES_names *>(static_cast<{c_const}void *>({cxx_var}))", 
            "cxx_type": "Names", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "FNames", 
            "f_module": {
                "name_module": [
                    "names"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call_tab})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(FNames)", 
            "forward": "Names", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cxx_var} = {py_var} ? {py_var}->{BBB} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{BBB} = {cxx_var};"
                    ]
                }
            }
        }, 
        "Names2": {
            "LUA_pop": "({LUA_userdata_type} *)luaL_checkudata({LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PY_Names2", 
            "PY_PyTypeObject": "PY_Names2_Type", 
            "PY_from_object": "PP_Names2_from_Object", 
            "PY_to_object": "PP_Names2_to_Object", 
            "base": "wrapped", 
            "c_to_cpp": "static_cast<{c_const}Names2{c_ptr}>(static_cast<{c_const}void *>({c_var}))", 
            "c_type": "TES_names2", 
            "cxx_to_c": "static_cast<{c_const}TES_names2 *>(static_cast<{c_const}void *>({cxx_var}))", 
            "cxx_type": "Names2", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "names2", 
            "f_module": {
                "names2_mod": [
                    "names2"
                ]
            }, 
            "f_statements": {
                "result": {
                    "call": [
                        "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call_tab})"
                    ], 
                    "need_wrapper": true
                }
            }, 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(names2)", 
            "forward": "Names2", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cxx_var} = {py_var} ? {py_var}->{BBB} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{BBB} = {cxx_var};"
                    ]
                }
            }
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({c_var})", 
            "c_type": "bool", 
            "cxx_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_inout": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ], 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cxx_var} = PyObject_IsTrue({py_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": true, 
                    "post_call": [
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_trim} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_header": "<stdlib.h> <string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h> <cstring>", 
                    "cxx_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_val});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);", 
                        "{stdlib}memcpy({cxx_var}, {c_var}, {c_var_trim});", 
                        "{cxx_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<stdlib.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<stdlib.h>", 
                    "cxx_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_val});", 
                        "free({cxx_var});"
                    ], 
                    "pre_call": [
                        "char * {cxx_var} = (char *) malloc({c_var_len} + 1);"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var} == NULL) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cxx_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "c_statements": {
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_header": "<string.h>", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "{stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cxx_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cxx_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cxx_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cxx_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cxx_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long_long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "L", 
            "c_type": "long long", 
            "cxx_type": "long long", 
            "f_cast": "int({f_var}, C_LONG_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG_LONG)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cxx_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cxx_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "buf_args": [
                        "len_trim"
                    ], 
                    "cxx_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_inout": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cxx_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "len_trim", 
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_val});"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cxx_header": "<cstring>", 
                    "cxx_local_var": true, 
                    "post_call": [
                        "strcpy({c_var}, {cxx_val});"
                    ], 
                    "pre_call": [
                        "{c_const}std::string {cxx_var};"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_local_var": true, 
                    "post_call": [
                        "ShroudStrCopy({c_var}, {c_var_len}, {cxx_val});"
                    ], 
                    "pre_call": [
                        "std::string {cxx_var};"
                    ]
                }, 
                "result_buf": {
                    "buf_args": [
                        "len"
                    ], 
                    "c_helper": "ShroudStrCopy", 
                    "cxx_header": "<cstring>", 
                    "post_call": [
                        "if ({cxx_var}.empty()) {{", 
                        "  {stdlib}memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  ShroudStrCopy({c_var}, {c_var_len}, {cxx_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cxx_header": "<string>", 
            "cxx_to_c": "{cxx_var}.c_str()", 
            "cxx_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_statements": {
                "result_pure": {
                    "call": [
                        "{F_result} = fstr_ptr({F_C_call}({F_arg_c_call_tab}))"
                    ], 
                    "f_helper": "fstr_ptr", 
                    "need_wrapper": true
                }
            }, 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cxx_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cxx_var}({c_var});"
                    ]
                }
            }
        }, 
        "vector": {
            "base": "vector", 
            "c_statements": {
                "intent_in_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": true, 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_inout_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cxx_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "      {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "std::vector<{cxx_T}> {cxx_var}({c_var}, {c_var} + {c_var_size});"
                    ]
                }, 
                "intent_out_buf": {
                    "buf_args": [
                        "size"
                    ], 
                    "cxx_local_var": true, 
                    "post_call": [
                        "{{", 
                        "  std::vector<{cxx_T}>::size_type", 
                        "    {c_temp}i = 0,", 
                        "    {c_temp}n = {c_var_size};", 
                        "  {c_temp}n = std::min({cxx_var}.size(), {c_temp}n);", 
                        "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                        "    {c_var}[{c_temp}i] = {cxx_var}[{c_temp}i];", 
                        "  }}", 
                        "}}"
                    ], 
                    "pre_call": [
                        "{c_const}std::vector<{cxx_T}> {cxx_var}({c_var_size});"
                    ]
                }
            }, 
            "c_templates": {
                "string": {
                    "intent_in_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": true, 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cxx_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_inout_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "cxx_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cxx_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "std::vector<{cxx_T}> {cxx_var};", 
                            "{{", 
                            "  {c_const}char * BBB = {c_var};", 
                            "  std::vector<{cxx_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    {cxx_var}.push_back(std::string(BBB,ShroudLenTrim(BBB, {c_var_len})));", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ]
                    }, 
                    "intent_out_buf": {
                        "buf_args": [
                            "size", 
                            "len"
                        ], 
                        "c_helper": "ShroudLenTrim", 
                        "cxx_local_var": true, 
                        "post_call": [
                            "{{", 
                            "  char * BBB = {c_var};", 
                            "  std::vector<{cxx_T}>::size_type", 
                            "    {c_temp}i = 0,", 
                            "    {c_temp}n = {c_var_size};", 
                            "  {c_temp}n = std::min({cxx_var}.size(),{c_temp}n);", 
                            "  for(; {c_temp}i < {c_temp}n; {c_temp}i++) {{", 
                            "    ShroudStrCopy(BBB, {c_var_len}, {cxx_var}[{c_temp}i].c_str());", 
                            "    BBB += {c_var_len};", 
                            "  }}", 
                            "}}"
                        ], 
                        "pre_call": [
                            "{c_const}std::vector<{cxx_T}> {cxx_var};"
                        ]
                    }
                }
            }, 
            "cxx_header": "<vector>", 
            "cxx_type": "std::vector<{cxx_T}>"
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cxx_var}, NULL, NULL)", 
            "c_type": "void", 
            "cxx_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}